
BNO086_BNO055_UROS_UART_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c92c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f08  0801cbd0  0801cbd0  0001dbd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801dad8  0801dad8  0001f3c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801dad8  0801dad8  0001ead8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801dae0  0801dae0  0001f3c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0801dae0  0801dae0  0001eae0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801dae8  0801dae8  0001eae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000300  24000000  0801daec  0001f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000300  0801ddec  0001f300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000360  0801de4c  0001f360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00012dd8  240003c0  0801deac  0001f3c0  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24013198  0801deac  00020198  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0001f3c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002bcdf  00000000  00000000  0001f3ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000058ad  00000000  00000000  0004b0cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001e58  00000000  00000000  00050980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001756  00000000  00000000  000527d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000432f8  00000000  00000000  00053f2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002bd69  00000000  00000000  00097226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a36e1  00000000  00000000  000c2f8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000076  00000000  00000000  00266670  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008bfc  00000000  00000000  002666e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000008f  00000000  00000000  0026f2e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240003c0 	.word	0x240003c0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801cbb4 	.word	0x0801cbb4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240003c4 	.word	0x240003c4
 80002dc:	0801cbb4 	.word	0x0801cbb4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_ldivmod>:
 80003b0:	b97b      	cbnz	r3, 80003d2 <__aeabi_ldivmod+0x22>
 80003b2:	b972      	cbnz	r2, 80003d2 <__aeabi_ldivmod+0x22>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bfbe      	ittt	lt
 80003b8:	2000      	movlt	r0, #0
 80003ba:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 80003be:	e006      	blt.n	80003ce <__aeabi_ldivmod+0x1e>
 80003c0:	bf08      	it	eq
 80003c2:	2800      	cmpeq	r0, #0
 80003c4:	bf1c      	itt	ne
 80003c6:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 80003ca:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003ce:	f000 b9b5 	b.w	800073c <__aeabi_idiv0>
 80003d2:	f1ad 0c08 	sub.w	ip, sp, #8
 80003d6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003da:	2900      	cmp	r1, #0
 80003dc:	db09      	blt.n	80003f2 <__aeabi_ldivmod+0x42>
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db1a      	blt.n	8000418 <__aeabi_ldivmod+0x68>
 80003e2:	f000 f84d 	bl	8000480 <__udivmoddi4>
 80003e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ee:	b004      	add	sp, #16
 80003f0:	4770      	bx	lr
 80003f2:	4240      	negs	r0, r0
 80003f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db1b      	blt.n	8000434 <__aeabi_ldivmod+0x84>
 80003fc:	f000 f840 	bl	8000480 <__udivmoddi4>
 8000400:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000404:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000408:	b004      	add	sp, #16
 800040a:	4240      	negs	r0, r0
 800040c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000410:	4252      	negs	r2, r2
 8000412:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000416:	4770      	bx	lr
 8000418:	4252      	negs	r2, r2
 800041a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800041e:	f000 f82f 	bl	8000480 <__udivmoddi4>
 8000422:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800042a:	b004      	add	sp, #16
 800042c:	4240      	negs	r0, r0
 800042e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000432:	4770      	bx	lr
 8000434:	4252      	negs	r2, r2
 8000436:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800043a:	f000 f821 	bl	8000480 <__udivmoddi4>
 800043e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000442:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000446:	b004      	add	sp, #16
 8000448:	4252      	negs	r2, r2
 800044a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800044e:	4770      	bx	lr

08000450 <__aeabi_uldivmod>:
 8000450:	b953      	cbnz	r3, 8000468 <__aeabi_uldivmod+0x18>
 8000452:	b94a      	cbnz	r2, 8000468 <__aeabi_uldivmod+0x18>
 8000454:	2900      	cmp	r1, #0
 8000456:	bf08      	it	eq
 8000458:	2800      	cmpeq	r0, #0
 800045a:	bf1c      	itt	ne
 800045c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000460:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000464:	f000 b96a 	b.w	800073c <__aeabi_idiv0>
 8000468:	f1ad 0c08 	sub.w	ip, sp, #8
 800046c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000470:	f000 f806 	bl	8000480 <__udivmoddi4>
 8000474:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800047c:	b004      	add	sp, #16
 800047e:	4770      	bx	lr

08000480 <__udivmoddi4>:
 8000480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000484:	9d08      	ldr	r5, [sp, #32]
 8000486:	460c      	mov	r4, r1
 8000488:	2b00      	cmp	r3, #0
 800048a:	d14e      	bne.n	800052a <__udivmoddi4+0xaa>
 800048c:	4694      	mov	ip, r2
 800048e:	458c      	cmp	ip, r1
 8000490:	4686      	mov	lr, r0
 8000492:	fab2 f282 	clz	r2, r2
 8000496:	d962      	bls.n	800055e <__udivmoddi4+0xde>
 8000498:	b14a      	cbz	r2, 80004ae <__udivmoddi4+0x2e>
 800049a:	f1c2 0320 	rsb	r3, r2, #32
 800049e:	4091      	lsls	r1, r2
 80004a0:	fa20 f303 	lsr.w	r3, r0, r3
 80004a4:	fa0c fc02 	lsl.w	ip, ip, r2
 80004a8:	4319      	orrs	r1, r3
 80004aa:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b2:	fa1f f68c 	uxth.w	r6, ip
 80004b6:	fbb1 f4f7 	udiv	r4, r1, r7
 80004ba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004be:	fb07 1114 	mls	r1, r7, r4, r1
 80004c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004c6:	fb04 f106 	mul.w	r1, r4, r6
 80004ca:	4299      	cmp	r1, r3
 80004cc:	d90a      	bls.n	80004e4 <__udivmoddi4+0x64>
 80004ce:	eb1c 0303 	adds.w	r3, ip, r3
 80004d2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80004d6:	f080 8112 	bcs.w	80006fe <__udivmoddi4+0x27e>
 80004da:	4299      	cmp	r1, r3
 80004dc:	f240 810f 	bls.w	80006fe <__udivmoddi4+0x27e>
 80004e0:	3c02      	subs	r4, #2
 80004e2:	4463      	add	r3, ip
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	fa1f f38e 	uxth.w	r3, lr
 80004ea:	fbb1 f0f7 	udiv	r0, r1, r7
 80004ee:	fb07 1110 	mls	r1, r7, r0, r1
 80004f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f6:	fb00 f606 	mul.w	r6, r0, r6
 80004fa:	429e      	cmp	r6, r3
 80004fc:	d90a      	bls.n	8000514 <__udivmoddi4+0x94>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000506:	f080 80fc 	bcs.w	8000702 <__udivmoddi4+0x282>
 800050a:	429e      	cmp	r6, r3
 800050c:	f240 80f9 	bls.w	8000702 <__udivmoddi4+0x282>
 8000510:	4463      	add	r3, ip
 8000512:	3802      	subs	r0, #2
 8000514:	1b9b      	subs	r3, r3, r6
 8000516:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800051a:	2100      	movs	r1, #0
 800051c:	b11d      	cbz	r5, 8000526 <__udivmoddi4+0xa6>
 800051e:	40d3      	lsrs	r3, r2
 8000520:	2200      	movs	r2, #0
 8000522:	e9c5 3200 	strd	r3, r2, [r5]
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	428b      	cmp	r3, r1
 800052c:	d905      	bls.n	800053a <__udivmoddi4+0xba>
 800052e:	b10d      	cbz	r5, 8000534 <__udivmoddi4+0xb4>
 8000530:	e9c5 0100 	strd	r0, r1, [r5]
 8000534:	2100      	movs	r1, #0
 8000536:	4608      	mov	r0, r1
 8000538:	e7f5      	b.n	8000526 <__udivmoddi4+0xa6>
 800053a:	fab3 f183 	clz	r1, r3
 800053e:	2900      	cmp	r1, #0
 8000540:	d146      	bne.n	80005d0 <__udivmoddi4+0x150>
 8000542:	42a3      	cmp	r3, r4
 8000544:	d302      	bcc.n	800054c <__udivmoddi4+0xcc>
 8000546:	4290      	cmp	r0, r2
 8000548:	f0c0 80f0 	bcc.w	800072c <__udivmoddi4+0x2ac>
 800054c:	1a86      	subs	r6, r0, r2
 800054e:	eb64 0303 	sbc.w	r3, r4, r3
 8000552:	2001      	movs	r0, #1
 8000554:	2d00      	cmp	r5, #0
 8000556:	d0e6      	beq.n	8000526 <__udivmoddi4+0xa6>
 8000558:	e9c5 6300 	strd	r6, r3, [r5]
 800055c:	e7e3      	b.n	8000526 <__udivmoddi4+0xa6>
 800055e:	2a00      	cmp	r2, #0
 8000560:	f040 8090 	bne.w	8000684 <__udivmoddi4+0x204>
 8000564:	eba1 040c 	sub.w	r4, r1, ip
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa1f f78c 	uxth.w	r7, ip
 8000570:	2101      	movs	r1, #1
 8000572:	fbb4 f6f8 	udiv	r6, r4, r8
 8000576:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800057a:	fb08 4416 	mls	r4, r8, r6, r4
 800057e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000582:	fb07 f006 	mul.w	r0, r7, r6
 8000586:	4298      	cmp	r0, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x11c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000592:	d202      	bcs.n	800059a <__udivmoddi4+0x11a>
 8000594:	4298      	cmp	r0, r3
 8000596:	f200 80cd 	bhi.w	8000734 <__udivmoddi4+0x2b4>
 800059a:	4626      	mov	r6, r4
 800059c:	1a1c      	subs	r4, r3, r0
 800059e:	fa1f f38e 	uxth.w	r3, lr
 80005a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80005a6:	fb08 4410 	mls	r4, r8, r0, r4
 80005aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80005ae:	fb00 f707 	mul.w	r7, r0, r7
 80005b2:	429f      	cmp	r7, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x148>
 80005b6:	eb1c 0303 	adds.w	r3, ip, r3
 80005ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80005be:	d202      	bcs.n	80005c6 <__udivmoddi4+0x146>
 80005c0:	429f      	cmp	r7, r3
 80005c2:	f200 80b0 	bhi.w	8000726 <__udivmoddi4+0x2a6>
 80005c6:	4620      	mov	r0, r4
 80005c8:	1bdb      	subs	r3, r3, r7
 80005ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ce:	e7a5      	b.n	800051c <__udivmoddi4+0x9c>
 80005d0:	f1c1 0620 	rsb	r6, r1, #32
 80005d4:	408b      	lsls	r3, r1
 80005d6:	fa22 f706 	lsr.w	r7, r2, r6
 80005da:	431f      	orrs	r7, r3
 80005dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80005e0:	fa04 f301 	lsl.w	r3, r4, r1
 80005e4:	ea43 030c 	orr.w	r3, r3, ip
 80005e8:	40f4      	lsrs	r4, r6
 80005ea:	fa00 f801 	lsl.w	r8, r0, r1
 80005ee:	0c38      	lsrs	r0, r7, #16
 80005f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80005f4:	fbb4 fef0 	udiv	lr, r4, r0
 80005f8:	fa1f fc87 	uxth.w	ip, r7
 80005fc:	fb00 441e 	mls	r4, r0, lr, r4
 8000600:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000604:	fb0e f90c 	mul.w	r9, lr, ip
 8000608:	45a1      	cmp	r9, r4
 800060a:	fa02 f201 	lsl.w	r2, r2, r1
 800060e:	d90a      	bls.n	8000626 <__udivmoddi4+0x1a6>
 8000610:	193c      	adds	r4, r7, r4
 8000612:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000616:	f080 8084 	bcs.w	8000722 <__udivmoddi4+0x2a2>
 800061a:	45a1      	cmp	r9, r4
 800061c:	f240 8081 	bls.w	8000722 <__udivmoddi4+0x2a2>
 8000620:	f1ae 0e02 	sub.w	lr, lr, #2
 8000624:	443c      	add	r4, r7
 8000626:	eba4 0409 	sub.w	r4, r4, r9
 800062a:	fa1f f983 	uxth.w	r9, r3
 800062e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000632:	fb00 4413 	mls	r4, r0, r3, r4
 8000636:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800063a:	fb03 fc0c 	mul.w	ip, r3, ip
 800063e:	45a4      	cmp	ip, r4
 8000640:	d907      	bls.n	8000652 <__udivmoddi4+0x1d2>
 8000642:	193c      	adds	r4, r7, r4
 8000644:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000648:	d267      	bcs.n	800071a <__udivmoddi4+0x29a>
 800064a:	45a4      	cmp	ip, r4
 800064c:	d965      	bls.n	800071a <__udivmoddi4+0x29a>
 800064e:	3b02      	subs	r3, #2
 8000650:	443c      	add	r4, r7
 8000652:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000656:	fba0 9302 	umull	r9, r3, r0, r2
 800065a:	eba4 040c 	sub.w	r4, r4, ip
 800065e:	429c      	cmp	r4, r3
 8000660:	46ce      	mov	lr, r9
 8000662:	469c      	mov	ip, r3
 8000664:	d351      	bcc.n	800070a <__udivmoddi4+0x28a>
 8000666:	d04e      	beq.n	8000706 <__udivmoddi4+0x286>
 8000668:	b155      	cbz	r5, 8000680 <__udivmoddi4+0x200>
 800066a:	ebb8 030e 	subs.w	r3, r8, lr
 800066e:	eb64 040c 	sbc.w	r4, r4, ip
 8000672:	fa04 f606 	lsl.w	r6, r4, r6
 8000676:	40cb      	lsrs	r3, r1
 8000678:	431e      	orrs	r6, r3
 800067a:	40cc      	lsrs	r4, r1
 800067c:	e9c5 6400 	strd	r6, r4, [r5]
 8000680:	2100      	movs	r1, #0
 8000682:	e750      	b.n	8000526 <__udivmoddi4+0xa6>
 8000684:	f1c2 0320 	rsb	r3, r2, #32
 8000688:	fa20 f103 	lsr.w	r1, r0, r3
 800068c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000690:	fa24 f303 	lsr.w	r3, r4, r3
 8000694:	4094      	lsls	r4, r2
 8000696:	430c      	orrs	r4, r1
 8000698:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800069c:	fa00 fe02 	lsl.w	lr, r0, r2
 80006a0:	fa1f f78c 	uxth.w	r7, ip
 80006a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80006a8:	fb08 3110 	mls	r1, r8, r0, r3
 80006ac:	0c23      	lsrs	r3, r4, #16
 80006ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006b2:	fb00 f107 	mul.w	r1, r0, r7
 80006b6:	4299      	cmp	r1, r3
 80006b8:	d908      	bls.n	80006cc <__udivmoddi4+0x24c>
 80006ba:	eb1c 0303 	adds.w	r3, ip, r3
 80006be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80006c2:	d22c      	bcs.n	800071e <__udivmoddi4+0x29e>
 80006c4:	4299      	cmp	r1, r3
 80006c6:	d92a      	bls.n	800071e <__udivmoddi4+0x29e>
 80006c8:	3802      	subs	r0, #2
 80006ca:	4463      	add	r3, ip
 80006cc:	1a5b      	subs	r3, r3, r1
 80006ce:	b2a4      	uxth	r4, r4
 80006d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80006d4:	fb08 3311 	mls	r3, r8, r1, r3
 80006d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006dc:	fb01 f307 	mul.w	r3, r1, r7
 80006e0:	42a3      	cmp	r3, r4
 80006e2:	d908      	bls.n	80006f6 <__udivmoddi4+0x276>
 80006e4:	eb1c 0404 	adds.w	r4, ip, r4
 80006e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80006ec:	d213      	bcs.n	8000716 <__udivmoddi4+0x296>
 80006ee:	42a3      	cmp	r3, r4
 80006f0:	d911      	bls.n	8000716 <__udivmoddi4+0x296>
 80006f2:	3902      	subs	r1, #2
 80006f4:	4464      	add	r4, ip
 80006f6:	1ae4      	subs	r4, r4, r3
 80006f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80006fc:	e739      	b.n	8000572 <__udivmoddi4+0xf2>
 80006fe:	4604      	mov	r4, r0
 8000700:	e6f0      	b.n	80004e4 <__udivmoddi4+0x64>
 8000702:	4608      	mov	r0, r1
 8000704:	e706      	b.n	8000514 <__udivmoddi4+0x94>
 8000706:	45c8      	cmp	r8, r9
 8000708:	d2ae      	bcs.n	8000668 <__udivmoddi4+0x1e8>
 800070a:	ebb9 0e02 	subs.w	lr, r9, r2
 800070e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000712:	3801      	subs	r0, #1
 8000714:	e7a8      	b.n	8000668 <__udivmoddi4+0x1e8>
 8000716:	4631      	mov	r1, r6
 8000718:	e7ed      	b.n	80006f6 <__udivmoddi4+0x276>
 800071a:	4603      	mov	r3, r0
 800071c:	e799      	b.n	8000652 <__udivmoddi4+0x1d2>
 800071e:	4630      	mov	r0, r6
 8000720:	e7d4      	b.n	80006cc <__udivmoddi4+0x24c>
 8000722:	46d6      	mov	lr, sl
 8000724:	e77f      	b.n	8000626 <__udivmoddi4+0x1a6>
 8000726:	4463      	add	r3, ip
 8000728:	3802      	subs	r0, #2
 800072a:	e74d      	b.n	80005c8 <__udivmoddi4+0x148>
 800072c:	4606      	mov	r6, r0
 800072e:	4623      	mov	r3, r4
 8000730:	4608      	mov	r0, r1
 8000732:	e70f      	b.n	8000554 <__udivmoddi4+0xd4>
 8000734:	3e02      	subs	r6, #2
 8000736:	4463      	add	r3, ip
 8000738:	e730      	b.n	800059c <__udivmoddi4+0x11c>
 800073a:	bf00      	nop

0800073c <__aeabi_idiv0>:
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop

08000740 <BNO055_READ_HSEM>:
		HAL_HSEM_Release(HSEM_ID_1,0);
	}
}

#else
void BNO055_READ_HSEM(BNO055_t *bno){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(HAL_HSEM_FastTake(HSEM_ID_1) == HAL_OK){
 8000748:	2001      	movs	r0, #1
 800074a:	f005 fc1d 	bl	8005f88 <HAL_HSEM_FastTake>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d175      	bne.n	8000840 <BNO055_READ_HSEM+0x100>
		bno->quat.x = SRAM4_BNO055->Data[1];
 8000754:	4b3c      	ldr	r3, [pc, #240]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 8000756:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800075a:	6879      	ldr	r1, [r7, #4]
 800075c:	e9c1 231a 	strd	r2, r3, [r1, #104]	@ 0x68
		bno->quat.y = SRAM4_BNO055->Data[2];
 8000760:	4b39      	ldr	r3, [pc, #228]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 8000762:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000766:	6879      	ldr	r1, [r7, #4]
 8000768:	e9c1 231c 	strd	r2, r3, [r1, #112]	@ 0x70
		bno->quat.z = SRAM4_BNO055->Data[3];
 800076c:	4b36      	ldr	r3, [pc, #216]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 800076e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	e9c1 231e 	strd	r2, r3, [r1, #120]	@ 0x78
		bno->quat.w = SRAM4_BNO055->Data[4];
 8000778:	4b33      	ldr	r3, [pc, #204]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 800077a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800077e:	6879      	ldr	r1, [r7, #4]
 8000780:	e9c1 2320 	strd	r2, r3, [r1, #128]	@ 0x80

		bno->lin_acc.x = SRAM4_BNO055->Data[5];
 8000784:	4b30      	ldr	r3, [pc, #192]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 8000786:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800078a:	6879      	ldr	r1, [r7, #4]
 800078c:	e9c1 2322 	strd	r2, r3, [r1, #136]	@ 0x88
		bno->lin_acc.y = SRAM4_BNO055->Data[6];
 8000790:	4b2d      	ldr	r3, [pc, #180]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 8000792:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	e9c1 2324 	strd	r2, r3, [r1, #144]	@ 0x90
		bno->lin_acc.z = SRAM4_BNO055->Data[7];
 800079c:	4b2a      	ldr	r3, [pc, #168]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 800079e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 80007a2:	6879      	ldr	r1, [r7, #4]
 80007a4:	e9c1 2326 	strd	r2, r3, [r1, #152]	@ 0x98

		bno->gyro.x = SRAM4_BNO055->Data[8];
 80007a8:	4b27      	ldr	r3, [pc, #156]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 80007aa:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 80007ae:	6879      	ldr	r1, [r7, #4]
 80007b0:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
		bno->gyro.y = SRAM4_BNO055->Data[9];
 80007b4:	4b24      	ldr	r3, [pc, #144]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 80007b6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
		bno->gyro.z = SRAM4_BNO055->Data[10];
 80007c0:	4b21      	ldr	r3, [pc, #132]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 80007c2:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 80007c6:	6879      	ldr	r1, [r7, #4]
 80007c8:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

		bno->mag.x = SRAM4_BNO055->Data[11];
 80007cc:	4b1e      	ldr	r3, [pc, #120]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 80007ce:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80007d2:	6879      	ldr	r1, [r7, #4]
 80007d4:	e9c1 2308 	strd	r2, r3, [r1, #32]
		bno->mag.y = SRAM4_BNO055->Data[12];
 80007d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 80007da:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
		bno->mag.z = SRAM4_BNO055->Data[13];
 80007e4:	4b18      	ldr	r3, [pc, #96]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 80007e6:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80007ea:	6879      	ldr	r1, [r7, #4]
 80007ec:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30

		bno->accel.x = SRAM4_BNO055->Data[14];
 80007f0:	4b15      	ldr	r3, [pc, #84]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 80007f2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	e9c1 2302 	strd	r2, r3, [r1, #8]
		bno->accel.y = SRAM4_BNO055->Data[15];
 80007fc:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 80007fe:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 8000802:	6879      	ldr	r1, [r7, #4]
 8000804:	e9c1 2304 	strd	r2, r3, [r1, #16]
		bno->accel.z = SRAM4_BNO055->Data[16];
 8000808:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 800080a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 800080e:	6879      	ldr	r1, [r7, #4]
 8000810:	e9c1 2306 	strd	r2, r3, [r1, #24]

		bno->euler.roll = SRAM4_BNO055->Data[17];
 8000814:	4b0c      	ldr	r3, [pc, #48]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 8000816:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800081a:	6879      	ldr	r1, [r7, #4]
 800081c:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
		bno->euler.pitch = SRAM4_BNO055->Data[18];
 8000820:	4b09      	ldr	r3, [pc, #36]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 8000822:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8000826:	6879      	ldr	r1, [r7, #4]
 8000828:	e9c1 2316 	strd	r2, r3, [r1, #88]	@ 0x58
		bno->euler.yaw = SRAM4_BNO055->Data[19];
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <BNO055_READ_HSEM+0x108>)
 800082e:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 8000832:	6879      	ldr	r1, [r7, #4]
 8000834:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
		HAL_HSEM_Release(HSEM_ID_1,0);
 8000838:	2100      	movs	r1, #0
 800083a:	2001      	movs	r0, #1
 800083c:	f005 fbbe 	bl	8005fbc <HAL_HSEM_Release>

	}
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	38002000 	.word	0x38002000

0800084c <BNO086_READ_HSEM>:
		}
	}
}
#else

void BNO086_READ_HSEM(BNO086_t *bno){
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
    if (HAL_HSEM_FastTake(HSEM_ID_0) == HAL_OK){
 8000854:	2000      	movs	r0, #0
 8000856:	f005 fb97 	bl	8005f88 <HAL_HSEM_FastTake>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	f040 80af 	bne.w	80009c0 <BNO086_READ_HSEM+0x174>
    	bno->quaternion.i = SRAM4_BNO086->Data[0];
 8000862:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000866:	ed93 7b02 	vldr	d7, [r3, #8]
 800086a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	edc3 7a00 	vstr	s15, [r3]
		bno->quaternion.j = SRAM4_BNO086->Data[1];
 8000874:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000878:	ed93 7b04 	vldr	d7, [r3, #16]
 800087c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	edc3 7a01 	vstr	s15, [r3, #4]
		bno->quaternion.k = SRAM4_BNO086->Data[2];
 8000886:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800088a:	ed93 7b06 	vldr	d7, [r3, #24]
 800088e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	edc3 7a02 	vstr	s15, [r3, #8]
		bno->quaternion.w = SRAM4_BNO086->Data[3];
 8000898:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800089c:	ed93 7b08 	vldr	d7, [r3, #32]
 80008a0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	edc3 7a03 	vstr	s15, [r3, #12]

		bno->linear_acceleration.x = SRAM4_BNO086->Data[4];
 80008aa:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008ae:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 80008b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	edc3 7a07 	vstr	s15, [r3, #28]
		bno->linear_acceleration.y = SRAM4_BNO086->Data[5];
 80008bc:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008c0:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80008c4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	edc3 7a08 	vstr	s15, [r3, #32]
		bno->linear_acceleration.z = SRAM4_BNO086->Data[6];
 80008ce:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008d2:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 80008d6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		bno->angular_velocity.x = SRAM4_BNO086->Data[7];
 80008e0:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008e4:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 80008e8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
		bno->angular_velocity.y = SRAM4_BNO086->Data[8];
 80008f2:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80008f6:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 80008fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
		bno->angular_velocity.z = SRAM4_BNO086->Data[9];
 8000904:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000908:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 800090c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

		bno->magnetometer.x = SRAM4_BNO086->Data[10];
 8000916:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800091a:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 800091e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
		bno->magnetometer.y = SRAM4_BNO086->Data[11];
 8000928:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800092c:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 8000930:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38
		bno->magnetometer.z = SRAM4_BNO086->Data[12];
 800093a:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 800093e:	ed93 7b1a 	vldr	d7, [r3, #104]	@ 0x68
 8000942:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c

		bno->acceleration.x = SRAM4_BNO086->Data[13];
 800094c:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000950:	ed93 7b1c 	vldr	d7, [r3, #112]	@ 0x70
 8000954:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	edc3 7a04 	vstr	s15, [r3, #16]
		bno->acceleration.y = SRAM4_BNO086->Data[14];
 800095e:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000962:	ed93 7b1e 	vldr	d7, [r3, #120]	@ 0x78
 8000966:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	edc3 7a05 	vstr	s15, [r3, #20]
		bno->acceleration.z = SRAM4_BNO086->Data[15];
 8000970:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000974:	ed93 7b20 	vldr	d7, [r3, #128]	@ 0x80
 8000978:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	edc3 7a06 	vstr	s15, [r3, #24]


		bno->euler_angle.roll = SRAM4_BNO086->Data[16];
 8000982:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000986:	ed93 7b22 	vldr	d7, [r3, #136]	@ 0x88
 800098a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
		bno->euler_angle.pitch = SRAM4_BNO086->Data[17];
 8000994:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 8000998:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 800099c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44
		bno->euler_angle.yaw = SRAM4_BNO086->Data[18];
 80009a6:	f04f 5360 	mov.w	r3, #939524096	@ 0x38000000
 80009aa:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 80009ae:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	edc3 7a12 	vstr	s15, [r3, #72]	@ 0x48
        HAL_HSEM_Release(HSEM_ID_0, 0);
 80009b8:	2100      	movs	r1, #0
 80009ba:	2000      	movs	r0, #0
 80009bc:	f005 fafe 	bl	8005fbc <HAL_HSEM_Release>
    }
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}

080009c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009cc:	4b3d      	ldr	r3, [pc, #244]	@ (8000ac4 <SystemInit+0xfc>)
 80009ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009d2:	4a3c      	ldr	r2, [pc, #240]	@ (8000ac4 <SystemInit+0xfc>)
 80009d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80009dc:	4b39      	ldr	r3, [pc, #228]	@ (8000ac4 <SystemInit+0xfc>)
 80009de:	691b      	ldr	r3, [r3, #16]
 80009e0:	4a38      	ldr	r2, [pc, #224]	@ (8000ac4 <SystemInit+0xfc>)
 80009e2:	f043 0310 	orr.w	r3, r3, #16
 80009e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009e8:	4b37      	ldr	r3, [pc, #220]	@ (8000ac8 <SystemInit+0x100>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	f003 030f 	and.w	r3, r3, #15
 80009f0:	2b06      	cmp	r3, #6
 80009f2:	d807      	bhi.n	8000a04 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009f4:	4b34      	ldr	r3, [pc, #208]	@ (8000ac8 <SystemInit+0x100>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	f023 030f 	bic.w	r3, r3, #15
 80009fc:	4a32      	ldr	r2, [pc, #200]	@ (8000ac8 <SystemInit+0x100>)
 80009fe:	f043 0307 	orr.w	r3, r3, #7
 8000a02:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a04:	4b31      	ldr	r3, [pc, #196]	@ (8000acc <SystemInit+0x104>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a30      	ldr	r2, [pc, #192]	@ (8000acc <SystemInit+0x104>)
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a10:	4b2e      	ldr	r3, [pc, #184]	@ (8000acc <SystemInit+0x104>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a16:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <SystemInit+0x104>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	492c      	ldr	r1, [pc, #176]	@ (8000acc <SystemInit+0x104>)
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <SystemInit+0x108>)
 8000a1e:	4013      	ands	r3, r2
 8000a20:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a22:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <SystemInit+0x100>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	f003 0308 	and.w	r3, r3, #8
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d007      	beq.n	8000a3e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a2e:	4b26      	ldr	r3, [pc, #152]	@ (8000ac8 <SystemInit+0x100>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	f023 030f 	bic.w	r3, r3, #15
 8000a36:	4a24      	ldr	r2, [pc, #144]	@ (8000ac8 <SystemInit+0x100>)
 8000a38:	f043 0307 	orr.w	r3, r3, #7
 8000a3c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a3e:	4b23      	ldr	r3, [pc, #140]	@ (8000acc <SystemInit+0x104>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a44:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <SystemInit+0x104>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a4a:	4b20      	ldr	r3, [pc, #128]	@ (8000acc <SystemInit+0x104>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a50:	4b1e      	ldr	r3, [pc, #120]	@ (8000acc <SystemInit+0x104>)
 8000a52:	4a20      	ldr	r2, [pc, #128]	@ (8000ad4 <SystemInit+0x10c>)
 8000a54:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a56:	4b1d      	ldr	r3, [pc, #116]	@ (8000acc <SystemInit+0x104>)
 8000a58:	4a1f      	ldr	r2, [pc, #124]	@ (8000ad8 <SystemInit+0x110>)
 8000a5a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000acc <SystemInit+0x104>)
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	@ (8000adc <SystemInit+0x114>)
 8000a60:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a62:	4b1a      	ldr	r3, [pc, #104]	@ (8000acc <SystemInit+0x104>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a68:	4b18      	ldr	r3, [pc, #96]	@ (8000acc <SystemInit+0x104>)
 8000a6a:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <SystemInit+0x114>)
 8000a6c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a6e:	4b17      	ldr	r3, [pc, #92]	@ (8000acc <SystemInit+0x104>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a74:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <SystemInit+0x104>)
 8000a76:	4a19      	ldr	r2, [pc, #100]	@ (8000adc <SystemInit+0x114>)
 8000a78:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <SystemInit+0x104>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a80:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <SystemInit+0x104>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a11      	ldr	r2, [pc, #68]	@ (8000acc <SystemInit+0x104>)
 8000a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000a8a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000acc <SystemInit+0x104>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000a92:	4b13      	ldr	r3, [pc, #76]	@ (8000ae0 <SystemInit+0x118>)
 8000a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a96:	4a12      	ldr	r2, [pc, #72]	@ (8000ae0 <SystemInit+0x118>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ae4 <SystemInit+0x11c>)
 8000aa0:	681a      	ldr	r2, [r3, #0]
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <SystemInit+0x120>)
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000aaa:	d202      	bcs.n	8000ab2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	@ (8000aec <SystemInit+0x124>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <SystemInit+0x128>)
 8000ab4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000ab8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	e000ed00 	.word	0xe000ed00
 8000ac8:	52002000 	.word	0x52002000
 8000acc:	58024400 	.word	0x58024400
 8000ad0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000ad4:	02020200 	.word	0x02020200
 8000ad8:	01ff0000 	.word	0x01ff0000
 8000adc:	01010280 	.word	0x01010280
 8000ae0:	580000c0 	.word	0x580000c0
 8000ae4:	5c001000 	.word	0x5c001000
 8000ae8:	ffff0000 	.word	0xffff0000
 8000aec:	51008108 	.word	0x51008108
 8000af0:	52004000 	.word	0x52004000

08000af4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08a      	sub	sp, #40	@ 0x28
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8000b00:	f00c fb4a 	bl	800d198 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000b04:	4b5a      	ldr	r3, [pc, #360]	@ (8000c70 <pvPortMallocMicroROS+0x17c>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d101      	bne.n	8000b10 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 8000b0c:	f000 f986 	bl	8000e1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000b10:	4b58      	ldr	r3, [pc, #352]	@ (8000c74 <pvPortMallocMicroROS+0x180>)
 8000b12:	681a      	ldr	r2, [r3, #0]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4013      	ands	r3, r2
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	f040 8090 	bne.w	8000c3e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d01e      	beq.n	8000b62 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8000b24:	2208      	movs	r2, #8
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d015      	beq.n	8000b62 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	f023 0307 	bic.w	r3, r3, #7
 8000b3c:	3308      	adds	r3, #8
 8000b3e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	f003 0307 	and.w	r3, r3, #7
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d00b      	beq.n	8000b62 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000b4e:	f383 8811 	msr	BASEPRI, r3
 8000b52:	f3bf 8f6f 	isb	sy
 8000b56:	f3bf 8f4f 	dsb	sy
 8000b5a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	e7fd      	b.n	8000b5e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d06a      	beq.n	8000c3e <pvPortMallocMicroROS+0x14a>
 8000b68:	4b43      	ldr	r3, [pc, #268]	@ (8000c78 <pvPortMallocMicroROS+0x184>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	d865      	bhi.n	8000c3e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000b72:	4b42      	ldr	r3, [pc, #264]	@ (8000c7c <pvPortMallocMicroROS+0x188>)
 8000b74:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8000b76:	4b41      	ldr	r3, [pc, #260]	@ (8000c7c <pvPortMallocMicroROS+0x188>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b7c:	e004      	b.n	8000b88 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b80:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d903      	bls.n	8000b9a <pvPortMallocMicroROS+0xa6>
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d1f1      	bne.n	8000b7e <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000b9a:	4b35      	ldr	r3, [pc, #212]	@ (8000c70 <pvPortMallocMicroROS+0x17c>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ba0:	429a      	cmp	r2, r3
 8000ba2:	d04c      	beq.n	8000c3e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000ba4:	6a3b      	ldr	r3, [r7, #32]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2208      	movs	r2, #8
 8000baa:	4413      	add	r3, r2
 8000bac:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb8:	685a      	ldr	r2, [r3, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	1ad2      	subs	r2, r2, r3
 8000bbe:	2308      	movs	r3, #8
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	d920      	bls.n	8000c08 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000bc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4413      	add	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	f003 0307 	and.w	r3, r3, #7
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d00b      	beq.n	8000bf0 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8000bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000bdc:	f383 8811 	msr	BASEPRI, r3
 8000be0:	f3bf 8f6f 	isb	sy
 8000be4:	f3bf 8f4f 	dsb	sy
 8000be8:	613b      	str	r3, [r7, #16]
}
 8000bea:	bf00      	nop
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	1ad2      	subs	r2, r2, r3
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000c02:	69b8      	ldr	r0, [r7, #24]
 8000c04:	f000 f96c 	bl	8000ee0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	@ (8000c78 <pvPortMallocMicroROS+0x184>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	4a19      	ldr	r2, [pc, #100]	@ (8000c78 <pvPortMallocMicroROS+0x184>)
 8000c14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000c16:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <pvPortMallocMicroROS+0x184>)
 8000c18:	681a      	ldr	r2, [r3, #0]
 8000c1a:	4b19      	ldr	r3, [pc, #100]	@ (8000c80 <pvPortMallocMicroROS+0x18c>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d203      	bcs.n	8000c2a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <pvPortMallocMicroROS+0x184>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	4a16      	ldr	r2, [pc, #88]	@ (8000c80 <pvPortMallocMicroROS+0x18c>)
 8000c28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <pvPortMallocMicroROS+0x180>)
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	431a      	orrs	r2, r3
 8000c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000c3e:	f00c fab9 	bl	800d1b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	f003 0307 	and.w	r3, r3, #7
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d00b      	beq.n	8000c64 <pvPortMallocMicroROS+0x170>
	__asm volatile
 8000c4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000c50:	f383 8811 	msr	BASEPRI, r3
 8000c54:	f3bf 8f6f 	isb	sy
 8000c58:	f3bf 8f4f 	dsb	sy
 8000c5c:	60fb      	str	r3, [r7, #12]
}
 8000c5e:	bf00      	nop
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 8000c64:	69fb      	ldr	r3, [r7, #28]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3728      	adds	r7, #40	@ 0x28
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	24003fe4 	.word	0x24003fe4
 8000c74:	24003ff0 	.word	0x24003ff0
 8000c78:	24003fe8 	.word	0x24003fe8
 8000c7c:	24003fdc 	.word	0x24003fdc
 8000c80:	24003fec 	.word	0x24003fec

08000c84 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d04a      	beq.n	8000d2c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000c96:	2308      	movs	r3, #8
 8000c98:	425b      	negs	r3, r3
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	685a      	ldr	r2, [r3, #4]
 8000ca8:	4b22      	ldr	r3, [pc, #136]	@ (8000d34 <vPortFreeMicroROS+0xb0>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4013      	ands	r3, r2
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d10b      	bne.n	8000cca <vPortFreeMicroROS+0x46>
	__asm volatile
 8000cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cb6:	f383 8811 	msr	BASEPRI, r3
 8000cba:	f3bf 8f6f 	isb	sy
 8000cbe:	f3bf 8f4f 	dsb	sy
 8000cc2:	60fb      	str	r3, [r7, #12]
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	e7fd      	b.n	8000cc6 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8000cca:	693b      	ldr	r3, [r7, #16]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d00b      	beq.n	8000cea <vPortFreeMicroROS+0x66>
	__asm volatile
 8000cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000cd6:	f383 8811 	msr	BASEPRI, r3
 8000cda:	f3bf 8f6f 	isb	sy
 8000cde:	f3bf 8f4f 	dsb	sy
 8000ce2:	60bb      	str	r3, [r7, #8]
}
 8000ce4:	bf00      	nop
 8000ce6:	bf00      	nop
 8000ce8:	e7fd      	b.n	8000ce6 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <vPortFreeMicroROS+0xb0>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d019      	beq.n	8000d2c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d115      	bne.n	8000d2c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	685a      	ldr	r2, [r3, #4]
 8000d04:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <vPortFreeMicroROS+0xb0>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	401a      	ands	r2, r3
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000d10:	f00c fa42 	bl	800d198 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	685a      	ldr	r2, [r3, #4]
 8000d18:	4b07      	ldr	r3, [pc, #28]	@ (8000d38 <vPortFreeMicroROS+0xb4>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	4a06      	ldr	r2, [pc, #24]	@ (8000d38 <vPortFreeMicroROS+0xb4>)
 8000d20:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000d22:	6938      	ldr	r0, [r7, #16]
 8000d24:	f000 f8dc 	bl	8000ee0 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8000d28:	f00c fa44 	bl	800d1b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000d2c:	bf00      	nop
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	24003ff0 	.word	0x24003ff0
 8000d38:	24003fe8 	.word	0x24003fe8

08000d3c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b087      	sub	sp, #28
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8000d48:	2308      	movs	r3, #8
 8000d4a:	425b      	negs	r3, r3
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	4413      	add	r3, r2
 8000d50:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <getBlockSize+0x38>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]

	return count;
 8000d64:	68fb      	ldr	r3, [r7, #12]
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	371c      	adds	r7, #28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	24003ff0 	.word	0x24003ff0

08000d78 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000d82:	f00c fa09 	bl	800d198 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8000d86:	6838      	ldr	r0, [r7, #0]
 8000d88:	f7ff feb4 	bl	8000af4 <pvPortMallocMicroROS>
 8000d8c:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d017      	beq.n	8000dc4 <pvPortReallocMicroROS+0x4c>
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d014      	beq.n	8000dc4 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f7ff ffce 	bl	8000d3c <getBlockSize>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2208      	movs	r2, #8
 8000da4:	1a9b      	subs	r3, r3, r2
 8000da6:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8000da8:	683a      	ldr	r2, [r7, #0]
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	429a      	cmp	r2, r3
 8000dae:	d201      	bcs.n	8000db4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	6879      	ldr	r1, [r7, #4]
 8000db8:	68b8      	ldr	r0, [r7, #8]
 8000dba:	f01b f8ba 	bl	801bf32 <memcpy>

		vPortFreeMicroROS(pv);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ff60 	bl	8000c84 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8000dc4:	f00c f9f6 	bl	800d1b4 <xTaskResumeAll>

	return newmem;
 8000dc8:	68bb      	ldr	r3, [r7, #8]
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b086      	sub	sp, #24
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
 8000dda:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8000ddc:	f00c f9dc 	bl	800d198 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	687a      	ldr	r2, [r7, #4]
 8000de4:	fb02 f303 	mul.w	r3, r2, r3
 8000de8:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8000dea:	6978      	ldr	r0, [r7, #20]
 8000dec:	f7ff fe82 	bl	8000af4 <pvPortMallocMicroROS>
 8000df0:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8000df2:	68fb      	ldr	r3, [r7, #12]
 8000df4:	613b      	str	r3, [r7, #16]

  	while(count--)
 8000df6:	e004      	b.n	8000e02 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	1c5a      	adds	r2, r3, #1
 8000dfc:	613a      	str	r2, [r7, #16]
 8000dfe:	2200      	movs	r2, #0
 8000e00:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	1e5a      	subs	r2, r3, #1
 8000e06:	617a      	str	r2, [r7, #20]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1f5      	bne.n	8000df8 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8000e0c:	f00c f9d2 	bl	800d1b4 <xTaskResumeAll>
  	return mem;
 8000e10:	68fb      	ldr	r3, [r7, #12]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000e22:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8000e26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000e28:	4b27      	ldr	r3, [pc, #156]	@ (8000ec8 <prvHeapInit+0xac>)
 8000e2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d00c      	beq.n	8000e50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	3307      	adds	r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f023 0307 	bic.w	r3, r3, #7
 8000e42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000e44:	68ba      	ldr	r2, [r7, #8]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ec8 <prvHeapInit+0xac>)
 8000e4c:	4413      	add	r3, r2
 8000e4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000e54:	4a1d      	ldr	r2, [pc, #116]	@ (8000ecc <prvHeapInit+0xb0>)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <prvHeapInit+0xb0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	4413      	add	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000e68:	2208      	movs	r2, #8
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	1a9b      	subs	r3, r3, r2
 8000e6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f023 0307 	bic.w	r3, r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	4a15      	ldr	r2, [pc, #84]	@ (8000ed0 <prvHeapInit+0xb4>)
 8000e7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <prvHeapInit+0xb4>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	2200      	movs	r2, #0
 8000e84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000e86:	4b12      	ldr	r3, [pc, #72]	@ (8000ed0 <prvHeapInit+0xb4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	68fa      	ldr	r2, [r7, #12]
 8000e96:	1ad2      	subs	r2, r2, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <prvHeapInit+0xb4>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <prvHeapInit+0xb8>)
 8000eaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	4a09      	ldr	r2, [pc, #36]	@ (8000ed8 <prvHeapInit+0xbc>)
 8000eb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000eb4:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <prvHeapInit+0xc0>)
 8000eb6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000eba:	601a      	str	r2, [r3, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	240003dc 	.word	0x240003dc
 8000ecc:	24003fdc 	.word	0x24003fdc
 8000ed0:	24003fe4 	.word	0x24003fe4
 8000ed4:	24003fec 	.word	0x24003fec
 8000ed8:	24003fe8 	.word	0x24003fe8
 8000edc:	24003ff0 	.word	0x24003ff0

08000ee0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000ee8:	4b28      	ldr	r3, [pc, #160]	@ (8000f8c <prvInsertBlockIntoFreeList+0xac>)
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	e002      	b.n	8000ef4 <prvInsertBlockIntoFreeList+0x14>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	687a      	ldr	r2, [r7, #4]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d8f7      	bhi.n	8000eee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	4413      	add	r3, r2
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d108      	bne.n	8000f22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	685a      	ldr	r2, [r3, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	441a      	add	r2, r3
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	441a      	add	r2, r3
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d118      	bne.n	8000f68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <prvInsertBlockIntoFreeList+0xb0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	429a      	cmp	r2, r3
 8000f40:	d00d      	beq.n	8000f5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685a      	ldr	r2, [r3, #4]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	441a      	add	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	e008      	b.n	8000f70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <prvInsertBlockIntoFreeList+0xb0>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	e003      	b.n	8000f70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8000f70:	68fa      	ldr	r2, [r7, #12]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d002      	beq.n	8000f7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	24003fdc 	.word	0x24003fdc
 8000f90:	24003fe4 	.word	0x24003fe4

08000f94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9a:	4b11      	ldr	r3, [pc, #68]	@ (8000fe0 <MX_DMA_Init+0x4c>)
 8000f9c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe0 <MX_DMA_Init+0x4c>)
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000faa:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <MX_DMA_Init+0x4c>)
 8000fac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fb0:	f003 0301 	and.w	r3, r3, #1
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2105      	movs	r1, #5
 8000fbc:	200b      	movs	r0, #11
 8000fbe:	f001 fb8f 	bl	80026e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000fc2:	200b      	movs	r0, #11
 8000fc4:	f001 fba6 	bl	8002714 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	2105      	movs	r1, #5
 8000fcc:	200c      	movs	r0, #12
 8000fce:	f001 fb87 	bl	80026e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000fd2:	200c      	movs	r0, #12
 8000fd4:	f001 fb9e 	bl	8002714 <HAL_NVIC_EnableIRQ>

}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	58024400 	.word	0x58024400

08000fe4 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8000ff2:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8000ff4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ff8:	4904      	ldr	r1, [pc, #16]	@ (800100c <cubemx_transport_open+0x28>)
 8000ffa:	68f8      	ldr	r0, [r7, #12]
 8000ffc:	f008 fb34 	bl	8009668 <HAL_UART_Receive_DMA>
    return true;
 8001000:	2301      	movs	r3, #1
}
 8001002:	4618      	mov	r0, r3
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	24003ff4 	.word	0x24003ff4

08001010 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800101e:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f008 fb6d 	bl	8009700 <HAL_UART_DMAStop>
    return true;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001030:	b580      	push	{r7, lr}
 8001032:	b086      	sub	sp, #24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001044:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104c:	2b20      	cmp	r3, #32
 800104e:	d11b      	bne.n	8001088 <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	b29b      	uxth	r3, r3
 8001054:	461a      	mov	r2, r3
 8001056:	68b9      	ldr	r1, [r7, #8]
 8001058:	6978      	ldr	r0, [r7, #20]
 800105a:	f008 fa85 	bl	8009568 <HAL_UART_Transmit_DMA>
 800105e:	4603      	mov	r3, r0
 8001060:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001062:	e002      	b.n	800106a <cubemx_transport_write+0x3a>
            osDelay(1);
 8001064:	2001      	movs	r0, #1
 8001066:	f00a fc17 	bl	800b898 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 800106a:	7cfb      	ldrb	r3, [r7, #19]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d104      	bne.n	800107a <cubemx_transport_write+0x4a>
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001076:	2b20      	cmp	r3, #32
 8001078:	d1f4      	bne.n	8001064 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 800107a:	7cfb      	ldrb	r3, [r7, #19]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d101      	bne.n	8001084 <cubemx_transport_write+0x54>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	e002      	b.n	800108a <cubemx_transport_write+0x5a>
 8001084:	2300      	movs	r3, #0
 8001086:	e000      	b.n	800108a <cubemx_transport_write+0x5a>
    }else{
        return 0;
 8001088:	2300      	movs	r3, #0
    }
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001094:	b580      	push	{r7, lr}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80010a8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ae:	b672      	cpsid	i
}
 80010b0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001224 <cubemx_transport_read+0x190>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d068      	beq.n	8001192 <cubemx_transport_read+0xfe>
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a57      	ldr	r2, [pc, #348]	@ (8001228 <cubemx_transport_read+0x194>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d061      	beq.n	8001192 <cubemx_transport_read+0xfe>
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a55      	ldr	r2, [pc, #340]	@ (800122c <cubemx_transport_read+0x198>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d05a      	beq.n	8001192 <cubemx_transport_read+0xfe>
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a52      	ldr	r2, [pc, #328]	@ (8001230 <cubemx_transport_read+0x19c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d053      	beq.n	8001192 <cubemx_transport_read+0xfe>
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a50      	ldr	r2, [pc, #320]	@ (8001234 <cubemx_transport_read+0x1a0>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	d04c      	beq.n	8001192 <cubemx_transport_read+0xfe>
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a4d      	ldr	r2, [pc, #308]	@ (8001238 <cubemx_transport_read+0x1a4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d045      	beq.n	8001192 <cubemx_transport_read+0xfe>
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a4b      	ldr	r2, [pc, #300]	@ (800123c <cubemx_transport_read+0x1a8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d03e      	beq.n	8001192 <cubemx_transport_read+0xfe>
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a48      	ldr	r2, [pc, #288]	@ (8001240 <cubemx_transport_read+0x1ac>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d037      	beq.n	8001192 <cubemx_transport_read+0xfe>
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a46      	ldr	r2, [pc, #280]	@ (8001244 <cubemx_transport_read+0x1b0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d030      	beq.n	8001192 <cubemx_transport_read+0xfe>
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a43      	ldr	r2, [pc, #268]	@ (8001248 <cubemx_transport_read+0x1b4>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d029      	beq.n	8001192 <cubemx_transport_read+0xfe>
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a41      	ldr	r2, [pc, #260]	@ (800124c <cubemx_transport_read+0x1b8>)
 8001148:	4293      	cmp	r3, r2
 800114a:	d022      	beq.n	8001192 <cubemx_transport_read+0xfe>
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a3e      	ldr	r2, [pc, #248]	@ (8001250 <cubemx_transport_read+0x1bc>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d01b      	beq.n	8001192 <cubemx_transport_read+0xfe>
 800115a:	697b      	ldr	r3, [r7, #20]
 800115c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a3c      	ldr	r2, [pc, #240]	@ (8001254 <cubemx_transport_read+0x1c0>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d014      	beq.n	8001192 <cubemx_transport_read+0xfe>
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a39      	ldr	r2, [pc, #228]	@ (8001258 <cubemx_transport_read+0x1c4>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d00d      	beq.n	8001192 <cubemx_transport_read+0xfe>
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a37      	ldr	r2, [pc, #220]	@ (800125c <cubemx_transport_read+0x1c8>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d006      	beq.n	8001192 <cubemx_transport_read+0xfe>
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a34      	ldr	r2, [pc, #208]	@ (8001260 <cubemx_transport_read+0x1cc>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d107      	bne.n	80011a2 <cubemx_transport_read+0x10e>
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80011a0:	e006      	b.n	80011b0 <cubemx_transport_read+0x11c>
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 80011b0:	4a2c      	ldr	r2, [pc, #176]	@ (8001264 <cubemx_transport_read+0x1d0>)
 80011b2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80011b4:	b662      	cpsie	i
}
 80011b6:	bf00      	nop
        __enable_irq();
        ms_used++;
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	3301      	adds	r3, #1
 80011bc:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 80011be:	2001      	movs	r0, #1
 80011c0:	f00a fb6a 	bl	800b898 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 80011c4:	4b28      	ldr	r3, [pc, #160]	@ (8001268 <cubemx_transport_read+0x1d4>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <cubemx_transport_read+0x1d0>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d104      	bne.n	80011da <cubemx_transport_read+0x146>
 80011d0:	69fa      	ldr	r2, [r7, #28]
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	429a      	cmp	r2, r3
 80011d6:	f6ff af6a 	blt.w	80010ae <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 80011de:	e011      	b.n	8001204 <cubemx_transport_read+0x170>
        buf[wrote] = dma_buffer[dma_head];
 80011e0:	4b21      	ldr	r3, [pc, #132]	@ (8001268 <cubemx_transport_read+0x1d4>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	68b9      	ldr	r1, [r7, #8]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	440b      	add	r3, r1
 80011ea:	4920      	ldr	r1, [pc, #128]	@ (800126c <cubemx_transport_read+0x1d8>)
 80011ec:	5c8a      	ldrb	r2, [r1, r2]
 80011ee:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 80011f0:	4b1d      	ldr	r3, [pc, #116]	@ (8001268 <cubemx_transport_read+0x1d4>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	3301      	adds	r3, #1
 80011f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001268 <cubemx_transport_read+0x1d4>)
 80011fc:	6013      	str	r3, [r2, #0]
        wrote++;
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	3301      	adds	r3, #1
 8001202:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001204:	4b18      	ldr	r3, [pc, #96]	@ (8001268 <cubemx_transport_read+0x1d4>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <cubemx_transport_read+0x1d0>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	429a      	cmp	r2, r3
 800120e:	d003      	beq.n	8001218 <cubemx_transport_read+0x184>
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	429a      	cmp	r2, r3
 8001216:	d3e3      	bcc.n	80011e0 <cubemx_transport_read+0x14c>
    }
    
    return wrote;
 8001218:	69bb      	ldr	r3, [r7, #24]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3720      	adds	r7, #32
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40020010 	.word	0x40020010
 8001228:	40020028 	.word	0x40020028
 800122c:	40020040 	.word	0x40020040
 8001230:	40020058 	.word	0x40020058
 8001234:	40020070 	.word	0x40020070
 8001238:	40020088 	.word	0x40020088
 800123c:	400200a0 	.word	0x400200a0
 8001240:	400200b8 	.word	0x400200b8
 8001244:	40020410 	.word	0x40020410
 8001248:	40020428 	.word	0x40020428
 800124c:	40020440 	.word	0x40020440
 8001250:	40020458 	.word	0x40020458
 8001254:	40020470 	.word	0x40020470
 8001258:	40020488 	.word	0x40020488
 800125c:	400204a0 	.word	0x400204a0
 8001260:	400204b8 	.word	0x400204b8
 8001264:	240047f8 	.word	0x240047f8
 8001268:	240047f4 	.word	0x240047f4
 800126c:	24003ff4 	.word	0x24003ff4

08001270 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001274:	4b1e      	ldr	r3, [pc, #120]	@ (80012f0 <MX_ETH_Init+0x80>)
 8001276:	4a1f      	ldr	r2, [pc, #124]	@ (80012f4 <MX_ETH_Init+0x84>)
 8001278:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800127a:	4b1f      	ldr	r3, [pc, #124]	@ (80012f8 <MX_ETH_Init+0x88>)
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001280:	4b1d      	ldr	r3, [pc, #116]	@ (80012f8 <MX_ETH_Init+0x88>)
 8001282:	2280      	movs	r2, #128	@ 0x80
 8001284:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001286:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <MX_ETH_Init+0x88>)
 8001288:	22e1      	movs	r2, #225	@ 0xe1
 800128a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <MX_ETH_Init+0x88>)
 800128e:	2200      	movs	r2, #0
 8001290:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001292:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <MX_ETH_Init+0x88>)
 8001294:	2200      	movs	r2, #0
 8001296:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001298:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <MX_ETH_Init+0x88>)
 800129a:	2200      	movs	r2, #0
 800129c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800129e:	4b14      	ldr	r3, [pc, #80]	@ (80012f0 <MX_ETH_Init+0x80>)
 80012a0:	4a15      	ldr	r2, [pc, #84]	@ (80012f8 <MX_ETH_Init+0x88>)
 80012a2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <MX_ETH_Init+0x80>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80012aa:	4b11      	ldr	r3, [pc, #68]	@ (80012f0 <MX_ETH_Init+0x80>)
 80012ac:	4a13      	ldr	r2, [pc, #76]	@ (80012fc <MX_ETH_Init+0x8c>)
 80012ae:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80012b0:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <MX_ETH_Init+0x80>)
 80012b2:	4a13      	ldr	r2, [pc, #76]	@ (8001300 <MX_ETH_Init+0x90>)
 80012b4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80012b6:	4b0e      	ldr	r3, [pc, #56]	@ (80012f0 <MX_ETH_Init+0x80>)
 80012b8:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80012bc:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80012be:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <MX_ETH_Init+0x80>)
 80012c0:	f004 f87e 	bl	80053c0 <HAL_ETH_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80012ca:	f000 fc83 	bl	8001bd4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80012ce:	2238      	movs	r2, #56	@ 0x38
 80012d0:	2100      	movs	r1, #0
 80012d2:	480c      	ldr	r0, [pc, #48]	@ (8001304 <MX_ETH_Init+0x94>)
 80012d4:	f01a fd64 	bl	801bda0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <MX_ETH_Init+0x94>)
 80012da:	2221      	movs	r2, #33	@ 0x21
 80012dc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_ETH_Init+0x94>)
 80012e0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80012e4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80012e6:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <MX_ETH_Init+0x94>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	24004834 	.word	0x24004834
 80012f4:	40028000 	.word	0x40028000
 80012f8:	240048e4 	.word	0x240048e4
 80012fc:	24000360 	.word	0x24000360
 8001300:	24000300 	.word	0x24000300
 8001304:	240047fc 	.word	0x240047fc

08001308 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b08e      	sub	sp, #56	@ 0x38
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	60da      	str	r2, [r3, #12]
 800131e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a59      	ldr	r2, [pc, #356]	@ (800148c <HAL_ETH_MspInit+0x184>)
 8001326:	4293      	cmp	r3, r2
 8001328:	f040 80ab 	bne.w	8001482 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800132c:	4b58      	ldr	r3, [pc, #352]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 800132e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001332:	4a57      	ldr	r2, [pc, #348]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 8001334:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001338:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800133c:	4b54      	ldr	r3, [pc, #336]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 800133e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001342:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001346:	623b      	str	r3, [r7, #32]
 8001348:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800134a:	4b51      	ldr	r3, [pc, #324]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 800134c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001350:	4a4f      	ldr	r2, [pc, #316]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 8001352:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001356:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800135a:	4b4d      	ldr	r3, [pc, #308]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 800135c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	61fb      	str	r3, [r7, #28]
 8001366:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001368:	4b49      	ldr	r3, [pc, #292]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 800136a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800136e:	4a48      	ldr	r2, [pc, #288]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 8001370:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001374:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001378:	4b45      	ldr	r3, [pc, #276]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 800137a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800137e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001382:	61bb      	str	r3, [r7, #24]
 8001384:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001386:	4b42      	ldr	r3, [pc, #264]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 8001388:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800138c:	4a40      	ldr	r2, [pc, #256]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001396:	4b3e      	ldr	r3, [pc, #248]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 8001398:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a4:	4b3a      	ldr	r3, [pc, #232]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 80013a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013aa:	4a39      	ldr	r2, [pc, #228]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013b4:	4b36      	ldr	r3, [pc, #216]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 80013b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	4b33      	ldr	r3, [pc, #204]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 80013c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013c8:	4a31      	ldr	r2, [pc, #196]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 80013ca:	f043 0302 	orr.w	r3, r3, #2
 80013ce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013d2:	4b2f      	ldr	r3, [pc, #188]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 80013d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80013e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 80013e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 80013e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f0:	4b27      	ldr	r3, [pc, #156]	@ (8001490 <HAL_ETH_MspInit+0x188>)
 80013f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80013fe:	2332      	movs	r3, #50	@ 0x32
 8001400:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800140e:	230b      	movs	r3, #11
 8001410:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	481e      	ldr	r0, [pc, #120]	@ (8001494 <HAL_ETH_MspInit+0x18c>)
 800141a:	f004 fc05 	bl	8005c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800141e:	2386      	movs	r3, #134	@ 0x86
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800142e:	230b      	movs	r3, #11
 8001430:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001436:	4619      	mov	r1, r3
 8001438:	4817      	ldr	r0, [pc, #92]	@ (8001498 <HAL_ETH_MspInit+0x190>)
 800143a:	f004 fbf5 	bl	8005c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800143e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001444:	2302      	movs	r3, #2
 8001446:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001450:	230b      	movs	r3, #11
 8001452:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001454:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001458:	4619      	mov	r1, r3
 800145a:	4810      	ldr	r0, [pc, #64]	@ (800149c <HAL_ETH_MspInit+0x194>)
 800145c:	f004 fbe4 	bl	8005c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001460:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001466:	2302      	movs	r3, #2
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	2300      	movs	r3, #0
 800146c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800146e:	2300      	movs	r3, #0
 8001470:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001472:	230b      	movs	r3, #11
 8001474:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001476:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147a:	4619      	mov	r1, r3
 800147c:	4808      	ldr	r0, [pc, #32]	@ (80014a0 <HAL_ETH_MspInit+0x198>)
 800147e:	f004 fbd3 	bl	8005c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001482:	bf00      	nop
 8001484:	3738      	adds	r7, #56	@ 0x38
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40028000 	.word	0x40028000
 8001490:	58024400 	.word	0x58024400
 8001494:	58020800 	.word	0x58020800
 8001498:	58020000 	.word	0x58020000
 800149c:	58020400 	.word	0x58020400
 80014a0:	58021800 	.word	0x58021800

080014a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014a8:	4a04      	ldr	r2, [pc, #16]	@ (80014bc <MX_FREERTOS_Init+0x18>)
 80014aa:	2100      	movs	r1, #0
 80014ac:	4804      	ldr	r0, [pc, #16]	@ (80014c0 <MX_FREERTOS_Init+0x1c>)
 80014ae:	f00a f961 	bl	800b774 <osThreadNew>
 80014b2:	4603      	mov	r3, r0
 80014b4:	4a03      	ldr	r2, [pc, #12]	@ (80014c4 <MX_FREERTOS_Init+0x20>)
 80014b6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0801cc68 	.word	0x0801cc68
 80014c0:	08001a09 	.word	0x08001a09
 80014c4:	240048ec 	.word	0x240048ec

080014c8 <MX_GPIO_Init>:
     PA9   ------> USB_OTG_FS_VBUS
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
 80014dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014de:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 80014e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014e4:	4a2e      	ldr	r2, [pc, #184]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 80014e6:	f043 0304 	orr.w	r3, r3, #4
 80014ea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80014ee:	4b2c      	ldr	r3, [pc, #176]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 80014f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	4b28      	ldr	r3, [pc, #160]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 80014fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001502:	4a27      	ldr	r2, [pc, #156]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800150c:	4b24      	ldr	r3, [pc, #144]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 800150e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b21      	ldr	r3, [pc, #132]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 800151c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001520:	4a1f      	ldr	r2, [pc, #124]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 8001522:	f043 0302 	orr.w	r3, r3, #2
 8001526:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800152a:	4b1d      	ldr	r3, [pc, #116]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 800152c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001538:	4b19      	ldr	r3, [pc, #100]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 800153a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800153e:	4a18      	ldr	r2, [pc, #96]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 8001540:	f043 0308 	orr.w	r3, r3, #8
 8001544:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001548:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 800154a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800154e:	f003 0308 	and.w	r3, r3, #8
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001556:	4b12      	ldr	r3, [pc, #72]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 8001558:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800155c:	4a10      	ldr	r2, [pc, #64]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 800155e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001562:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001566:	4b0e      	ldr	r3, [pc, #56]	@ (80015a0 <MX_GPIO_Init+0xd8>)
 8001568:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800156c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001570:	603b      	str	r3, [r7, #0]
 8001572:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001574:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001586:	230a      	movs	r3, #10
 8001588:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4804      	ldr	r0, [pc, #16]	@ (80015a4 <MX_GPIO_Init+0xdc>)
 8001592:	f004 fb49 	bl	8005c28 <HAL_GPIO_Init>

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	@ 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	58024400 	.word	0x58024400
 80015a4:	58020000 	.word	0x58020000

080015a8 <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <MX_IWDG1_Init+0x34>)
 80015ae:	4a0c      	ldr	r2, [pc, #48]	@ (80015e0 <MX_IWDG1_Init+0x38>)
 80015b0:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_4;
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <MX_IWDG1_Init+0x34>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 4095;
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <MX_IWDG1_Init+0x34>)
 80015ba:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80015be:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 2499;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_IWDG1_Init+0x34>)
 80015c2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80015c6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80015c8:	4804      	ldr	r0, [pc, #16]	@ (80015dc <MX_IWDG1_Init+0x34>)
 80015ca:	f004 fd37 	bl	800603c <HAL_IWDG_Init>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 80015d4:	f000 fafe 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	2400976c 	.word	0x2400976c
 80015e0:	58004800 	.word	0x58004800

080015e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80015ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80015ee:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80015f0:	bf00      	nop
 80015f2:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <main+0xb4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d004      	beq.n	8001608 <main+0x24>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	1e5a      	subs	r2, r3, #1
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	dcf4      	bgt.n	80015f2 <main+0xe>
  if ( timeout < 0 )
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	da01      	bge.n	8001612 <main+0x2e>
  {
  Error_Handler();
 800160e:	f000 fae1 	bl	8001bd4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001612:	f000 ff31 	bl	8002478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001616:	f000 f841 	bl	800169c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800161a:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <main+0xb4>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001620:	4a1d      	ldr	r2, [pc, #116]	@ (8001698 <main+0xb4>)
 8001622:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800162a:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <main+0xb4>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001630:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001634:	603b      	str	r3, [r7, #0]
 8001636:	683b      	ldr	r3, [r7, #0]
/* Activate HSEM notification for Cortex-M4*/
	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8001638:	2001      	movs	r0, #1
 800163a:	f004 fcd3 	bl	8005fe4 <HAL_HSEM_ActivateNotification>
//	HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));

/*Take HSEM0 */
HAL_HSEM_FastTake(HSEM_ID_0);
 800163e:	2000      	movs	r0, #0
 8001640:	f004 fca2 	bl	8005f88 <HAL_HSEM_FastTake>
///*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8001644:	2100      	movs	r1, #0
 8001646:	2000      	movs	r0, #0
 8001648:	f004 fcb8 	bl	8005fbc <HAL_HSEM_Release>
//HAL_HSEM_FastTake(HSEM_ID_1);
/*Release HSEM in order to notify the CPU2(CM4)*/
//HAL_HSEM_Release(HSEM_ID_1,0);

/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800164c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001650:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001652:	bf00      	nop
 8001654:	4b10      	ldr	r3, [pc, #64]	@ (8001698 <main+0xb4>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d104      	bne.n	800166a <main+0x86>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	1e5a      	subs	r2, r3, #1
 8001664:	607a      	str	r2, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	dcf4      	bgt.n	8001654 <main+0x70>
if ( timeout < 0 )
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2b00      	cmp	r3, #0
 800166e:	da01      	bge.n	8001674 <main+0x90>
{
Error_Handler();
 8001670:	f000 fab0 	bl	8001bd4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001674:	f7ff ff28 	bl	80014c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001678:	f7ff fc8c 	bl	8000f94 <MX_DMA_Init>
  MX_ETH_Init();
 800167c:	f7ff fdf8 	bl	8001270 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001680:	f000 fdaa 	bl	80021d8 <MX_USART3_UART_Init>
  MX_IWDG1_Init();
 8001684:	f7ff ff90 	bl	80015a8 <MX_IWDG1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001688:	f00a f82a 	bl	800b6e0 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800168c:	f7ff ff0a 	bl	80014a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001690:	f00a f84a 	bl	800b728 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <main+0xb0>
 8001698:	58024400 	.word	0x58024400

0800169c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b09c      	sub	sp, #112	@ 0x70
 80016a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016a6:	224c      	movs	r2, #76	@ 0x4c
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f01a fb78 	bl	801bda0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	2220      	movs	r2, #32
 80016b4:	2100      	movs	r1, #0
 80016b6:	4618      	mov	r0, r3
 80016b8:	f01a fb72 	bl	801bda0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80016bc:	2004      	movs	r0, #4
 80016be:	f004 fd1d 	bl	80060fc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016c2:	2300      	movs	r3, #0
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	4b36      	ldr	r3, [pc, #216]	@ (80017a0 <SystemClock_Config+0x104>)
 80016c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ca:	4a35      	ldr	r2, [pc, #212]	@ (80017a0 <SystemClock_Config+0x104>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80016d2:	4b33      	ldr	r3, [pc, #204]	@ (80017a0 <SystemClock_Config+0x104>)
 80016d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	603b      	str	r3, [r7, #0]
 80016dc:	4b31      	ldr	r3, [pc, #196]	@ (80017a4 <SystemClock_Config+0x108>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016e4:	4a2f      	ldr	r2, [pc, #188]	@ (80017a4 <SystemClock_Config+0x108>)
 80016e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ea:	6193      	str	r3, [r2, #24]
 80016ec:	4b2d      	ldr	r3, [pc, #180]	@ (80017a4 <SystemClock_Config+0x108>)
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80016f8:	bf00      	nop
 80016fa:	4b2a      	ldr	r3, [pc, #168]	@ (80017a4 <SystemClock_Config+0x108>)
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001706:	d1f8      	bne.n	80016fa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001708:	2309      	movs	r3, #9
 800170a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800170c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001710:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001712:	2301      	movs	r3, #1
 8001714:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001716:	2302      	movs	r3, #2
 8001718:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171a:	2302      	movs	r3, #2
 800171c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800171e:	2301      	movs	r3, #1
 8001720:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001722:	232a      	movs	r3, #42	@ 0x2a
 8001724:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001726:	2302      	movs	r3, #2
 8001728:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800172a:	2304      	movs	r3, #4
 800172c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800172e:	2302      	movs	r3, #2
 8001730:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001732:	230c      	movs	r3, #12
 8001734:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001736:	2300      	movs	r3, #0
 8001738:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 4096;
 800173a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800173e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001740:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001744:	4618      	mov	r0, r3
 8001746:	f004 fd33 	bl	80061b0 <HAL_RCC_OscConfig>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001750:	f000 fa40 	bl	8001bd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001754:	233f      	movs	r3, #63	@ 0x3f
 8001756:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001758:	2303      	movs	r3, #3
 800175a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001760:	2300      	movs	r3, #0
 8001762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001764:	2340      	movs	r3, #64	@ 0x40
 8001766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV4;
 8001768:	2350      	movs	r3, #80	@ 0x50
 800176a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800176c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001770:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001772:	2340      	movs	r3, #64	@ 0x40
 8001774:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	2103      	movs	r1, #3
 800177a:	4618      	mov	r0, r3
 800177c:	f005 f972 	bl	8006a64 <HAL_RCC_ClockConfig>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001786:	f000 fa25 	bl	8001bd4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_SYSCLK, RCC_MCODIV_1);
 800178a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800178e:	2100      	movs	r1, #0
 8001790:	2001      	movs	r0, #1
 8001792:	f005 fb1d 	bl	8006dd0 <HAL_RCC_MCOConfig>
}
 8001796:	bf00      	nop
 8001798:	3770      	adds	r7, #112	@ 0x70
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	58000400 	.word	0x58000400
 80017a4:	58024800 	.word	0x58024800

080017a8 <timer_callback>:

/* USER CODE BEGIN 4 */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL) {
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d019      	beq.n	80017ee <timer_callback+0x46>

			// BNO086 Data
			BNO086_READ_HSEM(&IMU_086);
 80017ba:	480f      	ldr	r0, [pc, #60]	@ (80017f8 <timer_callback+0x50>)
 80017bc:	f7ff f846 	bl	800084c <BNO086_READ_HSEM>
//			BNO086_Published();

			// BNO055 Data
			BNO055_READ_HSEM(&IMU_055);
 80017c0:	480e      	ldr	r0, [pc, #56]	@ (80017fc <timer_callback+0x54>)
 80017c2:	f7fe ffbd 	bl	8000740 <BNO055_READ_HSEM>
//			BNO055_Published();

			SensorsPublished();
 80017c6:	f000 f81f 	bl	8001808 <SensorsPublished>


			if (sync_counter++ >= 300) {  // Sync session at lower frequency
 80017ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <timer_callback+0x58>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	1c5a      	adds	r2, r3, #1
 80017d0:	490b      	ldr	r1, [pc, #44]	@ (8001800 <timer_callback+0x58>)
 80017d2:	600a      	str	r2, [r1, #0]
 80017d4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 80017d8:	db06      	blt.n	80017e8 <timer_callback+0x40>
				rmw_uros_sync_session(1000);
 80017da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017de:	f00e fd41 	bl	8010264 <rmw_uros_sync_session>
				sync_counter = 0;
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <timer_callback+0x58>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
			}
			// Synchronize time with the agent
//			rmw_uros_sync_session(1000);
			HAL_IWDG_Refresh(&hiwdg1);
 80017e8:	4806      	ldr	r0, [pc, #24]	@ (8001804 <timer_callback+0x5c>)
 80017ea:	f004 fc76 	bl	80060da <HAL_IWDG_Refresh>
		}

}
 80017ee:	bf00      	nop
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	240099c0 	.word	0x240099c0
 80017fc:	240098d8 	.word	0x240098d8
 8001800:	2400985c 	.word	0x2400985c
 8001804:	2400976c 	.word	0x2400976c

08001808 <SensorsPublished>:

void SensorsPublished(){
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
//    f32array_msg.data.size = 29;      // Set size of the array
//    f32array_msg.data.data = (float*)malloc(sizeof(float) * f32array_msg.data.size);


    // IMU_086 acceleration
    f32array_msg.data.data[0] = IMU_086.acceleration.x;
 800180c:	4b7a      	ldr	r3, [pc, #488]	@ (80019f8 <SensorsPublished+0x1f0>)
 800180e:	691b      	ldr	r3, [r3, #16]
 8001810:	4a7a      	ldr	r2, [pc, #488]	@ (80019fc <SensorsPublished+0x1f4>)
 8001812:	6912      	ldr	r2, [r2, #16]
 8001814:	601a      	str	r2, [r3, #0]
    f32array_msg.data.data[1] = IMU_086.acceleration.y;
 8001816:	4b78      	ldr	r3, [pc, #480]	@ (80019f8 <SensorsPublished+0x1f0>)
 8001818:	691b      	ldr	r3, [r3, #16]
 800181a:	3304      	adds	r3, #4
 800181c:	4a77      	ldr	r2, [pc, #476]	@ (80019fc <SensorsPublished+0x1f4>)
 800181e:	6952      	ldr	r2, [r2, #20]
 8001820:	601a      	str	r2, [r3, #0]
    f32array_msg.data.data[2] = IMU_086.acceleration.z;
 8001822:	4b75      	ldr	r3, [pc, #468]	@ (80019f8 <SensorsPublished+0x1f0>)
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	3308      	adds	r3, #8
 8001828:	4a74      	ldr	r2, [pc, #464]	@ (80019fc <SensorsPublished+0x1f4>)
 800182a:	6992      	ldr	r2, [r2, #24]
 800182c:	601a      	str	r2, [r3, #0]

    // IMU_086 linear acceleration
    f32array_msg.data.data[3] = IMU_086.linear_acceleration.x;
 800182e:	4b72      	ldr	r3, [pc, #456]	@ (80019f8 <SensorsPublished+0x1f0>)
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	330c      	adds	r3, #12
 8001834:	4a71      	ldr	r2, [pc, #452]	@ (80019fc <SensorsPublished+0x1f4>)
 8001836:	69d2      	ldr	r2, [r2, #28]
 8001838:	601a      	str	r2, [r3, #0]
    f32array_msg.data.data[4] = IMU_086.linear_acceleration.y;
 800183a:	4b6f      	ldr	r3, [pc, #444]	@ (80019f8 <SensorsPublished+0x1f0>)
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	3310      	adds	r3, #16
 8001840:	4a6e      	ldr	r2, [pc, #440]	@ (80019fc <SensorsPublished+0x1f4>)
 8001842:	6a12      	ldr	r2, [r2, #32]
 8001844:	601a      	str	r2, [r3, #0]
    f32array_msg.data.data[5] = IMU_086.linear_acceleration.z;
 8001846:	4b6c      	ldr	r3, [pc, #432]	@ (80019f8 <SensorsPublished+0x1f0>)
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	3314      	adds	r3, #20
 800184c:	4a6b      	ldr	r2, [pc, #428]	@ (80019fc <SensorsPublished+0x1f4>)
 800184e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001850:	601a      	str	r2, [r3, #0]

    // IMU_086 angular velocity
    f32array_msg.data.data[6] = IMU_086.angular_velocity.x;
 8001852:	4b69      	ldr	r3, [pc, #420]	@ (80019f8 <SensorsPublished+0x1f0>)
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	3318      	adds	r3, #24
 8001858:	4a68      	ldr	r2, [pc, #416]	@ (80019fc <SensorsPublished+0x1f4>)
 800185a:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800185c:	601a      	str	r2, [r3, #0]
    f32array_msg.data.data[7] = IMU_086.angular_velocity.y;
 800185e:	4b66      	ldr	r3, [pc, #408]	@ (80019f8 <SensorsPublished+0x1f0>)
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	331c      	adds	r3, #28
 8001864:	4a65      	ldr	r2, [pc, #404]	@ (80019fc <SensorsPublished+0x1f4>)
 8001866:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001868:	601a      	str	r2, [r3, #0]
    f32array_msg.data.data[8] = IMU_086.angular_velocity.z;
 800186a:	4b63      	ldr	r3, [pc, #396]	@ (80019f8 <SensorsPublished+0x1f0>)
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	3320      	adds	r3, #32
 8001870:	4a62      	ldr	r2, [pc, #392]	@ (80019fc <SensorsPublished+0x1f4>)
 8001872:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001874:	601a      	str	r2, [r3, #0]

    // IMU_086 magnetometer
    f32array_msg.data.data[9] = IMU_086.magnetometer.x;
 8001876:	4b60      	ldr	r3, [pc, #384]	@ (80019f8 <SensorsPublished+0x1f0>)
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	3324      	adds	r3, #36	@ 0x24
 800187c:	4a5f      	ldr	r2, [pc, #380]	@ (80019fc <SensorsPublished+0x1f4>)
 800187e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001880:	601a      	str	r2, [r3, #0]
    f32array_msg.data.data[10] = IMU_086.magnetometer.y;
 8001882:	4b5d      	ldr	r3, [pc, #372]	@ (80019f8 <SensorsPublished+0x1f0>)
 8001884:	691b      	ldr	r3, [r3, #16]
 8001886:	3328      	adds	r3, #40	@ 0x28
 8001888:	4a5c      	ldr	r2, [pc, #368]	@ (80019fc <SensorsPublished+0x1f4>)
 800188a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800188c:	601a      	str	r2, [r3, #0]
    f32array_msg.data.data[11] = IMU_086.magnetometer.z;
 800188e:	4b5a      	ldr	r3, [pc, #360]	@ (80019f8 <SensorsPublished+0x1f0>)
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	332c      	adds	r3, #44	@ 0x2c
 8001894:	4a59      	ldr	r2, [pc, #356]	@ (80019fc <SensorsPublished+0x1f4>)
 8001896:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001898:	601a      	str	r2, [r3, #0]

    // IMU_086 euler angles
    f32array_msg.data.data[12] = IMU_086.euler_angle.roll;
 800189a:	4b57      	ldr	r3, [pc, #348]	@ (80019f8 <SensorsPublished+0x1f0>)
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	3330      	adds	r3, #48	@ 0x30
 80018a0:	4a56      	ldr	r2, [pc, #344]	@ (80019fc <SensorsPublished+0x1f4>)
 80018a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80018a4:	601a      	str	r2, [r3, #0]
    f32array_msg.data.data[13] = IMU_086.euler_angle.pitch;
 80018a6:	4b54      	ldr	r3, [pc, #336]	@ (80019f8 <SensorsPublished+0x1f0>)
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	3334      	adds	r3, #52	@ 0x34
 80018ac:	4a53      	ldr	r2, [pc, #332]	@ (80019fc <SensorsPublished+0x1f4>)
 80018ae:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80018b0:	601a      	str	r2, [r3, #0]
    f32array_msg.data.data[14] = IMU_086.euler_angle.yaw;
 80018b2:	4b51      	ldr	r3, [pc, #324]	@ (80019f8 <SensorsPublished+0x1f0>)
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	3338      	adds	r3, #56	@ 0x38
 80018b8:	4a50      	ldr	r2, [pc, #320]	@ (80019fc <SensorsPublished+0x1f4>)
 80018ba:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018bc:	601a      	str	r2, [r3, #0]

    // IMU_055 acceleration
    f32array_msg.data.data[15] = IMU_055.accel.x;
 80018be:	4b50      	ldr	r3, [pc, #320]	@ (8001a00 <SensorsPublished+0x1f8>)
 80018c0:	ed93 7b02 	vldr	d7, [r3, #8]
 80018c4:	4b4c      	ldr	r3, [pc, #304]	@ (80019f8 <SensorsPublished+0x1f0>)
 80018c6:	691b      	ldr	r3, [r3, #16]
 80018c8:	333c      	adds	r3, #60	@ 0x3c
 80018ca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018ce:	edc3 7a00 	vstr	s15, [r3]
    f32array_msg.data.data[16] = IMU_055.accel.y;
 80018d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001a00 <SensorsPublished+0x1f8>)
 80018d4:	ed93 7b04 	vldr	d7, [r3, #16]
 80018d8:	4b47      	ldr	r3, [pc, #284]	@ (80019f8 <SensorsPublished+0x1f0>)
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	3340      	adds	r3, #64	@ 0x40
 80018de:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018e2:	edc3 7a00 	vstr	s15, [r3]
    f32array_msg.data.data[17] = IMU_055.accel.z;
 80018e6:	4b46      	ldr	r3, [pc, #280]	@ (8001a00 <SensorsPublished+0x1f8>)
 80018e8:	ed93 7b06 	vldr	d7, [r3, #24]
 80018ec:	4b42      	ldr	r3, [pc, #264]	@ (80019f8 <SensorsPublished+0x1f0>)
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	3344      	adds	r3, #68	@ 0x44
 80018f2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80018f6:	edc3 7a00 	vstr	s15, [r3]

    // IMU_055 linear acceleration
    f32array_msg.data.data[18] = IMU_055.lin_acc.x;
 80018fa:	4b41      	ldr	r3, [pc, #260]	@ (8001a00 <SensorsPublished+0x1f8>)
 80018fc:	ed93 7b22 	vldr	d7, [r3, #136]	@ 0x88
 8001900:	4b3d      	ldr	r3, [pc, #244]	@ (80019f8 <SensorsPublished+0x1f0>)
 8001902:	691b      	ldr	r3, [r3, #16]
 8001904:	3348      	adds	r3, #72	@ 0x48
 8001906:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800190a:	edc3 7a00 	vstr	s15, [r3]
    f32array_msg.data.data[19] = IMU_055.lin_acc.y;
 800190e:	4b3c      	ldr	r3, [pc, #240]	@ (8001a00 <SensorsPublished+0x1f8>)
 8001910:	ed93 7b24 	vldr	d7, [r3, #144]	@ 0x90
 8001914:	4b38      	ldr	r3, [pc, #224]	@ (80019f8 <SensorsPublished+0x1f0>)
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	334c      	adds	r3, #76	@ 0x4c
 800191a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800191e:	edc3 7a00 	vstr	s15, [r3]
    f32array_msg.data.data[20] = IMU_055.lin_acc.z;
 8001922:	4b37      	ldr	r3, [pc, #220]	@ (8001a00 <SensorsPublished+0x1f8>)
 8001924:	ed93 7b26 	vldr	d7, [r3, #152]	@ 0x98
 8001928:	4b33      	ldr	r3, [pc, #204]	@ (80019f8 <SensorsPublished+0x1f0>)
 800192a:	691b      	ldr	r3, [r3, #16]
 800192c:	3350      	adds	r3, #80	@ 0x50
 800192e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001932:	edc3 7a00 	vstr	s15, [r3]

    // IMU_055 gyro (angular velocity)
    f32array_msg.data.data[21] = IMU_055.gyro.x;
 8001936:	4b32      	ldr	r3, [pc, #200]	@ (8001a00 <SensorsPublished+0x1f8>)
 8001938:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 800193c:	4b2e      	ldr	r3, [pc, #184]	@ (80019f8 <SensorsPublished+0x1f0>)
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	3354      	adds	r3, #84	@ 0x54
 8001942:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001946:	edc3 7a00 	vstr	s15, [r3]
    f32array_msg.data.data[22] = IMU_055.gyro.y;
 800194a:	4b2d      	ldr	r3, [pc, #180]	@ (8001a00 <SensorsPublished+0x1f8>)
 800194c:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8001950:	4b29      	ldr	r3, [pc, #164]	@ (80019f8 <SensorsPublished+0x1f0>)
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	3358      	adds	r3, #88	@ 0x58
 8001956:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800195a:	edc3 7a00 	vstr	s15, [r3]
    f32array_msg.data.data[23] = IMU_055.gyro.z;
 800195e:	4b28      	ldr	r3, [pc, #160]	@ (8001a00 <SensorsPublished+0x1f8>)
 8001960:	ed93 7b12 	vldr	d7, [r3, #72]	@ 0x48
 8001964:	4b24      	ldr	r3, [pc, #144]	@ (80019f8 <SensorsPublished+0x1f0>)
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	335c      	adds	r3, #92	@ 0x5c
 800196a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800196e:	edc3 7a00 	vstr	s15, [r3]

    // IMU_055 magnetometer
    f32array_msg.data.data[24] = IMU_055.mag.x;
 8001972:	4b23      	ldr	r3, [pc, #140]	@ (8001a00 <SensorsPublished+0x1f8>)
 8001974:	ed93 7b08 	vldr	d7, [r3, #32]
 8001978:	4b1f      	ldr	r3, [pc, #124]	@ (80019f8 <SensorsPublished+0x1f0>)
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	3360      	adds	r3, #96	@ 0x60
 800197e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001982:	edc3 7a00 	vstr	s15, [r3]
    f32array_msg.data.data[25] = IMU_055.mag.y;
 8001986:	4b1e      	ldr	r3, [pc, #120]	@ (8001a00 <SensorsPublished+0x1f8>)
 8001988:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800198c:	4b1a      	ldr	r3, [pc, #104]	@ (80019f8 <SensorsPublished+0x1f0>)
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	3364      	adds	r3, #100	@ 0x64
 8001992:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001996:	edc3 7a00 	vstr	s15, [r3]
    f32array_msg.data.data[26] = IMU_055.mag.z;
 800199a:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <SensorsPublished+0x1f8>)
 800199c:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80019a0:	4b15      	ldr	r3, [pc, #84]	@ (80019f8 <SensorsPublished+0x1f0>)
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	3368      	adds	r3, #104	@ 0x68
 80019a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019aa:	edc3 7a00 	vstr	s15, [r3]

    // IMU_055 euler angles
    f32array_msg.data.data[27] = IMU_055.euler.roll;
 80019ae:	4b14      	ldr	r3, [pc, #80]	@ (8001a00 <SensorsPublished+0x1f8>)
 80019b0:	ed93 7b14 	vldr	d7, [r3, #80]	@ 0x50
 80019b4:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <SensorsPublished+0x1f0>)
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	336c      	adds	r3, #108	@ 0x6c
 80019ba:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019be:	edc3 7a00 	vstr	s15, [r3]
    f32array_msg.data.data[28] = IMU_055.euler.pitch;
 80019c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a00 <SensorsPublished+0x1f8>)
 80019c4:	ed93 7b16 	vldr	d7, [r3, #88]	@ 0x58
 80019c8:	4b0b      	ldr	r3, [pc, #44]	@ (80019f8 <SensorsPublished+0x1f0>)
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	3370      	adds	r3, #112	@ 0x70
 80019ce:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019d2:	edc3 7a00 	vstr	s15, [r3]
    f32array_msg.data.data[29] = IMU_055.euler.yaw;
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <SensorsPublished+0x1f8>)
 80019d8:	ed93 7b18 	vldr	d7, [r3, #96]	@ 0x60
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <SensorsPublished+0x1f0>)
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	3374      	adds	r3, #116	@ 0x74
 80019e2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80019e6:	edc3 7a00 	vstr	s15, [r3]


	RCCHECK(rcl_publish(&f32array_pub, &f32array_msg, NULL));
 80019ea:	2200      	movs	r2, #0
 80019ec:	4902      	ldr	r1, [pc, #8]	@ (80019f8 <SensorsPublished+0x1f0>)
 80019ee:	4805      	ldr	r0, [pc, #20]	@ (8001a04 <SensorsPublished+0x1fc>)
 80019f0:	f00c fdf2 	bl	800e5d8 <rcl_publish>

}
 80019f4:	bf00      	nop
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	24000008 	.word	0x24000008
 80019fc:	240099c0 	.word	0x240099c0
 8001a00:	240098d8 	.word	0x240098d8
 8001a04:	24009860 	.word	0x24009860

08001a08 <StartDefaultTask>:
//
//
//}

void StartDefaultTask(void *argument)
{
 8001a08:	b5b0      	push	{r4, r5, r7, lr}
 8001a0a:	b0b2      	sub	sp, #200	@ 0xc8
 8001a0c:	af02      	add	r7, sp, #8
 8001a0e:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

  rmw_uros_set_custom_transport(
 8001a12:	4b45      	ldr	r3, [pc, #276]	@ (8001b28 <StartDefaultTask+0x120>)
 8001a14:	9301      	str	r3, [sp, #4]
 8001a16:	4b45      	ldr	r3, [pc, #276]	@ (8001b2c <StartDefaultTask+0x124>)
 8001a18:	9300      	str	r3, [sp, #0]
 8001a1a:	4b45      	ldr	r3, [pc, #276]	@ (8001b30 <StartDefaultTask+0x128>)
 8001a1c:	4a45      	ldr	r2, [pc, #276]	@ (8001b34 <StartDefaultTask+0x12c>)
 8001a1e:	4946      	ldr	r1, [pc, #280]	@ (8001b38 <StartDefaultTask+0x130>)
 8001a20:	2001      	movs	r0, #1
 8001a22:	f00d fe11 	bl	800f648 <rmw_uros_set_custom_transport>
    cubemx_transport_open,
    cubemx_transport_close,
    cubemx_transport_write,
    cubemx_transport_read);

  rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001a26:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f00d fd2e 	bl	800f48c <rcutils_get_zero_initialized_allocator>
  freeRTOS_allocator.allocate = microros_allocate;
 8001a30:	4b42      	ldr	r3, [pc, #264]	@ (8001b3c <StartDefaultTask+0x134>)
 8001a32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  freeRTOS_allocator.deallocate = microros_deallocate;
 8001a36:	4b42      	ldr	r3, [pc, #264]	@ (8001b40 <StartDefaultTask+0x138>)
 8001a38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  freeRTOS_allocator.reallocate = microros_reallocate;
 8001a3c:	4b41      	ldr	r3, [pc, #260]	@ (8001b44 <StartDefaultTask+0x13c>)
 8001a3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001a42:	4b41      	ldr	r3, [pc, #260]	@ (8001b48 <StartDefaultTask+0x140>)
 8001a44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

  if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001a48:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f00d fd2b 	bl	800f4a8 <rcutils_set_default_allocator>
 8001a52:	4603      	mov	r3, r0
 8001a54:	f083 0301 	eor.w	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d004      	beq.n	8001a68 <StartDefaultTask+0x60>
      printf("Error on default allocators (line %d)\n", __LINE__);
 8001a5e:	f240 11c9 	movw	r1, #457	@ 0x1c9
 8001a62:	483a      	ldr	r0, [pc, #232]	@ (8001b4c <StartDefaultTask+0x144>)
 8001a64:	f01a f81c 	bl	801baa0 <iprintf>

  // micro-ROS app



  allocator = rcl_get_default_allocator();
 8001a68:	4c39      	ldr	r4, [pc, #228]	@ (8001b50 <StartDefaultTask+0x148>)
 8001a6a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f00d fd38 	bl	800f4e4 <rcutils_get_default_allocator>
 8001a74:	4625      	mov	r5, r4
 8001a76:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001a7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a7e:	6823      	ldr	r3, [r4, #0]
 8001a80:	602b      	str	r3, [r5, #0]

  //create init_options
    init_options = rcl_get_zero_initialized_init_options();
 8001a82:	f00c fbd3 	bl	800e22c <rcl_get_zero_initialized_init_options>
 8001a86:	4603      	mov	r3, r0
 8001a88:	4a32      	ldr	r2, [pc, #200]	@ (8001b54 <StartDefaultTask+0x14c>)
 8001a8a:	6013      	str	r3, [r2, #0]
    RCCHECK(rcl_init_options_init(&init_options, allocator));
 8001a8c:	4b30      	ldr	r3, [pc, #192]	@ (8001b50 <StartDefaultTask+0x148>)
 8001a8e:	466c      	mov	r4, sp
 8001a90:	f103 020c 	add.w	r2, r3, #12
 8001a94:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a98:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a9e:	482d      	ldr	r0, [pc, #180]	@ (8001b54 <StartDefaultTask+0x14c>)
 8001aa0:	f00c fbc6 	bl	800e230 <rcl_init_options_init>
    RCCHECK(rcl_init_options_set_domain_id(&init_options, 88));
 8001aa4:	2158      	movs	r1, #88	@ 0x58
 8001aa6:	482b      	ldr	r0, [pc, #172]	@ (8001b54 <StartDefaultTask+0x14c>)
 8001aa8:	f00c fcc0 	bl	800e42c <rcl_init_options_set_domain_id>

  //  rclc_support_init(&support, 0, NULL, &allocator);
   rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001aac:	4b28      	ldr	r3, [pc, #160]	@ (8001b50 <StartDefaultTask+0x148>)
 8001aae:	9300      	str	r3, [sp, #0]
 8001ab0:	4b28      	ldr	r3, [pc, #160]	@ (8001b54 <StartDefaultTask+0x14c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	4828      	ldr	r0, [pc, #160]	@ (8001b58 <StartDefaultTask+0x150>)
 8001ab8:	f00d fbfe 	bl	800f2b8 <rclc_support_init_with_options>

   rclc_node_init_default(&node, "imu_cubemx_node", "", &support);
 8001abc:	4b26      	ldr	r3, [pc, #152]	@ (8001b58 <StartDefaultTask+0x150>)
 8001abe:	4a27      	ldr	r2, [pc, #156]	@ (8001b5c <StartDefaultTask+0x154>)
 8001ac0:	4927      	ldr	r1, [pc, #156]	@ (8001b60 <StartDefaultTask+0x158>)
 8001ac2:	4828      	ldr	r0, [pc, #160]	@ (8001b64 <StartDefaultTask+0x15c>)
 8001ac4:	f00d fc2e 	bl	800f324 <rclc_node_init_default>

  // create publisher

   rclc_publisher_init_best_effort(
 8001ac8:	f00e ff54 	bl	8010974 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b26      	ldr	r3, [pc, #152]	@ (8001b68 <StartDefaultTask+0x160>)
 8001ad0:	4924      	ldr	r1, [pc, #144]	@ (8001b64 <StartDefaultTask+0x15c>)
 8001ad2:	4826      	ldr	r0, [pc, #152]	@ (8001b6c <StartDefaultTask+0x164>)
 8001ad4:	f00d fc68 	bl	800f3a8 <rclc_publisher_init_best_effort>
//  bno055_imu_msg.header.frame_id = micro_ros_string_utilities_init("bno55_imu_frame");
//  bno055_magnetic_field_msg.header.frame_id = micro_ros_string_utilities_init("bno055_magnetic_field_frame");


  // create timer
  rclc_timer_init_default(&timer_, &support, RCL_MS_TO_NS(0.1), timer_callback);
 8001ad8:	4b25      	ldr	r3, [pc, #148]	@ (8001b70 <StartDefaultTask+0x168>)
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	4a25      	ldr	r2, [pc, #148]	@ (8001b74 <StartDefaultTask+0x16c>)
 8001ade:	f04f 0300 	mov.w	r3, #0
 8001ae2:	491d      	ldr	r1, [pc, #116]	@ (8001b58 <StartDefaultTask+0x150>)
 8001ae4:	4824      	ldr	r0, [pc, #144]	@ (8001b78 <StartDefaultTask+0x170>)
 8001ae6:	f00d fc99 	bl	800f41c <rclc_timer_init_default>

  rmw_uros_sync_session(1000);
 8001aea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001aee:	f00e fbb9 	bl	8010264 <rmw_uros_sync_session>


  executor = rclc_executor_get_zero_initialized_executor();
 8001af2:	4c22      	ldr	r4, [pc, #136]	@ (8001b7c <StartDefaultTask+0x174>)
 8001af4:	463b      	mov	r3, r7
 8001af6:	4618      	mov	r0, r3
 8001af8:	f00d f8fc 	bl	800ecf4 <rclc_executor_get_zero_initialized_executor>
 8001afc:	4620      	mov	r0, r4
 8001afe:	463b      	mov	r3, r7
 8001b00:	2288      	movs	r2, #136	@ 0x88
 8001b02:	4619      	mov	r1, r3
 8001b04:	f01a fa15 	bl	801bf32 <memcpy>
  rclc_executor_init(&executor, &support.context, 1, &allocator);
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <StartDefaultTask+0x148>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	4912      	ldr	r1, [pc, #72]	@ (8001b58 <StartDefaultTask+0x150>)
 8001b0e:	481b      	ldr	r0, [pc, #108]	@ (8001b7c <StartDefaultTask+0x174>)
 8001b10:	f00d f8fa 	bl	800ed08 <rclc_executor_init>
  rclc_executor_add_timer(&executor, &timer_); // add timer
 8001b14:	4918      	ldr	r1, [pc, #96]	@ (8001b78 <StartDefaultTask+0x170>)
 8001b16:	4819      	ldr	r0, [pc, #100]	@ (8001b7c <StartDefaultTask+0x174>)
 8001b18:	f00d f972 	bl	800ee00 <rclc_executor_add_timer>
  rclc_executor_spin(&executor);
 8001b1c:	4817      	ldr	r0, [pc, #92]	@ (8001b7c <StartDefaultTask+0x174>)
 8001b1e:	f00d fb89 	bl	800f234 <rclc_executor_spin>

  for(;;)
 8001b22:	bf00      	nop
 8001b24:	e7fd      	b.n	8001b22 <StartDefaultTask+0x11a>
 8001b26:	bf00      	nop
 8001b28:	08001095 	.word	0x08001095
 8001b2c:	08001031 	.word	0x08001031
 8001b30:	08001011 	.word	0x08001011
 8001b34:	08000fe5 	.word	0x08000fe5
 8001b38:	24009a68 	.word	0x24009a68
 8001b3c:	08001be1 	.word	0x08001be1
 8001b40:	08001c25 	.word	0x08001c25
 8001b44:	08001c5d 	.word	0x08001c5d
 8001b48:	08001cc9 	.word	0x08001cc9
 8001b4c:	0801cbdc 	.word	0x0801cbdc
 8001b50:	240097b0 	.word	0x240097b0
 8001b54:	240097cc 	.word	0x240097cc
 8001b58:	2400977c 	.word	0x2400977c
 8001b5c:	0801cc04 	.word	0x0801cc04
 8001b60:	0801cc08 	.word	0x0801cc08
 8001b64:	240097c4 	.word	0x240097c4
 8001b68:	0801cc18 	.word	0x0801cc18
 8001b6c:	24009860 	.word	0x24009860
 8001b70:	080017a9 	.word	0x080017a9
 8001b74:	000186a0 	.word	0x000186a0
 8001b78:	24009858 	.word	0x24009858
 8001b7c:	240097d0 	.word	0x240097d0

08001b80 <HAL_HSEM_FreeCallback>:
//    osDelay(1);
  }
  /* USER CODE END 5 */
}

void HAL_HSEM_FreeCallback(uint32_t SemMask){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]

	if (SemMask & (1 << HSEM_ID_0)) {
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d002      	beq.n	8001b98 <HAL_HSEM_FreeCallback+0x18>
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8001b92:	2001      	movs	r0, #1
 8001b94:	f004 fa26 	bl	8005fe4 <HAL_HSEM_ActivateNotification>

	    }

	if (SemMask & (1 << HSEM_ID_1)) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d002      	beq.n	8001ba8 <HAL_HSEM_FreeCallback+0x28>
		HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_1));
 8001ba2:	2002      	movs	r0, #2
 8001ba4:	f004 fa1e 	bl	8005fe4 <HAL_HSEM_ActivateNotification>
	}
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a04      	ldr	r2, [pc, #16]	@ (8001bd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001bc2:	f000 fc95 	bl	80024f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40010000 	.word	0x40010000

08001bd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd8:	b672      	cpsid	i
}
 8001bda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bdc:	bf00      	nop
 8001bde:	e7fd      	b.n	8001bdc <Error_Handler+0x8>

08001be0 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001bea:	4b0c      	ldr	r3, [pc, #48]	@ (8001c1c <microros_allocate+0x3c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	461a      	mov	r2, r3
 8001bf6:	4b09      	ldr	r3, [pc, #36]	@ (8001c1c <microros_allocate+0x3c>)
 8001bf8:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001bfa:	4b09      	ldr	r3, [pc, #36]	@ (8001c20 <microros_allocate+0x40>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	4413      	add	r3, r2
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <microros_allocate+0x40>)
 8001c08:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7fe ff72 	bl	8000af4 <pvPortMallocMicroROS>
 8001c10:	4603      	mov	r3, r0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3708      	adds	r7, #8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	24009a0c 	.word	0x24009a0c
 8001c20:	24009a10 	.word	0x24009a10

08001c24 <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d00c      	beq.n	8001c4e <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f7ff f881 	bl	8000d3c <getBlockSize>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4a06      	ldr	r2, [pc, #24]	@ (8001c58 <microros_deallocate+0x34>)
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b04      	ldr	r3, [pc, #16]	@ (8001c58 <microros_deallocate+0x34>)
 8001c46:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff f81b 	bl	8000c84 <vPortFreeMicroROS>
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	24009a10 	.word	0x24009a10

08001c5c <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c68:	4b15      	ldr	r3, [pc, #84]	@ (8001cc0 <microros_reallocate+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	4413      	add	r3, r2
 8001c72:	461a      	mov	r2, r3
 8001c74:	4b12      	ldr	r3, [pc, #72]	@ (8001cc0 <microros_reallocate+0x64>)
 8001c76:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c78:	4b12      	ldr	r3, [pc, #72]	@ (8001cc4 <microros_reallocate+0x68>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	4413      	add	r3, r2
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b0f      	ldr	r3, [pc, #60]	@ (8001cc4 <microros_reallocate+0x68>)
 8001c86:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d104      	bne.n	8001c98 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001c8e:	68b8      	ldr	r0, [r7, #8]
 8001c90:	f7fe ff30 	bl	8000af4 <pvPortMallocMicroROS>
 8001c94:	4603      	mov	r3, r0
 8001c96:	e00e      	b.n	8001cb6 <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001c98:	68f8      	ldr	r0, [r7, #12]
 8001c9a:	f7ff f84f 	bl	8000d3c <getBlockSize>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	4a08      	ldr	r2, [pc, #32]	@ (8001cc4 <microros_reallocate+0x68>)
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <microros_reallocate+0x68>)
 8001caa:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7ff f862 	bl	8000d78 <pvPortReallocMicroROS>
 8001cb4:	4603      	mov	r3, r0
  }
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	24009a0c 	.word	0x24009a0c
 8001cc4:	24009a10 	.word	0x24009a10

08001cc8 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	fb02 f303 	mul.w	r3, r2, r3
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8001d10 <microros_zero_allocate+0x48>)
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8001d10 <microros_zero_allocate+0x48>)
 8001ce6:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	68ba      	ldr	r2, [r7, #8]
 8001cec:	fb02 f303 	mul.w	r3, r2, r3
 8001cf0:	4a08      	ldr	r2, [pc, #32]	@ (8001d14 <microros_zero_allocate+0x4c>)
 8001cf2:	6812      	ldr	r2, [r2, #0]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b06      	ldr	r3, [pc, #24]	@ (8001d14 <microros_zero_allocate+0x4c>)
 8001cfa:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f7ff f867 	bl	8000dd2 <pvPortCallocMicroROS>
 8001d04:	4603      	mov	r3, r0
 8001d06:	4618      	mov	r0, r3
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	24009a0c 	.word	0x24009a0c
 8001d14:	24009a10 	.word	0x24009a10

08001d18 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001d18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d1c:	b086      	sub	sp, #24
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001d2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d2e:	a320      	add	r3, pc, #128	@ (adr r3, 8001db0 <UTILS_NanosecondsToTimespec+0x98>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fb3c 	bl	80003b0 <__aeabi_ldivmod>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	6879      	ldr	r1, [r7, #4]
 8001d3e:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001d42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d46:	a31a      	add	r3, pc, #104	@ (adr r3, 8001db0 <UTILS_NanosecondsToTimespec+0x98>)
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	f7fe fb30 	bl	80003b0 <__aeabi_ldivmod>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	da20      	bge.n	8001d9e <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a11      	ldr	r2, [pc, #68]	@ (8001da8 <UTILS_NanosecondsToTimespec+0x90>)
 8001d62:	fb82 1203 	smull	r1, r2, r2, r3
 8001d66:	1712      	asrs	r2, r2, #28
 8001d68:	17db      	asrs	r3, r3, #31
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d76:	6979      	ldr	r1, [r7, #20]
 8001d78:	17c8      	asrs	r0, r1, #31
 8001d7a:	460c      	mov	r4, r1
 8001d7c:	4605      	mov	r5, r0
 8001d7e:	ebb2 0804 	subs.w	r8, r2, r4
 8001d82:	eb63 0905 	sbc.w	r9, r3, r5
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	4906      	ldr	r1, [pc, #24]	@ (8001dac <UTILS_NanosecondsToTimespec+0x94>)
 8001d94:	fb01 f303 	mul.w	r3, r1, r3
 8001d98:	441a      	add	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
    }
}
 8001d9e:	bf00      	nop
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001da8:	44b82fa1 	.word	0x44b82fa1
 8001dac:	3b9aca00 	.word	0x3b9aca00
 8001db0:	3b9aca00 	.word	0x3b9aca00
 8001db4:	00000000 	.word	0x00000000

08001db8 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001db8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dbc:	b08e      	sub	sp, #56	@ 0x38
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6278      	str	r0, [r7, #36]	@ 0x24
 8001dc2:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001dc4:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8001dc8:	2300      	movs	r3, #0
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001dce:	f04f 0200 	mov.w	r2, #0
 8001dd2:	f04f 0300 	mov.w	r3, #0
 8001dd6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001dda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dde:	4618      	mov	r0, r3
 8001de0:	f00b fc64 	bl	800d6ac <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001de6:	17da      	asrs	r2, r3, #31
 8001de8:	61bb      	str	r3, [r7, #24]
 8001dea:	61fa      	str	r2, [r7, #28]
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	f04f 0300 	mov.w	r3, #0
 8001df4:	69b9      	ldr	r1, [r7, #24]
 8001df6:	000b      	movs	r3, r1
 8001df8:	2200      	movs	r2, #0
 8001dfa:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e00:	2200      	movs	r2, #0
 8001e02:	461c      	mov	r4, r3
 8001e04:	4615      	mov	r5, r2
 8001e06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001e0a:	1911      	adds	r1, r2, r4
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	416b      	adcs	r3, r5
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e16:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001e1a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001e1e:	4602      	mov	r2, r0
 8001e20:	460b      	mov	r3, r1
 8001e22:	f04f 0400 	mov.w	r4, #0
 8001e26:	f04f 0500 	mov.w	r5, #0
 8001e2a:	015d      	lsls	r5, r3, #5
 8001e2c:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001e30:	0154      	lsls	r4, r2, #5
 8001e32:	4622      	mov	r2, r4
 8001e34:	462b      	mov	r3, r5
 8001e36:	ebb2 0800 	subs.w	r8, r2, r0
 8001e3a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e3e:	f04f 0200 	mov.w	r2, #0
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001e4a:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001e4e:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001e52:	4690      	mov	r8, r2
 8001e54:	4699      	mov	r9, r3
 8001e56:	eb18 0a00 	adds.w	sl, r8, r0
 8001e5a:	eb49 0b01 	adc.w	fp, r9, r1
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	f04f 0300 	mov.w	r3, #0
 8001e66:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e6a:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e6e:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e72:	ebb2 040a 	subs.w	r4, r2, sl
 8001e76:	603c      	str	r4, [r7, #0]
 8001e78:	eb63 030b 	sbc.w	r3, r3, fp
 8001e7c:	607b      	str	r3, [r7, #4]
 8001e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e82:	4623      	mov	r3, r4
 8001e84:	181b      	adds	r3, r3, r0
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	462b      	mov	r3, r5
 8001e8a:	eb41 0303 	adc.w	r3, r1, r3
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	6a3a      	ldr	r2, [r7, #32]
 8001e92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001e96:	f7ff ff3f 	bl	8001d18 <UTILS_NanosecondsToTimespec>

    return 0;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3738      	adds	r7, #56	@ 0x38
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001ea8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eae:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <HAL_MspInit+0x48>)
 8001eb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001eb4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef0 <HAL_MspInit+0x48>)
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ef0 <HAL_MspInit+0x48>)
 8001ec0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	607b      	str	r3, [r7, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	210f      	movs	r1, #15
 8001ed0:	f06f 0001 	mvn.w	r0, #1
 8001ed4:	f000 fc04 	bl	80026e0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* HSEM1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM1_IRQn, 5, 0);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2105      	movs	r1, #5
 8001edc:	207d      	movs	r0, #125	@ 0x7d
 8001ede:	f000 fbff 	bl	80026e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM1_IRQn);
 8001ee2:	207d      	movs	r0, #125	@ 0x7d
 8001ee4:	f000 fc16 	bl	8002714 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	58024400 	.word	0x58024400

08001ef4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08e      	sub	sp, #56	@ 0x38
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b0f      	cmp	r3, #15
 8001f00:	d844      	bhi.n	8001f8c <HAL_InitTick+0x98>
   {
     HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001f02:	2200      	movs	r2, #0
 8001f04:	6879      	ldr	r1, [r7, #4]
 8001f06:	2019      	movs	r0, #25
 8001f08:	f000 fbea 	bl	80026e0 <HAL_NVIC_SetPriority>

     /* Enable the TIM1 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001f0c:	2019      	movs	r0, #25
 8001f0e:	f000 fc01 	bl	8002714 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001f12:	4a24      	ldr	r2, [pc, #144]	@ (8001fa4 <HAL_InitTick+0xb0>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f18:	4b23      	ldr	r3, [pc, #140]	@ (8001fa8 <HAL_InitTick+0xb4>)
 8001f1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f1e:	4a22      	ldr	r2, [pc, #136]	@ (8001fa8 <HAL_InitTick+0xb4>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f28:	4b1f      	ldr	r3, [pc, #124]	@ (8001fa8 <HAL_InitTick+0xb4>)
 8001f2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f36:	f107 020c 	add.w	r2, r7, #12
 8001f3a:	f107 0310 	add.w	r3, r7, #16
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4618      	mov	r0, r3
 8001f42:	f005 f985 	bl	8007250 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001f46:	f005 f96d 	bl	8007224 <HAL_RCC_GetPCLK2Freq>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f52:	4a16      	ldr	r2, [pc, #88]	@ (8001fac <HAL_InitTick+0xb8>)
 8001f54:	fba2 2303 	umull	r2, r3, r2, r3
 8001f58:	0c9b      	lsrs	r3, r3, #18
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f5e:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <HAL_InitTick+0xbc>)
 8001f60:	4a14      	ldr	r2, [pc, #80]	@ (8001fb4 <HAL_InitTick+0xc0>)
 8001f62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f64:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <HAL_InitTick+0xbc>)
 8001f66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f6a:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f6c:	4a10      	ldr	r2, [pc, #64]	@ (8001fb0 <HAL_InitTick+0xbc>)
 8001f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f70:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f72:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <HAL_InitTick+0xbc>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f78:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb0 <HAL_InitTick+0xbc>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001f7e:	480c      	ldr	r0, [pc, #48]	@ (8001fb0 <HAL_InitTick+0xbc>)
 8001f80:	f006 ffd4 	bl	8008f2c <HAL_TIM_Base_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_InitTick+0xa6>
 8001f8a:	e001      	b.n	8001f90 <HAL_InitTick+0x9c>
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e005      	b.n	8001f9c <HAL_InitTick+0xa8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001f90:	4807      	ldr	r0, [pc, #28]	@ (8001fb0 <HAL_InitTick+0xbc>)
 8001f92:	f007 f82d 	bl	8008ff0 <HAL_TIM_Base_Start_IT>
 8001f96:	4603      	mov	r3, r0
 8001f98:	e000      	b.n	8001f9c <HAL_InitTick+0xa8>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3738      	adds	r7, #56	@ 0x38
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	24000028 	.word	0x24000028
 8001fa8:	58024400 	.word	0x58024400
 8001fac:	431bde83 	.word	0x431bde83
 8001fb0:	24009a14 	.word	0x24009a14
 8001fb4:	40010000 	.word	0x40010000

08001fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <NMI_Handler+0x4>

08001fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <HardFault_Handler+0x4>

08001fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <MemManage_Handler+0x4>

08001fd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd4:	bf00      	nop
 8001fd6:	e7fd      	b.n	8001fd4 <BusFault_Handler+0x4>

08001fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fdc:	bf00      	nop
 8001fde:	e7fd      	b.n	8001fdc <UsageFault_Handler+0x4>

08001fe0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <DMA1_Stream0_IRQHandler+0x10>)
 8001ff6:	f001 fec5 	bl	8003d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	24009afc 	.word	0x24009afc

08002004 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002008:	4802      	ldr	r0, [pc, #8]	@ (8002014 <DMA1_Stream1_IRQHandler+0x10>)
 800200a:	f001 febb 	bl	8003d84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	24009b74 	.word	0x24009b74

08002018 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800201c:	4802      	ldr	r0, [pc, #8]	@ (8002028 <TIM1_UP_IRQHandler+0x10>)
 800201e:	f007 f85f 	bl	80090e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	24009a14 	.word	0x24009a14

0800202c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002030:	4802      	ldr	r0, [pc, #8]	@ (800203c <USART3_IRQHandler+0x10>)
 8002032:	f007 fbfb 	bl	800982c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	24009a68 	.word	0x24009a68

08002040 <HSEM1_IRQHandler>:

/**
  * @brief This function handles HSEM1 global interrupt.
  */
void HSEM1_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM1_IRQn 0 */

  /* USER CODE END HSEM1_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8002044:	f003 ffe0 	bl	8006008 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM1_IRQn 1 */

  /* USER CODE END HSEM1_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return 1;
 8002050:	2301      	movs	r3, #1
}
 8002052:	4618      	mov	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <_kill>:

int _kill(int pid, int sig)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002066:	f019 ff2f 	bl	801bec8 <__errno>
 800206a:	4603      	mov	r3, r0
 800206c:	2216      	movs	r2, #22
 800206e:	601a      	str	r2, [r3, #0]
  return -1;
 8002070:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002074:	4618      	mov	r0, r3
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_exit>:

void _exit (int status)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002084:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ffe7 	bl	800205c <_kill>
  while (1) {}    /* Make sure we hang here */
 800208e:	bf00      	nop
 8002090:	e7fd      	b.n	800208e <_exit+0x12>

08002092 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b086      	sub	sp, #24
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
 80020a2:	e00a      	b.n	80020ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020a4:	f3af 8000 	nop.w
 80020a8:	4601      	mov	r1, r0
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	60ba      	str	r2, [r7, #8]
 80020b0:	b2ca      	uxtb	r2, r1
 80020b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	3301      	adds	r3, #1
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	429a      	cmp	r2, r3
 80020c0:	dbf0      	blt.n	80020a4 <_read+0x12>
  }

  return len;
 80020c2:	687b      	ldr	r3, [r7, #4]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3718      	adds	r7, #24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	e009      	b.n	80020f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	60ba      	str	r2, [r7, #8]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	4618      	mov	r0, r3
 80020e8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	3301      	adds	r3, #1
 80020f0:	617b      	str	r3, [r7, #20]
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	dbf1      	blt.n	80020de <_write+0x12>
  }
  return len;
 80020fa:	687b      	ldr	r3, [r7, #4]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <_close>:

int _close(int file)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800210c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800212c:	605a      	str	r2, [r3, #4]
  return 0;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <_isatty>:

int _isatty(int file)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002144:	2301      	movs	r3, #1
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002152:	b480      	push	{r7}
 8002154:	b085      	sub	sp, #20
 8002156:	af00      	add	r7, sp, #0
 8002158:	60f8      	str	r0, [r7, #12]
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	3714      	adds	r7, #20
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002174:	4a14      	ldr	r2, [pc, #80]	@ (80021c8 <_sbrk+0x5c>)
 8002176:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <_sbrk+0x60>)
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002180:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <_sbrk+0x64>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d102      	bne.n	800218e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002188:	4b11      	ldr	r3, [pc, #68]	@ (80021d0 <_sbrk+0x64>)
 800218a:	4a12      	ldr	r2, [pc, #72]	@ (80021d4 <_sbrk+0x68>)
 800218c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800218e:	4b10      	ldr	r3, [pc, #64]	@ (80021d0 <_sbrk+0x64>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4413      	add	r3, r2
 8002196:	693a      	ldr	r2, [r7, #16]
 8002198:	429a      	cmp	r2, r3
 800219a:	d207      	bcs.n	80021ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800219c:	f019 fe94 	bl	801bec8 <__errno>
 80021a0:	4603      	mov	r3, r0
 80021a2:	220c      	movs	r2, #12
 80021a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021aa:	e009      	b.n	80021c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021ac:	4b08      	ldr	r3, [pc, #32]	@ (80021d0 <_sbrk+0x64>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021b2:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	4a05      	ldr	r2, [pc, #20]	@ (80021d0 <_sbrk+0x64>)
 80021bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021be:	68fb      	ldr	r3, [r7, #12]
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	24080000 	.word	0x24080000
 80021cc:	00000400 	.word	0x00000400
 80021d0:	24009a64 	.word	0x24009a64
 80021d4:	24013198 	.word	0x24013198

080021d8 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021dc:	4b22      	ldr	r3, [pc, #136]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 80021de:	4a23      	ldr	r2, [pc, #140]	@ (800226c <MX_USART3_UART_Init+0x94>)
 80021e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 2000000;
 80021e2:	4b21      	ldr	r3, [pc, #132]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 80021e4:	4a22      	ldr	r2, [pc, #136]	@ (8002270 <MX_USART3_UART_Init+0x98>)
 80021e6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021e8:	4b1f      	ldr	r3, [pc, #124]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 80021ea:	2200      	movs	r2, #0
 80021ec:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021f4:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021fa:	4b1b      	ldr	r3, [pc, #108]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 80021fc:	220c      	movs	r2, #12
 80021fe:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002200:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002202:	2200      	movs	r2, #0
 8002204:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002206:	4b18      	ldr	r3, [pc, #96]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002208:	2200      	movs	r2, #0
 800220a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800220c:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 800220e:	2200      	movs	r2, #0
 8002210:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002212:	4b15      	ldr	r3, [pc, #84]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002214:	2200      	movs	r2, #0
 8002216:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002218:	4b13      	ldr	r3, [pc, #76]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 800221a:	2200      	movs	r2, #0
 800221c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800221e:	4812      	ldr	r0, [pc, #72]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002220:	f007 f952 	bl	80094c8 <HAL_UART_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800222a:	f7ff fcd3 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800222e:	2100      	movs	r1, #0
 8002230:	480d      	ldr	r0, [pc, #52]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002232:	f009 f947 	bl	800b4c4 <HAL_UARTEx_SetTxFifoThreshold>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 800223c:	f7ff fcca 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002240:	2100      	movs	r1, #0
 8002242:	4809      	ldr	r0, [pc, #36]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002244:	f009 f97c 	bl	800b540 <HAL_UARTEx_SetRxFifoThreshold>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 800224e:	f7ff fcc1 	bl	8001bd4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002252:	4805      	ldr	r0, [pc, #20]	@ (8002268 <MX_USART3_UART_Init+0x90>)
 8002254:	f009 f8fd 	bl	800b452 <HAL_UARTEx_DisableFifoMode>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 800225e:	f7ff fcb9 	bl	8001bd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	24009a68 	.word	0x24009a68
 800226c:	40004800 	.word	0x40004800
 8002270:	001e8480 	.word	0x001e8480

08002274 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b0ba      	sub	sp, #232	@ 0xe8
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800227c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	609a      	str	r2, [r3, #8]
 8002288:	60da      	str	r2, [r3, #12]
 800228a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800228c:	f107 0310 	add.w	r3, r7, #16
 8002290:	22c0      	movs	r2, #192	@ 0xc0
 8002292:	2100      	movs	r1, #0
 8002294:	4618      	mov	r0, r3
 8002296:	f019 fd83 	bl	801bda0 <memset>
  if(uartHandle->Instance==USART3)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a5a      	ldr	r2, [pc, #360]	@ (8002408 <HAL_UART_MspInit+0x194>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	f040 80ad 	bne.w	8002400 <HAL_UART_MspInit+0x18c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022a6:	f04f 0202 	mov.w	r2, #2
 80022aa:	f04f 0300 	mov.w	r3, #0
 80022ae:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022b2:	2300      	movs	r3, #0
 80022b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	4618      	mov	r0, r3
 80022be:	f005 f809 	bl	80072d4 <HAL_RCCEx_PeriphCLKConfig>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d001      	beq.n	80022cc <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 80022c8:	f7ff fc84 	bl	8001bd4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022cc:	4b4f      	ldr	r3, [pc, #316]	@ (800240c <HAL_UART_MspInit+0x198>)
 80022ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022d2:	4a4e      	ldr	r2, [pc, #312]	@ (800240c <HAL_UART_MspInit+0x198>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022dc:	4b4b      	ldr	r3, [pc, #300]	@ (800240c <HAL_UART_MspInit+0x198>)
 80022de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ea:	4b48      	ldr	r3, [pc, #288]	@ (800240c <HAL_UART_MspInit+0x198>)
 80022ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f0:	4a46      	ldr	r2, [pc, #280]	@ (800240c <HAL_UART_MspInit+0x198>)
 80022f2:	f043 0308 	orr.w	r3, r3, #8
 80022f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022fa:	4b44      	ldr	r3, [pc, #272]	@ (800240c <HAL_UART_MspInit+0x198>)
 80022fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002300:	f003 0308 	and.w	r3, r3, #8
 8002304:	60bb      	str	r3, [r7, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002308:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800230c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002322:	2307      	movs	r3, #7
 8002324:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002328:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800232c:	4619      	mov	r1, r3
 800232e:	4838      	ldr	r0, [pc, #224]	@ (8002410 <HAL_UART_MspInit+0x19c>)
 8002330:	f003 fc7a 	bl	8005c28 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8002334:	4b37      	ldr	r3, [pc, #220]	@ (8002414 <HAL_UART_MspInit+0x1a0>)
 8002336:	4a38      	ldr	r2, [pc, #224]	@ (8002418 <HAL_UART_MspInit+0x1a4>)
 8002338:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800233a:	4b36      	ldr	r3, [pc, #216]	@ (8002414 <HAL_UART_MspInit+0x1a0>)
 800233c:	222d      	movs	r2, #45	@ 0x2d
 800233e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002340:	4b34      	ldr	r3, [pc, #208]	@ (8002414 <HAL_UART_MspInit+0x1a0>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002346:	4b33      	ldr	r3, [pc, #204]	@ (8002414 <HAL_UART_MspInit+0x1a0>)
 8002348:	2200      	movs	r2, #0
 800234a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800234c:	4b31      	ldr	r3, [pc, #196]	@ (8002414 <HAL_UART_MspInit+0x1a0>)
 800234e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002352:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002354:	4b2f      	ldr	r3, [pc, #188]	@ (8002414 <HAL_UART_MspInit+0x1a0>)
 8002356:	2200      	movs	r2, #0
 8002358:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800235a:	4b2e      	ldr	r3, [pc, #184]	@ (8002414 <HAL_UART_MspInit+0x1a0>)
 800235c:	2200      	movs	r2, #0
 800235e:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002360:	4b2c      	ldr	r3, [pc, #176]	@ (8002414 <HAL_UART_MspInit+0x1a0>)
 8002362:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002366:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002368:	4b2a      	ldr	r3, [pc, #168]	@ (8002414 <HAL_UART_MspInit+0x1a0>)
 800236a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800236e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002370:	4b28      	ldr	r3, [pc, #160]	@ (8002414 <HAL_UART_MspInit+0x1a0>)
 8002372:	2200      	movs	r2, #0
 8002374:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002376:	4827      	ldr	r0, [pc, #156]	@ (8002414 <HAL_UART_MspInit+0x1a0>)
 8002378:	f000 f9da 	bl	8002730 <HAL_DMA_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8002382:	f7ff fc27 	bl	8001bd4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a22      	ldr	r2, [pc, #136]	@ (8002414 <HAL_UART_MspInit+0x1a0>)
 800238a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800238e:	4a21      	ldr	r2, [pc, #132]	@ (8002414 <HAL_UART_MspInit+0x1a0>)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <HAL_UART_MspInit+0x1a8>)
 8002396:	4a22      	ldr	r2, [pc, #136]	@ (8002420 <HAL_UART_MspInit+0x1ac>)
 8002398:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800239a:	4b20      	ldr	r3, [pc, #128]	@ (800241c <HAL_UART_MspInit+0x1a8>)
 800239c:	222e      	movs	r2, #46	@ 0x2e
 800239e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80023a0:	4b1e      	ldr	r3, [pc, #120]	@ (800241c <HAL_UART_MspInit+0x1a8>)
 80023a2:	2240      	movs	r2, #64	@ 0x40
 80023a4:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023a6:	4b1d      	ldr	r3, [pc, #116]	@ (800241c <HAL_UART_MspInit+0x1a8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80023ac:	4b1b      	ldr	r3, [pc, #108]	@ (800241c <HAL_UART_MspInit+0x1a8>)
 80023ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023b2:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023b4:	4b19      	ldr	r3, [pc, #100]	@ (800241c <HAL_UART_MspInit+0x1a8>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023ba:	4b18      	ldr	r3, [pc, #96]	@ (800241c <HAL_UART_MspInit+0x1a8>)
 80023bc:	2200      	movs	r2, #0
 80023be:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80023c0:	4b16      	ldr	r3, [pc, #88]	@ (800241c <HAL_UART_MspInit+0x1a8>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80023c6:	4b15      	ldr	r3, [pc, #84]	@ (800241c <HAL_UART_MspInit+0x1a8>)
 80023c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80023cc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ce:	4b13      	ldr	r3, [pc, #76]	@ (800241c <HAL_UART_MspInit+0x1a8>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80023d4:	4811      	ldr	r0, [pc, #68]	@ (800241c <HAL_UART_MspInit+0x1a8>)
 80023d6:	f000 f9ab 	bl	8002730 <HAL_DMA_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <HAL_UART_MspInit+0x170>
    {
      Error_Handler();
 80023e0:	f7ff fbf8 	bl	8001bd4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	4a0d      	ldr	r2, [pc, #52]	@ (800241c <HAL_UART_MspInit+0x1a8>)
 80023e8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80023ea:	4a0c      	ldr	r2, [pc, #48]	@ (800241c <HAL_UART_MspInit+0x1a8>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80023f0:	2200      	movs	r2, #0
 80023f2:	2105      	movs	r1, #5
 80023f4:	2027      	movs	r0, #39	@ 0x27
 80023f6:	f000 f973 	bl	80026e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80023fa:	2027      	movs	r0, #39	@ 0x27
 80023fc:	f000 f98a 	bl	8002714 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002400:	bf00      	nop
 8002402:	37e8      	adds	r7, #232	@ 0xe8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40004800 	.word	0x40004800
 800240c:	58024400 	.word	0x58024400
 8002410:	58020c00 	.word	0x58020c00
 8002414:	24009afc 	.word	0x24009afc
 8002418:	40020010 	.word	0x40020010
 800241c:	24009b74 	.word	0x24009b74
 8002420:	40020028 	.word	0x40020028

08002424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002424:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800245c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002428:	f7fe face 	bl	80009c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800242c:	480c      	ldr	r0, [pc, #48]	@ (8002460 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800242e:	490d      	ldr	r1, [pc, #52]	@ (8002464 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002430:	4a0d      	ldr	r2, [pc, #52]	@ (8002468 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002434:	e002      	b.n	800243c <LoopCopyDataInit>

08002436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800243a:	3304      	adds	r3, #4

0800243c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800243c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800243e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002440:	d3f9      	bcc.n	8002436 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002442:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002444:	4c0a      	ldr	r4, [pc, #40]	@ (8002470 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002448:	e001      	b.n	800244e <LoopFillZerobss>

0800244a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800244a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800244c:	3204      	adds	r2, #4

0800244e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800244e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002450:	d3fb      	bcc.n	800244a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002452:	f019 fd3f 	bl	801bed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002456:	f7ff f8c5 	bl	80015e4 <main>
  bx  lr
 800245a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800245c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002460:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002464:	24000300 	.word	0x24000300
  ldr r2, =_sidata
 8002468:	0801daec 	.word	0x0801daec
  ldr r2, =_sbss
 800246c:	240003c0 	.word	0x240003c0
  ldr r4, =_ebss
 8002470:	24013198 	.word	0x24013198

08002474 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002474:	e7fe      	b.n	8002474 <ADC3_IRQHandler>
	...

08002478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800247e:	2003      	movs	r0, #3
 8002480:	f000 f923 	bl	80026ca <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002484:	f004 fd0e 	bl	8006ea4 <HAL_RCC_GetSysClockFreq>
 8002488:	4602      	mov	r2, r0
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <HAL_Init+0x68>)
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	4913      	ldr	r1, [pc, #76]	@ (80024e4 <HAL_Init+0x6c>)
 8002496:	5ccb      	ldrb	r3, [r1, r3]
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	fa22 f303 	lsr.w	r3, r2, r3
 80024a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024a2:	4b0f      	ldr	r3, [pc, #60]	@ (80024e0 <HAL_Init+0x68>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	f003 030f 	and.w	r3, r3, #15
 80024aa:	4a0e      	ldr	r2, [pc, #56]	@ (80024e4 <HAL_Init+0x6c>)
 80024ac:	5cd3      	ldrb	r3, [r2, r3]
 80024ae:	f003 031f 	and.w	r3, r3, #31
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	4a0b      	ldr	r2, [pc, #44]	@ (80024e8 <HAL_Init+0x70>)
 80024ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024bc:	4a0b      	ldr	r2, [pc, #44]	@ (80024ec <HAL_Init+0x74>)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024c2:	200f      	movs	r0, #15
 80024c4:	f7ff fd16 	bl	8001ef4 <HAL_InitTick>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e002      	b.n	80024d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80024d2:	f7ff fce9 	bl	8001ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	58024400 	.word	0x58024400
 80024e4:	0801cc58 	.word	0x0801cc58
 80024e8:	24000004 	.word	0x24000004
 80024ec:	24000000 	.word	0x24000000

080024f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024f4:	4b06      	ldr	r3, [pc, #24]	@ (8002510 <HAL_IncTick+0x20>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b06      	ldr	r3, [pc, #24]	@ (8002514 <HAL_IncTick+0x24>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	@ (8002514 <HAL_IncTick+0x24>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	2400002c 	.word	0x2400002c
 8002514:	24009bec 	.word	0x24009bec

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	@ (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	24009bec 	.word	0x24009bec

08002530 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002530:	b480      	push	{r7}
 8002532:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002534:	4b03      	ldr	r3, [pc, #12]	@ (8002544 <HAL_GetREVID+0x14>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	0c1b      	lsrs	r3, r3, #16
}
 800253a:	4618      	mov	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	5c001000 	.word	0x5c001000

08002548 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002550:	4b06      	ldr	r3, [pc, #24]	@ (800256c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8002558:	4904      	ldr	r1, [pc, #16]	@ (800256c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4313      	orrs	r3, r2
 800255e:	604b      	str	r3, [r1, #4]
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	58000400 	.word	0x58000400

08002570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002580:	4b0b      	ldr	r3, [pc, #44]	@ (80025b0 <__NVIC_SetPriorityGrouping+0x40>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800258c:	4013      	ands	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002598:	4b06      	ldr	r3, [pc, #24]	@ (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 800259a:	4313      	orrs	r3, r2
 800259c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800259e:	4a04      	ldr	r2, [pc, #16]	@ (80025b0 <__NVIC_SetPriorityGrouping+0x40>)
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	60d3      	str	r3, [r2, #12]
}
 80025a4:	bf00      	nop
 80025a6:	3714      	adds	r7, #20
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	e000ed00 	.word	0xe000ed00
 80025b4:	05fa0000 	.word	0x05fa0000

080025b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025bc:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <__NVIC_GetPriorityGrouping+0x18>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	f003 0307 	and.w	r3, r3, #7
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80025de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	db0b      	blt.n	80025fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4907      	ldr	r1, [pc, #28]	@ (800260c <__NVIC_EnableIRQ+0x38>)
 80025ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2001      	movs	r0, #1
 80025f6:	fa00 f202 	lsl.w	r2, r0, r2
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000e100 	.word	0xe000e100

08002610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800261c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db0a      	blt.n	800263a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	490c      	ldr	r1, [pc, #48]	@ (800265c <__NVIC_SetPriority+0x4c>)
 800262a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	440b      	add	r3, r1
 8002634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002638:	e00a      	b.n	8002650 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4908      	ldr	r1, [pc, #32]	@ (8002660 <__NVIC_SetPriority+0x50>)
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3b04      	subs	r3, #4
 8002648:	0112      	lsls	r2, r2, #4
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	440b      	add	r3, r1
 800264e:	761a      	strb	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	@ 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f1c3 0307 	rsb	r3, r3, #7
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf28      	it	cs
 8002682:	2304      	movcs	r3, #4
 8002684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3304      	adds	r3, #4
 800268a:	2b06      	cmp	r3, #6
 800268c:	d902      	bls.n	8002694 <NVIC_EncodePriority+0x30>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3b03      	subs	r3, #3
 8002692:	e000      	b.n	8002696 <NVIC_EncodePriority+0x32>
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43d9      	mvns	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	4313      	orrs	r3, r2
         );
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3724      	adds	r7, #36	@ 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ff4c 	bl	8002570 <__NVIC_SetPriorityGrouping>
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026ee:	f7ff ff63 	bl	80025b8 <__NVIC_GetPriorityGrouping>
 80026f2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	68b9      	ldr	r1, [r7, #8]
 80026f8:	6978      	ldr	r0, [r7, #20]
 80026fa:	f7ff ffb3 	bl	8002664 <NVIC_EncodePriority>
 80026fe:	4602      	mov	r2, r0
 8002700:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff82 	bl	8002610 <__NVIC_SetPriority>
}
 800270c:	bf00      	nop
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800271e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff ff56 	bl	80025d4 <__NVIC_EnableIRQ>
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff feee 	bl	8002518 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e316      	b.n	8002d76 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a66      	ldr	r2, [pc, #408]	@ (80028e8 <HAL_DMA_Init+0x1b8>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d04a      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a65      	ldr	r2, [pc, #404]	@ (80028ec <HAL_DMA_Init+0x1bc>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d045      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a63      	ldr	r2, [pc, #396]	@ (80028f0 <HAL_DMA_Init+0x1c0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d040      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a62      	ldr	r2, [pc, #392]	@ (80028f4 <HAL_DMA_Init+0x1c4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d03b      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a60      	ldr	r2, [pc, #384]	@ (80028f8 <HAL_DMA_Init+0x1c8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d036      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a5f      	ldr	r2, [pc, #380]	@ (80028fc <HAL_DMA_Init+0x1cc>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d031      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a5d      	ldr	r2, [pc, #372]	@ (8002900 <HAL_DMA_Init+0x1d0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d02c      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a5c      	ldr	r2, [pc, #368]	@ (8002904 <HAL_DMA_Init+0x1d4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d027      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a5a      	ldr	r2, [pc, #360]	@ (8002908 <HAL_DMA_Init+0x1d8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d022      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a59      	ldr	r2, [pc, #356]	@ (800290c <HAL_DMA_Init+0x1dc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d01d      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a57      	ldr	r2, [pc, #348]	@ (8002910 <HAL_DMA_Init+0x1e0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d018      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a56      	ldr	r2, [pc, #344]	@ (8002914 <HAL_DMA_Init+0x1e4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d013      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a54      	ldr	r2, [pc, #336]	@ (8002918 <HAL_DMA_Init+0x1e8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00e      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a53      	ldr	r2, [pc, #332]	@ (800291c <HAL_DMA_Init+0x1ec>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d009      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a51      	ldr	r2, [pc, #324]	@ (8002920 <HAL_DMA_Init+0x1f0>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_DMA_Init+0xb8>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a50      	ldr	r2, [pc, #320]	@ (8002924 <HAL_DMA_Init+0x1f4>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d101      	bne.n	80027ec <HAL_DMA_Init+0xbc>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_DMA_Init+0xbe>
 80027ec:	2300      	movs	r3, #0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 813b 	beq.w	8002a6a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2202      	movs	r2, #2
 80027f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a37      	ldr	r2, [pc, #220]	@ (80028e8 <HAL_DMA_Init+0x1b8>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d04a      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a36      	ldr	r2, [pc, #216]	@ (80028ec <HAL_DMA_Init+0x1bc>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d045      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a34      	ldr	r2, [pc, #208]	@ (80028f0 <HAL_DMA_Init+0x1c0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d040      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a33      	ldr	r2, [pc, #204]	@ (80028f4 <HAL_DMA_Init+0x1c4>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d03b      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a31      	ldr	r2, [pc, #196]	@ (80028f8 <HAL_DMA_Init+0x1c8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d036      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a30      	ldr	r2, [pc, #192]	@ (80028fc <HAL_DMA_Init+0x1cc>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d031      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a2e      	ldr	r2, [pc, #184]	@ (8002900 <HAL_DMA_Init+0x1d0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d02c      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a2d      	ldr	r2, [pc, #180]	@ (8002904 <HAL_DMA_Init+0x1d4>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d027      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a2b      	ldr	r2, [pc, #172]	@ (8002908 <HAL_DMA_Init+0x1d8>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d022      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a2a      	ldr	r2, [pc, #168]	@ (800290c <HAL_DMA_Init+0x1dc>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d01d      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a28      	ldr	r2, [pc, #160]	@ (8002910 <HAL_DMA_Init+0x1e0>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d018      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a27      	ldr	r2, [pc, #156]	@ (8002914 <HAL_DMA_Init+0x1e4>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d013      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a25      	ldr	r2, [pc, #148]	@ (8002918 <HAL_DMA_Init+0x1e8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00e      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a24      	ldr	r2, [pc, #144]	@ (800291c <HAL_DMA_Init+0x1ec>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d009      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a22      	ldr	r2, [pc, #136]	@ (8002920 <HAL_DMA_Init+0x1f0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d004      	beq.n	80028a4 <HAL_DMA_Init+0x174>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a21      	ldr	r2, [pc, #132]	@ (8002924 <HAL_DMA_Init+0x1f4>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d108      	bne.n	80028b6 <HAL_DMA_Init+0x186>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0201 	bic.w	r2, r2, #1
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	e007      	b.n	80028c6 <HAL_DMA_Init+0x196>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f022 0201 	bic.w	r2, r2, #1
 80028c4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80028c6:	e02f      	b.n	8002928 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028c8:	f7ff fe26 	bl	8002518 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b05      	cmp	r3, #5
 80028d4:	d928      	bls.n	8002928 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2220      	movs	r2, #32
 80028da:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2203      	movs	r2, #3
 80028e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e246      	b.n	8002d76 <HAL_DMA_Init+0x646>
 80028e8:	40020010 	.word	0x40020010
 80028ec:	40020028 	.word	0x40020028
 80028f0:	40020040 	.word	0x40020040
 80028f4:	40020058 	.word	0x40020058
 80028f8:	40020070 	.word	0x40020070
 80028fc:	40020088 	.word	0x40020088
 8002900:	400200a0 	.word	0x400200a0
 8002904:	400200b8 	.word	0x400200b8
 8002908:	40020410 	.word	0x40020410
 800290c:	40020428 	.word	0x40020428
 8002910:	40020440 	.word	0x40020440
 8002914:	40020458 	.word	0x40020458
 8002918:	40020470 	.word	0x40020470
 800291c:	40020488 	.word	0x40020488
 8002920:	400204a0 	.word	0x400204a0
 8002924:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1c8      	bne.n	80028c8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4b83      	ldr	r3, [pc, #524]	@ (8002b50 <HAL_DMA_Init+0x420>)
 8002942:	4013      	ands	r3, r2
 8002944:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800294e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800295a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002966:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800296e:	697a      	ldr	r2, [r7, #20]
 8002970:	4313      	orrs	r3, r2
 8002972:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002978:	2b04      	cmp	r3, #4
 800297a:	d107      	bne.n	800298c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002984:	4313      	orrs	r3, r2
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	4313      	orrs	r3, r2
 800298a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800298c:	4b71      	ldr	r3, [pc, #452]	@ (8002b54 <HAL_DMA_Init+0x424>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	4b71      	ldr	r3, [pc, #452]	@ (8002b58 <HAL_DMA_Init+0x428>)
 8002992:	4013      	ands	r3, r2
 8002994:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002998:	d328      	bcc.n	80029ec <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b28      	cmp	r3, #40	@ 0x28
 80029a0:	d903      	bls.n	80029aa <HAL_DMA_Init+0x27a>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80029a8:	d917      	bls.n	80029da <HAL_DMA_Init+0x2aa>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b3e      	cmp	r3, #62	@ 0x3e
 80029b0:	d903      	bls.n	80029ba <HAL_DMA_Init+0x28a>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b42      	cmp	r3, #66	@ 0x42
 80029b8:	d90f      	bls.n	80029da <HAL_DMA_Init+0x2aa>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b46      	cmp	r3, #70	@ 0x46
 80029c0:	d903      	bls.n	80029ca <HAL_DMA_Init+0x29a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	2b48      	cmp	r3, #72	@ 0x48
 80029c8:	d907      	bls.n	80029da <HAL_DMA_Init+0x2aa>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	2b4e      	cmp	r3, #78	@ 0x4e
 80029d0:	d905      	bls.n	80029de <HAL_DMA_Init+0x2ae>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b52      	cmp	r3, #82	@ 0x52
 80029d8:	d801      	bhi.n	80029de <HAL_DMA_Init+0x2ae>
 80029da:	2301      	movs	r3, #1
 80029dc:	e000      	b.n	80029e0 <HAL_DMA_Init+0x2b0>
 80029de:	2300      	movs	r3, #0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d003      	beq.n	80029ec <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80029ea:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0307 	bic.w	r3, r3, #7
 8002a02:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d117      	bne.n	8002a46 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1a:	697a      	ldr	r2, [r7, #20]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00e      	beq.n	8002a46 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	f002 fb3f 	bl	80050ac <DMA_CheckFifoParam>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2240      	movs	r2, #64	@ 0x40
 8002a38:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e197      	b.n	8002d76 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f002 fa7a 	bl	8004f48 <DMA_CalcBaseAndBitshift>
 8002a54:	4603      	mov	r3, r0
 8002a56:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a5c:	f003 031f 	and.w	r3, r3, #31
 8002a60:	223f      	movs	r2, #63	@ 0x3f
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	e0cd      	b.n	8002c06 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a3b      	ldr	r2, [pc, #236]	@ (8002b5c <HAL_DMA_Init+0x42c>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d022      	beq.n	8002aba <HAL_DMA_Init+0x38a>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a39      	ldr	r2, [pc, #228]	@ (8002b60 <HAL_DMA_Init+0x430>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d01d      	beq.n	8002aba <HAL_DMA_Init+0x38a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a38      	ldr	r2, [pc, #224]	@ (8002b64 <HAL_DMA_Init+0x434>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d018      	beq.n	8002aba <HAL_DMA_Init+0x38a>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a36      	ldr	r2, [pc, #216]	@ (8002b68 <HAL_DMA_Init+0x438>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <HAL_DMA_Init+0x38a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a35      	ldr	r2, [pc, #212]	@ (8002b6c <HAL_DMA_Init+0x43c>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d00e      	beq.n	8002aba <HAL_DMA_Init+0x38a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a33      	ldr	r2, [pc, #204]	@ (8002b70 <HAL_DMA_Init+0x440>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d009      	beq.n	8002aba <HAL_DMA_Init+0x38a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a32      	ldr	r2, [pc, #200]	@ (8002b74 <HAL_DMA_Init+0x444>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_DMA_Init+0x38a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a30      	ldr	r2, [pc, #192]	@ (8002b78 <HAL_DMA_Init+0x448>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d101      	bne.n	8002abe <HAL_DMA_Init+0x38e>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <HAL_DMA_Init+0x390>
 8002abe:	2300      	movs	r3, #0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 8097 	beq.w	8002bf4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a24      	ldr	r2, [pc, #144]	@ (8002b5c <HAL_DMA_Init+0x42c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d021      	beq.n	8002b14 <HAL_DMA_Init+0x3e4>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a22      	ldr	r2, [pc, #136]	@ (8002b60 <HAL_DMA_Init+0x430>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d01c      	beq.n	8002b14 <HAL_DMA_Init+0x3e4>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a21      	ldr	r2, [pc, #132]	@ (8002b64 <HAL_DMA_Init+0x434>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d017      	beq.n	8002b14 <HAL_DMA_Init+0x3e4>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1f      	ldr	r2, [pc, #124]	@ (8002b68 <HAL_DMA_Init+0x438>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d012      	beq.n	8002b14 <HAL_DMA_Init+0x3e4>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b6c <HAL_DMA_Init+0x43c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d00d      	beq.n	8002b14 <HAL_DMA_Init+0x3e4>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b70 <HAL_DMA_Init+0x440>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d008      	beq.n	8002b14 <HAL_DMA_Init+0x3e4>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a1b      	ldr	r2, [pc, #108]	@ (8002b74 <HAL_DMA_Init+0x444>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d003      	beq.n	8002b14 <HAL_DMA_Init+0x3e4>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a19      	ldr	r2, [pc, #100]	@ (8002b78 <HAL_DMA_Init+0x448>)
 8002b12:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002b2c:	697a      	ldr	r2, [r7, #20]
 8002b2e:	4b13      	ldr	r3, [pc, #76]	@ (8002b7c <HAL_DMA_Init+0x44c>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b40      	cmp	r3, #64	@ 0x40
 8002b3a:	d021      	beq.n	8002b80 <HAL_DMA_Init+0x450>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	2b80      	cmp	r3, #128	@ 0x80
 8002b42:	d102      	bne.n	8002b4a <HAL_DMA_Init+0x41a>
 8002b44:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002b48:	e01b      	b.n	8002b82 <HAL_DMA_Init+0x452>
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	e019      	b.n	8002b82 <HAL_DMA_Init+0x452>
 8002b4e:	bf00      	nop
 8002b50:	fe10803f 	.word	0xfe10803f
 8002b54:	5c001000 	.word	0x5c001000
 8002b58:	ffff0000 	.word	0xffff0000
 8002b5c:	58025408 	.word	0x58025408
 8002b60:	5802541c 	.word	0x5802541c
 8002b64:	58025430 	.word	0x58025430
 8002b68:	58025444 	.word	0x58025444
 8002b6c:	58025458 	.word	0x58025458
 8002b70:	5802546c 	.word	0x5802546c
 8002b74:	58025480 	.word	0x58025480
 8002b78:	58025494 	.word	0x58025494
 8002b7c:	fffe000f 	.word	0xfffe000f
 8002b80:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b82:	687a      	ldr	r2, [r7, #4]
 8002b84:	68d2      	ldr	r2, [r2, #12]
 8002b86:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002b88:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002b90:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002b98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	699b      	ldr	r3, [r3, #24]
 8002b9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002ba0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002ba8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002bb0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	697a      	ldr	r2, [r7, #20]
 8002bbe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b6e      	ldr	r3, [pc, #440]	@ (8002d80 <HAL_DMA_Init+0x650>)
 8002bc8:	4413      	add	r3, r2
 8002bca:	4a6e      	ldr	r2, [pc, #440]	@ (8002d84 <HAL_DMA_Init+0x654>)
 8002bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	009a      	lsls	r2, r3, #2
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f002 f9b5 	bl	8004f48 <DMA_CalcBaseAndBitshift>
 8002bde:	4603      	mov	r3, r0
 8002be0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	2201      	movs	r2, #1
 8002bec:	409a      	lsls	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	e008      	b.n	8002c06 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2240      	movs	r2, #64	@ 0x40
 8002bf8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0b7      	b.n	8002d76 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a5f      	ldr	r2, [pc, #380]	@ (8002d88 <HAL_DMA_Init+0x658>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d072      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a5d      	ldr	r2, [pc, #372]	@ (8002d8c <HAL_DMA_Init+0x65c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d06d      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a5c      	ldr	r2, [pc, #368]	@ (8002d90 <HAL_DMA_Init+0x660>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d068      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a5a      	ldr	r2, [pc, #360]	@ (8002d94 <HAL_DMA_Init+0x664>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d063      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a59      	ldr	r2, [pc, #356]	@ (8002d98 <HAL_DMA_Init+0x668>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d05e      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a57      	ldr	r2, [pc, #348]	@ (8002d9c <HAL_DMA_Init+0x66c>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d059      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a56      	ldr	r2, [pc, #344]	@ (8002da0 <HAL_DMA_Init+0x670>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d054      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a54      	ldr	r2, [pc, #336]	@ (8002da4 <HAL_DMA_Init+0x674>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d04f      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a53      	ldr	r2, [pc, #332]	@ (8002da8 <HAL_DMA_Init+0x678>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d04a      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a51      	ldr	r2, [pc, #324]	@ (8002dac <HAL_DMA_Init+0x67c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d045      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a50      	ldr	r2, [pc, #320]	@ (8002db0 <HAL_DMA_Init+0x680>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d040      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a4e      	ldr	r2, [pc, #312]	@ (8002db4 <HAL_DMA_Init+0x684>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d03b      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a4d      	ldr	r2, [pc, #308]	@ (8002db8 <HAL_DMA_Init+0x688>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d036      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a4b      	ldr	r2, [pc, #300]	@ (8002dbc <HAL_DMA_Init+0x68c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d031      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a4a      	ldr	r2, [pc, #296]	@ (8002dc0 <HAL_DMA_Init+0x690>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d02c      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a48      	ldr	r2, [pc, #288]	@ (8002dc4 <HAL_DMA_Init+0x694>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d027      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a47      	ldr	r2, [pc, #284]	@ (8002dc8 <HAL_DMA_Init+0x698>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a45      	ldr	r2, [pc, #276]	@ (8002dcc <HAL_DMA_Init+0x69c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d01d      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a44      	ldr	r2, [pc, #272]	@ (8002dd0 <HAL_DMA_Init+0x6a0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d018      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a42      	ldr	r2, [pc, #264]	@ (8002dd4 <HAL_DMA_Init+0x6a4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d013      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a41      	ldr	r2, [pc, #260]	@ (8002dd8 <HAL_DMA_Init+0x6a8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d00e      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a3f      	ldr	r2, [pc, #252]	@ (8002ddc <HAL_DMA_Init+0x6ac>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d009      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a3e      	ldr	r2, [pc, #248]	@ (8002de0 <HAL_DMA_Init+0x6b0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d004      	beq.n	8002cf6 <HAL_DMA_Init+0x5c6>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a3c      	ldr	r2, [pc, #240]	@ (8002de4 <HAL_DMA_Init+0x6b4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <HAL_DMA_Init+0x5ca>
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_DMA_Init+0x5cc>
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d032      	beq.n	8002d66 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f002 fa4f 	bl	80051a4 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	2b80      	cmp	r3, #128	@ 0x80
 8002d0c:	d102      	bne.n	8002d14 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d1c:	b2d2      	uxtb	r2, r2
 8002d1e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d28:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d010      	beq.n	8002d54 <HAL_DMA_Init+0x624>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b08      	cmp	r3, #8
 8002d38:	d80c      	bhi.n	8002d54 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f002 facc 	bl	80052d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d44:	2200      	movs	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	e008      	b.n	8002d66 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002d74:	2300      	movs	r3, #0
}
 8002d76:	4618      	mov	r0, r3
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	a7fdabf8 	.word	0xa7fdabf8
 8002d84:	cccccccd 	.word	0xcccccccd
 8002d88:	40020010 	.word	0x40020010
 8002d8c:	40020028 	.word	0x40020028
 8002d90:	40020040 	.word	0x40020040
 8002d94:	40020058 	.word	0x40020058
 8002d98:	40020070 	.word	0x40020070
 8002d9c:	40020088 	.word	0x40020088
 8002da0:	400200a0 	.word	0x400200a0
 8002da4:	400200b8 	.word	0x400200b8
 8002da8:	40020410 	.word	0x40020410
 8002dac:	40020428 	.word	0x40020428
 8002db0:	40020440 	.word	0x40020440
 8002db4:	40020458 	.word	0x40020458
 8002db8:	40020470 	.word	0x40020470
 8002dbc:	40020488 	.word	0x40020488
 8002dc0:	400204a0 	.word	0x400204a0
 8002dc4:	400204b8 	.word	0x400204b8
 8002dc8:	58025408 	.word	0x58025408
 8002dcc:	5802541c 	.word	0x5802541c
 8002dd0:	58025430 	.word	0x58025430
 8002dd4:	58025444 	.word	0x58025444
 8002dd8:	58025458 	.word	0x58025458
 8002ddc:	5802546c 	.word	0x5802546c
 8002de0:	58025480 	.word	0x58025480
 8002de4:	58025494 	.word	0x58025494

08002de8 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b086      	sub	sp, #24
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	60f8      	str	r0, [r7, #12]
 8002df0:	60b9      	str	r1, [r7, #8]
 8002df2:	607a      	str	r2, [r7, #4]
 8002df4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002df6:	2300      	movs	r3, #0
 8002df8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e226      	b.n	8003252 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d101      	bne.n	8002e12 <HAL_DMA_Start_IT+0x2a>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	e21f      	b.n	8003252 <HAL_DMA_Start_IT+0x46a>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	f040 820a 	bne.w	800323c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a68      	ldr	r2, [pc, #416]	@ (8002fdc <HAL_DMA_Start_IT+0x1f4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d04a      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a66      	ldr	r2, [pc, #408]	@ (8002fe0 <HAL_DMA_Start_IT+0x1f8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d045      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a65      	ldr	r2, [pc, #404]	@ (8002fe4 <HAL_DMA_Start_IT+0x1fc>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d040      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a63      	ldr	r2, [pc, #396]	@ (8002fe8 <HAL_DMA_Start_IT+0x200>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d03b      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a62      	ldr	r2, [pc, #392]	@ (8002fec <HAL_DMA_Start_IT+0x204>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d036      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a60      	ldr	r2, [pc, #384]	@ (8002ff0 <HAL_DMA_Start_IT+0x208>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d031      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a5f      	ldr	r2, [pc, #380]	@ (8002ff4 <HAL_DMA_Start_IT+0x20c>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d02c      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a5d      	ldr	r2, [pc, #372]	@ (8002ff8 <HAL_DMA_Start_IT+0x210>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d027      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a5c      	ldr	r2, [pc, #368]	@ (8002ffc <HAL_DMA_Start_IT+0x214>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d022      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a5a      	ldr	r2, [pc, #360]	@ (8003000 <HAL_DMA_Start_IT+0x218>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d01d      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a59      	ldr	r2, [pc, #356]	@ (8003004 <HAL_DMA_Start_IT+0x21c>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d018      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a57      	ldr	r2, [pc, #348]	@ (8003008 <HAL_DMA_Start_IT+0x220>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d013      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a56      	ldr	r2, [pc, #344]	@ (800300c <HAL_DMA_Start_IT+0x224>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d00e      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a54      	ldr	r2, [pc, #336]	@ (8003010 <HAL_DMA_Start_IT+0x228>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d009      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a53      	ldr	r2, [pc, #332]	@ (8003014 <HAL_DMA_Start_IT+0x22c>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d004      	beq.n	8002ed6 <HAL_DMA_Start_IT+0xee>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a51      	ldr	r2, [pc, #324]	@ (8003018 <HAL_DMA_Start_IT+0x230>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d108      	bne.n	8002ee8 <HAL_DMA_Start_IT+0x100>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 0201 	bic.w	r2, r2, #1
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	e007      	b.n	8002ef8 <HAL_DMA_Start_IT+0x110>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f001 fe76 	bl	8004bf0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a34      	ldr	r2, [pc, #208]	@ (8002fdc <HAL_DMA_Start_IT+0x1f4>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d04a      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a33      	ldr	r2, [pc, #204]	@ (8002fe0 <HAL_DMA_Start_IT+0x1f8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d045      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a31      	ldr	r2, [pc, #196]	@ (8002fe4 <HAL_DMA_Start_IT+0x1fc>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d040      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a30      	ldr	r2, [pc, #192]	@ (8002fe8 <HAL_DMA_Start_IT+0x200>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d03b      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a2e      	ldr	r2, [pc, #184]	@ (8002fec <HAL_DMA_Start_IT+0x204>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d036      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a2d      	ldr	r2, [pc, #180]	@ (8002ff0 <HAL_DMA_Start_IT+0x208>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d031      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a2b      	ldr	r2, [pc, #172]	@ (8002ff4 <HAL_DMA_Start_IT+0x20c>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d02c      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff8 <HAL_DMA_Start_IT+0x210>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d027      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a28      	ldr	r2, [pc, #160]	@ (8002ffc <HAL_DMA_Start_IT+0x214>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d022      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a27      	ldr	r2, [pc, #156]	@ (8003000 <HAL_DMA_Start_IT+0x218>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d01d      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a25      	ldr	r2, [pc, #148]	@ (8003004 <HAL_DMA_Start_IT+0x21c>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d018      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a24      	ldr	r2, [pc, #144]	@ (8003008 <HAL_DMA_Start_IT+0x220>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d013      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a22      	ldr	r2, [pc, #136]	@ (800300c <HAL_DMA_Start_IT+0x224>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d00e      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a21      	ldr	r2, [pc, #132]	@ (8003010 <HAL_DMA_Start_IT+0x228>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a1f      	ldr	r2, [pc, #124]	@ (8003014 <HAL_DMA_Start_IT+0x22c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d004      	beq.n	8002fa4 <HAL_DMA_Start_IT+0x1bc>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a1e      	ldr	r2, [pc, #120]	@ (8003018 <HAL_DMA_Start_IT+0x230>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d101      	bne.n	8002fa8 <HAL_DMA_Start_IT+0x1c0>
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e000      	b.n	8002faa <HAL_DMA_Start_IT+0x1c2>
 8002fa8:	2300      	movs	r3, #0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d036      	beq.n	800301c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 021e 	bic.w	r2, r3, #30
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0216 	orr.w	r2, r2, #22
 8002fc0:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d03e      	beq.n	8003048 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f042 0208 	orr.w	r2, r2, #8
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	e035      	b.n	8003048 <HAL_DMA_Start_IT+0x260>
 8002fdc:	40020010 	.word	0x40020010
 8002fe0:	40020028 	.word	0x40020028
 8002fe4:	40020040 	.word	0x40020040
 8002fe8:	40020058 	.word	0x40020058
 8002fec:	40020070 	.word	0x40020070
 8002ff0:	40020088 	.word	0x40020088
 8002ff4:	400200a0 	.word	0x400200a0
 8002ff8:	400200b8 	.word	0x400200b8
 8002ffc:	40020410 	.word	0x40020410
 8003000:	40020428 	.word	0x40020428
 8003004:	40020440 	.word	0x40020440
 8003008:	40020458 	.word	0x40020458
 800300c:	40020470 	.word	0x40020470
 8003010:	40020488 	.word	0x40020488
 8003014:	400204a0 	.word	0x400204a0
 8003018:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 020e 	bic.w	r2, r3, #14
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 020a 	orr.w	r2, r2, #10
 800302e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0204 	orr.w	r2, r2, #4
 8003046:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a83      	ldr	r2, [pc, #524]	@ (800325c <HAL_DMA_Start_IT+0x474>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d072      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a82      	ldr	r2, [pc, #520]	@ (8003260 <HAL_DMA_Start_IT+0x478>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d06d      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a80      	ldr	r2, [pc, #512]	@ (8003264 <HAL_DMA_Start_IT+0x47c>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d068      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a7f      	ldr	r2, [pc, #508]	@ (8003268 <HAL_DMA_Start_IT+0x480>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d063      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a7d      	ldr	r2, [pc, #500]	@ (800326c <HAL_DMA_Start_IT+0x484>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d05e      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a7c      	ldr	r2, [pc, #496]	@ (8003270 <HAL_DMA_Start_IT+0x488>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d059      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a7a      	ldr	r2, [pc, #488]	@ (8003274 <HAL_DMA_Start_IT+0x48c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d054      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a79      	ldr	r2, [pc, #484]	@ (8003278 <HAL_DMA_Start_IT+0x490>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d04f      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a77      	ldr	r2, [pc, #476]	@ (800327c <HAL_DMA_Start_IT+0x494>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d04a      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a76      	ldr	r2, [pc, #472]	@ (8003280 <HAL_DMA_Start_IT+0x498>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d045      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a74      	ldr	r2, [pc, #464]	@ (8003284 <HAL_DMA_Start_IT+0x49c>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d040      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a73      	ldr	r2, [pc, #460]	@ (8003288 <HAL_DMA_Start_IT+0x4a0>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d03b      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a71      	ldr	r2, [pc, #452]	@ (800328c <HAL_DMA_Start_IT+0x4a4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d036      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a70      	ldr	r2, [pc, #448]	@ (8003290 <HAL_DMA_Start_IT+0x4a8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d031      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003294 <HAL_DMA_Start_IT+0x4ac>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d02c      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a6d      	ldr	r2, [pc, #436]	@ (8003298 <HAL_DMA_Start_IT+0x4b0>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d027      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a6b      	ldr	r2, [pc, #428]	@ (800329c <HAL_DMA_Start_IT+0x4b4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d022      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6a      	ldr	r2, [pc, #424]	@ (80032a0 <HAL_DMA_Start_IT+0x4b8>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d01d      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a68      	ldr	r2, [pc, #416]	@ (80032a4 <HAL_DMA_Start_IT+0x4bc>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d018      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a67      	ldr	r2, [pc, #412]	@ (80032a8 <HAL_DMA_Start_IT+0x4c0>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d013      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a65      	ldr	r2, [pc, #404]	@ (80032ac <HAL_DMA_Start_IT+0x4c4>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00e      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a64      	ldr	r2, [pc, #400]	@ (80032b0 <HAL_DMA_Start_IT+0x4c8>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d009      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a62      	ldr	r2, [pc, #392]	@ (80032b4 <HAL_DMA_Start_IT+0x4cc>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d004      	beq.n	8003138 <HAL_DMA_Start_IT+0x350>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a61      	ldr	r2, [pc, #388]	@ (80032b8 <HAL_DMA_Start_IT+0x4d0>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d101      	bne.n	800313c <HAL_DMA_Start_IT+0x354>
 8003138:	2301      	movs	r3, #1
 800313a:	e000      	b.n	800313e <HAL_DMA_Start_IT+0x356>
 800313c:	2300      	movs	r3, #0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d01a      	beq.n	8003178 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800315a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800315e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003172:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003176:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a37      	ldr	r2, [pc, #220]	@ (800325c <HAL_DMA_Start_IT+0x474>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d04a      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a36      	ldr	r2, [pc, #216]	@ (8003260 <HAL_DMA_Start_IT+0x478>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d045      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a34      	ldr	r2, [pc, #208]	@ (8003264 <HAL_DMA_Start_IT+0x47c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d040      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a33      	ldr	r2, [pc, #204]	@ (8003268 <HAL_DMA_Start_IT+0x480>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d03b      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a31      	ldr	r2, [pc, #196]	@ (800326c <HAL_DMA_Start_IT+0x484>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d036      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a30      	ldr	r2, [pc, #192]	@ (8003270 <HAL_DMA_Start_IT+0x488>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d031      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a2e      	ldr	r2, [pc, #184]	@ (8003274 <HAL_DMA_Start_IT+0x48c>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d02c      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003278 <HAL_DMA_Start_IT+0x490>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d027      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a2b      	ldr	r2, [pc, #172]	@ (800327c <HAL_DMA_Start_IT+0x494>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d022      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a2a      	ldr	r2, [pc, #168]	@ (8003280 <HAL_DMA_Start_IT+0x498>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d01d      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a28      	ldr	r2, [pc, #160]	@ (8003284 <HAL_DMA_Start_IT+0x49c>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d018      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a27      	ldr	r2, [pc, #156]	@ (8003288 <HAL_DMA_Start_IT+0x4a0>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d013      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a25      	ldr	r2, [pc, #148]	@ (800328c <HAL_DMA_Start_IT+0x4a4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d00e      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a24      	ldr	r2, [pc, #144]	@ (8003290 <HAL_DMA_Start_IT+0x4a8>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d009      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a22      	ldr	r2, [pc, #136]	@ (8003294 <HAL_DMA_Start_IT+0x4ac>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d004      	beq.n	8003218 <HAL_DMA_Start_IT+0x430>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a21      	ldr	r2, [pc, #132]	@ (8003298 <HAL_DMA_Start_IT+0x4b0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d108      	bne.n	800322a <HAL_DMA_Start_IT+0x442>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	e012      	b.n	8003250 <HAL_DMA_Start_IT+0x468>
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f042 0201 	orr.w	r2, r2, #1
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e009      	b.n	8003250 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003242:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003250:	7dfb      	ldrb	r3, [r7, #23]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3718      	adds	r7, #24
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
 800325a:	bf00      	nop
 800325c:	40020010 	.word	0x40020010
 8003260:	40020028 	.word	0x40020028
 8003264:	40020040 	.word	0x40020040
 8003268:	40020058 	.word	0x40020058
 800326c:	40020070 	.word	0x40020070
 8003270:	40020088 	.word	0x40020088
 8003274:	400200a0 	.word	0x400200a0
 8003278:	400200b8 	.word	0x400200b8
 800327c:	40020410 	.word	0x40020410
 8003280:	40020428 	.word	0x40020428
 8003284:	40020440 	.word	0x40020440
 8003288:	40020458 	.word	0x40020458
 800328c:	40020470 	.word	0x40020470
 8003290:	40020488 	.word	0x40020488
 8003294:	400204a0 	.word	0x400204a0
 8003298:	400204b8 	.word	0x400204b8
 800329c:	58025408 	.word	0x58025408
 80032a0:	5802541c 	.word	0x5802541c
 80032a4:	58025430 	.word	0x58025430
 80032a8:	58025444 	.word	0x58025444
 80032ac:	58025458 	.word	0x58025458
 80032b0:	5802546c 	.word	0x5802546c
 80032b4:	58025480 	.word	0x58025480
 80032b8:	58025494 	.word	0x58025494

080032bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80032c4:	f7ff f928 	bl	8002518 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e2dc      	b.n	800388e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d008      	beq.n	80032f2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2280      	movs	r2, #128	@ 0x80
 80032e4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e2cd      	b.n	800388e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a76      	ldr	r2, [pc, #472]	@ (80034d0 <HAL_DMA_Abort+0x214>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d04a      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a74      	ldr	r2, [pc, #464]	@ (80034d4 <HAL_DMA_Abort+0x218>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d045      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a73      	ldr	r2, [pc, #460]	@ (80034d8 <HAL_DMA_Abort+0x21c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d040      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a71      	ldr	r2, [pc, #452]	@ (80034dc <HAL_DMA_Abort+0x220>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d03b      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a70      	ldr	r2, [pc, #448]	@ (80034e0 <HAL_DMA_Abort+0x224>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d036      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a6e      	ldr	r2, [pc, #440]	@ (80034e4 <HAL_DMA_Abort+0x228>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d031      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a6d      	ldr	r2, [pc, #436]	@ (80034e8 <HAL_DMA_Abort+0x22c>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d02c      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a6b      	ldr	r2, [pc, #428]	@ (80034ec <HAL_DMA_Abort+0x230>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d027      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a6a      	ldr	r2, [pc, #424]	@ (80034f0 <HAL_DMA_Abort+0x234>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d022      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a68      	ldr	r2, [pc, #416]	@ (80034f4 <HAL_DMA_Abort+0x238>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d01d      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a67      	ldr	r2, [pc, #412]	@ (80034f8 <HAL_DMA_Abort+0x23c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d018      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a65      	ldr	r2, [pc, #404]	@ (80034fc <HAL_DMA_Abort+0x240>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a64      	ldr	r2, [pc, #400]	@ (8003500 <HAL_DMA_Abort+0x244>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00e      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a62      	ldr	r2, [pc, #392]	@ (8003504 <HAL_DMA_Abort+0x248>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d009      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a61      	ldr	r2, [pc, #388]	@ (8003508 <HAL_DMA_Abort+0x24c>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_DMA_Abort+0xd6>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a5f      	ldr	r2, [pc, #380]	@ (800350c <HAL_DMA_Abort+0x250>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d101      	bne.n	8003396 <HAL_DMA_Abort+0xda>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_DMA_Abort+0xdc>
 8003396:	2300      	movs	r3, #0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 021e 	bic.w	r2, r2, #30
 80033aa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033ba:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	617b      	str	r3, [r7, #20]
 80033c2:	e00a      	b.n	80033da <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 020e 	bic.w	r2, r2, #14
 80033d2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a3c      	ldr	r2, [pc, #240]	@ (80034d0 <HAL_DMA_Abort+0x214>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d072      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a3a      	ldr	r2, [pc, #232]	@ (80034d4 <HAL_DMA_Abort+0x218>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d06d      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a39      	ldr	r2, [pc, #228]	@ (80034d8 <HAL_DMA_Abort+0x21c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d068      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a37      	ldr	r2, [pc, #220]	@ (80034dc <HAL_DMA_Abort+0x220>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d063      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a36      	ldr	r2, [pc, #216]	@ (80034e0 <HAL_DMA_Abort+0x224>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d05e      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a34      	ldr	r2, [pc, #208]	@ (80034e4 <HAL_DMA_Abort+0x228>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d059      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a33      	ldr	r2, [pc, #204]	@ (80034e8 <HAL_DMA_Abort+0x22c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d054      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a31      	ldr	r2, [pc, #196]	@ (80034ec <HAL_DMA_Abort+0x230>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d04f      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a30      	ldr	r2, [pc, #192]	@ (80034f0 <HAL_DMA_Abort+0x234>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d04a      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a2e      	ldr	r2, [pc, #184]	@ (80034f4 <HAL_DMA_Abort+0x238>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d045      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2d      	ldr	r2, [pc, #180]	@ (80034f8 <HAL_DMA_Abort+0x23c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d040      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a2b      	ldr	r2, [pc, #172]	@ (80034fc <HAL_DMA_Abort+0x240>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d03b      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a2a      	ldr	r2, [pc, #168]	@ (8003500 <HAL_DMA_Abort+0x244>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d036      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a28      	ldr	r2, [pc, #160]	@ (8003504 <HAL_DMA_Abort+0x248>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d031      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a27      	ldr	r2, [pc, #156]	@ (8003508 <HAL_DMA_Abort+0x24c>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d02c      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a25      	ldr	r2, [pc, #148]	@ (800350c <HAL_DMA_Abort+0x250>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d027      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a24      	ldr	r2, [pc, #144]	@ (8003510 <HAL_DMA_Abort+0x254>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d022      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a22      	ldr	r2, [pc, #136]	@ (8003514 <HAL_DMA_Abort+0x258>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d01d      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a21      	ldr	r2, [pc, #132]	@ (8003518 <HAL_DMA_Abort+0x25c>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d018      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a1f      	ldr	r2, [pc, #124]	@ (800351c <HAL_DMA_Abort+0x260>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d013      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a1e      	ldr	r2, [pc, #120]	@ (8003520 <HAL_DMA_Abort+0x264>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d00e      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a1c      	ldr	r2, [pc, #112]	@ (8003524 <HAL_DMA_Abort+0x268>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d009      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1b      	ldr	r2, [pc, #108]	@ (8003528 <HAL_DMA_Abort+0x26c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d004      	beq.n	80034ca <HAL_DMA_Abort+0x20e>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a19      	ldr	r2, [pc, #100]	@ (800352c <HAL_DMA_Abort+0x270>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d132      	bne.n	8003530 <HAL_DMA_Abort+0x274>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e031      	b.n	8003532 <HAL_DMA_Abort+0x276>
 80034ce:	bf00      	nop
 80034d0:	40020010 	.word	0x40020010
 80034d4:	40020028 	.word	0x40020028
 80034d8:	40020040 	.word	0x40020040
 80034dc:	40020058 	.word	0x40020058
 80034e0:	40020070 	.word	0x40020070
 80034e4:	40020088 	.word	0x40020088
 80034e8:	400200a0 	.word	0x400200a0
 80034ec:	400200b8 	.word	0x400200b8
 80034f0:	40020410 	.word	0x40020410
 80034f4:	40020428 	.word	0x40020428
 80034f8:	40020440 	.word	0x40020440
 80034fc:	40020458 	.word	0x40020458
 8003500:	40020470 	.word	0x40020470
 8003504:	40020488 	.word	0x40020488
 8003508:	400204a0 	.word	0x400204a0
 800350c:	400204b8 	.word	0x400204b8
 8003510:	58025408 	.word	0x58025408
 8003514:	5802541c 	.word	0x5802541c
 8003518:	58025430 	.word	0x58025430
 800351c:	58025444 	.word	0x58025444
 8003520:	58025458 	.word	0x58025458
 8003524:	5802546c 	.word	0x5802546c
 8003528:	58025480 	.word	0x58025480
 800352c:	58025494 	.word	0x58025494
 8003530:	2300      	movs	r3, #0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003540:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003544:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a6d      	ldr	r2, [pc, #436]	@ (8003700 <HAL_DMA_Abort+0x444>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d04a      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a6b      	ldr	r2, [pc, #428]	@ (8003704 <HAL_DMA_Abort+0x448>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d045      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6a      	ldr	r2, [pc, #424]	@ (8003708 <HAL_DMA_Abort+0x44c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d040      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a68      	ldr	r2, [pc, #416]	@ (800370c <HAL_DMA_Abort+0x450>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d03b      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a67      	ldr	r2, [pc, #412]	@ (8003710 <HAL_DMA_Abort+0x454>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d036      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a65      	ldr	r2, [pc, #404]	@ (8003714 <HAL_DMA_Abort+0x458>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d031      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a64      	ldr	r2, [pc, #400]	@ (8003718 <HAL_DMA_Abort+0x45c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d02c      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a62      	ldr	r2, [pc, #392]	@ (800371c <HAL_DMA_Abort+0x460>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d027      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a61      	ldr	r2, [pc, #388]	@ (8003720 <HAL_DMA_Abort+0x464>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d022      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a5f      	ldr	r2, [pc, #380]	@ (8003724 <HAL_DMA_Abort+0x468>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d01d      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a5e      	ldr	r2, [pc, #376]	@ (8003728 <HAL_DMA_Abort+0x46c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d018      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a5c      	ldr	r2, [pc, #368]	@ (800372c <HAL_DMA_Abort+0x470>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003730 <HAL_DMA_Abort+0x474>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d00e      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a59      	ldr	r2, [pc, #356]	@ (8003734 <HAL_DMA_Abort+0x478>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d009      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a58      	ldr	r2, [pc, #352]	@ (8003738 <HAL_DMA_Abort+0x47c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d004      	beq.n	80035e6 <HAL_DMA_Abort+0x32a>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a56      	ldr	r2, [pc, #344]	@ (800373c <HAL_DMA_Abort+0x480>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d108      	bne.n	80035f8 <HAL_DMA_Abort+0x33c>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0201 	bic.w	r2, r2, #1
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e007      	b.n	8003608 <HAL_DMA_Abort+0x34c>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0201 	bic.w	r2, r2, #1
 8003606:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003608:	e013      	b.n	8003632 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800360a:	f7fe ff85 	bl	8002518 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b05      	cmp	r3, #5
 8003616:	d90c      	bls.n	8003632 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2220      	movs	r2, #32
 800361c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2203      	movs	r2, #3
 8003622:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e12d      	b.n	800388e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1e5      	bne.n	800360a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2f      	ldr	r2, [pc, #188]	@ (8003700 <HAL_DMA_Abort+0x444>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d04a      	beq.n	80036de <HAL_DMA_Abort+0x422>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a2d      	ldr	r2, [pc, #180]	@ (8003704 <HAL_DMA_Abort+0x448>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d045      	beq.n	80036de <HAL_DMA_Abort+0x422>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a2c      	ldr	r2, [pc, #176]	@ (8003708 <HAL_DMA_Abort+0x44c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d040      	beq.n	80036de <HAL_DMA_Abort+0x422>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a2a      	ldr	r2, [pc, #168]	@ (800370c <HAL_DMA_Abort+0x450>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d03b      	beq.n	80036de <HAL_DMA_Abort+0x422>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a29      	ldr	r2, [pc, #164]	@ (8003710 <HAL_DMA_Abort+0x454>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d036      	beq.n	80036de <HAL_DMA_Abort+0x422>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a27      	ldr	r2, [pc, #156]	@ (8003714 <HAL_DMA_Abort+0x458>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d031      	beq.n	80036de <HAL_DMA_Abort+0x422>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a26      	ldr	r2, [pc, #152]	@ (8003718 <HAL_DMA_Abort+0x45c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d02c      	beq.n	80036de <HAL_DMA_Abort+0x422>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a24      	ldr	r2, [pc, #144]	@ (800371c <HAL_DMA_Abort+0x460>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d027      	beq.n	80036de <HAL_DMA_Abort+0x422>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a23      	ldr	r2, [pc, #140]	@ (8003720 <HAL_DMA_Abort+0x464>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d022      	beq.n	80036de <HAL_DMA_Abort+0x422>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a21      	ldr	r2, [pc, #132]	@ (8003724 <HAL_DMA_Abort+0x468>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01d      	beq.n	80036de <HAL_DMA_Abort+0x422>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a20      	ldr	r2, [pc, #128]	@ (8003728 <HAL_DMA_Abort+0x46c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d018      	beq.n	80036de <HAL_DMA_Abort+0x422>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a1e      	ldr	r2, [pc, #120]	@ (800372c <HAL_DMA_Abort+0x470>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_DMA_Abort+0x422>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a1d      	ldr	r2, [pc, #116]	@ (8003730 <HAL_DMA_Abort+0x474>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00e      	beq.n	80036de <HAL_DMA_Abort+0x422>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a1b      	ldr	r2, [pc, #108]	@ (8003734 <HAL_DMA_Abort+0x478>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d009      	beq.n	80036de <HAL_DMA_Abort+0x422>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003738 <HAL_DMA_Abort+0x47c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d004      	beq.n	80036de <HAL_DMA_Abort+0x422>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a18      	ldr	r2, [pc, #96]	@ (800373c <HAL_DMA_Abort+0x480>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d101      	bne.n	80036e2 <HAL_DMA_Abort+0x426>
 80036de:	2301      	movs	r3, #1
 80036e0:	e000      	b.n	80036e4 <HAL_DMA_Abort+0x428>
 80036e2:	2300      	movs	r3, #0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d02b      	beq.n	8003740 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ec:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f2:	f003 031f 	and.w	r3, r3, #31
 80036f6:	223f      	movs	r2, #63	@ 0x3f
 80036f8:	409a      	lsls	r2, r3
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	609a      	str	r2, [r3, #8]
 80036fe:	e02a      	b.n	8003756 <HAL_DMA_Abort+0x49a>
 8003700:	40020010 	.word	0x40020010
 8003704:	40020028 	.word	0x40020028
 8003708:	40020040 	.word	0x40020040
 800370c:	40020058 	.word	0x40020058
 8003710:	40020070 	.word	0x40020070
 8003714:	40020088 	.word	0x40020088
 8003718:	400200a0 	.word	0x400200a0
 800371c:	400200b8 	.word	0x400200b8
 8003720:	40020410 	.word	0x40020410
 8003724:	40020428 	.word	0x40020428
 8003728:	40020440 	.word	0x40020440
 800372c:	40020458 	.word	0x40020458
 8003730:	40020470 	.word	0x40020470
 8003734:	40020488 	.word	0x40020488
 8003738:	400204a0 	.word	0x400204a0
 800373c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003744:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	2201      	movs	r2, #1
 8003750:	409a      	lsls	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a4f      	ldr	r2, [pc, #316]	@ (8003898 <HAL_DMA_Abort+0x5dc>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d072      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a4d      	ldr	r2, [pc, #308]	@ (800389c <HAL_DMA_Abort+0x5e0>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d06d      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a4c      	ldr	r2, [pc, #304]	@ (80038a0 <HAL_DMA_Abort+0x5e4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d068      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a4a      	ldr	r2, [pc, #296]	@ (80038a4 <HAL_DMA_Abort+0x5e8>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d063      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a49      	ldr	r2, [pc, #292]	@ (80038a8 <HAL_DMA_Abort+0x5ec>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d05e      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a47      	ldr	r2, [pc, #284]	@ (80038ac <HAL_DMA_Abort+0x5f0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d059      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a46      	ldr	r2, [pc, #280]	@ (80038b0 <HAL_DMA_Abort+0x5f4>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d054      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a44      	ldr	r2, [pc, #272]	@ (80038b4 <HAL_DMA_Abort+0x5f8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d04f      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a43      	ldr	r2, [pc, #268]	@ (80038b8 <HAL_DMA_Abort+0x5fc>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d04a      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a41      	ldr	r2, [pc, #260]	@ (80038bc <HAL_DMA_Abort+0x600>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d045      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a40      	ldr	r2, [pc, #256]	@ (80038c0 <HAL_DMA_Abort+0x604>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d040      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a3e      	ldr	r2, [pc, #248]	@ (80038c4 <HAL_DMA_Abort+0x608>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d03b      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a3d      	ldr	r2, [pc, #244]	@ (80038c8 <HAL_DMA_Abort+0x60c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d036      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a3b      	ldr	r2, [pc, #236]	@ (80038cc <HAL_DMA_Abort+0x610>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d031      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a3a      	ldr	r2, [pc, #232]	@ (80038d0 <HAL_DMA_Abort+0x614>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d02c      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a38      	ldr	r2, [pc, #224]	@ (80038d4 <HAL_DMA_Abort+0x618>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d027      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a37      	ldr	r2, [pc, #220]	@ (80038d8 <HAL_DMA_Abort+0x61c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d022      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a35      	ldr	r2, [pc, #212]	@ (80038dc <HAL_DMA_Abort+0x620>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d01d      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a34      	ldr	r2, [pc, #208]	@ (80038e0 <HAL_DMA_Abort+0x624>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d018      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a32      	ldr	r2, [pc, #200]	@ (80038e4 <HAL_DMA_Abort+0x628>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d013      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a31      	ldr	r2, [pc, #196]	@ (80038e8 <HAL_DMA_Abort+0x62c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d00e      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a2f      	ldr	r2, [pc, #188]	@ (80038ec <HAL_DMA_Abort+0x630>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d009      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a2e      	ldr	r2, [pc, #184]	@ (80038f0 <HAL_DMA_Abort+0x634>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d004      	beq.n	8003846 <HAL_DMA_Abort+0x58a>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a2c      	ldr	r2, [pc, #176]	@ (80038f4 <HAL_DMA_Abort+0x638>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d101      	bne.n	800384a <HAL_DMA_Abort+0x58e>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_DMA_Abort+0x590>
 800384a:	2300      	movs	r3, #0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d015      	beq.n	800387c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003858:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00c      	beq.n	800387c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800386c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003870:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800387a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3718      	adds	r7, #24
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	40020010 	.word	0x40020010
 800389c:	40020028 	.word	0x40020028
 80038a0:	40020040 	.word	0x40020040
 80038a4:	40020058 	.word	0x40020058
 80038a8:	40020070 	.word	0x40020070
 80038ac:	40020088 	.word	0x40020088
 80038b0:	400200a0 	.word	0x400200a0
 80038b4:	400200b8 	.word	0x400200b8
 80038b8:	40020410 	.word	0x40020410
 80038bc:	40020428 	.word	0x40020428
 80038c0:	40020440 	.word	0x40020440
 80038c4:	40020458 	.word	0x40020458
 80038c8:	40020470 	.word	0x40020470
 80038cc:	40020488 	.word	0x40020488
 80038d0:	400204a0 	.word	0x400204a0
 80038d4:	400204b8 	.word	0x400204b8
 80038d8:	58025408 	.word	0x58025408
 80038dc:	5802541c 	.word	0x5802541c
 80038e0:	58025430 	.word	0x58025430
 80038e4:	58025444 	.word	0x58025444
 80038e8:	58025458 	.word	0x58025458
 80038ec:	5802546c 	.word	0x5802546c
 80038f0:	58025480 	.word	0x58025480
 80038f4:	58025494 	.word	0x58025494

080038f8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e237      	b.n	8003d7a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003910:	b2db      	uxtb	r3, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d004      	beq.n	8003920 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2280      	movs	r2, #128	@ 0x80
 800391a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e22c      	b.n	8003d7a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a5c      	ldr	r2, [pc, #368]	@ (8003a98 <HAL_DMA_Abort_IT+0x1a0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d04a      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a5b      	ldr	r2, [pc, #364]	@ (8003a9c <HAL_DMA_Abort_IT+0x1a4>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d045      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a59      	ldr	r2, [pc, #356]	@ (8003aa0 <HAL_DMA_Abort_IT+0x1a8>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d040      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a58      	ldr	r2, [pc, #352]	@ (8003aa4 <HAL_DMA_Abort_IT+0x1ac>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d03b      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a56      	ldr	r2, [pc, #344]	@ (8003aa8 <HAL_DMA_Abort_IT+0x1b0>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d036      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a55      	ldr	r2, [pc, #340]	@ (8003aac <HAL_DMA_Abort_IT+0x1b4>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d031      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a53      	ldr	r2, [pc, #332]	@ (8003ab0 <HAL_DMA_Abort_IT+0x1b8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d02c      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a52      	ldr	r2, [pc, #328]	@ (8003ab4 <HAL_DMA_Abort_IT+0x1bc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d027      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a50      	ldr	r2, [pc, #320]	@ (8003ab8 <HAL_DMA_Abort_IT+0x1c0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d022      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a4f      	ldr	r2, [pc, #316]	@ (8003abc <HAL_DMA_Abort_IT+0x1c4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d01d      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a4d      	ldr	r2, [pc, #308]	@ (8003ac0 <HAL_DMA_Abort_IT+0x1c8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d018      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a4c      	ldr	r2, [pc, #304]	@ (8003ac4 <HAL_DMA_Abort_IT+0x1cc>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d013      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a4a      	ldr	r2, [pc, #296]	@ (8003ac8 <HAL_DMA_Abort_IT+0x1d0>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d00e      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a49      	ldr	r2, [pc, #292]	@ (8003acc <HAL_DMA_Abort_IT+0x1d4>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d009      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a47      	ldr	r2, [pc, #284]	@ (8003ad0 <HAL_DMA_Abort_IT+0x1d8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d004      	beq.n	80039c0 <HAL_DMA_Abort_IT+0xc8>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a46      	ldr	r2, [pc, #280]	@ (8003ad4 <HAL_DMA_Abort_IT+0x1dc>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d101      	bne.n	80039c4 <HAL_DMA_Abort_IT+0xcc>
 80039c0:	2301      	movs	r3, #1
 80039c2:	e000      	b.n	80039c6 <HAL_DMA_Abort_IT+0xce>
 80039c4:	2300      	movs	r3, #0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	f000 8086 	beq.w	8003ad8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2204      	movs	r2, #4
 80039d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a2f      	ldr	r2, [pc, #188]	@ (8003a98 <HAL_DMA_Abort_IT+0x1a0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d04a      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a2e      	ldr	r2, [pc, #184]	@ (8003a9c <HAL_DMA_Abort_IT+0x1a4>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d045      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa0 <HAL_DMA_Abort_IT+0x1a8>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d040      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa4 <HAL_DMA_Abort_IT+0x1ac>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d03b      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a29      	ldr	r2, [pc, #164]	@ (8003aa8 <HAL_DMA_Abort_IT+0x1b0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d036      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a28      	ldr	r2, [pc, #160]	@ (8003aac <HAL_DMA_Abort_IT+0x1b4>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d031      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a26      	ldr	r2, [pc, #152]	@ (8003ab0 <HAL_DMA_Abort_IT+0x1b8>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d02c      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a25      	ldr	r2, [pc, #148]	@ (8003ab4 <HAL_DMA_Abort_IT+0x1bc>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d027      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a23      	ldr	r2, [pc, #140]	@ (8003ab8 <HAL_DMA_Abort_IT+0x1c0>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d022      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a22      	ldr	r2, [pc, #136]	@ (8003abc <HAL_DMA_Abort_IT+0x1c4>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d01d      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a20      	ldr	r2, [pc, #128]	@ (8003ac0 <HAL_DMA_Abort_IT+0x1c8>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d018      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac4 <HAL_DMA_Abort_IT+0x1cc>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac8 <HAL_DMA_Abort_IT+0x1d0>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00e      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8003acc <HAL_DMA_Abort_IT+0x1d4>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d009      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad0 <HAL_DMA_Abort_IT+0x1d8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_DMA_Abort_IT+0x17c>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a19      	ldr	r2, [pc, #100]	@ (8003ad4 <HAL_DMA_Abort_IT+0x1dc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d108      	bne.n	8003a86 <HAL_DMA_Abort_IT+0x18e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0201 	bic.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e178      	b.n	8003d78 <HAL_DMA_Abort_IT+0x480>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f022 0201 	bic.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e16f      	b.n	8003d78 <HAL_DMA_Abort_IT+0x480>
 8003a98:	40020010 	.word	0x40020010
 8003a9c:	40020028 	.word	0x40020028
 8003aa0:	40020040 	.word	0x40020040
 8003aa4:	40020058 	.word	0x40020058
 8003aa8:	40020070 	.word	0x40020070
 8003aac:	40020088 	.word	0x40020088
 8003ab0:	400200a0 	.word	0x400200a0
 8003ab4:	400200b8 	.word	0x400200b8
 8003ab8:	40020410 	.word	0x40020410
 8003abc:	40020428 	.word	0x40020428
 8003ac0:	40020440 	.word	0x40020440
 8003ac4:	40020458 	.word	0x40020458
 8003ac8:	40020470 	.word	0x40020470
 8003acc:	40020488 	.word	0x40020488
 8003ad0:	400204a0 	.word	0x400204a0
 8003ad4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 020e 	bic.w	r2, r2, #14
 8003ae6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a6c      	ldr	r2, [pc, #432]	@ (8003ca0 <HAL_DMA_Abort_IT+0x3a8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d04a      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a6b      	ldr	r2, [pc, #428]	@ (8003ca4 <HAL_DMA_Abort_IT+0x3ac>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d045      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a69      	ldr	r2, [pc, #420]	@ (8003ca8 <HAL_DMA_Abort_IT+0x3b0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d040      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a68      	ldr	r2, [pc, #416]	@ (8003cac <HAL_DMA_Abort_IT+0x3b4>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d03b      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a66      	ldr	r2, [pc, #408]	@ (8003cb0 <HAL_DMA_Abort_IT+0x3b8>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d036      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a65      	ldr	r2, [pc, #404]	@ (8003cb4 <HAL_DMA_Abort_IT+0x3bc>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d031      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a63      	ldr	r2, [pc, #396]	@ (8003cb8 <HAL_DMA_Abort_IT+0x3c0>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d02c      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a62      	ldr	r2, [pc, #392]	@ (8003cbc <HAL_DMA_Abort_IT+0x3c4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d027      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a60      	ldr	r2, [pc, #384]	@ (8003cc0 <HAL_DMA_Abort_IT+0x3c8>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d022      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a5f      	ldr	r2, [pc, #380]	@ (8003cc4 <HAL_DMA_Abort_IT+0x3cc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d01d      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a5d      	ldr	r2, [pc, #372]	@ (8003cc8 <HAL_DMA_Abort_IT+0x3d0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d018      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a5c      	ldr	r2, [pc, #368]	@ (8003ccc <HAL_DMA_Abort_IT+0x3d4>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d013      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a5a      	ldr	r2, [pc, #360]	@ (8003cd0 <HAL_DMA_Abort_IT+0x3d8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d00e      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a59      	ldr	r2, [pc, #356]	@ (8003cd4 <HAL_DMA_Abort_IT+0x3dc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d009      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a57      	ldr	r2, [pc, #348]	@ (8003cd8 <HAL_DMA_Abort_IT+0x3e0>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d004      	beq.n	8003b88 <HAL_DMA_Abort_IT+0x290>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a56      	ldr	r2, [pc, #344]	@ (8003cdc <HAL_DMA_Abort_IT+0x3e4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d108      	bne.n	8003b9a <HAL_DMA_Abort_IT+0x2a2>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f022 0201 	bic.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	e007      	b.n	8003baa <HAL_DMA_Abort_IT+0x2b2>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0201 	bic.w	r2, r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a3c      	ldr	r2, [pc, #240]	@ (8003ca0 <HAL_DMA_Abort_IT+0x3a8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d072      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a3a      	ldr	r2, [pc, #232]	@ (8003ca4 <HAL_DMA_Abort_IT+0x3ac>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d06d      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a39      	ldr	r2, [pc, #228]	@ (8003ca8 <HAL_DMA_Abort_IT+0x3b0>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d068      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a37      	ldr	r2, [pc, #220]	@ (8003cac <HAL_DMA_Abort_IT+0x3b4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d063      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a36      	ldr	r2, [pc, #216]	@ (8003cb0 <HAL_DMA_Abort_IT+0x3b8>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d05e      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a34      	ldr	r2, [pc, #208]	@ (8003cb4 <HAL_DMA_Abort_IT+0x3bc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d059      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a33      	ldr	r2, [pc, #204]	@ (8003cb8 <HAL_DMA_Abort_IT+0x3c0>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d054      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a31      	ldr	r2, [pc, #196]	@ (8003cbc <HAL_DMA_Abort_IT+0x3c4>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d04f      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a30      	ldr	r2, [pc, #192]	@ (8003cc0 <HAL_DMA_Abort_IT+0x3c8>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d04a      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a2e      	ldr	r2, [pc, #184]	@ (8003cc4 <HAL_DMA_Abort_IT+0x3cc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d045      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a2d      	ldr	r2, [pc, #180]	@ (8003cc8 <HAL_DMA_Abort_IT+0x3d0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d040      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8003ccc <HAL_DMA_Abort_IT+0x3d4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d03b      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a2a      	ldr	r2, [pc, #168]	@ (8003cd0 <HAL_DMA_Abort_IT+0x3d8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d036      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a28      	ldr	r2, [pc, #160]	@ (8003cd4 <HAL_DMA_Abort_IT+0x3dc>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d031      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a27      	ldr	r2, [pc, #156]	@ (8003cd8 <HAL_DMA_Abort_IT+0x3e0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d02c      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a25      	ldr	r2, [pc, #148]	@ (8003cdc <HAL_DMA_Abort_IT+0x3e4>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d027      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a24      	ldr	r2, [pc, #144]	@ (8003ce0 <HAL_DMA_Abort_IT+0x3e8>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d022      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a22      	ldr	r2, [pc, #136]	@ (8003ce4 <HAL_DMA_Abort_IT+0x3ec>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d01d      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a21      	ldr	r2, [pc, #132]	@ (8003ce8 <HAL_DMA_Abort_IT+0x3f0>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d018      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cec <HAL_DMA_Abort_IT+0x3f4>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d013      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf0 <HAL_DMA_Abort_IT+0x3f8>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d00e      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf4 <HAL_DMA_Abort_IT+0x3fc>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d009      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf8 <HAL_DMA_Abort_IT+0x400>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d004      	beq.n	8003c9a <HAL_DMA_Abort_IT+0x3a2>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a19      	ldr	r2, [pc, #100]	@ (8003cfc <HAL_DMA_Abort_IT+0x404>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d132      	bne.n	8003d00 <HAL_DMA_Abort_IT+0x408>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e031      	b.n	8003d02 <HAL_DMA_Abort_IT+0x40a>
 8003c9e:	bf00      	nop
 8003ca0:	40020010 	.word	0x40020010
 8003ca4:	40020028 	.word	0x40020028
 8003ca8:	40020040 	.word	0x40020040
 8003cac:	40020058 	.word	0x40020058
 8003cb0:	40020070 	.word	0x40020070
 8003cb4:	40020088 	.word	0x40020088
 8003cb8:	400200a0 	.word	0x400200a0
 8003cbc:	400200b8 	.word	0x400200b8
 8003cc0:	40020410 	.word	0x40020410
 8003cc4:	40020428 	.word	0x40020428
 8003cc8:	40020440 	.word	0x40020440
 8003ccc:	40020458 	.word	0x40020458
 8003cd0:	40020470 	.word	0x40020470
 8003cd4:	40020488 	.word	0x40020488
 8003cd8:	400204a0 	.word	0x400204a0
 8003cdc:	400204b8 	.word	0x400204b8
 8003ce0:	58025408 	.word	0x58025408
 8003ce4:	5802541c 	.word	0x5802541c
 8003ce8:	58025430 	.word	0x58025430
 8003cec:	58025444 	.word	0x58025444
 8003cf0:	58025458 	.word	0x58025458
 8003cf4:	5802546c 	.word	0x5802546c
 8003cf8:	58025480 	.word	0x58025480
 8003cfc:	58025494 	.word	0x58025494
 8003d00:	2300      	movs	r3, #0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d028      	beq.n	8003d58 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d14:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d1a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d20:	f003 031f 	and.w	r3, r3, #31
 8003d24:	2201      	movs	r2, #1
 8003d26:	409a      	lsls	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d30:	687a      	ldr	r2, [r7, #4]
 8003d32:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d34:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d00c      	beq.n	8003d58 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d4c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d56:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3710      	adds	r7, #16
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop

08003d84 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	@ 0x28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003d90:	4b67      	ldr	r3, [pc, #412]	@ (8003f30 <HAL_DMA_IRQHandler+0x1ac>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a67      	ldr	r2, [pc, #412]	@ (8003f34 <HAL_DMA_IRQHandler+0x1b0>)
 8003d96:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9a:	0a9b      	lsrs	r3, r3, #10
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003da8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a5f      	ldr	r2, [pc, #380]	@ (8003f38 <HAL_DMA_IRQHandler+0x1b4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d04a      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a5d      	ldr	r2, [pc, #372]	@ (8003f3c <HAL_DMA_IRQHandler+0x1b8>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d045      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a5c      	ldr	r2, [pc, #368]	@ (8003f40 <HAL_DMA_IRQHandler+0x1bc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d040      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a5a      	ldr	r2, [pc, #360]	@ (8003f44 <HAL_DMA_IRQHandler+0x1c0>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d03b      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a59      	ldr	r2, [pc, #356]	@ (8003f48 <HAL_DMA_IRQHandler+0x1c4>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d036      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a57      	ldr	r2, [pc, #348]	@ (8003f4c <HAL_DMA_IRQHandler+0x1c8>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d031      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a56      	ldr	r2, [pc, #344]	@ (8003f50 <HAL_DMA_IRQHandler+0x1cc>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d02c      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a54      	ldr	r2, [pc, #336]	@ (8003f54 <HAL_DMA_IRQHandler+0x1d0>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d027      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a53      	ldr	r2, [pc, #332]	@ (8003f58 <HAL_DMA_IRQHandler+0x1d4>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d022      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a51      	ldr	r2, [pc, #324]	@ (8003f5c <HAL_DMA_IRQHandler+0x1d8>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d01d      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a50      	ldr	r2, [pc, #320]	@ (8003f60 <HAL_DMA_IRQHandler+0x1dc>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d018      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a4e      	ldr	r2, [pc, #312]	@ (8003f64 <HAL_DMA_IRQHandler+0x1e0>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a4d      	ldr	r2, [pc, #308]	@ (8003f68 <HAL_DMA_IRQHandler+0x1e4>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d00e      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a4b      	ldr	r2, [pc, #300]	@ (8003f6c <HAL_DMA_IRQHandler+0x1e8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d009      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a4a      	ldr	r2, [pc, #296]	@ (8003f70 <HAL_DMA_IRQHandler+0x1ec>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d004      	beq.n	8003e56 <HAL_DMA_IRQHandler+0xd2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a48      	ldr	r2, [pc, #288]	@ (8003f74 <HAL_DMA_IRQHandler+0x1f0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d101      	bne.n	8003e5a <HAL_DMA_IRQHandler+0xd6>
 8003e56:	2301      	movs	r3, #1
 8003e58:	e000      	b.n	8003e5c <HAL_DMA_IRQHandler+0xd8>
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 842b 	beq.w	80046b8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e66:	f003 031f 	and.w	r3, r3, #31
 8003e6a:	2208      	movs	r2, #8
 8003e6c:	409a      	lsls	r2, r3
 8003e6e:	69bb      	ldr	r3, [r7, #24]
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 80a2 	beq.w	8003fbc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8003f38 <HAL_DMA_IRQHandler+0x1b4>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d04a      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a2d      	ldr	r2, [pc, #180]	@ (8003f3c <HAL_DMA_IRQHandler+0x1b8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d045      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a2b      	ldr	r2, [pc, #172]	@ (8003f40 <HAL_DMA_IRQHandler+0x1bc>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d040      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003f44 <HAL_DMA_IRQHandler+0x1c0>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d03b      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a28      	ldr	r2, [pc, #160]	@ (8003f48 <HAL_DMA_IRQHandler+0x1c4>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d036      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a27      	ldr	r2, [pc, #156]	@ (8003f4c <HAL_DMA_IRQHandler+0x1c8>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d031      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a25      	ldr	r2, [pc, #148]	@ (8003f50 <HAL_DMA_IRQHandler+0x1cc>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d02c      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a24      	ldr	r2, [pc, #144]	@ (8003f54 <HAL_DMA_IRQHandler+0x1d0>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d027      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a22      	ldr	r2, [pc, #136]	@ (8003f58 <HAL_DMA_IRQHandler+0x1d4>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d022      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a21      	ldr	r2, [pc, #132]	@ (8003f5c <HAL_DMA_IRQHandler+0x1d8>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d01d      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8003f60 <HAL_DMA_IRQHandler+0x1dc>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d018      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1e      	ldr	r2, [pc, #120]	@ (8003f64 <HAL_DMA_IRQHandler+0x1e0>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d013      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a1c      	ldr	r2, [pc, #112]	@ (8003f68 <HAL_DMA_IRQHandler+0x1e4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00e      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1b      	ldr	r2, [pc, #108]	@ (8003f6c <HAL_DMA_IRQHandler+0x1e8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d009      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a19      	ldr	r2, [pc, #100]	@ (8003f70 <HAL_DMA_IRQHandler+0x1ec>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d004      	beq.n	8003f18 <HAL_DMA_IRQHandler+0x194>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a18      	ldr	r2, [pc, #96]	@ (8003f74 <HAL_DMA_IRQHandler+0x1f0>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d12f      	bne.n	8003f78 <HAL_DMA_IRQHandler+0x1f4>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	bf14      	ite	ne
 8003f26:	2301      	movne	r3, #1
 8003f28:	2300      	moveq	r3, #0
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	e02e      	b.n	8003f8c <HAL_DMA_IRQHandler+0x208>
 8003f2e:	bf00      	nop
 8003f30:	24000000 	.word	0x24000000
 8003f34:	1b4e81b5 	.word	0x1b4e81b5
 8003f38:	40020010 	.word	0x40020010
 8003f3c:	40020028 	.word	0x40020028
 8003f40:	40020040 	.word	0x40020040
 8003f44:	40020058 	.word	0x40020058
 8003f48:	40020070 	.word	0x40020070
 8003f4c:	40020088 	.word	0x40020088
 8003f50:	400200a0 	.word	0x400200a0
 8003f54:	400200b8 	.word	0x400200b8
 8003f58:	40020410 	.word	0x40020410
 8003f5c:	40020428 	.word	0x40020428
 8003f60:	40020440 	.word	0x40020440
 8003f64:	40020458 	.word	0x40020458
 8003f68:	40020470 	.word	0x40020470
 8003f6c:	40020488 	.word	0x40020488
 8003f70:	400204a0 	.word	0x400204a0
 8003f74:	400204b8 	.word	0x400204b8
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0308 	and.w	r3, r3, #8
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d015      	beq.n	8003fbc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f022 0204 	bic.w	r2, r2, #4
 8003f9e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fa4:	f003 031f 	and.w	r3, r3, #31
 8003fa8:	2208      	movs	r2, #8
 8003faa:	409a      	lsls	r2, r3
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fb4:	f043 0201 	orr.w	r2, r3, #1
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d06e      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a69      	ldr	r2, [pc, #420]	@ (800417c <HAL_DMA_IRQHandler+0x3f8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d04a      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a67      	ldr	r2, [pc, #412]	@ (8004180 <HAL_DMA_IRQHandler+0x3fc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d045      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a66      	ldr	r2, [pc, #408]	@ (8004184 <HAL_DMA_IRQHandler+0x400>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d040      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a64      	ldr	r2, [pc, #400]	@ (8004188 <HAL_DMA_IRQHandler+0x404>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d03b      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a63      	ldr	r2, [pc, #396]	@ (800418c <HAL_DMA_IRQHandler+0x408>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d036      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a61      	ldr	r2, [pc, #388]	@ (8004190 <HAL_DMA_IRQHandler+0x40c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d031      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a60      	ldr	r2, [pc, #384]	@ (8004194 <HAL_DMA_IRQHandler+0x410>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d02c      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a5e      	ldr	r2, [pc, #376]	@ (8004198 <HAL_DMA_IRQHandler+0x414>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d027      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a5d      	ldr	r2, [pc, #372]	@ (800419c <HAL_DMA_IRQHandler+0x418>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d022      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a5b      	ldr	r2, [pc, #364]	@ (80041a0 <HAL_DMA_IRQHandler+0x41c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01d      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a5a      	ldr	r2, [pc, #360]	@ (80041a4 <HAL_DMA_IRQHandler+0x420>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d018      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a58      	ldr	r2, [pc, #352]	@ (80041a8 <HAL_DMA_IRQHandler+0x424>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a57      	ldr	r2, [pc, #348]	@ (80041ac <HAL_DMA_IRQHandler+0x428>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d00e      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a55      	ldr	r2, [pc, #340]	@ (80041b0 <HAL_DMA_IRQHandler+0x42c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d009      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a54      	ldr	r2, [pc, #336]	@ (80041b4 <HAL_DMA_IRQHandler+0x430>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d004      	beq.n	8004072 <HAL_DMA_IRQHandler+0x2ee>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a52      	ldr	r2, [pc, #328]	@ (80041b8 <HAL_DMA_IRQHandler+0x434>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d10a      	bne.n	8004088 <HAL_DMA_IRQHandler+0x304>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	695b      	ldr	r3, [r3, #20]
 8004078:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800407c:	2b00      	cmp	r3, #0
 800407e:	bf14      	ite	ne
 8004080:	2301      	movne	r3, #1
 8004082:	2300      	moveq	r3, #0
 8004084:	b2db      	uxtb	r3, r3
 8004086:	e003      	b.n	8004090 <HAL_DMA_IRQHandler+0x30c>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2300      	movs	r3, #0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00d      	beq.n	80040b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	2201      	movs	r2, #1
 800409e:	409a      	lsls	r2, r3
 80040a0:	6a3b      	ldr	r3, [r7, #32]
 80040a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a8:	f043 0202 	orr.w	r2, r3, #2
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040b4:	f003 031f 	and.w	r3, r3, #31
 80040b8:	2204      	movs	r2, #4
 80040ba:	409a      	lsls	r2, r3
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 808f 	beq.w	80041e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a2c      	ldr	r2, [pc, #176]	@ (800417c <HAL_DMA_IRQHandler+0x3f8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d04a      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a2a      	ldr	r2, [pc, #168]	@ (8004180 <HAL_DMA_IRQHandler+0x3fc>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d045      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a29      	ldr	r2, [pc, #164]	@ (8004184 <HAL_DMA_IRQHandler+0x400>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d040      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a27      	ldr	r2, [pc, #156]	@ (8004188 <HAL_DMA_IRQHandler+0x404>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d03b      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a26      	ldr	r2, [pc, #152]	@ (800418c <HAL_DMA_IRQHandler+0x408>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d036      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a24      	ldr	r2, [pc, #144]	@ (8004190 <HAL_DMA_IRQHandler+0x40c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d031      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a23      	ldr	r2, [pc, #140]	@ (8004194 <HAL_DMA_IRQHandler+0x410>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d02c      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a21      	ldr	r2, [pc, #132]	@ (8004198 <HAL_DMA_IRQHandler+0x414>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d027      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a20      	ldr	r2, [pc, #128]	@ (800419c <HAL_DMA_IRQHandler+0x418>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d022      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a1e      	ldr	r2, [pc, #120]	@ (80041a0 <HAL_DMA_IRQHandler+0x41c>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d01d      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1d      	ldr	r2, [pc, #116]	@ (80041a4 <HAL_DMA_IRQHandler+0x420>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d018      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1b      	ldr	r2, [pc, #108]	@ (80041a8 <HAL_DMA_IRQHandler+0x424>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d013      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1a      	ldr	r2, [pc, #104]	@ (80041ac <HAL_DMA_IRQHandler+0x428>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d00e      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a18      	ldr	r2, [pc, #96]	@ (80041b0 <HAL_DMA_IRQHandler+0x42c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d009      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a17      	ldr	r2, [pc, #92]	@ (80041b4 <HAL_DMA_IRQHandler+0x430>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d004      	beq.n	8004166 <HAL_DMA_IRQHandler+0x3e2>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a15      	ldr	r2, [pc, #84]	@ (80041b8 <HAL_DMA_IRQHandler+0x434>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d12a      	bne.n	80041bc <HAL_DMA_IRQHandler+0x438>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e023      	b.n	80041c4 <HAL_DMA_IRQHandler+0x440>
 800417c:	40020010 	.word	0x40020010
 8004180:	40020028 	.word	0x40020028
 8004184:	40020040 	.word	0x40020040
 8004188:	40020058 	.word	0x40020058
 800418c:	40020070 	.word	0x40020070
 8004190:	40020088 	.word	0x40020088
 8004194:	400200a0 	.word	0x400200a0
 8004198:	400200b8 	.word	0x400200b8
 800419c:	40020410 	.word	0x40020410
 80041a0:	40020428 	.word	0x40020428
 80041a4:	40020440 	.word	0x40020440
 80041a8:	40020458 	.word	0x40020458
 80041ac:	40020470 	.word	0x40020470
 80041b0:	40020488 	.word	0x40020488
 80041b4:	400204a0 	.word	0x400204a0
 80041b8:	400204b8 	.word	0x400204b8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2300      	movs	r3, #0
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00d      	beq.n	80041e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	2204      	movs	r2, #4
 80041d2:	409a      	lsls	r2, r3
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041dc:	f043 0204 	orr.w	r2, r3, #4
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	2210      	movs	r2, #16
 80041ee:	409a      	lsls	r2, r3
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	4013      	ands	r3, r2
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 80a6 	beq.w	8004346 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a85      	ldr	r2, [pc, #532]	@ (8004414 <HAL_DMA_IRQHandler+0x690>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d04a      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a83      	ldr	r2, [pc, #524]	@ (8004418 <HAL_DMA_IRQHandler+0x694>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d045      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a82      	ldr	r2, [pc, #520]	@ (800441c <HAL_DMA_IRQHandler+0x698>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d040      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a80      	ldr	r2, [pc, #512]	@ (8004420 <HAL_DMA_IRQHandler+0x69c>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d03b      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a7f      	ldr	r2, [pc, #508]	@ (8004424 <HAL_DMA_IRQHandler+0x6a0>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d036      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a7d      	ldr	r2, [pc, #500]	@ (8004428 <HAL_DMA_IRQHandler+0x6a4>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d031      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a7c      	ldr	r2, [pc, #496]	@ (800442c <HAL_DMA_IRQHandler+0x6a8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d02c      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a7a      	ldr	r2, [pc, #488]	@ (8004430 <HAL_DMA_IRQHandler+0x6ac>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d027      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a79      	ldr	r2, [pc, #484]	@ (8004434 <HAL_DMA_IRQHandler+0x6b0>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d022      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a77      	ldr	r2, [pc, #476]	@ (8004438 <HAL_DMA_IRQHandler+0x6b4>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d01d      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a76      	ldr	r2, [pc, #472]	@ (800443c <HAL_DMA_IRQHandler+0x6b8>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d018      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a74      	ldr	r2, [pc, #464]	@ (8004440 <HAL_DMA_IRQHandler+0x6bc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d013      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a73      	ldr	r2, [pc, #460]	@ (8004444 <HAL_DMA_IRQHandler+0x6c0>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d00e      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a71      	ldr	r2, [pc, #452]	@ (8004448 <HAL_DMA_IRQHandler+0x6c4>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d009      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a70      	ldr	r2, [pc, #448]	@ (800444c <HAL_DMA_IRQHandler+0x6c8>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d004      	beq.n	800429a <HAL_DMA_IRQHandler+0x516>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a6e      	ldr	r2, [pc, #440]	@ (8004450 <HAL_DMA_IRQHandler+0x6cc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d10a      	bne.n	80042b0 <HAL_DMA_IRQHandler+0x52c>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0308 	and.w	r3, r3, #8
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	e009      	b.n	80042c4 <HAL_DMA_IRQHandler+0x540>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	bf14      	ite	ne
 80042be:	2301      	movne	r3, #1
 80042c0:	2300      	moveq	r3, #0
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d03e      	beq.n	8004346 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	2210      	movs	r2, #16
 80042d2:	409a      	lsls	r2, r3
 80042d4:	6a3b      	ldr	r3, [r7, #32]
 80042d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d018      	beq.n	8004318 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d108      	bne.n	8004306 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d024      	beq.n	8004346 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	4798      	blx	r3
 8004304:	e01f      	b.n	8004346 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800430a:	2b00      	cmp	r3, #0
 800430c:	d01b      	beq.n	8004346 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4798      	blx	r3
 8004316:	e016      	b.n	8004346 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004322:	2b00      	cmp	r3, #0
 8004324:	d107      	bne.n	8004336 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f022 0208 	bic.w	r2, r2, #8
 8004334:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800434a:	f003 031f 	and.w	r3, r3, #31
 800434e:	2220      	movs	r2, #32
 8004350:	409a      	lsls	r2, r3
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	f000 8110 	beq.w	800457c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a2c      	ldr	r2, [pc, #176]	@ (8004414 <HAL_DMA_IRQHandler+0x690>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d04a      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a2b      	ldr	r2, [pc, #172]	@ (8004418 <HAL_DMA_IRQHandler+0x694>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d045      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a29      	ldr	r2, [pc, #164]	@ (800441c <HAL_DMA_IRQHandler+0x698>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d040      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a28      	ldr	r2, [pc, #160]	@ (8004420 <HAL_DMA_IRQHandler+0x69c>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d03b      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a26      	ldr	r2, [pc, #152]	@ (8004424 <HAL_DMA_IRQHandler+0x6a0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d036      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a25      	ldr	r2, [pc, #148]	@ (8004428 <HAL_DMA_IRQHandler+0x6a4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d031      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a23      	ldr	r2, [pc, #140]	@ (800442c <HAL_DMA_IRQHandler+0x6a8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d02c      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a22      	ldr	r2, [pc, #136]	@ (8004430 <HAL_DMA_IRQHandler+0x6ac>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d027      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a20      	ldr	r2, [pc, #128]	@ (8004434 <HAL_DMA_IRQHandler+0x6b0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d022      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004438 <HAL_DMA_IRQHandler+0x6b4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d01d      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a1d      	ldr	r2, [pc, #116]	@ (800443c <HAL_DMA_IRQHandler+0x6b8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d018      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a1c      	ldr	r2, [pc, #112]	@ (8004440 <HAL_DMA_IRQHandler+0x6bc>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d013      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a1a      	ldr	r2, [pc, #104]	@ (8004444 <HAL_DMA_IRQHandler+0x6c0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00e      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a19      	ldr	r2, [pc, #100]	@ (8004448 <HAL_DMA_IRQHandler+0x6c4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d009      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a17      	ldr	r2, [pc, #92]	@ (800444c <HAL_DMA_IRQHandler+0x6c8>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d004      	beq.n	80043fc <HAL_DMA_IRQHandler+0x678>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a16      	ldr	r2, [pc, #88]	@ (8004450 <HAL_DMA_IRQHandler+0x6cc>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d12b      	bne.n	8004454 <HAL_DMA_IRQHandler+0x6d0>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0310 	and.w	r3, r3, #16
 8004406:	2b00      	cmp	r3, #0
 8004408:	bf14      	ite	ne
 800440a:	2301      	movne	r3, #1
 800440c:	2300      	moveq	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	e02a      	b.n	8004468 <HAL_DMA_IRQHandler+0x6e4>
 8004412:	bf00      	nop
 8004414:	40020010 	.word	0x40020010
 8004418:	40020028 	.word	0x40020028
 800441c:	40020040 	.word	0x40020040
 8004420:	40020058 	.word	0x40020058
 8004424:	40020070 	.word	0x40020070
 8004428:	40020088 	.word	0x40020088
 800442c:	400200a0 	.word	0x400200a0
 8004430:	400200b8 	.word	0x400200b8
 8004434:	40020410 	.word	0x40020410
 8004438:	40020428 	.word	0x40020428
 800443c:	40020440 	.word	0x40020440
 8004440:	40020458 	.word	0x40020458
 8004444:	40020470 	.word	0x40020470
 8004448:	40020488 	.word	0x40020488
 800444c:	400204a0 	.word	0x400204a0
 8004450:	400204b8 	.word	0x400204b8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0302 	and.w	r3, r3, #2
 800445e:	2b00      	cmp	r3, #0
 8004460:	bf14      	ite	ne
 8004462:	2301      	movne	r3, #1
 8004464:	2300      	moveq	r3, #0
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 8087 	beq.w	800457c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004472:	f003 031f 	and.w	r3, r3, #31
 8004476:	2220      	movs	r2, #32
 8004478:	409a      	lsls	r2, r3
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b04      	cmp	r3, #4
 8004488:	d139      	bne.n	80044fe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0216 	bic.w	r2, r2, #22
 8004498:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695a      	ldr	r2, [r3, #20]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80044a8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d103      	bne.n	80044ba <HAL_DMA_IRQHandler+0x736>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f022 0208 	bic.w	r2, r2, #8
 80044c8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044ce:	f003 031f 	and.w	r3, r3, #31
 80044d2:	223f      	movs	r2, #63	@ 0x3f
 80044d4:	409a      	lsls	r2, r3
 80044d6:	6a3b      	ldr	r3, [r7, #32]
 80044d8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 834a 	beq.w	8004b88 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
          }
          return;
 80044fc:	e344      	b.n	8004b88 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004508:	2b00      	cmp	r3, #0
 800450a:	d018      	beq.n	800453e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d108      	bne.n	800452c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451e:	2b00      	cmp	r3, #0
 8004520:	d02c      	beq.n	800457c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	4798      	blx	r3
 800452a:	e027      	b.n	800457c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004530:	2b00      	cmp	r3, #0
 8004532:	d023      	beq.n	800457c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
 800453c:	e01e      	b.n	800457c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10f      	bne.n	800456c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0210 	bic.w	r2, r2, #16
 800455a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8306 	beq.w	8004b92 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 8088 	beq.w	80046a4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2204      	movs	r2, #4
 8004598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a7a      	ldr	r2, [pc, #488]	@ (800478c <HAL_DMA_IRQHandler+0xa08>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d04a      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a79      	ldr	r2, [pc, #484]	@ (8004790 <HAL_DMA_IRQHandler+0xa0c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d045      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a77      	ldr	r2, [pc, #476]	@ (8004794 <HAL_DMA_IRQHandler+0xa10>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d040      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a76      	ldr	r2, [pc, #472]	@ (8004798 <HAL_DMA_IRQHandler+0xa14>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d03b      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a74      	ldr	r2, [pc, #464]	@ (800479c <HAL_DMA_IRQHandler+0xa18>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d036      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a73      	ldr	r2, [pc, #460]	@ (80047a0 <HAL_DMA_IRQHandler+0xa1c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d031      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a71      	ldr	r2, [pc, #452]	@ (80047a4 <HAL_DMA_IRQHandler+0xa20>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d02c      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a70      	ldr	r2, [pc, #448]	@ (80047a8 <HAL_DMA_IRQHandler+0xa24>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d027      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a6e      	ldr	r2, [pc, #440]	@ (80047ac <HAL_DMA_IRQHandler+0xa28>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d022      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a6d      	ldr	r2, [pc, #436]	@ (80047b0 <HAL_DMA_IRQHandler+0xa2c>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d01d      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a6b      	ldr	r2, [pc, #428]	@ (80047b4 <HAL_DMA_IRQHandler+0xa30>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d018      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a6a      	ldr	r2, [pc, #424]	@ (80047b8 <HAL_DMA_IRQHandler+0xa34>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d013      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a68      	ldr	r2, [pc, #416]	@ (80047bc <HAL_DMA_IRQHandler+0xa38>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d00e      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a67      	ldr	r2, [pc, #412]	@ (80047c0 <HAL_DMA_IRQHandler+0xa3c>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d009      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a65      	ldr	r2, [pc, #404]	@ (80047c4 <HAL_DMA_IRQHandler+0xa40>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d004      	beq.n	800463c <HAL_DMA_IRQHandler+0x8b8>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a64      	ldr	r2, [pc, #400]	@ (80047c8 <HAL_DMA_IRQHandler+0xa44>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d108      	bne.n	800464e <HAL_DMA_IRQHandler+0x8ca>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681a      	ldr	r2, [r3, #0]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f022 0201 	bic.w	r2, r2, #1
 800464a:	601a      	str	r2, [r3, #0]
 800464c:	e007      	b.n	800465e <HAL_DMA_IRQHandler+0x8da>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0201 	bic.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	3301      	adds	r3, #1
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004666:	429a      	cmp	r2, r3
 8004668:	d307      	bcc.n	800467a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1f2      	bne.n	800465e <HAL_DMA_IRQHandler+0x8da>
 8004678:	e000      	b.n	800467c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800467a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2203      	movs	r2, #3
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004692:	e003      	b.n	800469c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8272 	beq.w	8004b92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4798      	blx	r3
 80046b6:	e26c      	b.n	8004b92 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a43      	ldr	r2, [pc, #268]	@ (80047cc <HAL_DMA_IRQHandler+0xa48>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d022      	beq.n	8004708 <HAL_DMA_IRQHandler+0x984>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a42      	ldr	r2, [pc, #264]	@ (80047d0 <HAL_DMA_IRQHandler+0xa4c>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d01d      	beq.n	8004708 <HAL_DMA_IRQHandler+0x984>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a40      	ldr	r2, [pc, #256]	@ (80047d4 <HAL_DMA_IRQHandler+0xa50>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d018      	beq.n	8004708 <HAL_DMA_IRQHandler+0x984>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a3f      	ldr	r2, [pc, #252]	@ (80047d8 <HAL_DMA_IRQHandler+0xa54>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d013      	beq.n	8004708 <HAL_DMA_IRQHandler+0x984>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a3d      	ldr	r2, [pc, #244]	@ (80047dc <HAL_DMA_IRQHandler+0xa58>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00e      	beq.n	8004708 <HAL_DMA_IRQHandler+0x984>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a3c      	ldr	r2, [pc, #240]	@ (80047e0 <HAL_DMA_IRQHandler+0xa5c>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d009      	beq.n	8004708 <HAL_DMA_IRQHandler+0x984>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a3a      	ldr	r2, [pc, #232]	@ (80047e4 <HAL_DMA_IRQHandler+0xa60>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d004      	beq.n	8004708 <HAL_DMA_IRQHandler+0x984>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a39      	ldr	r2, [pc, #228]	@ (80047e8 <HAL_DMA_IRQHandler+0xa64>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d101      	bne.n	800470c <HAL_DMA_IRQHandler+0x988>
 8004708:	2301      	movs	r3, #1
 800470a:	e000      	b.n	800470e <HAL_DMA_IRQHandler+0x98a>
 800470c:	2300      	movs	r3, #0
 800470e:	2b00      	cmp	r3, #0
 8004710:	f000 823f 	beq.w	8004b92 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004720:	f003 031f 	and.w	r3, r3, #31
 8004724:	2204      	movs	r2, #4
 8004726:	409a      	lsls	r2, r3
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	f000 80cd 	beq.w	80048cc <HAL_DMA_IRQHandler+0xb48>
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	f003 0304 	and.w	r3, r3, #4
 8004738:	2b00      	cmp	r3, #0
 800473a:	f000 80c7 	beq.w	80048cc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004742:	f003 031f 	and.w	r3, r3, #31
 8004746:	2204      	movs	r2, #4
 8004748:	409a      	lsls	r2, r3
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d049      	beq.n	80047ec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d109      	bne.n	8004776 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8210 	beq.w	8004b8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004774:	e20a      	b.n	8004b8c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 8206 	beq.w	8004b8c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004788:	e200      	b.n	8004b8c <HAL_DMA_IRQHandler+0xe08>
 800478a:	bf00      	nop
 800478c:	40020010 	.word	0x40020010
 8004790:	40020028 	.word	0x40020028
 8004794:	40020040 	.word	0x40020040
 8004798:	40020058 	.word	0x40020058
 800479c:	40020070 	.word	0x40020070
 80047a0:	40020088 	.word	0x40020088
 80047a4:	400200a0 	.word	0x400200a0
 80047a8:	400200b8 	.word	0x400200b8
 80047ac:	40020410 	.word	0x40020410
 80047b0:	40020428 	.word	0x40020428
 80047b4:	40020440 	.word	0x40020440
 80047b8:	40020458 	.word	0x40020458
 80047bc:	40020470 	.word	0x40020470
 80047c0:	40020488 	.word	0x40020488
 80047c4:	400204a0 	.word	0x400204a0
 80047c8:	400204b8 	.word	0x400204b8
 80047cc:	58025408 	.word	0x58025408
 80047d0:	5802541c 	.word	0x5802541c
 80047d4:	58025430 	.word	0x58025430
 80047d8:	58025444 	.word	0x58025444
 80047dc:	58025458 	.word	0x58025458
 80047e0:	5802546c 	.word	0x5802546c
 80047e4:	58025480 	.word	0x58025480
 80047e8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80047ec:	693b      	ldr	r3, [r7, #16]
 80047ee:	f003 0320 	and.w	r3, r3, #32
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d160      	bne.n	80048b8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a7f      	ldr	r2, [pc, #508]	@ (80049f8 <HAL_DMA_IRQHandler+0xc74>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d04a      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a7d      	ldr	r2, [pc, #500]	@ (80049fc <HAL_DMA_IRQHandler+0xc78>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d045      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a7c      	ldr	r2, [pc, #496]	@ (8004a00 <HAL_DMA_IRQHandler+0xc7c>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d040      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a7a      	ldr	r2, [pc, #488]	@ (8004a04 <HAL_DMA_IRQHandler+0xc80>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d03b      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a79      	ldr	r2, [pc, #484]	@ (8004a08 <HAL_DMA_IRQHandler+0xc84>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d036      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a77      	ldr	r2, [pc, #476]	@ (8004a0c <HAL_DMA_IRQHandler+0xc88>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d031      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a76      	ldr	r2, [pc, #472]	@ (8004a10 <HAL_DMA_IRQHandler+0xc8c>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d02c      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a74      	ldr	r2, [pc, #464]	@ (8004a14 <HAL_DMA_IRQHandler+0xc90>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d027      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a73      	ldr	r2, [pc, #460]	@ (8004a18 <HAL_DMA_IRQHandler+0xc94>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d022      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a71      	ldr	r2, [pc, #452]	@ (8004a1c <HAL_DMA_IRQHandler+0xc98>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d01d      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a70      	ldr	r2, [pc, #448]	@ (8004a20 <HAL_DMA_IRQHandler+0xc9c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d018      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a6e      	ldr	r2, [pc, #440]	@ (8004a24 <HAL_DMA_IRQHandler+0xca0>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d013      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a6d      	ldr	r2, [pc, #436]	@ (8004a28 <HAL_DMA_IRQHandler+0xca4>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d00e      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a6b      	ldr	r2, [pc, #428]	@ (8004a2c <HAL_DMA_IRQHandler+0xca8>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d009      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a6a      	ldr	r2, [pc, #424]	@ (8004a30 <HAL_DMA_IRQHandler+0xcac>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d004      	beq.n	8004896 <HAL_DMA_IRQHandler+0xb12>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a68      	ldr	r2, [pc, #416]	@ (8004a34 <HAL_DMA_IRQHandler+0xcb0>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d108      	bne.n	80048a8 <HAL_DMA_IRQHandler+0xb24>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f022 0208 	bic.w	r2, r2, #8
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e007      	b.n	80048b8 <HAL_DMA_IRQHandler+0xb34>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0204 	bic.w	r2, r2, #4
 80048b6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 8165 	beq.w	8004b8c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048ca:	e15f      	b.n	8004b8c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d0:	f003 031f 	and.w	r3, r3, #31
 80048d4:	2202      	movs	r2, #2
 80048d6:	409a      	lsls	r2, r3
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	4013      	ands	r3, r2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80c5 	beq.w	8004a6c <HAL_DMA_IRQHandler+0xce8>
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80bf 	beq.w	8004a6c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	2202      	movs	r2, #2
 80048f8:	409a      	lsls	r2, r3
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d018      	beq.n	800493a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d109      	bne.n	8004926 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 813a 	beq.w	8004b90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004924:	e134      	b.n	8004b90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800492a:	2b00      	cmp	r3, #0
 800492c:	f000 8130 	beq.w	8004b90 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004938:	e12a      	b.n	8004b90 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	f003 0320 	and.w	r3, r3, #32
 8004940:	2b00      	cmp	r3, #0
 8004942:	f040 8089 	bne.w	8004a58 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a2b      	ldr	r2, [pc, #172]	@ (80049f8 <HAL_DMA_IRQHandler+0xc74>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d04a      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a29      	ldr	r2, [pc, #164]	@ (80049fc <HAL_DMA_IRQHandler+0xc78>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d045      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a28      	ldr	r2, [pc, #160]	@ (8004a00 <HAL_DMA_IRQHandler+0xc7c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d040      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a26      	ldr	r2, [pc, #152]	@ (8004a04 <HAL_DMA_IRQHandler+0xc80>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d03b      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a25      	ldr	r2, [pc, #148]	@ (8004a08 <HAL_DMA_IRQHandler+0xc84>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d036      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a23      	ldr	r2, [pc, #140]	@ (8004a0c <HAL_DMA_IRQHandler+0xc88>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d031      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a22      	ldr	r2, [pc, #136]	@ (8004a10 <HAL_DMA_IRQHandler+0xc8c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d02c      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a20      	ldr	r2, [pc, #128]	@ (8004a14 <HAL_DMA_IRQHandler+0xc90>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d027      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1f      	ldr	r2, [pc, #124]	@ (8004a18 <HAL_DMA_IRQHandler+0xc94>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d022      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a1c <HAL_DMA_IRQHandler+0xc98>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d01d      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1c      	ldr	r2, [pc, #112]	@ (8004a20 <HAL_DMA_IRQHandler+0xc9c>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d018      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a1a      	ldr	r2, [pc, #104]	@ (8004a24 <HAL_DMA_IRQHandler+0xca0>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d013      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a19      	ldr	r2, [pc, #100]	@ (8004a28 <HAL_DMA_IRQHandler+0xca4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d00e      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a17      	ldr	r2, [pc, #92]	@ (8004a2c <HAL_DMA_IRQHandler+0xca8>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d009      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a16      	ldr	r2, [pc, #88]	@ (8004a30 <HAL_DMA_IRQHandler+0xcac>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d004      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xc62>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a14      	ldr	r2, [pc, #80]	@ (8004a34 <HAL_DMA_IRQHandler+0xcb0>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d128      	bne.n	8004a38 <HAL_DMA_IRQHandler+0xcb4>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0214 	bic.w	r2, r2, #20
 80049f4:	601a      	str	r2, [r3, #0]
 80049f6:	e027      	b.n	8004a48 <HAL_DMA_IRQHandler+0xcc4>
 80049f8:	40020010 	.word	0x40020010
 80049fc:	40020028 	.word	0x40020028
 8004a00:	40020040 	.word	0x40020040
 8004a04:	40020058 	.word	0x40020058
 8004a08:	40020070 	.word	0x40020070
 8004a0c:	40020088 	.word	0x40020088
 8004a10:	400200a0 	.word	0x400200a0
 8004a14:	400200b8 	.word	0x400200b8
 8004a18:	40020410 	.word	0x40020410
 8004a1c:	40020428 	.word	0x40020428
 8004a20:	40020440 	.word	0x40020440
 8004a24:	40020458 	.word	0x40020458
 8004a28:	40020470 	.word	0x40020470
 8004a2c:	40020488 	.word	0x40020488
 8004a30:	400204a0 	.word	0x400204a0
 8004a34:	400204b8 	.word	0x400204b8
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f022 020a 	bic.w	r2, r2, #10
 8004a46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 8097 	beq.w	8004b90 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004a6a:	e091      	b.n	8004b90 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	2208      	movs	r2, #8
 8004a76:	409a      	lsls	r2, r3
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	4013      	ands	r3, r2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 8088 	beq.w	8004b92 <HAL_DMA_IRQHandler+0xe0e>
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	f003 0308 	and.w	r3, r3, #8
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	f000 8082 	beq.w	8004b92 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a41      	ldr	r2, [pc, #260]	@ (8004b98 <HAL_DMA_IRQHandler+0xe14>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d04a      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a3f      	ldr	r2, [pc, #252]	@ (8004b9c <HAL_DMA_IRQHandler+0xe18>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d045      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ba0 <HAL_DMA_IRQHandler+0xe1c>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d040      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba4 <HAL_DMA_IRQHandler+0xe20>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d03b      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a3b      	ldr	r2, [pc, #236]	@ (8004ba8 <HAL_DMA_IRQHandler+0xe24>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d036      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a39      	ldr	r2, [pc, #228]	@ (8004bac <HAL_DMA_IRQHandler+0xe28>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d031      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a38      	ldr	r2, [pc, #224]	@ (8004bb0 <HAL_DMA_IRQHandler+0xe2c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d02c      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a36      	ldr	r2, [pc, #216]	@ (8004bb4 <HAL_DMA_IRQHandler+0xe30>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d027      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a35      	ldr	r2, [pc, #212]	@ (8004bb8 <HAL_DMA_IRQHandler+0xe34>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d022      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a33      	ldr	r2, [pc, #204]	@ (8004bbc <HAL_DMA_IRQHandler+0xe38>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d01d      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a32      	ldr	r2, [pc, #200]	@ (8004bc0 <HAL_DMA_IRQHandler+0xe3c>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d018      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a30      	ldr	r2, [pc, #192]	@ (8004bc4 <HAL_DMA_IRQHandler+0xe40>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d013      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a2f      	ldr	r2, [pc, #188]	@ (8004bc8 <HAL_DMA_IRQHandler+0xe44>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d00e      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a2d      	ldr	r2, [pc, #180]	@ (8004bcc <HAL_DMA_IRQHandler+0xe48>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d009      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a2c      	ldr	r2, [pc, #176]	@ (8004bd0 <HAL_DMA_IRQHandler+0xe4c>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d004      	beq.n	8004b2e <HAL_DMA_IRQHandler+0xdaa>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a2a      	ldr	r2, [pc, #168]	@ (8004bd4 <HAL_DMA_IRQHandler+0xe50>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d108      	bne.n	8004b40 <HAL_DMA_IRQHandler+0xdbc>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 021c 	bic.w	r2, r2, #28
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e007      	b.n	8004b50 <HAL_DMA_IRQHandler+0xdcc>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f022 020e 	bic.w	r2, r2, #14
 8004b4e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	2201      	movs	r2, #1
 8004b5a:	409a      	lsls	r2, r3
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d009      	beq.n	8004b92 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	4798      	blx	r3
 8004b86:	e004      	b.n	8004b92 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004b88:	bf00      	nop
 8004b8a:	e002      	b.n	8004b92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b8c:	bf00      	nop
 8004b8e:	e000      	b.n	8004b92 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004b90:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b92:	3728      	adds	r7, #40	@ 0x28
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	40020010 	.word	0x40020010
 8004b9c:	40020028 	.word	0x40020028
 8004ba0:	40020040 	.word	0x40020040
 8004ba4:	40020058 	.word	0x40020058
 8004ba8:	40020070 	.word	0x40020070
 8004bac:	40020088 	.word	0x40020088
 8004bb0:	400200a0 	.word	0x400200a0
 8004bb4:	400200b8 	.word	0x400200b8
 8004bb8:	40020410 	.word	0x40020410
 8004bbc:	40020428 	.word	0x40020428
 8004bc0:	40020440 	.word	0x40020440
 8004bc4:	40020458 	.word	0x40020458
 8004bc8:	40020470 	.word	0x40020470
 8004bcc:	40020488 	.word	0x40020488
 8004bd0:	400204a0 	.word	0x400204a0
 8004bd4:	400204b8 	.word	0x400204b8

08004bd8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b083      	sub	sp, #12
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c02:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c08:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a7f      	ldr	r2, [pc, #508]	@ (8004e0c <DMA_SetConfig+0x21c>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d072      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a7d      	ldr	r2, [pc, #500]	@ (8004e10 <DMA_SetConfig+0x220>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d06d      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a7c      	ldr	r2, [pc, #496]	@ (8004e14 <DMA_SetConfig+0x224>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d068      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a7a      	ldr	r2, [pc, #488]	@ (8004e18 <DMA_SetConfig+0x228>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d063      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a79      	ldr	r2, [pc, #484]	@ (8004e1c <DMA_SetConfig+0x22c>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d05e      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a77      	ldr	r2, [pc, #476]	@ (8004e20 <DMA_SetConfig+0x230>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d059      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a76      	ldr	r2, [pc, #472]	@ (8004e24 <DMA_SetConfig+0x234>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d054      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a74      	ldr	r2, [pc, #464]	@ (8004e28 <DMA_SetConfig+0x238>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d04f      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a73      	ldr	r2, [pc, #460]	@ (8004e2c <DMA_SetConfig+0x23c>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d04a      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a71      	ldr	r2, [pc, #452]	@ (8004e30 <DMA_SetConfig+0x240>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d045      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a70      	ldr	r2, [pc, #448]	@ (8004e34 <DMA_SetConfig+0x244>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d040      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a6e      	ldr	r2, [pc, #440]	@ (8004e38 <DMA_SetConfig+0x248>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d03b      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a6d      	ldr	r2, [pc, #436]	@ (8004e3c <DMA_SetConfig+0x24c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d036      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a6b      	ldr	r2, [pc, #428]	@ (8004e40 <DMA_SetConfig+0x250>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d031      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a6a      	ldr	r2, [pc, #424]	@ (8004e44 <DMA_SetConfig+0x254>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d02c      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a68      	ldr	r2, [pc, #416]	@ (8004e48 <DMA_SetConfig+0x258>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d027      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a67      	ldr	r2, [pc, #412]	@ (8004e4c <DMA_SetConfig+0x25c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d022      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a65      	ldr	r2, [pc, #404]	@ (8004e50 <DMA_SetConfig+0x260>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d01d      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a64      	ldr	r2, [pc, #400]	@ (8004e54 <DMA_SetConfig+0x264>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d018      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a62      	ldr	r2, [pc, #392]	@ (8004e58 <DMA_SetConfig+0x268>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d013      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a61      	ldr	r2, [pc, #388]	@ (8004e5c <DMA_SetConfig+0x26c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d00e      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a5f      	ldr	r2, [pc, #380]	@ (8004e60 <DMA_SetConfig+0x270>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d009      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a5e      	ldr	r2, [pc, #376]	@ (8004e64 <DMA_SetConfig+0x274>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d004      	beq.n	8004cfa <DMA_SetConfig+0x10a>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a5c      	ldr	r2, [pc, #368]	@ (8004e68 <DMA_SetConfig+0x278>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d101      	bne.n	8004cfe <DMA_SetConfig+0x10e>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <DMA_SetConfig+0x110>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00d      	beq.n	8004d20 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004d0c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d004      	beq.n	8004d20 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004d1e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a39      	ldr	r2, [pc, #228]	@ (8004e0c <DMA_SetConfig+0x21c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d04a      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a38      	ldr	r2, [pc, #224]	@ (8004e10 <DMA_SetConfig+0x220>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d045      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a36      	ldr	r2, [pc, #216]	@ (8004e14 <DMA_SetConfig+0x224>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d040      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a35      	ldr	r2, [pc, #212]	@ (8004e18 <DMA_SetConfig+0x228>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d03b      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a33      	ldr	r2, [pc, #204]	@ (8004e1c <DMA_SetConfig+0x22c>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d036      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a32      	ldr	r2, [pc, #200]	@ (8004e20 <DMA_SetConfig+0x230>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d031      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a30      	ldr	r2, [pc, #192]	@ (8004e24 <DMA_SetConfig+0x234>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d02c      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004e28 <DMA_SetConfig+0x238>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d027      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a2d      	ldr	r2, [pc, #180]	@ (8004e2c <DMA_SetConfig+0x23c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d022      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a2c      	ldr	r2, [pc, #176]	@ (8004e30 <DMA_SetConfig+0x240>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d01d      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a2a      	ldr	r2, [pc, #168]	@ (8004e34 <DMA_SetConfig+0x244>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d018      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a29      	ldr	r2, [pc, #164]	@ (8004e38 <DMA_SetConfig+0x248>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d013      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a27      	ldr	r2, [pc, #156]	@ (8004e3c <DMA_SetConfig+0x24c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00e      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a26      	ldr	r2, [pc, #152]	@ (8004e40 <DMA_SetConfig+0x250>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d009      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a24      	ldr	r2, [pc, #144]	@ (8004e44 <DMA_SetConfig+0x254>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d004      	beq.n	8004dc0 <DMA_SetConfig+0x1d0>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a23      	ldr	r2, [pc, #140]	@ (8004e48 <DMA_SetConfig+0x258>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d101      	bne.n	8004dc4 <DMA_SetConfig+0x1d4>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e000      	b.n	8004dc6 <DMA_SetConfig+0x1d6>
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d059      	beq.n	8004e7e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dce:	f003 031f 	and.w	r3, r3, #31
 8004dd2:	223f      	movs	r2, #63	@ 0x3f
 8004dd4:	409a      	lsls	r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004de8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	2b40      	cmp	r3, #64	@ 0x40
 8004df8:	d138      	bne.n	8004e6c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68ba      	ldr	r2, [r7, #8]
 8004e08:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004e0a:	e086      	b.n	8004f1a <DMA_SetConfig+0x32a>
 8004e0c:	40020010 	.word	0x40020010
 8004e10:	40020028 	.word	0x40020028
 8004e14:	40020040 	.word	0x40020040
 8004e18:	40020058 	.word	0x40020058
 8004e1c:	40020070 	.word	0x40020070
 8004e20:	40020088 	.word	0x40020088
 8004e24:	400200a0 	.word	0x400200a0
 8004e28:	400200b8 	.word	0x400200b8
 8004e2c:	40020410 	.word	0x40020410
 8004e30:	40020428 	.word	0x40020428
 8004e34:	40020440 	.word	0x40020440
 8004e38:	40020458 	.word	0x40020458
 8004e3c:	40020470 	.word	0x40020470
 8004e40:	40020488 	.word	0x40020488
 8004e44:	400204a0 	.word	0x400204a0
 8004e48:	400204b8 	.word	0x400204b8
 8004e4c:	58025408 	.word	0x58025408
 8004e50:	5802541c 	.word	0x5802541c
 8004e54:	58025430 	.word	0x58025430
 8004e58:	58025444 	.word	0x58025444
 8004e5c:	58025458 	.word	0x58025458
 8004e60:	5802546c 	.word	0x5802546c
 8004e64:	58025480 	.word	0x58025480
 8004e68:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	60da      	str	r2, [r3, #12]
}
 8004e7c:	e04d      	b.n	8004f1a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a29      	ldr	r2, [pc, #164]	@ (8004f28 <DMA_SetConfig+0x338>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d022      	beq.n	8004ece <DMA_SetConfig+0x2de>
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a27      	ldr	r2, [pc, #156]	@ (8004f2c <DMA_SetConfig+0x33c>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d01d      	beq.n	8004ece <DMA_SetConfig+0x2de>
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a26      	ldr	r2, [pc, #152]	@ (8004f30 <DMA_SetConfig+0x340>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d018      	beq.n	8004ece <DMA_SetConfig+0x2de>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a24      	ldr	r2, [pc, #144]	@ (8004f34 <DMA_SetConfig+0x344>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d013      	beq.n	8004ece <DMA_SetConfig+0x2de>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a23      	ldr	r2, [pc, #140]	@ (8004f38 <DMA_SetConfig+0x348>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d00e      	beq.n	8004ece <DMA_SetConfig+0x2de>
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a21      	ldr	r2, [pc, #132]	@ (8004f3c <DMA_SetConfig+0x34c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d009      	beq.n	8004ece <DMA_SetConfig+0x2de>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a20      	ldr	r2, [pc, #128]	@ (8004f40 <DMA_SetConfig+0x350>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d004      	beq.n	8004ece <DMA_SetConfig+0x2de>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a1e      	ldr	r2, [pc, #120]	@ (8004f44 <DMA_SetConfig+0x354>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d101      	bne.n	8004ed2 <DMA_SetConfig+0x2e2>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	e000      	b.n	8004ed4 <DMA_SetConfig+0x2e4>
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d020      	beq.n	8004f1a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004edc:	f003 031f 	and.w	r3, r3, #31
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	409a      	lsls	r2, r3
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	683a      	ldr	r2, [r7, #0]
 8004eee:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	2b40      	cmp	r3, #64	@ 0x40
 8004ef6:	d108      	bne.n	8004f0a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	687a      	ldr	r2, [r7, #4]
 8004efe:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	60da      	str	r2, [r3, #12]
}
 8004f08:	e007      	b.n	8004f1a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	60da      	str	r2, [r3, #12]
}
 8004f1a:	bf00      	nop
 8004f1c:	371c      	adds	r7, #28
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	58025408 	.word	0x58025408
 8004f2c:	5802541c 	.word	0x5802541c
 8004f30:	58025430 	.word	0x58025430
 8004f34:	58025444 	.word	0x58025444
 8004f38:	58025458 	.word	0x58025458
 8004f3c:	5802546c 	.word	0x5802546c
 8004f40:	58025480 	.word	0x58025480
 8004f44:	58025494 	.word	0x58025494

08004f48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a42      	ldr	r2, [pc, #264]	@ (8005060 <DMA_CalcBaseAndBitshift+0x118>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d04a      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a41      	ldr	r2, [pc, #260]	@ (8005064 <DMA_CalcBaseAndBitshift+0x11c>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d045      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a3f      	ldr	r2, [pc, #252]	@ (8005068 <DMA_CalcBaseAndBitshift+0x120>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d040      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a3e      	ldr	r2, [pc, #248]	@ (800506c <DMA_CalcBaseAndBitshift+0x124>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d03b      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a3c      	ldr	r2, [pc, #240]	@ (8005070 <DMA_CalcBaseAndBitshift+0x128>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d036      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a3b      	ldr	r2, [pc, #236]	@ (8005074 <DMA_CalcBaseAndBitshift+0x12c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d031      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a39      	ldr	r2, [pc, #228]	@ (8005078 <DMA_CalcBaseAndBitshift+0x130>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d02c      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a38      	ldr	r2, [pc, #224]	@ (800507c <DMA_CalcBaseAndBitshift+0x134>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d027      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a36      	ldr	r2, [pc, #216]	@ (8005080 <DMA_CalcBaseAndBitshift+0x138>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d022      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a35      	ldr	r2, [pc, #212]	@ (8005084 <DMA_CalcBaseAndBitshift+0x13c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d01d      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a33      	ldr	r2, [pc, #204]	@ (8005088 <DMA_CalcBaseAndBitshift+0x140>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d018      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a32      	ldr	r2, [pc, #200]	@ (800508c <DMA_CalcBaseAndBitshift+0x144>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d013      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a30      	ldr	r2, [pc, #192]	@ (8005090 <DMA_CalcBaseAndBitshift+0x148>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00e      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a2f      	ldr	r2, [pc, #188]	@ (8005094 <DMA_CalcBaseAndBitshift+0x14c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d009      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8005098 <DMA_CalcBaseAndBitshift+0x150>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d004      	beq.n	8004ff0 <DMA_CalcBaseAndBitshift+0xa8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a2c      	ldr	r2, [pc, #176]	@ (800509c <DMA_CalcBaseAndBitshift+0x154>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <DMA_CalcBaseAndBitshift+0xac>
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	e000      	b.n	8004ff6 <DMA_CalcBaseAndBitshift+0xae>
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d024      	beq.n	8005044 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	3b10      	subs	r3, #16
 8005002:	4a27      	ldr	r2, [pc, #156]	@ (80050a0 <DMA_CalcBaseAndBitshift+0x158>)
 8005004:	fba2 2303 	umull	r2, r3, r2, r3
 8005008:	091b      	lsrs	r3, r3, #4
 800500a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f003 0307 	and.w	r3, r3, #7
 8005012:	4a24      	ldr	r2, [pc, #144]	@ (80050a4 <DMA_CalcBaseAndBitshift+0x15c>)
 8005014:	5cd3      	ldrb	r3, [r2, r3]
 8005016:	461a      	mov	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b03      	cmp	r3, #3
 8005020:	d908      	bls.n	8005034 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	461a      	mov	r2, r3
 8005028:	4b1f      	ldr	r3, [pc, #124]	@ (80050a8 <DMA_CalcBaseAndBitshift+0x160>)
 800502a:	4013      	ands	r3, r2
 800502c:	1d1a      	adds	r2, r3, #4
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	659a      	str	r2, [r3, #88]	@ 0x58
 8005032:	e00d      	b.n	8005050 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	461a      	mov	r2, r3
 800503a:	4b1b      	ldr	r3, [pc, #108]	@ (80050a8 <DMA_CalcBaseAndBitshift+0x160>)
 800503c:	4013      	ands	r3, r2
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6593      	str	r3, [r2, #88]	@ 0x58
 8005042:	e005      	b.n	8005050 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005054:	4618      	mov	r0, r3
 8005056:	3714      	adds	r7, #20
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	40020010 	.word	0x40020010
 8005064:	40020028 	.word	0x40020028
 8005068:	40020040 	.word	0x40020040
 800506c:	40020058 	.word	0x40020058
 8005070:	40020070 	.word	0x40020070
 8005074:	40020088 	.word	0x40020088
 8005078:	400200a0 	.word	0x400200a0
 800507c:	400200b8 	.word	0x400200b8
 8005080:	40020410 	.word	0x40020410
 8005084:	40020428 	.word	0x40020428
 8005088:	40020440 	.word	0x40020440
 800508c:	40020458 	.word	0x40020458
 8005090:	40020470 	.word	0x40020470
 8005094:	40020488 	.word	0x40020488
 8005098:	400204a0 	.word	0x400204a0
 800509c:	400204b8 	.word	0x400204b8
 80050a0:	aaaaaaab 	.word	0xaaaaaaab
 80050a4:	0801cc8c 	.word	0x0801cc8c
 80050a8:	fffffc00 	.word	0xfffffc00

080050ac <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b085      	sub	sp, #20
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050b4:	2300      	movs	r3, #0
 80050b6:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	699b      	ldr	r3, [r3, #24]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d120      	bne.n	8005102 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c4:	2b03      	cmp	r3, #3
 80050c6:	d858      	bhi.n	800517a <DMA_CheckFifoParam+0xce>
 80050c8:	a201      	add	r2, pc, #4	@ (adr r2, 80050d0 <DMA_CheckFifoParam+0x24>)
 80050ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050ce:	bf00      	nop
 80050d0:	080050e1 	.word	0x080050e1
 80050d4:	080050f3 	.word	0x080050f3
 80050d8:	080050e1 	.word	0x080050e1
 80050dc:	0800517b 	.word	0x0800517b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050e4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d048      	beq.n	800517e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80050f0:	e045      	b.n	800517e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80050fa:	d142      	bne.n	8005182 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005100:	e03f      	b.n	8005182 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800510a:	d123      	bne.n	8005154 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005110:	2b03      	cmp	r3, #3
 8005112:	d838      	bhi.n	8005186 <DMA_CheckFifoParam+0xda>
 8005114:	a201      	add	r2, pc, #4	@ (adr r2, 800511c <DMA_CheckFifoParam+0x70>)
 8005116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800511a:	bf00      	nop
 800511c:	0800512d 	.word	0x0800512d
 8005120:	08005133 	.word	0x08005133
 8005124:	0800512d 	.word	0x0800512d
 8005128:	08005145 	.word	0x08005145
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	73fb      	strb	r3, [r7, #15]
        break;
 8005130:	e030      	b.n	8005194 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005136:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d025      	beq.n	800518a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005142:	e022      	b.n	800518a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005148:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800514c:	d11f      	bne.n	800518e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005152:	e01c      	b.n	800518e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005158:	2b02      	cmp	r3, #2
 800515a:	d902      	bls.n	8005162 <DMA_CheckFifoParam+0xb6>
 800515c:	2b03      	cmp	r3, #3
 800515e:	d003      	beq.n	8005168 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005160:	e018      	b.n	8005194 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
        break;
 8005166:	e015      	b.n	8005194 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800516c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00e      	beq.n	8005192 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
    break;
 8005178:	e00b      	b.n	8005192 <DMA_CheckFifoParam+0xe6>
        break;
 800517a:	bf00      	nop
 800517c:	e00a      	b.n	8005194 <DMA_CheckFifoParam+0xe8>
        break;
 800517e:	bf00      	nop
 8005180:	e008      	b.n	8005194 <DMA_CheckFifoParam+0xe8>
        break;
 8005182:	bf00      	nop
 8005184:	e006      	b.n	8005194 <DMA_CheckFifoParam+0xe8>
        break;
 8005186:	bf00      	nop
 8005188:	e004      	b.n	8005194 <DMA_CheckFifoParam+0xe8>
        break;
 800518a:	bf00      	nop
 800518c:	e002      	b.n	8005194 <DMA_CheckFifoParam+0xe8>
        break;
 800518e:	bf00      	nop
 8005190:	e000      	b.n	8005194 <DMA_CheckFifoParam+0xe8>
    break;
 8005192:	bf00      	nop
    }
  }

  return status;
 8005194:	7bfb      	ldrb	r3, [r7, #15]
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop

080051a4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	4a38      	ldr	r2, [pc, #224]	@ (8005298 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d022      	beq.n	8005202 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4a36      	ldr	r2, [pc, #216]	@ (800529c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d01d      	beq.n	8005202 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a35      	ldr	r2, [pc, #212]	@ (80052a0 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d018      	beq.n	8005202 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a33      	ldr	r2, [pc, #204]	@ (80052a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d013      	beq.n	8005202 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a32      	ldr	r2, [pc, #200]	@ (80052a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00e      	beq.n	8005202 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a30      	ldr	r2, [pc, #192]	@ (80052ac <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d009      	beq.n	8005202 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a2f      	ldr	r2, [pc, #188]	@ (80052b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d004      	beq.n	8005202 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a2d      	ldr	r2, [pc, #180]	@ (80052b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d101      	bne.n	8005206 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005202:	2301      	movs	r3, #1
 8005204:	e000      	b.n	8005208 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005206:	2300      	movs	r3, #0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d01a      	beq.n	8005242 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	3b08      	subs	r3, #8
 8005214:	4a28      	ldr	r2, [pc, #160]	@ (80052b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005216:	fba2 2303 	umull	r2, r3, r2, r3
 800521a:	091b      	lsrs	r3, r3, #4
 800521c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800521e:	68fa      	ldr	r2, [r7, #12]
 8005220:	4b26      	ldr	r3, [pc, #152]	@ (80052bc <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005222:	4413      	add	r3, r2
 8005224:	009b      	lsls	r3, r3, #2
 8005226:	461a      	mov	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a24      	ldr	r2, [pc, #144]	@ (80052c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005230:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f003 031f 	and.w	r3, r3, #31
 8005238:	2201      	movs	r2, #1
 800523a:	409a      	lsls	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005240:	e024      	b.n	800528c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	3b10      	subs	r3, #16
 800524a:	4a1e      	ldr	r2, [pc, #120]	@ (80052c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800524c:	fba2 2303 	umull	r2, r3, r2, r3
 8005250:	091b      	lsrs	r3, r3, #4
 8005252:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	4a1c      	ldr	r2, [pc, #112]	@ (80052c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d806      	bhi.n	800526a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	4a1b      	ldr	r2, [pc, #108]	@ (80052cc <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d902      	bls.n	800526a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	3308      	adds	r3, #8
 8005268:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4b18      	ldr	r3, [pc, #96]	@ (80052d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	461a      	mov	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a16      	ldr	r2, [pc, #88]	@ (80052d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800527c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 031f 	and.w	r3, r3, #31
 8005284:	2201      	movs	r2, #1
 8005286:	409a      	lsls	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	58025408 	.word	0x58025408
 800529c:	5802541c 	.word	0x5802541c
 80052a0:	58025430 	.word	0x58025430
 80052a4:	58025444 	.word	0x58025444
 80052a8:	58025458 	.word	0x58025458
 80052ac:	5802546c 	.word	0x5802546c
 80052b0:	58025480 	.word	0x58025480
 80052b4:	58025494 	.word	0x58025494
 80052b8:	cccccccd 	.word	0xcccccccd
 80052bc:	16009600 	.word	0x16009600
 80052c0:	58025880 	.word	0x58025880
 80052c4:	aaaaaaab 	.word	0xaaaaaaab
 80052c8:	400204b8 	.word	0x400204b8
 80052cc:	4002040f 	.word	0x4002040f
 80052d0:	10008200 	.word	0x10008200
 80052d4:	40020880 	.word	0x40020880

080052d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	b2db      	uxtb	r3, r3
 80052e6:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d04a      	beq.n	8005384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d847      	bhi.n	8005384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a25      	ldr	r2, [pc, #148]	@ (8005390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d022      	beq.n	8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a24      	ldr	r2, [pc, #144]	@ (8005394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d01d      	beq.n	8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a22      	ldr	r2, [pc, #136]	@ (8005398 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d018      	beq.n	8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a21      	ldr	r2, [pc, #132]	@ (800539c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d013      	beq.n	8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1f      	ldr	r2, [pc, #124]	@ (80053a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d00e      	beq.n	8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1e      	ldr	r2, [pc, #120]	@ (80053a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d009      	beq.n	8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1c      	ldr	r2, [pc, #112]	@ (80053a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d004      	beq.n	8005344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a1b      	ldr	r2, [pc, #108]	@ (80053ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d101      	bne.n	8005348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00a      	beq.n	8005364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	4b17      	ldr	r3, [pc, #92]	@ (80053b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	461a      	mov	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a15      	ldr	r2, [pc, #84]	@ (80053b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005360:	671a      	str	r2, [r3, #112]	@ 0x70
 8005362:	e009      	b.n	8005378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005364:	68fa      	ldr	r2, [r7, #12]
 8005366:	4b14      	ldr	r3, [pc, #80]	@ (80053b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005368:	4413      	add	r3, r2
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	461a      	mov	r2, r3
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a11      	ldr	r2, [pc, #68]	@ (80053bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005376:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3b01      	subs	r3, #1
 800537c:	2201      	movs	r2, #1
 800537e:	409a      	lsls	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005384:	bf00      	nop
 8005386:	3714      	adds	r7, #20
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	58025408 	.word	0x58025408
 8005394:	5802541c 	.word	0x5802541c
 8005398:	58025430 	.word	0x58025430
 800539c:	58025444 	.word	0x58025444
 80053a0:	58025458 	.word	0x58025458
 80053a4:	5802546c 	.word	0x5802546c
 80053a8:	58025480 	.word	0x58025480
 80053ac:	58025494 	.word	0x58025494
 80053b0:	1600963f 	.word	0x1600963f
 80053b4:	58025940 	.word	0x58025940
 80053b8:	1000823f 	.word	0x1000823f
 80053bc:	40020940 	.word	0x40020940

080053c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b084      	sub	sp, #16
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e0e3      	b.n	800559a <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d106      	bne.n	80053ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2223      	movs	r2, #35	@ 0x23
 80053e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7fb ff8f 	bl	8001308 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053ea:	4b6e      	ldr	r3, [pc, #440]	@ (80055a4 <HAL_ETH_Init+0x1e4>)
 80053ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80053f0:	4a6c      	ldr	r2, [pc, #432]	@ (80055a4 <HAL_ETH_Init+0x1e4>)
 80053f2:	f043 0302 	orr.w	r3, r3, #2
 80053f6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80053fa:	4b6a      	ldr	r3, [pc, #424]	@ (80055a4 <HAL_ETH_Init+0x1e4>)
 80053fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	60bb      	str	r3, [r7, #8]
 8005406:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	7a1b      	ldrb	r3, [r3, #8]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d103      	bne.n	8005418 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8005410:	2000      	movs	r0, #0
 8005412:	f7fd f899 	bl	8002548 <HAL_SYSCFG_ETHInterfaceSelect>
 8005416:	e003      	b.n	8005420 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005418:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800541c:	f7fd f894 	bl	8002548 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005420:	4b61      	ldr	r3, [pc, #388]	@ (80055a8 <HAL_ETH_Init+0x1e8>)
 8005422:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6812      	ldr	r2, [r2, #0]
 8005432:	f043 0301 	orr.w	r3, r3, #1
 8005436:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800543a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800543c:	f7fd f86c 	bl	8002518 <HAL_GetTick>
 8005440:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005442:	e011      	b.n	8005468 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005444:	f7fd f868 	bl	8002518 <HAL_GetTick>
 8005448:	4602      	mov	r2, r0
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	1ad3      	subs	r3, r2, r3
 800544e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8005452:	d909      	bls.n	8005468 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2204      	movs	r2, #4
 8005458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	22e0      	movs	r2, #224	@ 0xe0
 8005460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8005464:	2301      	movs	r3, #1
 8005466:	e098      	b.n	800559a <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0301 	and.w	r3, r3, #1
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e4      	bne.n	8005444 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f89e 	bl	80055bc <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005480:	f001 fe8a 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 8005484:	4603      	mov	r3, r0
 8005486:	4a49      	ldr	r2, [pc, #292]	@ (80055ac <HAL_ETH_Init+0x1ec>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	0c9a      	lsrs	r2, r3, #18
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	3a01      	subs	r2, #1
 8005494:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fa81 	bl	80059a0 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054a6:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80054aa:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6812      	ldr	r2, [r2, #0]
 80054b2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80054b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054ba:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	f003 0303 	and.w	r3, r3, #3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d009      	beq.n	80054de <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	22e0      	movs	r2, #224	@ 0xe0
 80054d6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e05d      	b.n	800559a <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80054e6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80054ea:	4b31      	ldr	r3, [pc, #196]	@ (80055b0 <HAL_ETH_Init+0x1f0>)
 80054ec:	4013      	ands	r3, r2
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	6952      	ldr	r2, [r2, #20]
 80054f2:	0051      	lsls	r1, r2, #1
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	6812      	ldr	r2, [r2, #0]
 80054f8:	430b      	orrs	r3, r1
 80054fa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80054fe:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 fae9 	bl	8005ada <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 fb2f 	bl	8005b6c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	3305      	adds	r3, #5
 8005514:	781b      	ldrb	r3, [r3, #0]
 8005516:	021a      	lsls	r2, r3, #8
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	3304      	adds	r3, #4
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	4619      	mov	r1, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	430a      	orrs	r2, r1
 8005528:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	3303      	adds	r3, #3
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	061a      	lsls	r2, r3, #24
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	3302      	adds	r3, #2
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	041b      	lsls	r3, r3, #16
 8005540:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	3301      	adds	r3, #1
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800554c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800555a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800555c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f8d3 170c 	ldr.w	r1, [r3, #1804]	@ 0x70c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	4b11      	ldr	r3, [pc, #68]	@ (80055b4 <HAL_ETH_Init+0x1f4>)
 800556e:	430b      	orrs	r3, r1
 8005570:	f8c2 370c 	str.w	r3, [r2, #1804]	@ 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f8d3 1710 	ldr.w	r1, [r3, #1808]	@ 0x710
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	4b0d      	ldr	r3, [pc, #52]	@ (80055b8 <HAL_ETH_Init+0x1f8>)
 8005582:	430b      	orrs	r3, r1
 8005584:	f8c2 3710 	str.w	r3, [r2, #1808]	@ 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2210      	movs	r2, #16
 8005594:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}
 80055a2:	bf00      	nop
 80055a4:	58024400 	.word	0x58024400
 80055a8:	58000400 	.word	0x58000400
 80055ac:	431bde83 	.word	0x431bde83
 80055b0:	ffff8001 	.word	0xffff8001
 80055b4:	0c020060 	.word	0x0c020060
 80055b8:	0c20c000 	.word	0x0c20c000

080055bc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80055d4:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80055d6:	f001 fddf 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 80055da:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80055dc:	68bb      	ldr	r3, [r7, #8]
 80055de:	4a1a      	ldr	r2, [pc, #104]	@ (8005648 <HAL_ETH_SetMDIOClockRange+0x8c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d804      	bhi.n	80055ee <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	e022      	b.n	8005634 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4a16      	ldr	r2, [pc, #88]	@ (800564c <HAL_ETH_SetMDIOClockRange+0x90>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d204      	bcs.n	8005600 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80055fc:	60fb      	str	r3, [r7, #12]
 80055fe:	e019      	b.n	8005634 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4a13      	ldr	r2, [pc, #76]	@ (8005650 <HAL_ETH_SetMDIOClockRange+0x94>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d915      	bls.n	8005634 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 8005608:	68bb      	ldr	r3, [r7, #8]
 800560a:	4a12      	ldr	r2, [pc, #72]	@ (8005654 <HAL_ETH_SetMDIOClockRange+0x98>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d804      	bhi.n	800561a <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005616:	60fb      	str	r3, [r7, #12]
 8005618:	e00c      	b.n	8005634 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	4a0e      	ldr	r2, [pc, #56]	@ (8005658 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d804      	bhi.n	800562c <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	e003      	b.n	8005634 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8005632:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 800563e:	bf00      	nop
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	02160ebf 	.word	0x02160ebf
 800564c:	03938700 	.word	0x03938700
 8005650:	05f5e0ff 	.word	0x05f5e0ff
 8005654:	08f0d17f 	.word	0x08f0d17f
 8005658:	0ee6b27f 	.word	0x0ee6b27f

0800565c <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800565c:	b480      	push	{r7}
 800565e:	b085      	sub	sp, #20
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
 8005664:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800566e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	791b      	ldrb	r3, [r3, #4]
 8005674:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005676:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	7b1b      	ldrb	r3, [r3, #12]
 800567c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800567e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	7b5b      	ldrb	r3, [r3, #13]
 8005684:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005686:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	7b9b      	ldrb	r3, [r3, #14]
 800568c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800568e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	7bdb      	ldrb	r3, [r3, #15]
 8005694:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005696:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	7c12      	ldrb	r2, [r2, #16]
 800569c:	2a00      	cmp	r2, #0
 800569e:	d102      	bne.n	80056a6 <ETH_SetMACConfig+0x4a>
 80056a0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80056a4:	e000      	b.n	80056a8 <ETH_SetMACConfig+0x4c>
 80056a6:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80056a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	7c52      	ldrb	r2, [r2, #17]
 80056ae:	2a00      	cmp	r2, #0
 80056b0:	d102      	bne.n	80056b8 <ETH_SetMACConfig+0x5c>
 80056b2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80056b6:	e000      	b.n	80056ba <ETH_SetMACConfig+0x5e>
 80056b8:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80056ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	7c9b      	ldrb	r3, [r3, #18]
 80056c0:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80056c2:	431a      	orrs	r2, r3
               macconf->Speed |
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80056c8:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80056ce:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	7f1b      	ldrb	r3, [r3, #28]
 80056d4:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80056d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	7f5b      	ldrb	r3, [r3, #29]
 80056dc:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80056de:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	7f92      	ldrb	r2, [r2, #30]
 80056e4:	2a00      	cmp	r2, #0
 80056e6:	d102      	bne.n	80056ee <ETH_SetMACConfig+0x92>
 80056e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80056ec:	e000      	b.n	80056f0 <ETH_SetMACConfig+0x94>
 80056ee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80056f0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	7fdb      	ldrb	r3, [r3, #31]
 80056f6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80056f8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005700:	2a00      	cmp	r2, #0
 8005702:	d102      	bne.n	800570a <ETH_SetMACConfig+0xae>
 8005704:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005708:	e000      	b.n	800570c <ETH_SetMACConfig+0xb0>
 800570a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800570c:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005712:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800571a:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800571c:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005722:	4313      	orrs	r3, r2
 8005724:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b56      	ldr	r3, [pc, #344]	@ (8005888 <ETH_SetMACConfig+0x22c>)
 800572e:	4013      	ands	r3, r2
 8005730:	687a      	ldr	r2, [r7, #4]
 8005732:	6812      	ldr	r2, [r2, #0]
 8005734:	68f9      	ldr	r1, [r7, #12]
 8005736:	430b      	orrs	r3, r1
 8005738:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573e:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005746:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005748:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005750:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005752:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800575a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800575c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8005764:	2a00      	cmp	r2, #0
 8005766:	d102      	bne.n	800576e <ETH_SetMACConfig+0x112>
 8005768:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800576c:	e000      	b.n	8005770 <ETH_SetMACConfig+0x114>
 800576e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005770:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	685a      	ldr	r2, [r3, #4]
 8005780:	4b42      	ldr	r3, [pc, #264]	@ (800588c <ETH_SetMACConfig+0x230>)
 8005782:	4013      	ands	r3, r2
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	68f9      	ldr	r1, [r7, #12]
 800578a:	430b      	orrs	r3, r1
 800578c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005794:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68da      	ldr	r2, [r3, #12]
 80057a4:	4b3a      	ldr	r3, [pc, #232]	@ (8005890 <ETH_SetMACConfig+0x234>)
 80057a6:	4013      	ands	r3, r2
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	68f9      	ldr	r1, [r7, #12]
 80057ae:	430b      	orrs	r3, r1
 80057b0:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80057b8:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80057be:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80057c6:	2a00      	cmp	r2, #0
 80057c8:	d101      	bne.n	80057ce <ETH_SetMACConfig+0x172>
 80057ca:	2280      	movs	r2, #128	@ 0x80
 80057cc:	e000      	b.n	80057d0 <ETH_SetMACConfig+0x174>
 80057ce:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80057d0:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057d6:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80057e2:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 80057e6:	4013      	ands	r3, r2
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	68f9      	ldr	r1, [r7, #12]
 80057ee:	430b      	orrs	r3, r1
 80057f0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80057f8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8005800:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005802:	4313      	orrs	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800580e:	f023 0103 	bic.w	r1, r3, #3
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	430a      	orrs	r2, r1
 800581a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8005826:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	430a      	orrs	r2, r1
 8005834:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800583c:	683a      	ldr	r2, [r7, #0]
 800583e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8005842:	2a00      	cmp	r2, #0
 8005844:	d101      	bne.n	800584a <ETH_SetMACConfig+0x1ee>
 8005846:	2240      	movs	r2, #64	@ 0x40
 8005848:	e000      	b.n	800584c <ETH_SetMACConfig+0x1f0>
 800584a:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800584c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8005854:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005856:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 800585e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 800586c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	430a      	orrs	r2, r1
 8005878:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 800587c:	bf00      	nop
 800587e:	3714      	adds	r7, #20
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	00048083 	.word	0x00048083
 800588c:	c0f88000 	.word	0xc0f88000
 8005890:	fffffef0 	.word	0xfffffef0

08005894 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058a6:	681a      	ldr	r2, [r3, #0]
 80058a8:	4b38      	ldr	r3, [pc, #224]	@ (800598c <ETH_SetDMAConfig+0xf8>)
 80058aa:	4013      	ands	r3, r2
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	6811      	ldr	r1, [r2, #0]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	6812      	ldr	r2, [r2, #0]
 80058b4:	430b      	orrs	r3, r1
 80058b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058ba:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	791b      	ldrb	r3, [r3, #4]
 80058c0:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80058c6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	7b1b      	ldrb	r3, [r3, #12]
 80058cc:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	4b2c      	ldr	r3, [pc, #176]	@ (8005990 <ETH_SetDMAConfig+0xfc>)
 80058de:	4013      	ands	r3, r2
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	6812      	ldr	r2, [r2, #0]
 80058e4:	68f9      	ldr	r1, [r7, #12]
 80058e6:	430b      	orrs	r3, r1
 80058e8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80058ec:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	7b5b      	ldrb	r3, [r3, #13]
 80058f2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80058f8:	4313      	orrs	r3, r2
 80058fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005904:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8005908:	4b22      	ldr	r3, [pc, #136]	@ (8005994 <ETH_SetDMAConfig+0x100>)
 800590a:	4013      	ands	r3, r2
 800590c:	687a      	ldr	r2, [r7, #4]
 800590e:	6812      	ldr	r2, [r2, #0]
 8005910:	68f9      	ldr	r1, [r7, #12]
 8005912:	430b      	orrs	r3, r1
 8005914:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005918:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	7d1b      	ldrb	r3, [r3, #20]
 8005924:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005926:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	7f5b      	ldrb	r3, [r3, #29]
 800592c:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800592e:	4313      	orrs	r3, r2
 8005930:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800593a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 800593e:	4b16      	ldr	r3, [pc, #88]	@ (8005998 <ETH_SetDMAConfig+0x104>)
 8005940:	4013      	ands	r3, r2
 8005942:	687a      	ldr	r2, [r7, #4]
 8005944:	6812      	ldr	r2, [r2, #0]
 8005946:	68f9      	ldr	r1, [r7, #12]
 8005948:	430b      	orrs	r3, r1
 800594a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800594e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	7f1b      	ldrb	r3, [r3, #28]
 8005956:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005968:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 800596c:	4b0b      	ldr	r3, [pc, #44]	@ (800599c <ETH_SetDMAConfig+0x108>)
 800596e:	4013      	ands	r3, r2
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	6812      	ldr	r2, [r2, #0]
 8005974:	68f9      	ldr	r1, [r7, #12]
 8005976:	430b      	orrs	r3, r1
 8005978:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800597c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	ffff87fd 	.word	0xffff87fd
 8005990:	ffff2ffe 	.word	0xffff2ffe
 8005994:	fffec000 	.word	0xfffec000
 8005998:	ffc0efef 	.word	0xffc0efef
 800599c:	7fc0ffff 	.word	0x7fc0ffff

080059a0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b0a4      	sub	sp, #144	@ 0x90
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80059ae:	2300      	movs	r3, #0
 80059b0:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80059b2:	2300      	movs	r3, #0
 80059b4:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80059b8:	2300      	movs	r3, #0
 80059ba:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80059be:	2301      	movs	r3, #1
 80059c0:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80059c4:	2301      	movs	r3, #1
 80059c6:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80059ca:	2301      	movs	r3, #1
 80059cc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80059d0:	2300      	movs	r3, #0
 80059d2:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80059d6:	2301      	movs	r3, #1
 80059d8:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80059dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80059e0:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80059e8:	2300      	movs	r3, #0
 80059ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80059ec:	2300      	movs	r3, #0
 80059ee:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80059f2:	2300      	movs	r3, #0
 80059f4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80059f8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 80059fc:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80059fe:	2300      	movs	r3, #0
 8005a00:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005a04:	2300      	movs	r3, #0
 8005a06:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005a14:	2300      	movs	r3, #0
 8005a16:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005a22:	2300      	movs	r3, #0
 8005a24:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005a32:	2301      	movs	r3, #1
 8005a34:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005a38:	2320      	movs	r3, #32
 8005a3a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005a44:	2300      	movs	r3, #0
 8005a46:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005a4a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8005a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005a50:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a54:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005a5c:	2302      	movs	r3, #2
 8005a5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005a62:	2300      	movs	r3, #0
 8005a64:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005a84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8005a88:	4619      	mov	r1, r3
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7ff fde6 	bl	800565c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005a90:	2301      	movs	r3, #1
 8005a92:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005a94:	2301      	movs	r3, #1
 8005a96:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005aaa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005aae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005ab4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005ab8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005aba:	2300      	movs	r3, #0
 8005abc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005ac0:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8005ac4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005ac6:	f107 0308 	add.w	r3, r7, #8
 8005aca:	4619      	mov	r1, r3
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff fee1 	bl	8005894 <ETH_SetDMAConfig>
}
 8005ad2:	bf00      	nop
 8005ad4:	3790      	adds	r7, #144	@ 0x90
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005ada:	b480      	push	{r7}
 8005adc:	b085      	sub	sp, #20
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]
 8005ae6:	e01d      	b.n	8005b24 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68d9      	ldr	r1, [r3, #12]
 8005aec:	68fa      	ldr	r2, [r7, #12]
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	440b      	add	r3, r1
 8005af8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	2200      	movs	r2, #0
 8005afe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2200      	movs	r2, #0
 8005b04:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005b12:	68b9      	ldr	r1, [r7, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	3206      	adds	r2, #6
 8005b1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2b03      	cmp	r3, #3
 8005b28:	d9de      	bls.n	8005ae8 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b4c:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68da      	ldr	r2, [r3, #12]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005b5c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8005b60:	bf00      	nop
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	e023      	b.n	8005bc2 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6919      	ldr	r1, [r3, #16]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4613      	mov	r3, r2
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	4413      	add	r3, r2
 8005b86:	00db      	lsls	r3, r3, #3
 8005b88:	440b      	add	r3, r1
 8005b8a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2200      	movs	r2, #0
 8005b90:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	2200      	movs	r2, #0
 8005b96:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	2200      	movs	r2, #0
 8005bae:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005bb0:	68b9      	ldr	r1, [r7, #8]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	3212      	adds	r2, #18
 8005bb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	3301      	adds	r3, #1
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2b03      	cmp	r3, #3
 8005bc6:	d9d8      	bls.n	8005b7a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bee:	461a      	mov	r2, r3
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	691a      	ldr	r2, [r3, #16]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c02:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	691b      	ldr	r3, [r3, #16]
 8005c0a:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005c16:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
	...

08005c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b089      	sub	sp, #36	@ 0x24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005c32:	2300      	movs	r3, #0
 8005c34:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005c36:	4b89      	ldr	r3, [pc, #548]	@ (8005e5c <HAL_GPIO_Init+0x234>)
 8005c38:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005c3a:	e194      	b.n	8005f66 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	2101      	movs	r1, #1
 8005c42:	69fb      	ldr	r3, [r7, #28]
 8005c44:	fa01 f303 	lsl.w	r3, r1, r3
 8005c48:	4013      	ands	r3, r2
 8005c4a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 8186 	beq.w	8005f60 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	f003 0303 	and.w	r3, r3, #3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d005      	beq.n	8005c6c <HAL_GPIO_Init+0x44>
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	f003 0303 	and.w	r3, r3, #3
 8005c68:	2b02      	cmp	r3, #2
 8005c6a:	d130      	bne.n	8005cce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	005b      	lsls	r3, r3, #1
 8005c76:	2203      	movs	r2, #3
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	43db      	mvns	r3, r3
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	4013      	ands	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c90:	69ba      	ldr	r2, [r7, #24]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	69ba      	ldr	r2, [r7, #24]
 8005c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8005caa:	43db      	mvns	r3, r3
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	4013      	ands	r3, r2
 8005cb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	091b      	lsrs	r3, r3, #4
 8005cb8:	f003 0201 	and.w	r2, r3, #1
 8005cbc:	69fb      	ldr	r3, [r7, #28]
 8005cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	69ba      	ldr	r2, [r7, #24]
 8005ccc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f003 0303 	and.w	r3, r3, #3
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	d017      	beq.n	8005d0a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	2203      	movs	r2, #3
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	43db      	mvns	r3, r3
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	4013      	ands	r3, r2
 8005cf0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	689a      	ldr	r2, [r3, #8]
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f003 0303 	and.w	r3, r3, #3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d123      	bne.n	8005d5e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	08da      	lsrs	r2, r3, #3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3208      	adds	r2, #8
 8005d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	220f      	movs	r2, #15
 8005d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005d32:	43db      	mvns	r3, r3
 8005d34:	69ba      	ldr	r2, [r7, #24]
 8005d36:	4013      	ands	r3, r2
 8005d38:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	f003 0307 	and.w	r3, r3, #7
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	08da      	lsrs	r2, r3, #3
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	3208      	adds	r2, #8
 8005d58:	69b9      	ldr	r1, [r7, #24]
 8005d5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005d64:	69fb      	ldr	r3, [r7, #28]
 8005d66:	005b      	lsls	r3, r3, #1
 8005d68:	2203      	movs	r2, #3
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43db      	mvns	r3, r3
 8005d70:	69ba      	ldr	r2, [r7, #24]
 8005d72:	4013      	ands	r3, r2
 8005d74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f003 0203 	and.w	r2, r3, #3
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	69ba      	ldr	r2, [r7, #24]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	69ba      	ldr	r2, [r7, #24]
 8005d90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	f000 80e0 	beq.w	8005f60 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005da0:	4b2f      	ldr	r3, [pc, #188]	@ (8005e60 <HAL_GPIO_Init+0x238>)
 8005da2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005da6:	4a2e      	ldr	r2, [pc, #184]	@ (8005e60 <HAL_GPIO_Init+0x238>)
 8005da8:	f043 0302 	orr.w	r3, r3, #2
 8005dac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005db0:	4b2b      	ldr	r3, [pc, #172]	@ (8005e60 <HAL_GPIO_Init+0x238>)
 8005db2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dbe:	4a29      	ldr	r2, [pc, #164]	@ (8005e64 <HAL_GPIO_Init+0x23c>)
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	089b      	lsrs	r3, r3, #2
 8005dc4:	3302      	adds	r3, #2
 8005dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f003 0303 	and.w	r3, r3, #3
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	220f      	movs	r2, #15
 8005dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8005dda:	43db      	mvns	r3, r3
 8005ddc:	69ba      	ldr	r2, [r7, #24]
 8005dde:	4013      	ands	r3, r2
 8005de0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a20      	ldr	r2, [pc, #128]	@ (8005e68 <HAL_GPIO_Init+0x240>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d052      	beq.n	8005e90 <HAL_GPIO_Init+0x268>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a1f      	ldr	r2, [pc, #124]	@ (8005e6c <HAL_GPIO_Init+0x244>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d031      	beq.n	8005e56 <HAL_GPIO_Init+0x22e>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a1e      	ldr	r2, [pc, #120]	@ (8005e70 <HAL_GPIO_Init+0x248>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d02b      	beq.n	8005e52 <HAL_GPIO_Init+0x22a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a1d      	ldr	r2, [pc, #116]	@ (8005e74 <HAL_GPIO_Init+0x24c>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d025      	beq.n	8005e4e <HAL_GPIO_Init+0x226>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1c      	ldr	r2, [pc, #112]	@ (8005e78 <HAL_GPIO_Init+0x250>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d01f      	beq.n	8005e4a <HAL_GPIO_Init+0x222>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005e7c <HAL_GPIO_Init+0x254>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d019      	beq.n	8005e46 <HAL_GPIO_Init+0x21e>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a1a      	ldr	r2, [pc, #104]	@ (8005e80 <HAL_GPIO_Init+0x258>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d013      	beq.n	8005e42 <HAL_GPIO_Init+0x21a>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a19      	ldr	r2, [pc, #100]	@ (8005e84 <HAL_GPIO_Init+0x25c>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00d      	beq.n	8005e3e <HAL_GPIO_Init+0x216>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a18      	ldr	r2, [pc, #96]	@ (8005e88 <HAL_GPIO_Init+0x260>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d007      	beq.n	8005e3a <HAL_GPIO_Init+0x212>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	4a17      	ldr	r2, [pc, #92]	@ (8005e8c <HAL_GPIO_Init+0x264>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d101      	bne.n	8005e36 <HAL_GPIO_Init+0x20e>
 8005e32:	2309      	movs	r3, #9
 8005e34:	e02d      	b.n	8005e92 <HAL_GPIO_Init+0x26a>
 8005e36:	230a      	movs	r3, #10
 8005e38:	e02b      	b.n	8005e92 <HAL_GPIO_Init+0x26a>
 8005e3a:	2308      	movs	r3, #8
 8005e3c:	e029      	b.n	8005e92 <HAL_GPIO_Init+0x26a>
 8005e3e:	2307      	movs	r3, #7
 8005e40:	e027      	b.n	8005e92 <HAL_GPIO_Init+0x26a>
 8005e42:	2306      	movs	r3, #6
 8005e44:	e025      	b.n	8005e92 <HAL_GPIO_Init+0x26a>
 8005e46:	2305      	movs	r3, #5
 8005e48:	e023      	b.n	8005e92 <HAL_GPIO_Init+0x26a>
 8005e4a:	2304      	movs	r3, #4
 8005e4c:	e021      	b.n	8005e92 <HAL_GPIO_Init+0x26a>
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e01f      	b.n	8005e92 <HAL_GPIO_Init+0x26a>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e01d      	b.n	8005e92 <HAL_GPIO_Init+0x26a>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e01b      	b.n	8005e92 <HAL_GPIO_Init+0x26a>
 8005e5a:	bf00      	nop
 8005e5c:	58000080 	.word	0x58000080
 8005e60:	58024400 	.word	0x58024400
 8005e64:	58000400 	.word	0x58000400
 8005e68:	58020000 	.word	0x58020000
 8005e6c:	58020400 	.word	0x58020400
 8005e70:	58020800 	.word	0x58020800
 8005e74:	58020c00 	.word	0x58020c00
 8005e78:	58021000 	.word	0x58021000
 8005e7c:	58021400 	.word	0x58021400
 8005e80:	58021800 	.word	0x58021800
 8005e84:	58021c00 	.word	0x58021c00
 8005e88:	58022000 	.word	0x58022000
 8005e8c:	58022400 	.word	0x58022400
 8005e90:	2300      	movs	r3, #0
 8005e92:	69fa      	ldr	r2, [r7, #28]
 8005e94:	f002 0203 	and.w	r2, r2, #3
 8005e98:	0092      	lsls	r2, r2, #2
 8005e9a:	4093      	lsls	r3, r2
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005ea2:	4938      	ldr	r1, [pc, #224]	@ (8005f84 <HAL_GPIO_Init+0x35c>)
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	089b      	lsrs	r3, r3, #2
 8005ea8:	3302      	adds	r3, #2
 8005eaa:	69ba      	ldr	r2, [r7, #24]
 8005eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005eb8:	693b      	ldr	r3, [r7, #16]
 8005eba:	43db      	mvns	r3, r3
 8005ebc:	69ba      	ldr	r2, [r7, #24]
 8005ebe:	4013      	ands	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d003      	beq.n	8005ed6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005ece:	69ba      	ldr	r2, [r7, #24]
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005ed6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005eda:	69bb      	ldr	r3, [r7, #24]
 8005edc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005ede:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	69ba      	ldr	r2, [r7, #24]
 8005eec:	4013      	ands	r3, r2
 8005eee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d003      	beq.n	8005f04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005f04:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005f08:	69bb      	ldr	r3, [r7, #24]
 8005f0a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	43db      	mvns	r3, r3
 8005f16:	69ba      	ldr	r2, [r7, #24]
 8005f18:	4013      	ands	r3, r2
 8005f1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d003      	beq.n	8005f30 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005f28:	69ba      	ldr	r2, [r7, #24]
 8005f2a:	693b      	ldr	r3, [r7, #16]
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	69ba      	ldr	r2, [r7, #24]
 8005f34:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	43db      	mvns	r3, r3
 8005f40:	69ba      	ldr	r2, [r7, #24]
 8005f42:	4013      	ands	r3, r2
 8005f44:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005f52:	69ba      	ldr	r2, [r7, #24]
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	3301      	adds	r3, #1
 8005f64:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f47f ae63 	bne.w	8005c3c <HAL_GPIO_Init+0x14>
  }
}
 8005f76:	bf00      	nop
 8005f78:	bf00      	nop
 8005f7a:	3724      	adds	r7, #36	@ 0x24
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr
 8005f84:	58000400 	.word	0x58000400

08005f88 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005f90:	4a08      	ldr	r2, [pc, #32]	@ (8005fb4 <HAL_HSEM_FastTake+0x2c>)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	3320      	adds	r3, #32
 8005f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9a:	4a07      	ldr	r2, [pc, #28]	@ (8005fb8 <HAL_HSEM_FastTake+0x30>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d101      	bne.n	8005fa4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	e000      	b.n	8005fa6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	58026400 	.word	0x58026400
 8005fb8:	80000300 	.word	0x80000300

08005fbc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005fc6:	4906      	ldr	r1, [pc, #24]	@ (8005fe0 <HAL_HSEM_Release+0x24>)
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	58026400 	.word	0x58026400

08005fe4 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8005fec:	4b05      	ldr	r3, [pc, #20]	@ (8006004 <HAL_HSEM_ActivateNotification+0x20>)
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	4904      	ldr	r1, [pc, #16]	@ (8006004 <HAL_HSEM_ActivateNotification+0x20>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	600b      	str	r3, [r1, #0]
#endif
}
 8005ff8:	bf00      	nop
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	58026500 	.word	0x58026500

08006008 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
    /*Clear Flags*/
    HSEM->C2ICR = ((uint32_t)statusreg);
  }
#else
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800600e:	4b0a      	ldr	r3, [pc, #40]	@ (8006038 <HAL_HSEM_IRQHandler+0x30>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8006014:	4b08      	ldr	r3, [pc, #32]	@ (8006038 <HAL_HSEM_IRQHandler+0x30>)
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	43db      	mvns	r3, r3
 800601c:	4906      	ldr	r1, [pc, #24]	@ (8006038 <HAL_HSEM_IRQHandler+0x30>)
 800601e:	4013      	ands	r3, r2
 8006020:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 8006022:	4a05      	ldr	r2, [pc, #20]	@ (8006038 <HAL_HSEM_IRQHandler+0x30>)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6053      	str	r3, [r2, #4]

#endif
  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7fb fda9 	bl	8001b80 <HAL_HSEM_FreeCallback>
}
 800602e:	bf00      	nop
 8006030:	3708      	adds	r7, #8
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	58026500 	.word	0x58026500

0800603c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e041      	b.n	80060d2 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8006056:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f245 5255 	movw	r2, #21845	@ 0x5555
 8006060:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	6852      	ldr	r2, [r2, #4]
 800606a:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	6892      	ldr	r2, [r2, #8]
 8006074:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006076:	f7fc fa4f 	bl	8002518 <HAL_GetTick>
 800607a:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800607c:	e00f      	b.n	800609e <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800607e:	f7fc fa4b 	bl	8002518 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b31      	cmp	r3, #49	@ 0x31
 800608a:	d908      	bls.n	800609e <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68db      	ldr	r3, [r3, #12]
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b00      	cmp	r3, #0
 8006098:	d001      	beq.n	800609e <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e019      	b.n	80060d2 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f003 0307 	and.w	r3, r3, #7
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e8      	bne.n	800607e <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	691a      	ldr	r2, [r3, #16]
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d005      	beq.n	80060c6 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68d2      	ldr	r2, [r2, #12]
 80060c2:	611a      	str	r2, [r3, #16]
 80060c4:	e004      	b.n	80060d0 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80060ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80060da:	b480      	push	{r7}
 80060dc:	b083      	sub	sp, #12
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80060ea:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	370c      	adds	r7, #12
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
	...

080060fc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006104:	4b29      	ldr	r3, [pc, #164]	@ (80061ac <HAL_PWREx_ConfigSupply+0xb0>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	2b06      	cmp	r3, #6
 800610e:	d00a      	beq.n	8006126 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8006110:	4b26      	ldr	r3, [pc, #152]	@ (80061ac <HAL_PWREx_ConfigSupply+0xb0>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	429a      	cmp	r2, r3
 800611c:	d001      	beq.n	8006122 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e040      	b.n	80061a4 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8006122:	2300      	movs	r3, #0
 8006124:	e03e      	b.n	80061a4 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006126:	4b21      	ldr	r3, [pc, #132]	@ (80061ac <HAL_PWREx_ConfigSupply+0xb0>)
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800612e:	491f      	ldr	r1, [pc, #124]	@ (80061ac <HAL_PWREx_ConfigSupply+0xb0>)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4313      	orrs	r3, r2
 8006134:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006136:	f7fc f9ef 	bl	8002518 <HAL_GetTick>
 800613a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800613c:	e009      	b.n	8006152 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800613e:	f7fc f9eb 	bl	8002518 <HAL_GetTick>
 8006142:	4602      	mov	r2, r0
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800614c:	d901      	bls.n	8006152 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e028      	b.n	80061a4 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006152:	4b16      	ldr	r3, [pc, #88]	@ (80061ac <HAL_PWREx_ConfigSupply+0xb0>)
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800615a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800615e:	d1ee      	bne.n	800613e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2b1e      	cmp	r3, #30
 8006164:	d008      	beq.n	8006178 <HAL_PWREx_ConfigSupply+0x7c>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b2e      	cmp	r3, #46	@ 0x2e
 800616a:	d005      	beq.n	8006178 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b1d      	cmp	r3, #29
 8006170:	d002      	beq.n	8006178 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2b2d      	cmp	r3, #45	@ 0x2d
 8006176:	d114      	bne.n	80061a2 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006178:	f7fc f9ce 	bl	8002518 <HAL_GetTick>
 800617c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800617e:	e009      	b.n	8006194 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006180:	f7fc f9ca 	bl	8002518 <HAL_GetTick>
 8006184:	4602      	mov	r2, r0
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	1ad3      	subs	r3, r2, r3
 800618a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800618e:	d901      	bls.n	8006194 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e007      	b.n	80061a4 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006194:	4b05      	ldr	r3, [pc, #20]	@ (80061ac <HAL_PWREx_ConfigSupply+0xb0>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800619c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061a0:	d1ee      	bne.n	8006180 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3710      	adds	r7, #16
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}
 80061ac:	58024800 	.word	0x58024800

080061b0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08c      	sub	sp, #48	@ 0x30
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d102      	bne.n	80061c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	f000 bc48 	b.w	8006a54 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 8088 	beq.w	80062e2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80061d2:	4b99      	ldr	r3, [pc, #612]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80061dc:	4b96      	ldr	r3, [pc, #600]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 80061de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80061e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e4:	2b10      	cmp	r3, #16
 80061e6:	d007      	beq.n	80061f8 <HAL_RCC_OscConfig+0x48>
 80061e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ea:	2b18      	cmp	r3, #24
 80061ec:	d111      	bne.n	8006212 <HAL_RCC_OscConfig+0x62>
 80061ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f0:	f003 0303 	and.w	r3, r3, #3
 80061f4:	2b02      	cmp	r3, #2
 80061f6:	d10c      	bne.n	8006212 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061f8:	4b8f      	ldr	r3, [pc, #572]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d06d      	beq.n	80062e0 <HAL_RCC_OscConfig+0x130>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d169      	bne.n	80062e0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800620c:	2301      	movs	r3, #1
 800620e:	f000 bc21 	b.w	8006a54 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800621a:	d106      	bne.n	800622a <HAL_RCC_OscConfig+0x7a>
 800621c:	4b86      	ldr	r3, [pc, #536]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a85      	ldr	r2, [pc, #532]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006222:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006226:	6013      	str	r3, [r2, #0]
 8006228:	e02e      	b.n	8006288 <HAL_RCC_OscConfig+0xd8>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10c      	bne.n	800624c <HAL_RCC_OscConfig+0x9c>
 8006232:	4b81      	ldr	r3, [pc, #516]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a80      	ldr	r2, [pc, #512]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006238:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	4b7e      	ldr	r3, [pc, #504]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a7d      	ldr	r2, [pc, #500]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006244:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006248:	6013      	str	r3, [r2, #0]
 800624a:	e01d      	b.n	8006288 <HAL_RCC_OscConfig+0xd8>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006254:	d10c      	bne.n	8006270 <HAL_RCC_OscConfig+0xc0>
 8006256:	4b78      	ldr	r3, [pc, #480]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a77      	ldr	r2, [pc, #476]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 800625c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	4b75      	ldr	r3, [pc, #468]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a74      	ldr	r2, [pc, #464]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006268:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	e00b      	b.n	8006288 <HAL_RCC_OscConfig+0xd8>
 8006270:	4b71      	ldr	r3, [pc, #452]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a70      	ldr	r2, [pc, #448]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006276:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	4b6e      	ldr	r3, [pc, #440]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a6d      	ldr	r2, [pc, #436]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006282:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006286:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d013      	beq.n	80062b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006290:	f7fc f942 	bl	8002518 <HAL_GetTick>
 8006294:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006296:	e008      	b.n	80062aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006298:	f7fc f93e 	bl	8002518 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	2b64      	cmp	r3, #100	@ 0x64
 80062a4:	d901      	bls.n	80062aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80062a6:	2303      	movs	r3, #3
 80062a8:	e3d4      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80062aa:	4b63      	ldr	r3, [pc, #396]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d0f0      	beq.n	8006298 <HAL_RCC_OscConfig+0xe8>
 80062b6:	e014      	b.n	80062e2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062b8:	f7fc f92e 	bl	8002518 <HAL_GetTick>
 80062bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062be:	e008      	b.n	80062d2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062c0:	f7fc f92a 	bl	8002518 <HAL_GetTick>
 80062c4:	4602      	mov	r2, r0
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	2b64      	cmp	r3, #100	@ 0x64
 80062cc:	d901      	bls.n	80062d2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80062ce:	2303      	movs	r3, #3
 80062d0:	e3c0      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80062d2:	4b59      	ldr	r3, [pc, #356]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1f0      	bne.n	80062c0 <HAL_RCC_OscConfig+0x110>
 80062de:	e000      	b.n	80062e2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f003 0302 	and.w	r3, r3, #2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f000 80ca 	beq.w	8006484 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80062f0:	4b51      	ldr	r3, [pc, #324]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 80062f2:	691b      	ldr	r3, [r3, #16]
 80062f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062f8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80062fa:	4b4f      	ldr	r3, [pc, #316]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 80062fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062fe:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d007      	beq.n	8006316 <HAL_RCC_OscConfig+0x166>
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	2b18      	cmp	r3, #24
 800630a:	d156      	bne.n	80063ba <HAL_RCC_OscConfig+0x20a>
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f003 0303 	and.w	r3, r3, #3
 8006312:	2b00      	cmp	r3, #0
 8006314:	d151      	bne.n	80063ba <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006316:	4b48      	ldr	r3, [pc, #288]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f003 0304 	and.w	r3, r3, #4
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <HAL_RCC_OscConfig+0x17e>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d101      	bne.n	800632e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	e392      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800632e:	4b42      	ldr	r3, [pc, #264]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f023 0219 	bic.w	r2, r3, #25
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	493f      	ldr	r1, [pc, #252]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 800633c:	4313      	orrs	r3, r2
 800633e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006340:	f7fc f8ea 	bl	8002518 <HAL_GetTick>
 8006344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006346:	e008      	b.n	800635a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006348:	f7fc f8e6 	bl	8002518 <HAL_GetTick>
 800634c:	4602      	mov	r2, r0
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	2b02      	cmp	r3, #2
 8006354:	d901      	bls.n	800635a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e37c      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800635a:	4b37      	ldr	r3, [pc, #220]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0304 	and.w	r3, r3, #4
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0f0      	beq.n	8006348 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006366:	f7fc f8e3 	bl	8002530 <HAL_GetREVID>
 800636a:	4603      	mov	r3, r0
 800636c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006370:	4293      	cmp	r3, r2
 8006372:	d817      	bhi.n	80063a4 <HAL_RCC_OscConfig+0x1f4>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	691b      	ldr	r3, [r3, #16]
 8006378:	2b40      	cmp	r3, #64	@ 0x40
 800637a:	d108      	bne.n	800638e <HAL_RCC_OscConfig+0x1de>
 800637c:	4b2e      	ldr	r3, [pc, #184]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006384:	4a2c      	ldr	r2, [pc, #176]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800638a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800638c:	e07a      	b.n	8006484 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800638e:	4b2a      	ldr	r3, [pc, #168]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	031b      	lsls	r3, r3, #12
 800639c:	4926      	ldr	r1, [pc, #152]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063a2:	e06f      	b.n	8006484 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063a4:	4b24      	ldr	r3, [pc, #144]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	061b      	lsls	r3, r3, #24
 80063b2:	4921      	ldr	r1, [pc, #132]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 80063b4:	4313      	orrs	r3, r2
 80063b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80063b8:	e064      	b.n	8006484 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d047      	beq.n	8006452 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80063c2:	4b1d      	ldr	r3, [pc, #116]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f023 0219 	bic.w	r2, r3, #25
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	491a      	ldr	r1, [pc, #104]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d4:	f7fc f8a0 	bl	8002518 <HAL_GetTick>
 80063d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063da:	e008      	b.n	80063ee <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80063dc:	f7fc f89c 	bl	8002518 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d901      	bls.n	80063ee <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80063ea:	2303      	movs	r3, #3
 80063ec:	e332      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80063ee:	4b12      	ldr	r3, [pc, #72]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0304 	and.w	r3, r3, #4
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d0f0      	beq.n	80063dc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80063fa:	f7fc f899 	bl	8002530 <HAL_GetREVID>
 80063fe:	4603      	mov	r3, r0
 8006400:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006404:	4293      	cmp	r3, r2
 8006406:	d819      	bhi.n	800643c <HAL_RCC_OscConfig+0x28c>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	691b      	ldr	r3, [r3, #16]
 800640c:	2b40      	cmp	r3, #64	@ 0x40
 800640e:	d108      	bne.n	8006422 <HAL_RCC_OscConfig+0x272>
 8006410:	4b09      	ldr	r3, [pc, #36]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006418:	4a07      	ldr	r2, [pc, #28]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 800641a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800641e:	6053      	str	r3, [r2, #4]
 8006420:	e030      	b.n	8006484 <HAL_RCC_OscConfig+0x2d4>
 8006422:	4b05      	ldr	r3, [pc, #20]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006424:	685b      	ldr	r3, [r3, #4]
 8006426:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	031b      	lsls	r3, r3, #12
 8006430:	4901      	ldr	r1, [pc, #4]	@ (8006438 <HAL_RCC_OscConfig+0x288>)
 8006432:	4313      	orrs	r3, r2
 8006434:	604b      	str	r3, [r1, #4]
 8006436:	e025      	b.n	8006484 <HAL_RCC_OscConfig+0x2d4>
 8006438:	58024400 	.word	0x58024400
 800643c:	4b9a      	ldr	r3, [pc, #616]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	061b      	lsls	r3, r3, #24
 800644a:	4997      	ldr	r1, [pc, #604]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 800644c:	4313      	orrs	r3, r2
 800644e:	604b      	str	r3, [r1, #4]
 8006450:	e018      	b.n	8006484 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006452:	4b95      	ldr	r3, [pc, #596]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a94      	ldr	r2, [pc, #592]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006458:	f023 0301 	bic.w	r3, r3, #1
 800645c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645e:	f7fc f85b 	bl	8002518 <HAL_GetTick>
 8006462:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006466:	f7fc f857 	bl	8002518 <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e2ed      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006478:	4b8b      	ldr	r3, [pc, #556]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0304 	and.w	r3, r3, #4
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1f0      	bne.n	8006466 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f003 0310 	and.w	r3, r3, #16
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 80a9 	beq.w	80065e4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006492:	4b85      	ldr	r3, [pc, #532]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006494:	691b      	ldr	r3, [r3, #16]
 8006496:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800649a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800649c:	4b82      	ldr	r3, [pc, #520]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 800649e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064a0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	2b08      	cmp	r3, #8
 80064a6:	d007      	beq.n	80064b8 <HAL_RCC_OscConfig+0x308>
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	2b18      	cmp	r3, #24
 80064ac:	d13a      	bne.n	8006524 <HAL_RCC_OscConfig+0x374>
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f003 0303 	and.w	r3, r3, #3
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d135      	bne.n	8006524 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064b8:	4b7b      	ldr	r3, [pc, #492]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d005      	beq.n	80064d0 <HAL_RCC_OscConfig+0x320>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	2b80      	cmp	r3, #128	@ 0x80
 80064ca:	d001      	beq.n	80064d0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	e2c1      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064d0:	f7fc f82e 	bl	8002530 <HAL_GetREVID>
 80064d4:	4603      	mov	r3, r0
 80064d6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80064da:	4293      	cmp	r3, r2
 80064dc:	d817      	bhi.n	800650e <HAL_RCC_OscConfig+0x35e>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	2b20      	cmp	r3, #32
 80064e4:	d108      	bne.n	80064f8 <HAL_RCC_OscConfig+0x348>
 80064e6:	4b70      	ldr	r3, [pc, #448]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80064ee:	4a6e      	ldr	r2, [pc, #440]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 80064f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80064f4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80064f6:	e075      	b.n	80065e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80064f8:	4b6b      	ldr	r3, [pc, #428]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a1b      	ldr	r3, [r3, #32]
 8006504:	069b      	lsls	r3, r3, #26
 8006506:	4968      	ldr	r1, [pc, #416]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006508:	4313      	orrs	r3, r2
 800650a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800650c:	e06a      	b.n	80065e4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800650e:	4b66      	ldr	r3, [pc, #408]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a1b      	ldr	r3, [r3, #32]
 800651a:	061b      	lsls	r3, r3, #24
 800651c:	4962      	ldr	r1, [pc, #392]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 800651e:	4313      	orrs	r3, r2
 8006520:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006522:	e05f      	b.n	80065e4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	69db      	ldr	r3, [r3, #28]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d042      	beq.n	80065b2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800652c:	4b5e      	ldr	r3, [pc, #376]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a5d      	ldr	r2, [pc, #372]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006532:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006538:	f7fb ffee 	bl	8002518 <HAL_GetTick>
 800653c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800653e:	e008      	b.n	8006552 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006540:	f7fb ffea 	bl	8002518 <HAL_GetTick>
 8006544:	4602      	mov	r2, r0
 8006546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	2b02      	cmp	r3, #2
 800654c:	d901      	bls.n	8006552 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800654e:	2303      	movs	r3, #3
 8006550:	e280      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006552:	4b55      	ldr	r3, [pc, #340]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800655a:	2b00      	cmp	r3, #0
 800655c:	d0f0      	beq.n	8006540 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800655e:	f7fb ffe7 	bl	8002530 <HAL_GetREVID>
 8006562:	4603      	mov	r3, r0
 8006564:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006568:	4293      	cmp	r3, r2
 800656a:	d817      	bhi.n	800659c <HAL_RCC_OscConfig+0x3ec>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a1b      	ldr	r3, [r3, #32]
 8006570:	2b20      	cmp	r3, #32
 8006572:	d108      	bne.n	8006586 <HAL_RCC_OscConfig+0x3d6>
 8006574:	4b4c      	ldr	r3, [pc, #304]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800657c:	4a4a      	ldr	r2, [pc, #296]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 800657e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006582:	6053      	str	r3, [r2, #4]
 8006584:	e02e      	b.n	80065e4 <HAL_RCC_OscConfig+0x434>
 8006586:	4b48      	ldr	r3, [pc, #288]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6a1b      	ldr	r3, [r3, #32]
 8006592:	069b      	lsls	r3, r3, #26
 8006594:	4944      	ldr	r1, [pc, #272]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006596:	4313      	orrs	r3, r2
 8006598:	604b      	str	r3, [r1, #4]
 800659a:	e023      	b.n	80065e4 <HAL_RCC_OscConfig+0x434>
 800659c:	4b42      	ldr	r3, [pc, #264]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	061b      	lsls	r3, r3, #24
 80065aa:	493f      	ldr	r1, [pc, #252]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 80065ac:	4313      	orrs	r3, r2
 80065ae:	60cb      	str	r3, [r1, #12]
 80065b0:	e018      	b.n	80065e4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80065b2:	4b3d      	ldr	r3, [pc, #244]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a3c      	ldr	r2, [pc, #240]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 80065b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065be:	f7fb ffab 	bl	8002518 <HAL_GetTick>
 80065c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065c4:	e008      	b.n	80065d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80065c6:	f7fb ffa7 	bl	8002518 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d901      	bls.n	80065d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80065d4:	2303      	movs	r3, #3
 80065d6:	e23d      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80065d8:	4b33      	ldr	r3, [pc, #204]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1f0      	bne.n	80065c6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0308 	and.w	r3, r3, #8
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d036      	beq.n	800665e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	695b      	ldr	r3, [r3, #20]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d019      	beq.n	800662c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065f8:	4b2b      	ldr	r3, [pc, #172]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 80065fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80065fc:	4a2a      	ldr	r2, [pc, #168]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 80065fe:	f043 0301 	orr.w	r3, r3, #1
 8006602:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006604:	f7fb ff88 	bl	8002518 <HAL_GetTick>
 8006608:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800660a:	e008      	b.n	800661e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800660c:	f7fb ff84 	bl	8002518 <HAL_GetTick>
 8006610:	4602      	mov	r2, r0
 8006612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	2b02      	cmp	r3, #2
 8006618:	d901      	bls.n	800661e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e21a      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800661e:	4b22      	ldr	r3, [pc, #136]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006620:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006622:	f003 0302 	and.w	r3, r3, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d0f0      	beq.n	800660c <HAL_RCC_OscConfig+0x45c>
 800662a:	e018      	b.n	800665e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800662c:	4b1e      	ldr	r3, [pc, #120]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 800662e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006630:	4a1d      	ldr	r2, [pc, #116]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006632:	f023 0301 	bic.w	r3, r3, #1
 8006636:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006638:	f7fb ff6e 	bl	8002518 <HAL_GetTick>
 800663c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800663e:	e008      	b.n	8006652 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006640:	f7fb ff6a 	bl	8002518 <HAL_GetTick>
 8006644:	4602      	mov	r2, r0
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	2b02      	cmp	r3, #2
 800664c:	d901      	bls.n	8006652 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800664e:	2303      	movs	r3, #3
 8006650:	e200      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006652:	4b15      	ldr	r3, [pc, #84]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006654:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1f0      	bne.n	8006640 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f003 0320 	and.w	r3, r3, #32
 8006666:	2b00      	cmp	r3, #0
 8006668:	d039      	beq.n	80066de <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d01c      	beq.n	80066ac <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006672:	4b0d      	ldr	r3, [pc, #52]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a0c      	ldr	r2, [pc, #48]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 8006678:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800667c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800667e:	f7fb ff4b 	bl	8002518 <HAL_GetTick>
 8006682:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006684:	e008      	b.n	8006698 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006686:	f7fb ff47 	bl	8002518 <HAL_GetTick>
 800668a:	4602      	mov	r2, r0
 800668c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668e:	1ad3      	subs	r3, r2, r3
 8006690:	2b02      	cmp	r3, #2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e1dd      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006698:	4b03      	ldr	r3, [pc, #12]	@ (80066a8 <HAL_RCC_OscConfig+0x4f8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d0f0      	beq.n	8006686 <HAL_RCC_OscConfig+0x4d6>
 80066a4:	e01b      	b.n	80066de <HAL_RCC_OscConfig+0x52e>
 80066a6:	bf00      	nop
 80066a8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80066ac:	4b9b      	ldr	r3, [pc, #620]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a9a      	ldr	r2, [pc, #616]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80066b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066b6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80066b8:	f7fb ff2e 	bl	8002518 <HAL_GetTick>
 80066bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066be:	e008      	b.n	80066d2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80066c0:	f7fb ff2a 	bl	8002518 <HAL_GetTick>
 80066c4:	4602      	mov	r2, r0
 80066c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c8:	1ad3      	subs	r3, r2, r3
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e1c0      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80066d2:	4b92      	ldr	r3, [pc, #584]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1f0      	bne.n	80066c0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f003 0304 	and.w	r3, r3, #4
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	f000 8081 	beq.w	80067ee <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80066ec:	4b8c      	ldr	r3, [pc, #560]	@ (8006920 <HAL_RCC_OscConfig+0x770>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a8b      	ldr	r2, [pc, #556]	@ (8006920 <HAL_RCC_OscConfig+0x770>)
 80066f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80066f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80066f8:	f7fb ff0e 	bl	8002518 <HAL_GetTick>
 80066fc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006700:	f7fb ff0a 	bl	8002518 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b64      	cmp	r3, #100	@ 0x64
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e1a0      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006712:	4b83      	ldr	r3, [pc, #524]	@ (8006920 <HAL_RCC_OscConfig+0x770>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800671a:	2b00      	cmp	r3, #0
 800671c:	d0f0      	beq.n	8006700 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d106      	bne.n	8006734 <HAL_RCC_OscConfig+0x584>
 8006726:	4b7d      	ldr	r3, [pc, #500]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672a:	4a7c      	ldr	r2, [pc, #496]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 800672c:	f043 0301 	orr.w	r3, r3, #1
 8006730:	6713      	str	r3, [r2, #112]	@ 0x70
 8006732:	e02d      	b.n	8006790 <HAL_RCC_OscConfig+0x5e0>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10c      	bne.n	8006756 <HAL_RCC_OscConfig+0x5a6>
 800673c:	4b77      	ldr	r3, [pc, #476]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 800673e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006740:	4a76      	ldr	r2, [pc, #472]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006742:	f023 0301 	bic.w	r3, r3, #1
 8006746:	6713      	str	r3, [r2, #112]	@ 0x70
 8006748:	4b74      	ldr	r3, [pc, #464]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 800674a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800674c:	4a73      	ldr	r2, [pc, #460]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 800674e:	f023 0304 	bic.w	r3, r3, #4
 8006752:	6713      	str	r3, [r2, #112]	@ 0x70
 8006754:	e01c      	b.n	8006790 <HAL_RCC_OscConfig+0x5e0>
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	2b05      	cmp	r3, #5
 800675c:	d10c      	bne.n	8006778 <HAL_RCC_OscConfig+0x5c8>
 800675e:	4b6f      	ldr	r3, [pc, #444]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006760:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006762:	4a6e      	ldr	r2, [pc, #440]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006764:	f043 0304 	orr.w	r3, r3, #4
 8006768:	6713      	str	r3, [r2, #112]	@ 0x70
 800676a:	4b6c      	ldr	r3, [pc, #432]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 800676c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800676e:	4a6b      	ldr	r2, [pc, #428]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006770:	f043 0301 	orr.w	r3, r3, #1
 8006774:	6713      	str	r3, [r2, #112]	@ 0x70
 8006776:	e00b      	b.n	8006790 <HAL_RCC_OscConfig+0x5e0>
 8006778:	4b68      	ldr	r3, [pc, #416]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 800677a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800677c:	4a67      	ldr	r2, [pc, #412]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 800677e:	f023 0301 	bic.w	r3, r3, #1
 8006782:	6713      	str	r3, [r2, #112]	@ 0x70
 8006784:	4b65      	ldr	r3, [pc, #404]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006786:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006788:	4a64      	ldr	r2, [pc, #400]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 800678a:	f023 0304 	bic.w	r3, r3, #4
 800678e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d015      	beq.n	80067c4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006798:	f7fb febe 	bl	8002518 <HAL_GetTick>
 800679c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800679e:	e00a      	b.n	80067b6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067a0:	f7fb feba 	bl	8002518 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e14e      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80067b6:	4b59      	ldr	r3, [pc, #356]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80067b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0ee      	beq.n	80067a0 <HAL_RCC_OscConfig+0x5f0>
 80067c2:	e014      	b.n	80067ee <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067c4:	f7fb fea8 	bl	8002518 <HAL_GetTick>
 80067c8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067ca:	e00a      	b.n	80067e2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80067cc:	f7fb fea4 	bl	8002518 <HAL_GetTick>
 80067d0:	4602      	mov	r2, r0
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	1ad3      	subs	r3, r2, r3
 80067d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80067da:	4293      	cmp	r3, r2
 80067dc:	d901      	bls.n	80067e2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80067de:	2303      	movs	r3, #3
 80067e0:	e138      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80067e2:	4b4e      	ldr	r3, [pc, #312]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80067e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067e6:	f003 0302 	and.w	r3, r3, #2
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1ee      	bne.n	80067cc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f000 812d 	beq.w	8006a52 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80067f8:	4b48      	ldr	r3, [pc, #288]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006800:	2b18      	cmp	r3, #24
 8006802:	f000 80bd 	beq.w	8006980 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800680a:	2b02      	cmp	r3, #2
 800680c:	f040 809e 	bne.w	800694c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006810:	4b42      	ldr	r3, [pc, #264]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a41      	ldr	r2, [pc, #260]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006816:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800681a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800681c:	f7fb fe7c 	bl	8002518 <HAL_GetTick>
 8006820:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006822:	e008      	b.n	8006836 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006824:	f7fb fe78 	bl	8002518 <HAL_GetTick>
 8006828:	4602      	mov	r2, r0
 800682a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682c:	1ad3      	subs	r3, r2, r3
 800682e:	2b02      	cmp	r3, #2
 8006830:	d901      	bls.n	8006836 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006832:	2303      	movs	r3, #3
 8006834:	e10e      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006836:	4b39      	ldr	r3, [pc, #228]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1f0      	bne.n	8006824 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006842:	4b36      	ldr	r3, [pc, #216]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006844:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006846:	4b37      	ldr	r3, [pc, #220]	@ (8006924 <HAL_RCC_OscConfig+0x774>)
 8006848:	4013      	ands	r3, r2
 800684a:	687a      	ldr	r2, [r7, #4]
 800684c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006852:	0112      	lsls	r2, r2, #4
 8006854:	430a      	orrs	r2, r1
 8006856:	4931      	ldr	r1, [pc, #196]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006858:	4313      	orrs	r3, r2
 800685a:	628b      	str	r3, [r1, #40]	@ 0x28
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006860:	3b01      	subs	r3, #1
 8006862:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800686a:	3b01      	subs	r3, #1
 800686c:	025b      	lsls	r3, r3, #9
 800686e:	b29b      	uxth	r3, r3
 8006870:	431a      	orrs	r2, r3
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006876:	3b01      	subs	r3, #1
 8006878:	041b      	lsls	r3, r3, #16
 800687a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800687e:	431a      	orrs	r2, r3
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006884:	3b01      	subs	r3, #1
 8006886:	061b      	lsls	r3, r3, #24
 8006888:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800688c:	4923      	ldr	r1, [pc, #140]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 800688e:	4313      	orrs	r3, r2
 8006890:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006892:	4b22      	ldr	r3, [pc, #136]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006896:	4a21      	ldr	r2, [pc, #132]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006898:	f023 0301 	bic.w	r3, r3, #1
 800689c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800689e:	4b1f      	ldr	r3, [pc, #124]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80068a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068a2:	4b21      	ldr	r3, [pc, #132]	@ (8006928 <HAL_RCC_OscConfig+0x778>)
 80068a4:	4013      	ands	r3, r2
 80068a6:	687a      	ldr	r2, [r7, #4]
 80068a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80068aa:	00d2      	lsls	r2, r2, #3
 80068ac:	491b      	ldr	r1, [pc, #108]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80068ae:	4313      	orrs	r3, r2
 80068b0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80068b2:	4b1a      	ldr	r3, [pc, #104]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80068b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068b6:	f023 020c 	bic.w	r2, r3, #12
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068be:	4917      	ldr	r1, [pc, #92]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80068c0:	4313      	orrs	r3, r2
 80068c2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80068c4:	4b15      	ldr	r3, [pc, #84]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80068c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c8:	f023 0202 	bic.w	r2, r3, #2
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068d0:	4912      	ldr	r1, [pc, #72]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80068d2:	4313      	orrs	r3, r2
 80068d4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068d6:	4b11      	ldr	r3, [pc, #68]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80068d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068da:	4a10      	ldr	r2, [pc, #64]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80068dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068e2:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80068e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e6:	4a0d      	ldr	r2, [pc, #52]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80068e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80068ee:	4b0b      	ldr	r3, [pc, #44]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	4a0a      	ldr	r2, [pc, #40]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80068f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80068f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80068fa:	4b08      	ldr	r3, [pc, #32]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 80068fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fe:	4a07      	ldr	r2, [pc, #28]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006900:	f043 0301 	orr.w	r3, r3, #1
 8006904:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006906:	4b05      	ldr	r3, [pc, #20]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a04      	ldr	r2, [pc, #16]	@ (800691c <HAL_RCC_OscConfig+0x76c>)
 800690c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006910:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006912:	f7fb fe01 	bl	8002518 <HAL_GetTick>
 8006916:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006918:	e011      	b.n	800693e <HAL_RCC_OscConfig+0x78e>
 800691a:	bf00      	nop
 800691c:	58024400 	.word	0x58024400
 8006920:	58024800 	.word	0x58024800
 8006924:	fffffc0c 	.word	0xfffffc0c
 8006928:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800692c:	f7fb fdf4 	bl	8002518 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e08a      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800693e:	4b47      	ldr	r3, [pc, #284]	@ (8006a5c <HAL_RCC_OscConfig+0x8ac>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d0f0      	beq.n	800692c <HAL_RCC_OscConfig+0x77c>
 800694a:	e082      	b.n	8006a52 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800694c:	4b43      	ldr	r3, [pc, #268]	@ (8006a5c <HAL_RCC_OscConfig+0x8ac>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a42      	ldr	r2, [pc, #264]	@ (8006a5c <HAL_RCC_OscConfig+0x8ac>)
 8006952:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006956:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006958:	f7fb fdde 	bl	8002518 <HAL_GetTick>
 800695c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800695e:	e008      	b.n	8006972 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006960:	f7fb fdda 	bl	8002518 <HAL_GetTick>
 8006964:	4602      	mov	r2, r0
 8006966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	2b02      	cmp	r3, #2
 800696c:	d901      	bls.n	8006972 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800696e:	2303      	movs	r3, #3
 8006970:	e070      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006972:	4b3a      	ldr	r3, [pc, #232]	@ (8006a5c <HAL_RCC_OscConfig+0x8ac>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1f0      	bne.n	8006960 <HAL_RCC_OscConfig+0x7b0>
 800697e:	e068      	b.n	8006a52 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006980:	4b36      	ldr	r3, [pc, #216]	@ (8006a5c <HAL_RCC_OscConfig+0x8ac>)
 8006982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006984:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006986:	4b35      	ldr	r3, [pc, #212]	@ (8006a5c <HAL_RCC_OscConfig+0x8ac>)
 8006988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006990:	2b01      	cmp	r3, #1
 8006992:	d031      	beq.n	80069f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	f003 0203 	and.w	r2, r3, #3
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800699e:	429a      	cmp	r2, r3
 80069a0:	d12a      	bne.n	80069f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	091b      	lsrs	r3, r3, #4
 80069a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d122      	bne.n	80069f8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069bc:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80069be:	429a      	cmp	r2, r3
 80069c0:	d11a      	bne.n	80069f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	0a5b      	lsrs	r3, r3, #9
 80069c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ce:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d111      	bne.n	80069f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	0c1b      	lsrs	r3, r3, #16
 80069d8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80069e2:	429a      	cmp	r2, r3
 80069e4:	d108      	bne.n	80069f8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	0e1b      	lsrs	r3, r3, #24
 80069ea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d001      	beq.n	80069fc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	e02b      	b.n	8006a54 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80069fc:	4b17      	ldr	r3, [pc, #92]	@ (8006a5c <HAL_RCC_OscConfig+0x8ac>)
 80069fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a00:	08db      	lsrs	r3, r3, #3
 8006a02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006a06:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d01f      	beq.n	8006a52 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006a12:	4b12      	ldr	r3, [pc, #72]	@ (8006a5c <HAL_RCC_OscConfig+0x8ac>)
 8006a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a16:	4a11      	ldr	r2, [pc, #68]	@ (8006a5c <HAL_RCC_OscConfig+0x8ac>)
 8006a18:	f023 0301 	bic.w	r3, r3, #1
 8006a1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a1e:	f7fb fd7b 	bl	8002518 <HAL_GetTick>
 8006a22:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006a24:	bf00      	nop
 8006a26:	f7fb fd77 	bl	8002518 <HAL_GetTick>
 8006a2a:	4602      	mov	r2, r0
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d0f9      	beq.n	8006a26 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006a32:	4b0a      	ldr	r3, [pc, #40]	@ (8006a5c <HAL_RCC_OscConfig+0x8ac>)
 8006a34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a36:	4b0a      	ldr	r3, [pc, #40]	@ (8006a60 <HAL_RCC_OscConfig+0x8b0>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006a3e:	00d2      	lsls	r2, r2, #3
 8006a40:	4906      	ldr	r1, [pc, #24]	@ (8006a5c <HAL_RCC_OscConfig+0x8ac>)
 8006a42:	4313      	orrs	r3, r2
 8006a44:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006a46:	4b05      	ldr	r3, [pc, #20]	@ (8006a5c <HAL_RCC_OscConfig+0x8ac>)
 8006a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a4a:	4a04      	ldr	r2, [pc, #16]	@ (8006a5c <HAL_RCC_OscConfig+0x8ac>)
 8006a4c:	f043 0301 	orr.w	r3, r3, #1
 8006a50:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3730      	adds	r7, #48	@ 0x30
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	58024400 	.word	0x58024400
 8006a60:	ffff0007 	.word	0xffff0007

08006a64 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b086      	sub	sp, #24
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e19c      	b.n	8006db2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a78:	4b8a      	ldr	r3, [pc, #552]	@ (8006ca4 <HAL_RCC_ClockConfig+0x240>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	f003 030f 	and.w	r3, r3, #15
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d910      	bls.n	8006aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a86:	4b87      	ldr	r3, [pc, #540]	@ (8006ca4 <HAL_RCC_ClockConfig+0x240>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f023 020f 	bic.w	r2, r3, #15
 8006a8e:	4985      	ldr	r1, [pc, #532]	@ (8006ca4 <HAL_RCC_ClockConfig+0x240>)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	4313      	orrs	r3, r2
 8006a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a96:	4b83      	ldr	r3, [pc, #524]	@ (8006ca4 <HAL_RCC_ClockConfig+0x240>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	683a      	ldr	r2, [r7, #0]
 8006aa0:	429a      	cmp	r2, r3
 8006aa2:	d001      	beq.n	8006aa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e184      	b.n	8006db2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d010      	beq.n	8006ad6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	691a      	ldr	r2, [r3, #16]
 8006ab8:	4b7b      	ldr	r3, [pc, #492]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006aba:	699b      	ldr	r3, [r3, #24]
 8006abc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d908      	bls.n	8006ad6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006ac4:	4b78      	ldr	r3, [pc, #480]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006ac6:	699b      	ldr	r3, [r3, #24]
 8006ac8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	4975      	ldr	r1, [pc, #468]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f003 0308 	and.w	r3, r3, #8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d010      	beq.n	8006b04 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	695a      	ldr	r2, [r3, #20]
 8006ae6:	4b70      	ldr	r3, [pc, #448]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d908      	bls.n	8006b04 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006af2:	4b6d      	ldr	r3, [pc, #436]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	496a      	ldr	r1, [pc, #424]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006b00:	4313      	orrs	r3, r2
 8006b02:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d010      	beq.n	8006b32 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	699a      	ldr	r2, [r3, #24]
 8006b14:	4b64      	ldr	r3, [pc, #400]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006b16:	69db      	ldr	r3, [r3, #28]
 8006b18:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d908      	bls.n	8006b32 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006b20:	4b61      	ldr	r3, [pc, #388]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006b22:	69db      	ldr	r3, [r3, #28]
 8006b24:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	495e      	ldr	r1, [pc, #376]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0320 	and.w	r3, r3, #32
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d010      	beq.n	8006b60 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69da      	ldr	r2, [r3, #28]
 8006b42:	4b59      	ldr	r3, [pc, #356]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006b44:	6a1b      	ldr	r3, [r3, #32]
 8006b46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d908      	bls.n	8006b60 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006b4e:	4b56      	ldr	r3, [pc, #344]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006b50:	6a1b      	ldr	r3, [r3, #32]
 8006b52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	4953      	ldr	r1, [pc, #332]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f003 0302 	and.w	r3, r3, #2
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d010      	beq.n	8006b8e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68da      	ldr	r2, [r3, #12]
 8006b70:	4b4d      	ldr	r3, [pc, #308]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006b72:	699b      	ldr	r3, [r3, #24]
 8006b74:	f003 030f 	and.w	r3, r3, #15
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d908      	bls.n	8006b8e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b7c:	4b4a      	ldr	r3, [pc, #296]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	f023 020f 	bic.w	r2, r3, #15
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	4947      	ldr	r1, [pc, #284]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d055      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006b9a:	4b43      	ldr	r3, [pc, #268]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006b9c:	699b      	ldr	r3, [r3, #24]
 8006b9e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	4940      	ldr	r1, [pc, #256]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	d107      	bne.n	8006bc4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006bb4:	4b3c      	ldr	r3, [pc, #240]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d121      	bne.n	8006c04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	e0f6      	b.n	8006db2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d107      	bne.n	8006bdc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006bcc:	4b36      	ldr	r3, [pc, #216]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d115      	bne.n	8006c04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	e0ea      	b.n	8006db2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	685b      	ldr	r3, [r3, #4]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d107      	bne.n	8006bf4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006be4:	4b30      	ldr	r3, [pc, #192]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d109      	bne.n	8006c04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e0de      	b.n	8006db2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006bf4:	4b2c      	ldr	r3, [pc, #176]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d101      	bne.n	8006c04 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006c00:	2301      	movs	r3, #1
 8006c02:	e0d6      	b.n	8006db2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006c04:	4b28      	ldr	r3, [pc, #160]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	f023 0207 	bic.w	r2, r3, #7
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	4925      	ldr	r1, [pc, #148]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006c12:	4313      	orrs	r3, r2
 8006c14:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c16:	f7fb fc7f 	bl	8002518 <HAL_GetTick>
 8006c1a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c1c:	e00a      	b.n	8006c34 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c1e:	f7fb fc7b 	bl	8002518 <HAL_GetTick>
 8006c22:	4602      	mov	r2, r0
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	1ad3      	subs	r3, r2, r3
 8006c28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d901      	bls.n	8006c34 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e0be      	b.n	8006db2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c34:	4b1c      	ldr	r3, [pc, #112]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	00db      	lsls	r3, r3, #3
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d1eb      	bne.n	8006c1e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d010      	beq.n	8006c74 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	68da      	ldr	r2, [r3, #12]
 8006c56:	4b14      	ldr	r3, [pc, #80]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f003 030f 	and.w	r3, r3, #15
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d208      	bcs.n	8006c74 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c62:	4b11      	ldr	r3, [pc, #68]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f023 020f 	bic.w	r2, r3, #15
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	490e      	ldr	r1, [pc, #56]	@ (8006ca8 <HAL_RCC_ClockConfig+0x244>)
 8006c70:	4313      	orrs	r3, r2
 8006c72:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c74:	4b0b      	ldr	r3, [pc, #44]	@ (8006ca4 <HAL_RCC_ClockConfig+0x240>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 030f 	and.w	r3, r3, #15
 8006c7c:	683a      	ldr	r2, [r7, #0]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d214      	bcs.n	8006cac <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c82:	4b08      	ldr	r3, [pc, #32]	@ (8006ca4 <HAL_RCC_ClockConfig+0x240>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f023 020f 	bic.w	r2, r3, #15
 8006c8a:	4906      	ldr	r1, [pc, #24]	@ (8006ca4 <HAL_RCC_ClockConfig+0x240>)
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c92:	4b04      	ldr	r3, [pc, #16]	@ (8006ca4 <HAL_RCC_ClockConfig+0x240>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 030f 	and.w	r3, r3, #15
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d005      	beq.n	8006cac <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e086      	b.n	8006db2 <HAL_RCC_ClockConfig+0x34e>
 8006ca4:	52002000 	.word	0x52002000
 8006ca8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d010      	beq.n	8006cda <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	691a      	ldr	r2, [r3, #16]
 8006cbc:	4b3f      	ldr	r3, [pc, #252]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d208      	bcs.n	8006cda <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006cc8:	4b3c      	ldr	r3, [pc, #240]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006cca:	699b      	ldr	r3, [r3, #24]
 8006ccc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	4939      	ldr	r1, [pc, #228]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d010      	beq.n	8006d08 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	695a      	ldr	r2, [r3, #20]
 8006cea:	4b34      	ldr	r3, [pc, #208]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006cec:	69db      	ldr	r3, [r3, #28]
 8006cee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d208      	bcs.n	8006d08 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006cf6:	4b31      	ldr	r3, [pc, #196]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006cf8:	69db      	ldr	r3, [r3, #28]
 8006cfa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	492e      	ldr	r1, [pc, #184]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 0310 	and.w	r3, r3, #16
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d010      	beq.n	8006d36 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	699a      	ldr	r2, [r3, #24]
 8006d18:	4b28      	ldr	r3, [pc, #160]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006d1a:	69db      	ldr	r3, [r3, #28]
 8006d1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d208      	bcs.n	8006d36 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006d24:	4b25      	ldr	r3, [pc, #148]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006d26:	69db      	ldr	r3, [r3, #28]
 8006d28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	699b      	ldr	r3, [r3, #24]
 8006d30:	4922      	ldr	r1, [pc, #136]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006d32:	4313      	orrs	r3, r2
 8006d34:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d010      	beq.n	8006d64 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	69da      	ldr	r2, [r3, #28]
 8006d46:	4b1d      	ldr	r3, [pc, #116]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d208      	bcs.n	8006d64 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006d52:	4b1a      	ldr	r3, [pc, #104]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	69db      	ldr	r3, [r3, #28]
 8006d5e:	4917      	ldr	r1, [pc, #92]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006d60:	4313      	orrs	r3, r2
 8006d62:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006d64:	f000 f89e 	bl	8006ea4 <HAL_RCC_GetSysClockFreq>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	4b14      	ldr	r3, [pc, #80]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006d6c:	699b      	ldr	r3, [r3, #24]
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	f003 030f 	and.w	r3, r3, #15
 8006d74:	4912      	ldr	r1, [pc, #72]	@ (8006dc0 <HAL_RCC_ClockConfig+0x35c>)
 8006d76:	5ccb      	ldrb	r3, [r1, r3]
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006d80:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006d82:	4b0e      	ldr	r3, [pc, #56]	@ (8006dbc <HAL_RCC_ClockConfig+0x358>)
 8006d84:	699b      	ldr	r3, [r3, #24]
 8006d86:	f003 030f 	and.w	r3, r3, #15
 8006d8a:	4a0d      	ldr	r2, [pc, #52]	@ (8006dc0 <HAL_RCC_ClockConfig+0x35c>)
 8006d8c:	5cd3      	ldrb	r3, [r2, r3]
 8006d8e:	f003 031f 	and.w	r3, r3, #31
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	fa22 f303 	lsr.w	r3, r2, r3
 8006d98:	4a0a      	ldr	r2, [pc, #40]	@ (8006dc4 <HAL_RCC_ClockConfig+0x360>)
 8006d9a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8006dc8 <HAL_RCC_ClockConfig+0x364>)
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006da2:	4b0a      	ldr	r3, [pc, #40]	@ (8006dcc <HAL_RCC_ClockConfig+0x368>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7fb f8a4 	bl	8001ef4 <HAL_InitTick>
 8006dac:	4603      	mov	r3, r0
 8006dae:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3718      	adds	r7, #24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	58024400 	.word	0x58024400
 8006dc0:	0801cc58 	.word	0x0801cc58
 8006dc4:	24000004 	.word	0x24000004
 8006dc8:	24000000 	.word	0x24000000
 8006dcc:	24000028 	.word	0x24000028

08006dd0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b08c      	sub	sp, #48	@ 0x30
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	60f8      	str	r0, [r7, #12]
 8006dd8:	60b9      	str	r1, [r7, #8]
 8006dda:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d12a      	bne.n	8006e38 <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8006de2:	4b2d      	ldr	r3, [pc, #180]	@ (8006e98 <HAL_RCC_MCOConfig+0xc8>)
 8006de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006de8:	4a2b      	ldr	r2, [pc, #172]	@ (8006e98 <HAL_RCC_MCOConfig+0xc8>)
 8006dea:	f043 0301 	orr.w	r3, r3, #1
 8006dee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006df2:	4b29      	ldr	r3, [pc, #164]	@ (8006e98 <HAL_RCC_MCOConfig+0xc8>)
 8006df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006df8:	f003 0301 	and.w	r3, r3, #1
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8006e00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e06:	2302      	movs	r3, #2
 8006e08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e0e:	2300      	movs	r3, #0
 8006e10:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006e12:	2300      	movs	r3, #0
 8006e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8006e16:	f107 031c 	add.w	r3, r7, #28
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	481f      	ldr	r0, [pc, #124]	@ (8006e9c <HAL_RCC_MCOConfig+0xcc>)
 8006e1e:	f7fe ff03 	bl	8005c28 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006e22:	4b1d      	ldr	r3, [pc, #116]	@ (8006e98 <HAL_RCC_MCOConfig+0xc8>)
 8006e24:	691b      	ldr	r3, [r3, #16]
 8006e26:	f023 72fe 	bic.w	r2, r3, #33292288	@ 0x1fc0000
 8006e2a:	68b9      	ldr	r1, [r7, #8]
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	430b      	orrs	r3, r1
 8006e30:	4919      	ldr	r1, [pc, #100]	@ (8006e98 <HAL_RCC_MCOConfig+0xc8>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 8006e36:	e02a      	b.n	8006e8e <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 8006e38:	4b17      	ldr	r3, [pc, #92]	@ (8006e98 <HAL_RCC_MCOConfig+0xc8>)
 8006e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e3e:	4a16      	ldr	r2, [pc, #88]	@ (8006e98 <HAL_RCC_MCOConfig+0xc8>)
 8006e40:	f043 0304 	orr.w	r3, r3, #4
 8006e44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006e48:	4b13      	ldr	r3, [pc, #76]	@ (8006e98 <HAL_RCC_MCOConfig+0xc8>)
 8006e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	617b      	str	r3, [r7, #20]
 8006e54:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006e56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e60:	2303      	movs	r3, #3
 8006e62:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e64:	2300      	movs	r3, #0
 8006e66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006e6c:	f107 031c 	add.w	r3, r7, #28
 8006e70:	4619      	mov	r1, r3
 8006e72:	480b      	ldr	r0, [pc, #44]	@ (8006ea0 <HAL_RCC_MCOConfig+0xd0>)
 8006e74:	f7fe fed8 	bl	8005c28 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8006e78:	4b07      	ldr	r3, [pc, #28]	@ (8006e98 <HAL_RCC_MCOConfig+0xc8>)
 8006e7a:	691b      	ldr	r3, [r3, #16]
 8006e7c:	f023 427e 	bic.w	r2, r3, #4261412864	@ 0xfe000000
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	01d9      	lsls	r1, r3, #7
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	430b      	orrs	r3, r1
 8006e88:	4903      	ldr	r1, [pc, #12]	@ (8006e98 <HAL_RCC_MCOConfig+0xc8>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	610b      	str	r3, [r1, #16]
}
 8006e8e:	bf00      	nop
 8006e90:	3730      	adds	r7, #48	@ 0x30
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
 8006e96:	bf00      	nop
 8006e98:	58024400 	.word	0x58024400
 8006e9c:	58020000 	.word	0x58020000
 8006ea0:	58020800 	.word	0x58020800

08006ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b089      	sub	sp, #36	@ 0x24
 8006ea8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eaa:	4bb3      	ldr	r3, [pc, #716]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006eb2:	2b18      	cmp	r3, #24
 8006eb4:	f200 8155 	bhi.w	8007162 <HAL_RCC_GetSysClockFreq+0x2be>
 8006eb8:	a201      	add	r2, pc, #4	@ (adr r2, 8006ec0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ebe:	bf00      	nop
 8006ec0:	08006f25 	.word	0x08006f25
 8006ec4:	08007163 	.word	0x08007163
 8006ec8:	08007163 	.word	0x08007163
 8006ecc:	08007163 	.word	0x08007163
 8006ed0:	08007163 	.word	0x08007163
 8006ed4:	08007163 	.word	0x08007163
 8006ed8:	08007163 	.word	0x08007163
 8006edc:	08007163 	.word	0x08007163
 8006ee0:	08006f4b 	.word	0x08006f4b
 8006ee4:	08007163 	.word	0x08007163
 8006ee8:	08007163 	.word	0x08007163
 8006eec:	08007163 	.word	0x08007163
 8006ef0:	08007163 	.word	0x08007163
 8006ef4:	08007163 	.word	0x08007163
 8006ef8:	08007163 	.word	0x08007163
 8006efc:	08007163 	.word	0x08007163
 8006f00:	08006f51 	.word	0x08006f51
 8006f04:	08007163 	.word	0x08007163
 8006f08:	08007163 	.word	0x08007163
 8006f0c:	08007163 	.word	0x08007163
 8006f10:	08007163 	.word	0x08007163
 8006f14:	08007163 	.word	0x08007163
 8006f18:	08007163 	.word	0x08007163
 8006f1c:	08007163 	.word	0x08007163
 8006f20:	08006f57 	.word	0x08006f57
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006f24:	4b94      	ldr	r3, [pc, #592]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f003 0320 	and.w	r3, r3, #32
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d009      	beq.n	8006f44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006f30:	4b91      	ldr	r3, [pc, #580]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	08db      	lsrs	r3, r3, #3
 8006f36:	f003 0303 	and.w	r3, r3, #3
 8006f3a:	4a90      	ldr	r2, [pc, #576]	@ (800717c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8006f40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006f42:	e111      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006f44:	4b8d      	ldr	r3, [pc, #564]	@ (800717c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006f46:	61bb      	str	r3, [r7, #24]
      break;
 8006f48:	e10e      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006f4a:	4b8d      	ldr	r3, [pc, #564]	@ (8007180 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006f4c:	61bb      	str	r3, [r7, #24]
      break;
 8006f4e:	e10b      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006f50:	4b8c      	ldr	r3, [pc, #560]	@ (8007184 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006f52:	61bb      	str	r3, [r7, #24]
      break;
 8006f54:	e108      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006f56:	4b88      	ldr	r3, [pc, #544]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f5a:	f003 0303 	and.w	r3, r3, #3
 8006f5e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006f60:	4b85      	ldr	r3, [pc, #532]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f64:	091b      	lsrs	r3, r3, #4
 8006f66:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f6a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006f6c:	4b82      	ldr	r3, [pc, #520]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006f76:	4b80      	ldr	r3, [pc, #512]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006f7a:	08db      	lsrs	r3, r3, #3
 8006f7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	fb02 f303 	mul.w	r3, r2, r3
 8006f86:	ee07 3a90 	vmov	s15, r3
 8006f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f8e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 80e1 	beq.w	800715c <HAL_RCC_GetSysClockFreq+0x2b8>
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2b02      	cmp	r3, #2
 8006f9e:	f000 8083 	beq.w	80070a8 <HAL_RCC_GetSysClockFreq+0x204>
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	2b02      	cmp	r3, #2
 8006fa6:	f200 80a1 	bhi.w	80070ec <HAL_RCC_GetSysClockFreq+0x248>
 8006faa:	697b      	ldr	r3, [r7, #20]
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d003      	beq.n	8006fb8 <HAL_RCC_GetSysClockFreq+0x114>
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d056      	beq.n	8007064 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006fb6:	e099      	b.n	80070ec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006fb8:	4b6f      	ldr	r3, [pc, #444]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0320 	and.w	r3, r3, #32
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d02d      	beq.n	8007020 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006fc4:	4b6c      	ldr	r3, [pc, #432]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	08db      	lsrs	r3, r3, #3
 8006fca:	f003 0303 	and.w	r3, r3, #3
 8006fce:	4a6b      	ldr	r2, [pc, #428]	@ (800717c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	ee07 3a90 	vmov	s15, r3
 8006fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	ee07 3a90 	vmov	s15, r3
 8006fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006fee:	4b62      	ldr	r3, [pc, #392]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ffe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007002:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8007188 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800700a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800700e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007016:	ee67 7a27 	vmul.f32	s15, s14, s15
 800701a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800701e:	e087      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	ee07 3a90 	vmov	s15, r3
 8007026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800702a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800718c <HAL_RCC_GetSysClockFreq+0x2e8>
 800702e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007032:	4b51      	ldr	r3, [pc, #324]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007042:	ed97 6a02 	vldr	s12, [r7, #8]
 8007046:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8007188 <HAL_RCC_GetSysClockFreq+0x2e4>
 800704a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800704e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800705a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800705e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007062:	e065      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	ee07 3a90 	vmov	s15, r3
 800706a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8007190 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007076:	4b40      	ldr	r3, [pc, #256]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800707a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800707e:	ee07 3a90 	vmov	s15, r3
 8007082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007086:	ed97 6a02 	vldr	s12, [r7, #8]
 800708a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8007188 <HAL_RCC_GetSysClockFreq+0x2e4>
 800708e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800709a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800709e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070a6:	e043      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	ee07 3a90 	vmov	s15, r3
 80070ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070b2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8007194 <HAL_RCC_GetSysClockFreq+0x2f0>
 80070b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80070bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070c2:	ee07 3a90 	vmov	s15, r3
 80070c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80070ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80070ce:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8007188 <HAL_RCC_GetSysClockFreq+0x2e4>
 80070d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80070d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80070da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80070de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80070e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80070ea:	e021      	b.n	8007130 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	ee07 3a90 	vmov	s15, r3
 80070f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80070f6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8007190 <HAL_RCC_GetSysClockFreq+0x2ec>
 80070fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007106:	ee07 3a90 	vmov	s15, r3
 800710a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800710e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007112:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8007188 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800711a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800711e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800712a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800712e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8007130:	4b11      	ldr	r3, [pc, #68]	@ (8007178 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007134:	0a5b      	lsrs	r3, r3, #9
 8007136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800713a:	3301      	adds	r3, #1
 800713c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	ee07 3a90 	vmov	s15, r3
 8007144:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007148:	edd7 6a07 	vldr	s13, [r7, #28]
 800714c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007154:	ee17 3a90 	vmov	r3, s15
 8007158:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800715a:	e005      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800715c:	2300      	movs	r3, #0
 800715e:	61bb      	str	r3, [r7, #24]
      break;
 8007160:	e002      	b.n	8007168 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8007162:	4b07      	ldr	r3, [pc, #28]	@ (8007180 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007164:	61bb      	str	r3, [r7, #24]
      break;
 8007166:	bf00      	nop
  }

  return sysclockfreq;
 8007168:	69bb      	ldr	r3, [r7, #24]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3724      	adds	r7, #36	@ 0x24
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	58024400 	.word	0x58024400
 800717c:	03d09000 	.word	0x03d09000
 8007180:	003d0900 	.word	0x003d0900
 8007184:	007a1200 	.word	0x007a1200
 8007188:	46000000 	.word	0x46000000
 800718c:	4c742400 	.word	0x4c742400
 8007190:	4a742400 	.word	0x4a742400
 8007194:	4af42400 	.word	0x4af42400

08007198 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800719e:	f7ff fe81 	bl	8006ea4 <HAL_RCC_GetSysClockFreq>
 80071a2:	4602      	mov	r2, r0
 80071a4:	4b10      	ldr	r3, [pc, #64]	@ (80071e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80071a6:	699b      	ldr	r3, [r3, #24]
 80071a8:	0a1b      	lsrs	r3, r3, #8
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	490f      	ldr	r1, [pc, #60]	@ (80071ec <HAL_RCC_GetHCLKFreq+0x54>)
 80071b0:	5ccb      	ldrb	r3, [r1, r3]
 80071b2:	f003 031f 	and.w	r3, r3, #31
 80071b6:	fa22 f303 	lsr.w	r3, r2, r3
 80071ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80071bc:	4b0a      	ldr	r3, [pc, #40]	@ (80071e8 <HAL_RCC_GetHCLKFreq+0x50>)
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	f003 030f 	and.w	r3, r3, #15
 80071c4:	4a09      	ldr	r2, [pc, #36]	@ (80071ec <HAL_RCC_GetHCLKFreq+0x54>)
 80071c6:	5cd3      	ldrb	r3, [r2, r3]
 80071c8:	f003 031f 	and.w	r3, r3, #31
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	fa22 f303 	lsr.w	r3, r2, r3
 80071d2:	4a07      	ldr	r2, [pc, #28]	@ (80071f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80071d4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80071d6:	4a07      	ldr	r2, [pc, #28]	@ (80071f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80071dc:	4b04      	ldr	r3, [pc, #16]	@ (80071f0 <HAL_RCC_GetHCLKFreq+0x58>)
 80071de:	681b      	ldr	r3, [r3, #0]
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	58024400 	.word	0x58024400
 80071ec:	0801cc58 	.word	0x0801cc58
 80071f0:	24000004 	.word	0x24000004
 80071f4:	24000000 	.word	0x24000000

080071f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80071fc:	f7ff ffcc 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 8007200:	4602      	mov	r2, r0
 8007202:	4b06      	ldr	r3, [pc, #24]	@ (800721c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007204:	69db      	ldr	r3, [r3, #28]
 8007206:	091b      	lsrs	r3, r3, #4
 8007208:	f003 0307 	and.w	r3, r3, #7
 800720c:	4904      	ldr	r1, [pc, #16]	@ (8007220 <HAL_RCC_GetPCLK1Freq+0x28>)
 800720e:	5ccb      	ldrb	r3, [r1, r3]
 8007210:	f003 031f 	and.w	r3, r3, #31
 8007214:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007218:	4618      	mov	r0, r3
 800721a:	bd80      	pop	{r7, pc}
 800721c:	58024400 	.word	0x58024400
 8007220:	0801cc58 	.word	0x0801cc58

08007224 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007228:	f7ff ffb6 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 800722c:	4602      	mov	r2, r0
 800722e:	4b06      	ldr	r3, [pc, #24]	@ (8007248 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	0a1b      	lsrs	r3, r3, #8
 8007234:	f003 0307 	and.w	r3, r3, #7
 8007238:	4904      	ldr	r1, [pc, #16]	@ (800724c <HAL_RCC_GetPCLK2Freq+0x28>)
 800723a:	5ccb      	ldrb	r3, [r1, r3]
 800723c:	f003 031f 	and.w	r3, r3, #31
 8007240:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007244:	4618      	mov	r0, r3
 8007246:	bd80      	pop	{r7, pc}
 8007248:	58024400 	.word	0x58024400
 800724c:	0801cc58 	.word	0x0801cc58

08007250 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	223f      	movs	r2, #63	@ 0x3f
 800725e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007260:	4b1a      	ldr	r3, [pc, #104]	@ (80072cc <HAL_RCC_GetClockConfig+0x7c>)
 8007262:	691b      	ldr	r3, [r3, #16]
 8007264:	f003 0207 	and.w	r2, r3, #7
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800726c:	4b17      	ldr	r3, [pc, #92]	@ (80072cc <HAL_RCC_GetClockConfig+0x7c>)
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8007278:	4b14      	ldr	r3, [pc, #80]	@ (80072cc <HAL_RCC_GetClockConfig+0x7c>)
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	f003 020f 	and.w	r2, r3, #15
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8007284:	4b11      	ldr	r3, [pc, #68]	@ (80072cc <HAL_RCC_GetClockConfig+0x7c>)
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8007290:	4b0e      	ldr	r3, [pc, #56]	@ (80072cc <HAL_RCC_GetClockConfig+0x7c>)
 8007292:	69db      	ldr	r3, [r3, #28]
 8007294:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800729c:	4b0b      	ldr	r3, [pc, #44]	@ (80072cc <HAL_RCC_GetClockConfig+0x7c>)
 800729e:	69db      	ldr	r3, [r3, #28]
 80072a0:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80072a8:	4b08      	ldr	r3, [pc, #32]	@ (80072cc <HAL_RCC_GetClockConfig+0x7c>)
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80072b4:	4b06      	ldr	r3, [pc, #24]	@ (80072d0 <HAL_RCC_GetClockConfig+0x80>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f003 020f 	and.w	r2, r3, #15
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	601a      	str	r2, [r3, #0]
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	58024400 	.word	0x58024400
 80072d0:	52002000 	.word	0x52002000

080072d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d8:	b0ca      	sub	sp, #296	@ 0x128
 80072da:	af00      	add	r7, sp, #0
 80072dc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072e0:	2300      	movs	r3, #0
 80072e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072e6:	2300      	movs	r3, #0
 80072e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80072ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80072f8:	2500      	movs	r5, #0
 80072fa:	ea54 0305 	orrs.w	r3, r4, r5
 80072fe:	d049      	beq.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007300:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007304:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007306:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800730a:	d02f      	beq.n	800736c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800730c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007310:	d828      	bhi.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007312:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007316:	d01a      	beq.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007318:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800731c:	d822      	bhi.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800731e:	2b00      	cmp	r3, #0
 8007320:	d003      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007322:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007326:	d007      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007328:	e01c      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800732a:	4bb8      	ldr	r3, [pc, #736]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800732c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800732e:	4ab7      	ldr	r2, [pc, #732]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007334:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007336:	e01a      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733c:	3308      	adds	r3, #8
 800733e:	2102      	movs	r1, #2
 8007340:	4618      	mov	r0, r3
 8007342:	f001 fc8f 	bl	8008c64 <RCCEx_PLL2_Config>
 8007346:	4603      	mov	r3, r0
 8007348:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800734c:	e00f      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800734e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007352:	3328      	adds	r3, #40	@ 0x28
 8007354:	2102      	movs	r1, #2
 8007356:	4618      	mov	r0, r3
 8007358:	f001 fd36 	bl	8008dc8 <RCCEx_PLL3_Config>
 800735c:	4603      	mov	r3, r0
 800735e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8007362:	e004      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800736a:	e000      	b.n	800736e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800736c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800736e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10a      	bne.n	800738c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007376:	4ba5      	ldr	r3, [pc, #660]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007378:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800737a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800737e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007382:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007384:	4aa1      	ldr	r2, [pc, #644]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007386:	430b      	orrs	r3, r1
 8007388:	6513      	str	r3, [r2, #80]	@ 0x50
 800738a:	e003      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800738c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800739c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80073a0:	f04f 0900 	mov.w	r9, #0
 80073a4:	ea58 0309 	orrs.w	r3, r8, r9
 80073a8:	d047      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80073aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073b0:	2b04      	cmp	r3, #4
 80073b2:	d82a      	bhi.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x136>
 80073b4:	a201      	add	r2, pc, #4	@ (adr r2, 80073bc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80073b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073ba:	bf00      	nop
 80073bc:	080073d1 	.word	0x080073d1
 80073c0:	080073df 	.word	0x080073df
 80073c4:	080073f5 	.word	0x080073f5
 80073c8:	08007413 	.word	0x08007413
 80073cc:	08007413 	.word	0x08007413
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073d0:	4b8e      	ldr	r3, [pc, #568]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d4:	4a8d      	ldr	r2, [pc, #564]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80073d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073dc:	e01a      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e2:	3308      	adds	r3, #8
 80073e4:	2100      	movs	r1, #0
 80073e6:	4618      	mov	r0, r3
 80073e8:	f001 fc3c 	bl	8008c64 <RCCEx_PLL2_Config>
 80073ec:	4603      	mov	r3, r0
 80073ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80073f2:	e00f      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80073f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f8:	3328      	adds	r3, #40	@ 0x28
 80073fa:	2100      	movs	r1, #0
 80073fc:	4618      	mov	r0, r3
 80073fe:	f001 fce3 	bl	8008dc8 <RCCEx_PLL3_Config>
 8007402:	4603      	mov	r3, r0
 8007404:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007408:	e004      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007410:	e000      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8007412:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007418:	2b00      	cmp	r3, #0
 800741a:	d10a      	bne.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800741c:	4b7b      	ldr	r3, [pc, #492]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800741e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007420:	f023 0107 	bic.w	r1, r3, #7
 8007424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800742a:	4a78      	ldr	r2, [pc, #480]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800742c:	430b      	orrs	r3, r1
 800742e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007430:	e003      	b.n	800743a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007432:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007436:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800743a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007442:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8007446:	f04f 0b00 	mov.w	fp, #0
 800744a:	ea5a 030b 	orrs.w	r3, sl, fp
 800744e:	d04c      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8007450:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800745a:	d030      	beq.n	80074be <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800745c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007460:	d829      	bhi.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007462:	2bc0      	cmp	r3, #192	@ 0xc0
 8007464:	d02d      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8007466:	2bc0      	cmp	r3, #192	@ 0xc0
 8007468:	d825      	bhi.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800746a:	2b80      	cmp	r3, #128	@ 0x80
 800746c:	d018      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800746e:	2b80      	cmp	r3, #128	@ 0x80
 8007470:	d821      	bhi.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007472:	2b00      	cmp	r3, #0
 8007474:	d002      	beq.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007476:	2b40      	cmp	r3, #64	@ 0x40
 8007478:	d007      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800747a:	e01c      	b.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800747c:	4b63      	ldr	r3, [pc, #396]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800747e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007480:	4a62      	ldr	r2, [pc, #392]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007482:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007486:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007488:	e01c      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800748a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748e:	3308      	adds	r3, #8
 8007490:	2100      	movs	r1, #0
 8007492:	4618      	mov	r0, r3
 8007494:	f001 fbe6 	bl	8008c64 <RCCEx_PLL2_Config>
 8007498:	4603      	mov	r3, r0
 800749a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800749e:	e011      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80074a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074a4:	3328      	adds	r3, #40	@ 0x28
 80074a6:	2100      	movs	r1, #0
 80074a8:	4618      	mov	r0, r3
 80074aa:	f001 fc8d 	bl	8008dc8 <RCCEx_PLL3_Config>
 80074ae:	4603      	mov	r3, r0
 80074b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80074b4:	e006      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074b6:	2301      	movs	r3, #1
 80074b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074bc:	e002      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80074be:	bf00      	nop
 80074c0:	e000      	b.n	80074c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80074c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d10a      	bne.n	80074e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80074cc:	4b4f      	ldr	r3, [pc, #316]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074d0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80074d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80074da:	4a4c      	ldr	r2, [pc, #304]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80074dc:	430b      	orrs	r3, r1
 80074de:	6513      	str	r3, [r2, #80]	@ 0x50
 80074e0:	e003      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80074ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80074f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80074fa:	2300      	movs	r3, #0
 80074fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007500:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007504:	460b      	mov	r3, r1
 8007506:	4313      	orrs	r3, r2
 8007508:	d053      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800750a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800750e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007512:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007516:	d035      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007518:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800751c:	d82e      	bhi.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800751e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007522:	d031      	beq.n	8007588 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8007524:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8007528:	d828      	bhi.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800752a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800752e:	d01a      	beq.n	8007566 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007530:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007534:	d822      	bhi.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d003      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800753a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800753e:	d007      	beq.n	8007550 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007540:	e01c      	b.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007542:	4b32      	ldr	r3, [pc, #200]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007546:	4a31      	ldr	r2, [pc, #196]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007548:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800754c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800754e:	e01c      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007554:	3308      	adds	r3, #8
 8007556:	2100      	movs	r1, #0
 8007558:	4618      	mov	r0, r3
 800755a:	f001 fb83 	bl	8008c64 <RCCEx_PLL2_Config>
 800755e:	4603      	mov	r3, r0
 8007560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007564:	e011      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800756a:	3328      	adds	r3, #40	@ 0x28
 800756c:	2100      	movs	r1, #0
 800756e:	4618      	mov	r0, r3
 8007570:	f001 fc2a 	bl	8008dc8 <RCCEx_PLL3_Config>
 8007574:	4603      	mov	r3, r0
 8007576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800757a:	e006      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007582:	e002      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007584:	bf00      	nop
 8007586:	e000      	b.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007588:	bf00      	nop
    }

    if (ret == HAL_OK)
 800758a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800758e:	2b00      	cmp	r3, #0
 8007590:	d10b      	bne.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007592:	4b1e      	ldr	r3, [pc, #120]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007596:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800759a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800759e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80075a2:	4a1a      	ldr	r2, [pc, #104]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80075a4:	430b      	orrs	r3, r1
 80075a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80075a8:	e003      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80075b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80075be:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80075c2:	2300      	movs	r3, #0
 80075c4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80075c8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80075cc:	460b      	mov	r3, r1
 80075ce:	4313      	orrs	r3, r2
 80075d0:	d056      	beq.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80075d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80075da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075de:	d038      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80075e0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80075e4:	d831      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80075e6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075ea:	d034      	beq.n	8007656 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80075ec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80075f0:	d82b      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80075f2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075f6:	d01d      	beq.n	8007634 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80075f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80075fc:	d825      	bhi.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x376>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d006      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007602:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007606:	d00a      	beq.n	800761e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007608:	e01f      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800760a:	bf00      	nop
 800760c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007610:	4ba2      	ldr	r3, [pc, #648]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007614:	4aa1      	ldr	r2, [pc, #644]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800761a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800761c:	e01c      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800761e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007622:	3308      	adds	r3, #8
 8007624:	2100      	movs	r1, #0
 8007626:	4618      	mov	r0, r3
 8007628:	f001 fb1c 	bl	8008c64 <RCCEx_PLL2_Config>
 800762c:	4603      	mov	r3, r0
 800762e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007632:	e011      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007638:	3328      	adds	r3, #40	@ 0x28
 800763a:	2100      	movs	r1, #0
 800763c:	4618      	mov	r0, r3
 800763e:	f001 fbc3 	bl	8008dc8 <RCCEx_PLL3_Config>
 8007642:	4603      	mov	r3, r0
 8007644:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007648:	e006      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007650:	e002      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007652:	bf00      	nop
 8007654:	e000      	b.n	8007658 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007656:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10b      	bne.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007660:	4b8e      	ldr	r3, [pc, #568]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007662:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007664:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800766c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007670:	4a8a      	ldr	r2, [pc, #552]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007672:	430b      	orrs	r3, r1
 8007674:	6593      	str	r3, [r2, #88]	@ 0x58
 8007676:	e003      	b.n	8007680 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800767c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007680:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007688:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800768c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007690:	2300      	movs	r3, #0
 8007692:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007696:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800769a:	460b      	mov	r3, r1
 800769c:	4313      	orrs	r3, r2
 800769e:	d03a      	beq.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80076a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076a6:	2b30      	cmp	r3, #48	@ 0x30
 80076a8:	d01f      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0x416>
 80076aa:	2b30      	cmp	r3, #48	@ 0x30
 80076ac:	d819      	bhi.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80076ae:	2b20      	cmp	r3, #32
 80076b0:	d00c      	beq.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80076b2:	2b20      	cmp	r3, #32
 80076b4:	d815      	bhi.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d019      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80076ba:	2b10      	cmp	r3, #16
 80076bc:	d111      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076be:	4b77      	ldr	r3, [pc, #476]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076c2:	4a76      	ldr	r2, [pc, #472]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80076ca:	e011      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80076cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d0:	3308      	adds	r3, #8
 80076d2:	2102      	movs	r1, #2
 80076d4:	4618      	mov	r0, r3
 80076d6:	f001 fac5 	bl	8008c64 <RCCEx_PLL2_Config>
 80076da:	4603      	mov	r3, r0
 80076dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80076e0:	e006      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076e8:	e002      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80076ea:	bf00      	nop
 80076ec:	e000      	b.n	80076f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80076ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10a      	bne.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80076f8:	4b68      	ldr	r3, [pc, #416]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80076fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80076fc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007706:	4a65      	ldr	r2, [pc, #404]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007708:	430b      	orrs	r3, r1
 800770a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800770c:	e003      	b.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800770e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007722:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007726:	2300      	movs	r3, #0
 8007728:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800772c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007730:	460b      	mov	r3, r1
 8007732:	4313      	orrs	r3, r2
 8007734:	d051      	beq.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800773c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007740:	d035      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007742:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007746:	d82e      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007748:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800774c:	d031      	beq.n	80077b2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800774e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007752:	d828      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007754:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007758:	d01a      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800775a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800775e:	d822      	bhi.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007760:	2b00      	cmp	r3, #0
 8007762:	d003      	beq.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007764:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007768:	d007      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800776a:	e01c      	b.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800776c:	4b4b      	ldr	r3, [pc, #300]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800776e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007770:	4a4a      	ldr	r2, [pc, #296]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007778:	e01c      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777e:	3308      	adds	r3, #8
 8007780:	2100      	movs	r1, #0
 8007782:	4618      	mov	r0, r3
 8007784:	f001 fa6e 	bl	8008c64 <RCCEx_PLL2_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800778e:	e011      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007794:	3328      	adds	r3, #40	@ 0x28
 8007796:	2100      	movs	r1, #0
 8007798:	4618      	mov	r0, r3
 800779a:	f001 fb15 	bl	8008dc8 <RCCEx_PLL3_Config>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80077a4:	e006      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077ac:	e002      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80077ae:	bf00      	nop
 80077b0:	e000      	b.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80077b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d10a      	bne.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80077bc:	4b37      	ldr	r3, [pc, #220]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077c0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80077c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077ca:	4a34      	ldr	r2, [pc, #208]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80077cc:	430b      	orrs	r3, r1
 80077ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80077d0:	e003      	b.n	80077da <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80077da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80077e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80077ea:	2300      	movs	r3, #0
 80077ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80077f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80077f4:	460b      	mov	r3, r1
 80077f6:	4313      	orrs	r3, r2
 80077f8:	d056      	beq.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80077fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007800:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007804:	d033      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007806:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800780a:	d82c      	bhi.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800780c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007810:	d02f      	beq.n	8007872 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007812:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007816:	d826      	bhi.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007818:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800781c:	d02b      	beq.n	8007876 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800781e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007822:	d820      	bhi.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007824:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007828:	d012      	beq.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800782a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800782e:	d81a      	bhi.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007830:	2b00      	cmp	r3, #0
 8007832:	d022      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007834:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007838:	d115      	bne.n	8007866 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800783a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783e:	3308      	adds	r3, #8
 8007840:	2101      	movs	r1, #1
 8007842:	4618      	mov	r0, r3
 8007844:	f001 fa0e 	bl	8008c64 <RCCEx_PLL2_Config>
 8007848:	4603      	mov	r3, r0
 800784a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800784e:	e015      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007854:	3328      	adds	r3, #40	@ 0x28
 8007856:	2101      	movs	r1, #1
 8007858:	4618      	mov	r0, r3
 800785a:	f001 fab5 	bl	8008dc8 <RCCEx_PLL3_Config>
 800785e:	4603      	mov	r3, r0
 8007860:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007864:	e00a      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800786c:	e006      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800786e:	bf00      	nop
 8007870:	e004      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007872:	bf00      	nop
 8007874:	e002      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007876:	bf00      	nop
 8007878:	e000      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800787a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800787c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10d      	bne.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007884:	4b05      	ldr	r3, [pc, #20]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007888:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800788c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007890:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007892:	4a02      	ldr	r2, [pc, #8]	@ (800789c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007894:	430b      	orrs	r3, r1
 8007896:	6513      	str	r3, [r2, #80]	@ 0x50
 8007898:	e006      	b.n	80078a8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800789a:	bf00      	nop
 800789c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80078a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80078b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80078b8:	2300      	movs	r3, #0
 80078ba:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80078be:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80078c2:	460b      	mov	r3, r1
 80078c4:	4313      	orrs	r3, r2
 80078c6:	d055      	beq.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80078c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80078d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078d4:	d033      	beq.n	800793e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80078d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80078da:	d82c      	bhi.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80078dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e0:	d02f      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80078e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078e6:	d826      	bhi.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80078e8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078ec:	d02b      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80078ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078f2:	d820      	bhi.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80078f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078f8:	d012      	beq.n	8007920 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80078fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078fe:	d81a      	bhi.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007900:	2b00      	cmp	r3, #0
 8007902:	d022      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007904:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007908:	d115      	bne.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800790a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790e:	3308      	adds	r3, #8
 8007910:	2101      	movs	r1, #1
 8007912:	4618      	mov	r0, r3
 8007914:	f001 f9a6 	bl	8008c64 <RCCEx_PLL2_Config>
 8007918:	4603      	mov	r3, r0
 800791a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800791e:	e015      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007920:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007924:	3328      	adds	r3, #40	@ 0x28
 8007926:	2101      	movs	r1, #1
 8007928:	4618      	mov	r0, r3
 800792a:	f001 fa4d 	bl	8008dc8 <RCCEx_PLL3_Config>
 800792e:	4603      	mov	r3, r0
 8007930:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007934:	e00a      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800793c:	e006      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800793e:	bf00      	nop
 8007940:	e004      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007942:	bf00      	nop
 8007944:	e002      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007946:	bf00      	nop
 8007948:	e000      	b.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800794a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800794c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007950:	2b00      	cmp	r3, #0
 8007952:	d10b      	bne.n	800796c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007954:	4ba3      	ldr	r3, [pc, #652]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007956:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007958:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800795c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007960:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007964:	4a9f      	ldr	r2, [pc, #636]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007966:	430b      	orrs	r3, r1
 8007968:	6593      	str	r3, [r2, #88]	@ 0x58
 800796a:	e003      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800796c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007970:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800797c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007980:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007984:	2300      	movs	r3, #0
 8007986:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800798a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800798e:	460b      	mov	r3, r1
 8007990:	4313      	orrs	r3, r2
 8007992:	d037      	beq.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800799a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800799e:	d00e      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80079a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079a4:	d816      	bhi.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d018      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x708>
 80079aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079ae:	d111      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079b0:	4b8c      	ldr	r3, [pc, #560]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b4:	4a8b      	ldr	r2, [pc, #556]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80079ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079bc:	e00f      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c2:	3308      	adds	r3, #8
 80079c4:	2101      	movs	r1, #1
 80079c6:	4618      	mov	r0, r3
 80079c8:	f001 f94c 	bl	8008c64 <RCCEx_PLL2_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80079d2:	e004      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079da:	e000      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80079dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d10a      	bne.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079e6:	4b7f      	ldr	r3, [pc, #508]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ea:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80079ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079f4:	4a7b      	ldr	r2, [pc, #492]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80079f6:	430b      	orrs	r3, r1
 80079f8:	6513      	str	r3, [r2, #80]	@ 0x50
 80079fa:	e003      	b.n	8007a04 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007a04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a14:	2300      	movs	r3, #0
 8007a16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007a1a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8007a1e:	460b      	mov	r3, r1
 8007a20:	4313      	orrs	r3, r2
 8007a22:	d039      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a2a:	2b03      	cmp	r3, #3
 8007a2c:	d81c      	bhi.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a34 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a34:	08007a71 	.word	0x08007a71
 8007a38:	08007a45 	.word	0x08007a45
 8007a3c:	08007a53 	.word	0x08007a53
 8007a40:	08007a71 	.word	0x08007a71
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a44:	4b67      	ldr	r3, [pc, #412]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a48:	4a66      	ldr	r2, [pc, #408]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a50:	e00f      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a56:	3308      	adds	r3, #8
 8007a58:	2102      	movs	r1, #2
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f001 f902 	bl	8008c64 <RCCEx_PLL2_Config>
 8007a60:	4603      	mov	r3, r0
 8007a62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007a66:	e004      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a6e:	e000      	b.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007a70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007a72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d10a      	bne.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007a7a:	4b5a      	ldr	r3, [pc, #360]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a7e:	f023 0103 	bic.w	r1, r3, #3
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a88:	4a56      	ldr	r2, [pc, #344]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007a8a:	430b      	orrs	r3, r1
 8007a8c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a8e:	e003      	b.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a94:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007aa4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007aae:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4313      	orrs	r3, r2
 8007ab6:	f000 809f 	beq.w	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007aba:	4b4b      	ldr	r3, [pc, #300]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a4a      	ldr	r2, [pc, #296]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007ac0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ac4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007ac6:	f7fa fd27 	bl	8002518 <HAL_GetTick>
 8007aca:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ace:	e00b      	b.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ad0:	f7fa fd22 	bl	8002518 <HAL_GetTick>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007ada:	1ad3      	subs	r3, r2, r3
 8007adc:	2b64      	cmp	r3, #100	@ 0x64
 8007ade:	d903      	bls.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007ae0:	2303      	movs	r3, #3
 8007ae2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ae6:	e005      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ae8:	4b3f      	ldr	r3, [pc, #252]	@ (8007be8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d0ed      	beq.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d179      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007afc:	4b39      	ldr	r3, [pc, #228]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007afe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b08:	4053      	eors	r3, r2
 8007b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d015      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b12:	4b34      	ldr	r3, [pc, #208]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b1a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007b1e:	4b31      	ldr	r3, [pc, #196]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b22:	4a30      	ldr	r2, [pc, #192]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b28:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007b2a:	4b2e      	ldr	r3, [pc, #184]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b34:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007b36:	4a2b      	ldr	r2, [pc, #172]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8007b3c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b4a:	d118      	bne.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b4c:	f7fa fce4 	bl	8002518 <HAL_GetTick>
 8007b50:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b54:	e00d      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b56:	f7fa fcdf 	bl	8002518 <HAL_GetTick>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007b60:	1ad2      	subs	r2, r2, r3
 8007b62:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d903      	bls.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007b6a:	2303      	movs	r3, #3
 8007b6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007b70:	e005      	b.n	8007b7e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007b72:	4b1c      	ldr	r3, [pc, #112]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d0eb      	beq.n	8007b56 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007b7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d129      	bne.n	8007bda <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007b96:	d10e      	bne.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007b98:	4b12      	ldr	r3, [pc, #72]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007b9a:	691b      	ldr	r3, [r3, #16]
 8007b9c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ba4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007ba8:	091a      	lsrs	r2, r3, #4
 8007baa:	4b10      	ldr	r3, [pc, #64]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8007bac:	4013      	ands	r3, r2
 8007bae:	4a0d      	ldr	r2, [pc, #52]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bb0:	430b      	orrs	r3, r1
 8007bb2:	6113      	str	r3, [r2, #16]
 8007bb4:	e005      	b.n	8007bc2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007bb6:	4b0b      	ldr	r3, [pc, #44]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	4a0a      	ldr	r2, [pc, #40]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bbc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007bc0:	6113      	str	r3, [r2, #16]
 8007bc2:	4b08      	ldr	r3, [pc, #32]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bc4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bd2:	4a04      	ldr	r2, [pc, #16]	@ (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8007bd8:	e00e      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007bda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007be2:	e009      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007be4:	58024400 	.word	0x58024400
 8007be8:	58024800 	.word	0x58024800
 8007bec:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f002 0301 	and.w	r3, r2, #1
 8007c04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c08:	2300      	movs	r3, #0
 8007c0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007c12:	460b      	mov	r3, r1
 8007c14:	4313      	orrs	r3, r2
 8007c16:	f000 8089 	beq.w	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c20:	2b28      	cmp	r3, #40	@ 0x28
 8007c22:	d86b      	bhi.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007c24:	a201      	add	r2, pc, #4	@ (adr r2, 8007c2c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2a:	bf00      	nop
 8007c2c:	08007d05 	.word	0x08007d05
 8007c30:	08007cfd 	.word	0x08007cfd
 8007c34:	08007cfd 	.word	0x08007cfd
 8007c38:	08007cfd 	.word	0x08007cfd
 8007c3c:	08007cfd 	.word	0x08007cfd
 8007c40:	08007cfd 	.word	0x08007cfd
 8007c44:	08007cfd 	.word	0x08007cfd
 8007c48:	08007cfd 	.word	0x08007cfd
 8007c4c:	08007cd1 	.word	0x08007cd1
 8007c50:	08007cfd 	.word	0x08007cfd
 8007c54:	08007cfd 	.word	0x08007cfd
 8007c58:	08007cfd 	.word	0x08007cfd
 8007c5c:	08007cfd 	.word	0x08007cfd
 8007c60:	08007cfd 	.word	0x08007cfd
 8007c64:	08007cfd 	.word	0x08007cfd
 8007c68:	08007cfd 	.word	0x08007cfd
 8007c6c:	08007ce7 	.word	0x08007ce7
 8007c70:	08007cfd 	.word	0x08007cfd
 8007c74:	08007cfd 	.word	0x08007cfd
 8007c78:	08007cfd 	.word	0x08007cfd
 8007c7c:	08007cfd 	.word	0x08007cfd
 8007c80:	08007cfd 	.word	0x08007cfd
 8007c84:	08007cfd 	.word	0x08007cfd
 8007c88:	08007cfd 	.word	0x08007cfd
 8007c8c:	08007d05 	.word	0x08007d05
 8007c90:	08007cfd 	.word	0x08007cfd
 8007c94:	08007cfd 	.word	0x08007cfd
 8007c98:	08007cfd 	.word	0x08007cfd
 8007c9c:	08007cfd 	.word	0x08007cfd
 8007ca0:	08007cfd 	.word	0x08007cfd
 8007ca4:	08007cfd 	.word	0x08007cfd
 8007ca8:	08007cfd 	.word	0x08007cfd
 8007cac:	08007d05 	.word	0x08007d05
 8007cb0:	08007cfd 	.word	0x08007cfd
 8007cb4:	08007cfd 	.word	0x08007cfd
 8007cb8:	08007cfd 	.word	0x08007cfd
 8007cbc:	08007cfd 	.word	0x08007cfd
 8007cc0:	08007cfd 	.word	0x08007cfd
 8007cc4:	08007cfd 	.word	0x08007cfd
 8007cc8:	08007cfd 	.word	0x08007cfd
 8007ccc:	08007d05 	.word	0x08007d05
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007cd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	2101      	movs	r1, #1
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 ffc3 	bl	8008c64 <RCCEx_PLL2_Config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007ce4:	e00f      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cea:	3328      	adds	r3, #40	@ 0x28
 8007cec:	2101      	movs	r1, #1
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f001 f86a 	bl	8008dc8 <RCCEx_PLL3_Config>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007cfa:	e004      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d02:	e000      	b.n	8007d06 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d10a      	bne.n	8007d24 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007d0e:	4bbf      	ldr	r3, [pc, #764]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d12:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007d16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d1a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d1c:	4abb      	ldr	r2, [pc, #748]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007d1e:	430b      	orrs	r3, r1
 8007d20:	6553      	str	r3, [r2, #84]	@ 0x54
 8007d22:	e003      	b.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d34:	f002 0302 	and.w	r3, r2, #2
 8007d38:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007d42:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007d46:	460b      	mov	r3, r1
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	d041      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d52:	2b05      	cmp	r3, #5
 8007d54:	d824      	bhi.n	8007da0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007d56:	a201      	add	r2, pc, #4	@ (adr r2, 8007d5c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5c:	08007da9 	.word	0x08007da9
 8007d60:	08007d75 	.word	0x08007d75
 8007d64:	08007d8b 	.word	0x08007d8b
 8007d68:	08007da9 	.word	0x08007da9
 8007d6c:	08007da9 	.word	0x08007da9
 8007d70:	08007da9 	.word	0x08007da9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d78:	3308      	adds	r3, #8
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f000 ff71 	bl	8008c64 <RCCEx_PLL2_Config>
 8007d82:	4603      	mov	r3, r0
 8007d84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d88:	e00f      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8e:	3328      	adds	r3, #40	@ 0x28
 8007d90:	2101      	movs	r1, #1
 8007d92:	4618      	mov	r0, r3
 8007d94:	f001 f818 	bl	8008dc8 <RCCEx_PLL3_Config>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007d9e:	e004      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007da6:	e000      	b.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007daa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d10a      	bne.n	8007dc8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007db2:	4b96      	ldr	r3, [pc, #600]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db6:	f023 0107 	bic.w	r1, r3, #7
 8007dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007dc0:	4a92      	ldr	r2, [pc, #584]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007dc2:	430b      	orrs	r3, r1
 8007dc4:	6553      	str	r3, [r2, #84]	@ 0x54
 8007dc6:	e003      	b.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dcc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f002 0304 	and.w	r3, r2, #4
 8007ddc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007de0:	2300      	movs	r3, #0
 8007de2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007de6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007dea:	460b      	mov	r3, r1
 8007dec:	4313      	orrs	r3, r2
 8007dee:	d044      	beq.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007df8:	2b05      	cmp	r3, #5
 8007dfa:	d825      	bhi.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007dfc:	a201      	add	r2, pc, #4	@ (adr r2, 8007e04 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8007dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e02:	bf00      	nop
 8007e04:	08007e51 	.word	0x08007e51
 8007e08:	08007e1d 	.word	0x08007e1d
 8007e0c:	08007e33 	.word	0x08007e33
 8007e10:	08007e51 	.word	0x08007e51
 8007e14:	08007e51 	.word	0x08007e51
 8007e18:	08007e51 	.word	0x08007e51
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e20:	3308      	adds	r3, #8
 8007e22:	2101      	movs	r1, #1
 8007e24:	4618      	mov	r0, r3
 8007e26:	f000 ff1d 	bl	8008c64 <RCCEx_PLL2_Config>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e30:	e00f      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e36:	3328      	adds	r3, #40	@ 0x28
 8007e38:	2101      	movs	r1, #1
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f000 ffc4 	bl	8008dc8 <RCCEx_PLL3_Config>
 8007e40:	4603      	mov	r3, r0
 8007e42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007e46:	e004      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e4e:	e000      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007e50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d10b      	bne.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e5a:	4b6c      	ldr	r3, [pc, #432]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e5e:	f023 0107 	bic.w	r1, r3, #7
 8007e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007e6a:	4a68      	ldr	r2, [pc, #416]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007e6c:	430b      	orrs	r3, r1
 8007e6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007e70:	e003      	b.n	8007e7a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e82:	f002 0320 	and.w	r3, r2, #32
 8007e86:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007e90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e94:	460b      	mov	r3, r1
 8007e96:	4313      	orrs	r3, r2
 8007e98:	d055      	beq.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ea2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007ea6:	d033      	beq.n	8007f10 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007eac:	d82c      	bhi.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb2:	d02f      	beq.n	8007f14 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007eb8:	d826      	bhi.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007eba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ebe:	d02b      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007ec0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007ec4:	d820      	bhi.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ec6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007eca:	d012      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007ecc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007ed0:	d81a      	bhi.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d022      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007ed6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007eda:	d115      	bne.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ee0:	3308      	adds	r3, #8
 8007ee2:	2100      	movs	r1, #0
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 febd 	bl	8008c64 <RCCEx_PLL2_Config>
 8007eea:	4603      	mov	r3, r0
 8007eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007ef0:	e015      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ef6:	3328      	adds	r3, #40	@ 0x28
 8007ef8:	2102      	movs	r1, #2
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 ff64 	bl	8008dc8 <RCCEx_PLL3_Config>
 8007f00:	4603      	mov	r3, r0
 8007f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007f06:	e00a      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f0e:	e006      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f10:	bf00      	nop
 8007f12:	e004      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f14:	bf00      	nop
 8007f16:	e002      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f18:	bf00      	nop
 8007f1a:	e000      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007f1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d10b      	bne.n	8007f3e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007f26:	4b39      	ldr	r3, [pc, #228]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f2a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f36:	4a35      	ldr	r2, [pc, #212]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007f38:	430b      	orrs	r3, r1
 8007f3a:	6553      	str	r3, [r2, #84]	@ 0x54
 8007f3c:	e003      	b.n	8007f46 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f4e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007f52:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f56:	2300      	movs	r3, #0
 8007f58:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007f5c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007f60:	460b      	mov	r3, r1
 8007f62:	4313      	orrs	r3, r2
 8007f64:	d058      	beq.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007f6e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f72:	d033      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007f74:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007f78:	d82c      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f7e:	d02f      	beq.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007f80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007f84:	d826      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f86:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f8a:	d02b      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007f8c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007f90:	d820      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f92:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f96:	d012      	beq.n	8007fbe <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007f98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f9c:	d81a      	bhi.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d022      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007fa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fa6:	d115      	bne.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fac:	3308      	adds	r3, #8
 8007fae:	2100      	movs	r1, #0
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 fe57 	bl	8008c64 <RCCEx_PLL2_Config>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fbc:	e015      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fc2:	3328      	adds	r3, #40	@ 0x28
 8007fc4:	2102      	movs	r1, #2
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f000 fefe 	bl	8008dc8 <RCCEx_PLL3_Config>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007fd2:	e00a      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007fda:	e006      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007fdc:	bf00      	nop
 8007fde:	e004      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007fe0:	bf00      	nop
 8007fe2:	e002      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007fe4:	bf00      	nop
 8007fe6:	e000      	b.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007fe8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d10e      	bne.n	8008010 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007ff2:	4b06      	ldr	r3, [pc, #24]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ff4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ff6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008002:	4a02      	ldr	r2, [pc, #8]	@ (800800c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008004:	430b      	orrs	r3, r1
 8008006:	6593      	str	r3, [r2, #88]	@ 0x58
 8008008:	e006      	b.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800800a:	bf00      	nop
 800800c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008010:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008014:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8008024:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008028:	2300      	movs	r3, #0
 800802a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800802e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8008032:	460b      	mov	r3, r1
 8008034:	4313      	orrs	r3, r2
 8008036:	d055      	beq.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008038:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008040:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8008044:	d033      	beq.n	80080ae <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8008046:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800804a:	d82c      	bhi.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800804c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008050:	d02f      	beq.n	80080b2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8008052:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008056:	d826      	bhi.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008058:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800805c:	d02b      	beq.n	80080b6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800805e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8008062:	d820      	bhi.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008064:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008068:	d012      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800806a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800806e:	d81a      	bhi.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8008070:	2b00      	cmp	r3, #0
 8008072:	d022      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8008074:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008078:	d115      	bne.n	80080a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807e:	3308      	adds	r3, #8
 8008080:	2100      	movs	r1, #0
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fdee 	bl	8008c64 <RCCEx_PLL2_Config>
 8008088:	4603      	mov	r3, r0
 800808a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800808e:	e015      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008094:	3328      	adds	r3, #40	@ 0x28
 8008096:	2102      	movs	r1, #2
 8008098:	4618      	mov	r0, r3
 800809a:	f000 fe95 	bl	8008dc8 <RCCEx_PLL3_Config>
 800809e:	4603      	mov	r3, r0
 80080a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80080a4:	e00a      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80080ac:	e006      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080ae:	bf00      	nop
 80080b0:	e004      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080b2:	bf00      	nop
 80080b4:	e002      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080b6:	bf00      	nop
 80080b8:	e000      	b.n	80080bc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80080ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10b      	bne.n	80080dc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80080c4:	4ba1      	ldr	r3, [pc, #644]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80080c8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80080cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80080d4:	4a9d      	ldr	r2, [pc, #628]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80080d6:	430b      	orrs	r3, r1
 80080d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80080da:	e003      	b.n	80080e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80080e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080ec:	f002 0308 	and.w	r3, r2, #8
 80080f0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080f4:	2300      	movs	r3, #0
 80080f6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80080fa:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80080fe:	460b      	mov	r3, r1
 8008100:	4313      	orrs	r3, r2
 8008102:	d01e      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008108:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800810c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008110:	d10c      	bne.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008116:	3328      	adds	r3, #40	@ 0x28
 8008118:	2102      	movs	r1, #2
 800811a:	4618      	mov	r0, r3
 800811c:	f000 fe54 	bl	8008dc8 <RCCEx_PLL3_Config>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d002      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800812c:	4b87      	ldr	r3, [pc, #540]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800812e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008130:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008134:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008138:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800813c:	4a83      	ldr	r2, [pc, #524]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800813e:	430b      	orrs	r3, r1
 8008140:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800814a:	f002 0310 	and.w	r3, r2, #16
 800814e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008152:	2300      	movs	r3, #0
 8008154:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008158:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800815c:	460b      	mov	r3, r1
 800815e:	4313      	orrs	r3, r2
 8008160:	d01e      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8008162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008166:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800816a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800816e:	d10c      	bne.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008174:	3328      	adds	r3, #40	@ 0x28
 8008176:	2102      	movs	r1, #2
 8008178:	4618      	mov	r0, r3
 800817a:	f000 fe25 	bl	8008dc8 <RCCEx_PLL3_Config>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d002      	beq.n	800818a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800818a:	4b70      	ldr	r3, [pc, #448]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800818c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800818e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008196:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800819a:	4a6c      	ldr	r2, [pc, #432]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800819c:	430b      	orrs	r3, r1
 800819e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80081ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80081b0:	2300      	movs	r3, #0
 80081b2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80081b6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80081ba:	460b      	mov	r3, r1
 80081bc:	4313      	orrs	r3, r2
 80081be:	d03e      	beq.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80081c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80081c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081cc:	d022      	beq.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80081ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80081d2:	d81b      	bhi.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d003      	beq.n	80081e0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80081d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081dc:	d00b      	beq.n	80081f6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80081de:	e015      	b.n	800820c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80081e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081e4:	3308      	adds	r3, #8
 80081e6:	2100      	movs	r1, #0
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fd3b 	bl	8008c64 <RCCEx_PLL2_Config>
 80081ee:	4603      	mov	r3, r0
 80081f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80081f4:	e00f      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80081f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fa:	3328      	adds	r3, #40	@ 0x28
 80081fc:	2102      	movs	r1, #2
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fde2 	bl	8008dc8 <RCCEx_PLL3_Config>
 8008204:	4603      	mov	r3, r0
 8008206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800820a:	e004      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800820c:	2301      	movs	r3, #1
 800820e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008212:	e000      	b.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8008214:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008216:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800821a:	2b00      	cmp	r3, #0
 800821c:	d10b      	bne.n	8008236 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800821e:	4b4b      	ldr	r3, [pc, #300]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008222:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8008226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800822a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800822e:	4a47      	ldr	r2, [pc, #284]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008230:	430b      	orrs	r3, r1
 8008232:	6593      	str	r3, [r2, #88]	@ 0x58
 8008234:	e003      	b.n	800823e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008236:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800823a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800823e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008246:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800824a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800824c:	2300      	movs	r3, #0
 800824e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008250:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8008254:	460b      	mov	r3, r1
 8008256:	4313      	orrs	r3, r2
 8008258:	d03b      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800825a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800825e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008262:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008266:	d01f      	beq.n	80082a8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8008268:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800826c:	d818      	bhi.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800826e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008272:	d003      	beq.n	800827c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8008274:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008278:	d007      	beq.n	800828a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800827a:	e011      	b.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800827c:	4b33      	ldr	r3, [pc, #204]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800827e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008280:	4a32      	ldr	r2, [pc, #200]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008282:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008286:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8008288:	e00f      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800828e:	3328      	adds	r3, #40	@ 0x28
 8008290:	2101      	movs	r1, #1
 8008292:	4618      	mov	r0, r3
 8008294:	f000 fd98 	bl	8008dc8 <RCCEx_PLL3_Config>
 8008298:	4603      	mov	r3, r0
 800829a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800829e:	e004      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80082a6:	e000      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80082a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10b      	bne.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082b2:	4b26      	ldr	r3, [pc, #152]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80082ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80082c2:	4a22      	ldr	r2, [pc, #136]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80082c4:	430b      	orrs	r3, r1
 80082c6:	6553      	str	r3, [r2, #84]	@ 0x54
 80082c8:	e003      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80082ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80082de:	673b      	str	r3, [r7, #112]	@ 0x70
 80082e0:	2300      	movs	r3, #0
 80082e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80082e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80082e8:	460b      	mov	r3, r1
 80082ea:	4313      	orrs	r3, r2
 80082ec:	d034      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80082ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80082f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80082f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80082fc:	d007      	beq.n	800830e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80082fe:	e011      	b.n	8008324 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008300:	4b12      	ldr	r3, [pc, #72]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008304:	4a11      	ldr	r2, [pc, #68]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008306:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800830a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800830c:	e00e      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800830e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008312:	3308      	adds	r3, #8
 8008314:	2102      	movs	r1, #2
 8008316:	4618      	mov	r0, r3
 8008318:	f000 fca4 	bl	8008c64 <RCCEx_PLL2_Config>
 800831c:	4603      	mov	r3, r0
 800831e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008322:	e003      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8008324:	2301      	movs	r3, #1
 8008326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800832a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800832c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10d      	bne.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008334:	4b05      	ldr	r3, [pc, #20]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008336:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008338:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800833c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008340:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008342:	4a02      	ldr	r2, [pc, #8]	@ (800834c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008344:	430b      	orrs	r3, r1
 8008346:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008348:	e006      	b.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800834a:	bf00      	nop
 800834c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008350:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008354:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8008364:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008366:	2300      	movs	r3, #0
 8008368:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800836a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800836e:	460b      	mov	r3, r1
 8008370:	4313      	orrs	r3, r2
 8008372:	d00c      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008374:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008378:	3328      	adds	r3, #40	@ 0x28
 800837a:	2102      	movs	r1, #2
 800837c:	4618      	mov	r0, r3
 800837e:	f000 fd23 	bl	8008dc8 <RCCEx_PLL3_Config>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800838e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008396:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800839a:	663b      	str	r3, [r7, #96]	@ 0x60
 800839c:	2300      	movs	r3, #0
 800839e:	667b      	str	r3, [r7, #100]	@ 0x64
 80083a0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80083a4:	460b      	mov	r3, r1
 80083a6:	4313      	orrs	r3, r2
 80083a8:	d038      	beq.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80083aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80083ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80083b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083b6:	d018      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80083b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80083bc:	d811      	bhi.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80083be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083c2:	d014      	beq.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80083c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083c8:	d80b      	bhi.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d011      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80083ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80083d2:	d106      	bne.n	80083e2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80083d4:	4bc3      	ldr	r3, [pc, #780]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083d8:	4ac2      	ldr	r2, [pc, #776]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80083de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80083e0:	e008      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80083e8:	e004      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80083ea:	bf00      	nop
 80083ec:	e002      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80083ee:	bf00      	nop
 80083f0:	e000      	b.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80083f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80083f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d10b      	bne.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083fc:	4bb9      	ldr	r3, [pc, #740]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80083fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008400:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8008404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008408:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800840c:	4ab5      	ldr	r2, [pc, #724]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800840e:	430b      	orrs	r3, r1
 8008410:	6553      	str	r3, [r2, #84]	@ 0x54
 8008412:	e003      	b.n	800841c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008418:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800841c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008424:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8008428:	65bb      	str	r3, [r7, #88]	@ 0x58
 800842a:	2300      	movs	r3, #0
 800842c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800842e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8008432:	460b      	mov	r3, r1
 8008434:	4313      	orrs	r3, r2
 8008436:	d009      	beq.n	800844c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008438:	4baa      	ldr	r3, [pc, #680]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800843a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800843c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008444:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008446:	4aa7      	ldr	r2, [pc, #668]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008448:	430b      	orrs	r3, r1
 800844a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800844c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008454:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8008458:	653b      	str	r3, [r7, #80]	@ 0x50
 800845a:	2300      	movs	r3, #0
 800845c:	657b      	str	r3, [r7, #84]	@ 0x54
 800845e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8008462:	460b      	mov	r3, r1
 8008464:	4313      	orrs	r3, r2
 8008466:	d00a      	beq.n	800847e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008468:	4b9e      	ldr	r3, [pc, #632]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008474:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008478:	4a9a      	ldr	r2, [pc, #616]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800847a:	430b      	orrs	r3, r1
 800847c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800847e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008486:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800848a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800848c:	2300      	movs	r3, #0
 800848e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008490:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008494:	460b      	mov	r3, r1
 8008496:	4313      	orrs	r3, r2
 8008498:	d009      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800849a:	4b92      	ldr	r3, [pc, #584]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800849c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800849e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80084a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084a8:	4a8e      	ldr	r2, [pc, #568]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084aa:	430b      	orrs	r3, r1
 80084ac:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80084ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80084ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80084bc:	2300      	movs	r3, #0
 80084be:	647b      	str	r3, [r7, #68]	@ 0x44
 80084c0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80084c4:	460b      	mov	r3, r1
 80084c6:	4313      	orrs	r3, r2
 80084c8:	d00e      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084ca:	4b86      	ldr	r3, [pc, #536]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084cc:	691b      	ldr	r3, [r3, #16]
 80084ce:	4a85      	ldr	r2, [pc, #532]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084d0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80084d4:	6113      	str	r3, [r2, #16]
 80084d6:	4b83      	ldr	r3, [pc, #524]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084d8:	6919      	ldr	r1, [r3, #16]
 80084da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80084e2:	4a80      	ldr	r2, [pc, #512]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80084e4:	430b      	orrs	r3, r1
 80084e6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80084ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084f0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80084f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80084f6:	2300      	movs	r3, #0
 80084f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80084fa:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80084fe:	460b      	mov	r3, r1
 8008500:	4313      	orrs	r3, r2
 8008502:	d009      	beq.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008504:	4b77      	ldr	r3, [pc, #476]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008506:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008508:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800850c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008512:	4a74      	ldr	r2, [pc, #464]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008514:	430b      	orrs	r3, r1
 8008516:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008518:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8008524:	633b      	str	r3, [r7, #48]	@ 0x30
 8008526:	2300      	movs	r3, #0
 8008528:	637b      	str	r3, [r7, #52]	@ 0x34
 800852a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800852e:	460b      	mov	r3, r1
 8008530:	4313      	orrs	r3, r2
 8008532:	d00a      	beq.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008534:	4b6b      	ldr	r3, [pc, #428]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008538:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800853c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008540:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008544:	4a67      	ldr	r2, [pc, #412]	@ (80086e4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008546:	430b      	orrs	r3, r1
 8008548:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800854a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	2100      	movs	r1, #0
 8008554:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800855c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8008560:	460b      	mov	r3, r1
 8008562:	4313      	orrs	r3, r2
 8008564:	d011      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800856a:	3308      	adds	r3, #8
 800856c:	2100      	movs	r1, #0
 800856e:	4618      	mov	r0, r3
 8008570:	f000 fb78 	bl	8008c64 <RCCEx_PLL2_Config>
 8008574:	4603      	mov	r3, r0
 8008576:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800857a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800857e:	2b00      	cmp	r3, #0
 8008580:	d003      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008586:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800858a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	2100      	movs	r1, #0
 8008594:	6239      	str	r1, [r7, #32]
 8008596:	f003 0302 	and.w	r3, r3, #2
 800859a:	627b      	str	r3, [r7, #36]	@ 0x24
 800859c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085a0:	460b      	mov	r3, r1
 80085a2:	4313      	orrs	r3, r2
 80085a4:	d011      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80085a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085aa:	3308      	adds	r3, #8
 80085ac:	2101      	movs	r1, #1
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fb58 	bl	8008c64 <RCCEx_PLL2_Config>
 80085b4:	4603      	mov	r3, r0
 80085b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80085ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d003      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80085ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085d2:	2100      	movs	r1, #0
 80085d4:	61b9      	str	r1, [r7, #24]
 80085d6:	f003 0304 	and.w	r3, r3, #4
 80085da:	61fb      	str	r3, [r7, #28]
 80085dc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80085e0:	460b      	mov	r3, r1
 80085e2:	4313      	orrs	r3, r2
 80085e4:	d011      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80085e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80085ea:	3308      	adds	r3, #8
 80085ec:	2102      	movs	r1, #2
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fb38 	bl	8008c64 <RCCEx_PLL2_Config>
 80085f4:	4603      	mov	r3, r0
 80085f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80085fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d003      	beq.n	800860a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008606:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800860a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800860e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008612:	2100      	movs	r1, #0
 8008614:	6139      	str	r1, [r7, #16]
 8008616:	f003 0308 	and.w	r3, r3, #8
 800861a:	617b      	str	r3, [r7, #20]
 800861c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008620:	460b      	mov	r3, r1
 8008622:	4313      	orrs	r3, r2
 8008624:	d011      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008626:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800862a:	3328      	adds	r3, #40	@ 0x28
 800862c:	2100      	movs	r1, #0
 800862e:	4618      	mov	r0, r3
 8008630:	f000 fbca 	bl	8008dc8 <RCCEx_PLL3_Config>
 8008634:	4603      	mov	r3, r0
 8008636:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800863a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800864a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800864e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008652:	2100      	movs	r1, #0
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	f003 0310 	and.w	r3, r3, #16
 800865a:	60fb      	str	r3, [r7, #12]
 800865c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008660:	460b      	mov	r3, r1
 8008662:	4313      	orrs	r3, r2
 8008664:	d011      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008666:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800866a:	3328      	adds	r3, #40	@ 0x28
 800866c:	2101      	movs	r1, #1
 800866e:	4618      	mov	r0, r3
 8008670:	f000 fbaa 	bl	8008dc8 <RCCEx_PLL3_Config>
 8008674:	4603      	mov	r3, r0
 8008676:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800867a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800867e:	2b00      	cmp	r3, #0
 8008680:	d003      	beq.n	800868a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008682:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008686:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800868a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800868e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008692:	2100      	movs	r1, #0
 8008694:	6039      	str	r1, [r7, #0]
 8008696:	f003 0320 	and.w	r3, r3, #32
 800869a:	607b      	str	r3, [r7, #4]
 800869c:	e9d7 1200 	ldrd	r1, r2, [r7]
 80086a0:	460b      	mov	r3, r1
 80086a2:	4313      	orrs	r3, r2
 80086a4:	d011      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80086a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80086aa:	3328      	adds	r3, #40	@ 0x28
 80086ac:	2102      	movs	r1, #2
 80086ae:	4618      	mov	r0, r3
 80086b0:	f000 fb8a 	bl	8008dc8 <RCCEx_PLL3_Config>
 80086b4:	4603      	mov	r3, r0
 80086b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80086ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d003      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80086c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80086ca:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d101      	bne.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	e000      	b.n	80086d8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80086d6:	2301      	movs	r3, #1
}
 80086d8:	4618      	mov	r0, r3
 80086da:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80086de:	46bd      	mov	sp, r7
 80086e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086e4:	58024400 	.word	0x58024400

080086e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80086ec:	f7fe fd54 	bl	8007198 <HAL_RCC_GetHCLKFreq>
 80086f0:	4602      	mov	r2, r0
 80086f2:	4b06      	ldr	r3, [pc, #24]	@ (800870c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80086f4:	6a1b      	ldr	r3, [r3, #32]
 80086f6:	091b      	lsrs	r3, r3, #4
 80086f8:	f003 0307 	and.w	r3, r3, #7
 80086fc:	4904      	ldr	r1, [pc, #16]	@ (8008710 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80086fe:	5ccb      	ldrb	r3, [r1, r3]
 8008700:	f003 031f 	and.w	r3, r3, #31
 8008704:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008708:	4618      	mov	r0, r3
 800870a:	bd80      	pop	{r7, pc}
 800870c:	58024400 	.word	0x58024400
 8008710:	0801cc58 	.word	0x0801cc58

08008714 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008714:	b480      	push	{r7}
 8008716:	b089      	sub	sp, #36	@ 0x24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800871c:	4ba1      	ldr	r3, [pc, #644]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800871e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008720:	f003 0303 	and.w	r3, r3, #3
 8008724:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008726:	4b9f      	ldr	r3, [pc, #636]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800872a:	0b1b      	lsrs	r3, r3, #12
 800872c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008730:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008732:	4b9c      	ldr	r3, [pc, #624]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008736:	091b      	lsrs	r3, r3, #4
 8008738:	f003 0301 	and.w	r3, r3, #1
 800873c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800873e:	4b99      	ldr	r3, [pc, #612]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008742:	08db      	lsrs	r3, r3, #3
 8008744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	fb02 f303 	mul.w	r3, r2, r3
 800874e:	ee07 3a90 	vmov	s15, r3
 8008752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008756:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 8111 	beq.w	8008984 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008762:	69bb      	ldr	r3, [r7, #24]
 8008764:	2b02      	cmp	r3, #2
 8008766:	f000 8083 	beq.w	8008870 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	2b02      	cmp	r3, #2
 800876e:	f200 80a1 	bhi.w	80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008772:	69bb      	ldr	r3, [r7, #24]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d003      	beq.n	8008780 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	2b01      	cmp	r3, #1
 800877c:	d056      	beq.n	800882c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800877e:	e099      	b.n	80088b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008780:	4b88      	ldr	r3, [pc, #544]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0320 	and.w	r3, r3, #32
 8008788:	2b00      	cmp	r3, #0
 800878a:	d02d      	beq.n	80087e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800878c:	4b85      	ldr	r3, [pc, #532]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	08db      	lsrs	r3, r3, #3
 8008792:	f003 0303 	and.w	r3, r3, #3
 8008796:	4a84      	ldr	r2, [pc, #528]	@ (80089a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008798:	fa22 f303 	lsr.w	r3, r2, r3
 800879c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	ee07 3a90 	vmov	s15, r3
 80087a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	ee07 3a90 	vmov	s15, r3
 80087ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087b6:	4b7b      	ldr	r3, [pc, #492]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087be:	ee07 3a90 	vmov	s15, r3
 80087c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80087e6:	e087      	b.n	80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	ee07 3a90 	vmov	s15, r3
 80087ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80089b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80087f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087fa:	4b6a      	ldr	r3, [pc, #424]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880a:	ed97 6a03 	vldr	s12, [r7, #12]
 800880e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800881a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800881e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800882a:	e065      	b.n	80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	ee07 3a90 	vmov	s15, r3
 8008832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008836:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800883a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800883e:	4b59      	ldr	r3, [pc, #356]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800884e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008852:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800885a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800885e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800886e:	e043      	b.n	80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	ee07 3a90 	vmov	s15, r3
 8008876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80089b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800887e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008882:	4b48      	ldr	r3, [pc, #288]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008892:	ed97 6a03 	vldr	s12, [r7, #12]
 8008896:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800889a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800889e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088b2:	e021      	b.n	80088f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	ee07 3a90 	vmov	s15, r3
 80088ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80089b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c6:	4b37      	ldr	r3, [pc, #220]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ce:	ee07 3a90 	vmov	s15, r3
 80088d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80089ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80088f8:	4b2a      	ldr	r3, [pc, #168]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088fc:	0a5b      	lsrs	r3, r3, #9
 80088fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008902:	ee07 3a90 	vmov	s15, r3
 8008906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800890a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800890e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008912:	edd7 6a07 	vldr	s13, [r7, #28]
 8008916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800891a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800891e:	ee17 2a90 	vmov	r2, s15
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008926:	4b1f      	ldr	r3, [pc, #124]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800892a:	0c1b      	lsrs	r3, r3, #16
 800892c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008930:	ee07 3a90 	vmov	s15, r3
 8008934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008938:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800893c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008940:	edd7 6a07 	vldr	s13, [r7, #28]
 8008944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800894c:	ee17 2a90 	vmov	r2, s15
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008954:	4b13      	ldr	r3, [pc, #76]	@ (80089a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008958:	0e1b      	lsrs	r3, r3, #24
 800895a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800895e:	ee07 3a90 	vmov	s15, r3
 8008962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008966:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800896a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800896e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800897a:	ee17 2a90 	vmov	r2, s15
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008982:	e008      	b.n	8008996 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	609a      	str	r2, [r3, #8]
}
 8008996:	bf00      	nop
 8008998:	3724      	adds	r7, #36	@ 0x24
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	58024400 	.word	0x58024400
 80089a8:	03d09000 	.word	0x03d09000
 80089ac:	46000000 	.word	0x46000000
 80089b0:	4c742400 	.word	0x4c742400
 80089b4:	4a742400 	.word	0x4a742400
 80089b8:	4af42400 	.word	0x4af42400

080089bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80089bc:	b480      	push	{r7}
 80089be:	b089      	sub	sp, #36	@ 0x24
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089c4:	4ba1      	ldr	r3, [pc, #644]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80089ce:	4b9f      	ldr	r3, [pc, #636]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d2:	0d1b      	lsrs	r3, r3, #20
 80089d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80089d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80089da:	4b9c      	ldr	r3, [pc, #624]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089de:	0a1b      	lsrs	r3, r3, #8
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80089e6:	4b99      	ldr	r3, [pc, #612]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ea:	08db      	lsrs	r3, r3, #3
 80089ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	fb02 f303 	mul.w	r3, r2, r3
 80089f6:	ee07 3a90 	vmov	s15, r3
 80089fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 8111 	beq.w	8008c2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8008a0a:	69bb      	ldr	r3, [r7, #24]
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	f000 8083 	beq.w	8008b18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	f200 80a1 	bhi.w	8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8008a1a:	69bb      	ldr	r3, [r7, #24]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a20:	69bb      	ldr	r3, [r7, #24]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d056      	beq.n	8008ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a26:	e099      	b.n	8008b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a28:	4b88      	ldr	r3, [pc, #544]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f003 0320 	and.w	r3, r3, #32
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d02d      	beq.n	8008a90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008a34:	4b85      	ldr	r3, [pc, #532]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	08db      	lsrs	r3, r3, #3
 8008a3a:	f003 0303 	and.w	r3, r3, #3
 8008a3e:	4a84      	ldr	r2, [pc, #528]	@ (8008c50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008a40:	fa22 f303 	lsr.w	r3, r2, r3
 8008a44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	ee07 3a90 	vmov	s15, r3
 8008a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	ee07 3a90 	vmov	s15, r3
 8008a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a5e:	4b7b      	ldr	r3, [pc, #492]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a66:	ee07 3a90 	vmov	s15, r3
 8008a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008a8e:	e087      	b.n	8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	ee07 3a90 	vmov	s15, r3
 8008a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008c58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aaa:	ee07 3a90 	vmov	s15, r3
 8008aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ab6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008ad2:	e065      	b.n	8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	ee07 3a90 	vmov	s15, r3
 8008ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ade:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008c5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ae6:	4b59      	ldr	r3, [pc, #356]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aee:	ee07 3a90 	vmov	s15, r3
 8008af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8008afa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b16:	e043      	b.n	8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	ee07 3a90 	vmov	s15, r3
 8008b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008c60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b2a:	4b48      	ldr	r3, [pc, #288]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b32:	ee07 3a90 	vmov	s15, r3
 8008b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b5a:	e021      	b.n	8008ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	ee07 3a90 	vmov	s15, r3
 8008b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008c5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b6e:	4b37      	ldr	r3, [pc, #220]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b76:	ee07 3a90 	vmov	s15, r3
 8008b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ba4:	0a5b      	lsrs	r3, r3, #9
 8008ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008baa:	ee07 3a90 	vmov	s15, r3
 8008bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bc6:	ee17 2a90 	vmov	r2, s15
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008bce:	4b1f      	ldr	r3, [pc, #124]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bd2:	0c1b      	lsrs	r3, r3, #16
 8008bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008bd8:	ee07 3a90 	vmov	s15, r3
 8008bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008be0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008be4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bf4:	ee17 2a90 	vmov	r2, s15
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008bfc:	4b13      	ldr	r3, [pc, #76]	@ (8008c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c00:	0e1b      	lsrs	r3, r3, #24
 8008c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c22:	ee17 2a90 	vmov	r2, s15
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c2a:	e008      	b.n	8008c3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	2200      	movs	r2, #0
 8008c36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	609a      	str	r2, [r3, #8]
}
 8008c3e:	bf00      	nop
 8008c40:	3724      	adds	r7, #36	@ 0x24
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	58024400 	.word	0x58024400
 8008c50:	03d09000 	.word	0x03d09000
 8008c54:	46000000 	.word	0x46000000
 8008c58:	4c742400 	.word	0x4c742400
 8008c5c:	4a742400 	.word	0x4a742400
 8008c60:	4af42400 	.word	0x4af42400

08008c64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c72:	4b53      	ldr	r3, [pc, #332]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c76:	f003 0303 	and.w	r3, r3, #3
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d101      	bne.n	8008c82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e099      	b.n	8008db6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c82:	4b4f      	ldr	r3, [pc, #316]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	4a4e      	ldr	r2, [pc, #312]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008c88:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c8e:	f7f9 fc43 	bl	8002518 <HAL_GetTick>
 8008c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c94:	e008      	b.n	8008ca8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008c96:	f7f9 fc3f 	bl	8002518 <HAL_GetTick>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b02      	cmp	r3, #2
 8008ca2:	d901      	bls.n	8008ca8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008ca4:	2303      	movs	r3, #3
 8008ca6:	e086      	b.n	8008db6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008ca8:	4b45      	ldr	r3, [pc, #276]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1f0      	bne.n	8008c96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008cb4:	4b42      	ldr	r3, [pc, #264]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cb8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	031b      	lsls	r3, r3, #12
 8008cc2:	493f      	ldr	r1, [pc, #252]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	025b      	lsls	r3, r3, #9
 8008cda:	b29b      	uxth	r3, r3
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	3b01      	subs	r3, #1
 8008ce4:	041b      	lsls	r3, r3, #16
 8008ce6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008cea:	431a      	orrs	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	3b01      	subs	r3, #1
 8008cf2:	061b      	lsls	r3, r3, #24
 8008cf4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008cf8:	4931      	ldr	r1, [pc, #196]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008cfe:	4b30      	ldr	r3, [pc, #192]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	492d      	ldr	r1, [pc, #180]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008d10:	4b2b      	ldr	r3, [pc, #172]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d14:	f023 0220 	bic.w	r2, r3, #32
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	4928      	ldr	r1, [pc, #160]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008d22:	4b27      	ldr	r3, [pc, #156]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d26:	4a26      	ldr	r2, [pc, #152]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d28:	f023 0310 	bic.w	r3, r3, #16
 8008d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d2e:	4b24      	ldr	r3, [pc, #144]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008d32:	4b24      	ldr	r3, [pc, #144]	@ (8008dc4 <RCCEx_PLL2_Config+0x160>)
 8008d34:	4013      	ands	r3, r2
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	69d2      	ldr	r2, [r2, #28]
 8008d3a:	00d2      	lsls	r2, r2, #3
 8008d3c:	4920      	ldr	r1, [pc, #128]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008d42:	4b1f      	ldr	r3, [pc, #124]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d46:	4a1e      	ldr	r2, [pc, #120]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d48:	f043 0310 	orr.w	r3, r3, #16
 8008d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008d4e:	683b      	ldr	r3, [r7, #0]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d106      	bne.n	8008d62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d54:	4b1a      	ldr	r3, [pc, #104]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d58:	4a19      	ldr	r2, [pc, #100]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d60:	e00f      	b.n	8008d82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d106      	bne.n	8008d76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d68:	4b15      	ldr	r3, [pc, #84]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d6c:	4a14      	ldr	r2, [pc, #80]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008d72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008d74:	e005      	b.n	8008d82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d76:	4b12      	ldr	r3, [pc, #72]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d7a:	4a11      	ldr	r2, [pc, #68]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008d80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d82:	4b0f      	ldr	r3, [pc, #60]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a0e      	ldr	r2, [pc, #56]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008d88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d8e:	f7f9 fbc3 	bl	8002518 <HAL_GetTick>
 8008d92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d94:	e008      	b.n	8008da8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008d96:	f7f9 fbbf 	bl	8002518 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d901      	bls.n	8008da8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e006      	b.n	8008db6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008da8:	4b05      	ldr	r3, [pc, #20]	@ (8008dc0 <RCCEx_PLL2_Config+0x15c>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0f0      	beq.n	8008d96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}
 8008dbe:	bf00      	nop
 8008dc0:	58024400 	.word	0x58024400
 8008dc4:	ffff0007 	.word	0xffff0007

08008dc8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dd6:	4b53      	ldr	r3, [pc, #332]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d101      	bne.n	8008de6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	e099      	b.n	8008f1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008de6:	4b4f      	ldr	r3, [pc, #316]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a4e      	ldr	r2, [pc, #312]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008df2:	f7f9 fb91 	bl	8002518 <HAL_GetTick>
 8008df6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008df8:	e008      	b.n	8008e0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008dfa:	f7f9 fb8d 	bl	8002518 <HAL_GetTick>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	1ad3      	subs	r3, r2, r3
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d901      	bls.n	8008e0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008e08:	2303      	movs	r3, #3
 8008e0a:	e086      	b.n	8008f1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008e0c:	4b45      	ldr	r3, [pc, #276]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1f0      	bne.n	8008dfa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008e18:	4b42      	ldr	r3, [pc, #264]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e1c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	051b      	lsls	r3, r3, #20
 8008e26:	493f      	ldr	r1, [pc, #252]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	3b01      	subs	r3, #1
 8008e32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	3b01      	subs	r3, #1
 8008e3c:	025b      	lsls	r3, r3, #9
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	431a      	orrs	r2, r3
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	3b01      	subs	r3, #1
 8008e48:	041b      	lsls	r3, r3, #16
 8008e4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	691b      	ldr	r3, [r3, #16]
 8008e54:	3b01      	subs	r3, #1
 8008e56:	061b      	lsls	r3, r3, #24
 8008e58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008e5c:	4931      	ldr	r1, [pc, #196]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e62:	4b30      	ldr	r3, [pc, #192]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	492d      	ldr	r1, [pc, #180]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008e70:	4313      	orrs	r3, r2
 8008e72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e74:	4b2b      	ldr	r3, [pc, #172]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e78:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	4928      	ldr	r1, [pc, #160]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008e82:	4313      	orrs	r3, r2
 8008e84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e86:	4b27      	ldr	r3, [pc, #156]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8a:	4a26      	ldr	r2, [pc, #152]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e92:	4b24      	ldr	r3, [pc, #144]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e96:	4b24      	ldr	r3, [pc, #144]	@ (8008f28 <RCCEx_PLL3_Config+0x160>)
 8008e98:	4013      	ands	r3, r2
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	69d2      	ldr	r2, [r2, #28]
 8008e9e:	00d2      	lsls	r2, r2, #3
 8008ea0:	4920      	ldr	r1, [pc, #128]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d106      	bne.n	8008ec6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ebc:	4a19      	ldr	r2, [pc, #100]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008ebe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008ec2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ec4:	e00f      	b.n	8008ee6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	2b01      	cmp	r3, #1
 8008eca:	d106      	bne.n	8008eda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008ecc:	4b15      	ldr	r3, [pc, #84]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ed0:	4a14      	ldr	r2, [pc, #80]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008ed2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008ed8:	e005      	b.n	8008ee6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008eda:	4b12      	ldr	r3, [pc, #72]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ede:	4a11      	ldr	r2, [pc, #68]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008ee0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a0e      	ldr	r2, [pc, #56]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ef2:	f7f9 fb11 	bl	8002518 <HAL_GetTick>
 8008ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ef8:	e008      	b.n	8008f0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008efa:	f7f9 fb0d 	bl	8002518 <HAL_GetTick>
 8008efe:	4602      	mov	r2, r0
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	2b02      	cmp	r3, #2
 8008f06:	d901      	bls.n	8008f0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008f08:	2303      	movs	r3, #3
 8008f0a:	e006      	b.n	8008f1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008f0c:	4b05      	ldr	r3, [pc, #20]	@ (8008f24 <RCCEx_PLL3_Config+0x15c>)
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d0f0      	beq.n	8008efa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	3710      	adds	r7, #16
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd80      	pop	{r7, pc}
 8008f22:	bf00      	nop
 8008f24:	58024400 	.word	0x58024400
 8008f28:	ffff0007 	.word	0xffff0007

08008f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b082      	sub	sp, #8
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d101      	bne.n	8008f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e049      	b.n	8008fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d106      	bne.n	8008f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f841 	bl	8008fda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681a      	ldr	r2, [r3, #0]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	3304      	adds	r3, #4
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4610      	mov	r0, r2
 8008f6c:	f000 f9e8 	bl	8009340 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2201      	movs	r2, #1
 8008f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2201      	movs	r2, #1
 8008f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2201      	movs	r2, #1
 8008f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2201      	movs	r2, #1
 8008f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	2201      	movs	r2, #1
 8008fa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2201      	movs	r2, #1
 8008fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008fda:	b480      	push	{r7}
 8008fdc:	b083      	sub	sp, #12
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008fe2:	bf00      	nop
 8008fe4:	370c      	adds	r7, #12
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fec:	4770      	bx	lr
	...

08008ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008ff0:	b480      	push	{r7}
 8008ff2:	b085      	sub	sp, #20
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ffe:	b2db      	uxtb	r3, r3
 8009000:	2b01      	cmp	r3, #1
 8009002:	d001      	beq.n	8009008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e054      	b.n	80090b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2202      	movs	r2, #2
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68da      	ldr	r2, [r3, #12]
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f042 0201 	orr.w	r2, r2, #1
 800901e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a26      	ldr	r2, [pc, #152]	@ (80090c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d022      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009032:	d01d      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a22      	ldr	r2, [pc, #136]	@ (80090c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d018      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4a21      	ldr	r2, [pc, #132]	@ (80090c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8009044:	4293      	cmp	r3, r2
 8009046:	d013      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	4a1f      	ldr	r2, [pc, #124]	@ (80090cc <HAL_TIM_Base_Start_IT+0xdc>)
 800904e:	4293      	cmp	r3, r2
 8009050:	d00e      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a1e      	ldr	r2, [pc, #120]	@ (80090d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d009      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a1c      	ldr	r2, [pc, #112]	@ (80090d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d004      	beq.n	8009070 <HAL_TIM_Base_Start_IT+0x80>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4a1b      	ldr	r2, [pc, #108]	@ (80090d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800906c:	4293      	cmp	r3, r2
 800906e:	d115      	bne.n	800909c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	689a      	ldr	r2, [r3, #8]
 8009076:	4b19      	ldr	r3, [pc, #100]	@ (80090dc <HAL_TIM_Base_Start_IT+0xec>)
 8009078:	4013      	ands	r3, r2
 800907a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	2b06      	cmp	r3, #6
 8009080:	d015      	beq.n	80090ae <HAL_TIM_Base_Start_IT+0xbe>
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009088:	d011      	beq.n	80090ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f042 0201 	orr.w	r2, r2, #1
 8009098:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800909a:	e008      	b.n	80090ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	681a      	ldr	r2, [r3, #0]
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f042 0201 	orr.w	r2, r2, #1
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	e000      	b.n	80090b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80090ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80090b0:	2300      	movs	r3, #0
}
 80090b2:	4618      	mov	r0, r3
 80090b4:	3714      	adds	r7, #20
 80090b6:	46bd      	mov	sp, r7
 80090b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090bc:	4770      	bx	lr
 80090be:	bf00      	nop
 80090c0:	40010000 	.word	0x40010000
 80090c4:	40000400 	.word	0x40000400
 80090c8:	40000800 	.word	0x40000800
 80090cc:	40000c00 	.word	0x40000c00
 80090d0:	40010400 	.word	0x40010400
 80090d4:	40001800 	.word	0x40001800
 80090d8:	40014000 	.word	0x40014000
 80090dc:	00010007 	.word	0x00010007

080090e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	68db      	ldr	r3, [r3, #12]
 80090ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	691b      	ldr	r3, [r3, #16]
 80090f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f003 0302 	and.w	r3, r3, #2
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d020      	beq.n	8009144 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f003 0302 	and.w	r3, r3, #2
 8009108:	2b00      	cmp	r3, #0
 800910a:	d01b      	beq.n	8009144 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f06f 0202 	mvn.w	r2, #2
 8009114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	699b      	ldr	r3, [r3, #24]
 8009122:	f003 0303 	and.w	r3, r3, #3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d003      	beq.n	8009132 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f8e9 	bl	8009302 <HAL_TIM_IC_CaptureCallback>
 8009130:	e005      	b.n	800913e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 f8db 	bl	80092ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f8ec 	bl	8009316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f003 0304 	and.w	r3, r3, #4
 800914a:	2b00      	cmp	r3, #0
 800914c:	d020      	beq.n	8009190 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	f003 0304 	and.w	r3, r3, #4
 8009154:	2b00      	cmp	r3, #0
 8009156:	d01b      	beq.n	8009190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f06f 0204 	mvn.w	r2, #4
 8009160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2202      	movs	r2, #2
 8009166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009172:	2b00      	cmp	r3, #0
 8009174:	d003      	beq.n	800917e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 f8c3 	bl	8009302 <HAL_TIM_IC_CaptureCallback>
 800917c:	e005      	b.n	800918a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 f8b5 	bl	80092ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f8c6 	bl	8009316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2200      	movs	r2, #0
 800918e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f003 0308 	and.w	r3, r3, #8
 8009196:	2b00      	cmp	r3, #0
 8009198:	d020      	beq.n	80091dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f003 0308 	and.w	r3, r3, #8
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d01b      	beq.n	80091dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f06f 0208 	mvn.w	r2, #8
 80091ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2204      	movs	r2, #4
 80091b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	69db      	ldr	r3, [r3, #28]
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f89d 	bl	8009302 <HAL_TIM_IC_CaptureCallback>
 80091c8:	e005      	b.n	80091d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f88f 	bl	80092ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f8a0 	bl	8009316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	2200      	movs	r2, #0
 80091da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	f003 0310 	and.w	r3, r3, #16
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d020      	beq.n	8009228 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f003 0310 	and.w	r3, r3, #16
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d01b      	beq.n	8009228 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f06f 0210 	mvn.w	r2, #16
 80091f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2208      	movs	r2, #8
 80091fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800920a:	2b00      	cmp	r3, #0
 800920c:	d003      	beq.n	8009216 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f877 	bl	8009302 <HAL_TIM_IC_CaptureCallback>
 8009214:	e005      	b.n	8009222 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f869 	bl	80092ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f87a 	bl	8009316 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2200      	movs	r2, #0
 8009226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	f003 0301 	and.w	r3, r3, #1
 800922e:	2b00      	cmp	r3, #0
 8009230:	d00c      	beq.n	800924c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f003 0301 	and.w	r3, r3, #1
 8009238:	2b00      	cmp	r3, #0
 800923a:	d007      	beq.n	800924c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f06f 0201 	mvn.w	r2, #1
 8009244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009246:	6878      	ldr	r0, [r7, #4]
 8009248:	f7f8 fcb2 	bl	8001bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800924c:	68bb      	ldr	r3, [r7, #8]
 800924e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009252:	2b00      	cmp	r3, #0
 8009254:	d104      	bne.n	8009260 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00c      	beq.n	800927a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009266:	2b00      	cmp	r3, #0
 8009268:	d007      	beq.n	800927a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 f913 	bl	80094a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00c      	beq.n	800929e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800928a:	2b00      	cmp	r3, #0
 800928c:	d007      	beq.n	800929e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f90b 	bl	80094b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d00c      	beq.n	80092c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d007      	beq.n	80092c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80092ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f000 f834 	bl	800932a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	f003 0320 	and.w	r3, r3, #32
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d00c      	beq.n	80092e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f003 0320 	and.w	r3, r3, #32
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d007      	beq.n	80092e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f06f 0220 	mvn.w	r2, #32
 80092de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 f8d3 	bl	800948c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80092e6:	bf00      	nop
 80092e8:	3710      	adds	r7, #16
 80092ea:	46bd      	mov	sp, r7
 80092ec:	bd80      	pop	{r7, pc}

080092ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80092f6:	bf00      	nop
 80092f8:	370c      	adds	r7, #12
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr

08009302 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009302:	b480      	push	{r7}
 8009304:	b083      	sub	sp, #12
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800930a:	bf00      	nop
 800930c:	370c      	adds	r7, #12
 800930e:	46bd      	mov	sp, r7
 8009310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009314:	4770      	bx	lr

08009316 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009316:	b480      	push	{r7}
 8009318:	b083      	sub	sp, #12
 800931a:	af00      	add	r7, sp, #0
 800931c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800931e:	bf00      	nop
 8009320:	370c      	adds	r7, #12
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009332:	bf00      	nop
 8009334:	370c      	adds	r7, #12
 8009336:	46bd      	mov	sp, r7
 8009338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933c:	4770      	bx	lr
	...

08009340 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a46      	ldr	r2, [pc, #280]	@ (800946c <TIM_Base_SetConfig+0x12c>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d013      	beq.n	8009380 <TIM_Base_SetConfig+0x40>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800935e:	d00f      	beq.n	8009380 <TIM_Base_SetConfig+0x40>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a43      	ldr	r2, [pc, #268]	@ (8009470 <TIM_Base_SetConfig+0x130>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d00b      	beq.n	8009380 <TIM_Base_SetConfig+0x40>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	4a42      	ldr	r2, [pc, #264]	@ (8009474 <TIM_Base_SetConfig+0x134>)
 800936c:	4293      	cmp	r3, r2
 800936e:	d007      	beq.n	8009380 <TIM_Base_SetConfig+0x40>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	4a41      	ldr	r2, [pc, #260]	@ (8009478 <TIM_Base_SetConfig+0x138>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d003      	beq.n	8009380 <TIM_Base_SetConfig+0x40>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	4a40      	ldr	r2, [pc, #256]	@ (800947c <TIM_Base_SetConfig+0x13c>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d108      	bne.n	8009392 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009386:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	4313      	orrs	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a35      	ldr	r2, [pc, #212]	@ (800946c <TIM_Base_SetConfig+0x12c>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d01f      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093a0:	d01b      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a32      	ldr	r2, [pc, #200]	@ (8009470 <TIM_Base_SetConfig+0x130>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d017      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a31      	ldr	r2, [pc, #196]	@ (8009474 <TIM_Base_SetConfig+0x134>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d013      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a30      	ldr	r2, [pc, #192]	@ (8009478 <TIM_Base_SetConfig+0x138>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d00f      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	4a2f      	ldr	r2, [pc, #188]	@ (800947c <TIM_Base_SetConfig+0x13c>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d00b      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	4a2e      	ldr	r2, [pc, #184]	@ (8009480 <TIM_Base_SetConfig+0x140>)
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d007      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	4a2d      	ldr	r2, [pc, #180]	@ (8009484 <TIM_Base_SetConfig+0x144>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d003      	beq.n	80093da <TIM_Base_SetConfig+0x9a>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a2c      	ldr	r2, [pc, #176]	@ (8009488 <TIM_Base_SetConfig+0x148>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d108      	bne.n	80093ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	4313      	orrs	r3, r2
 80093ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	68fa      	ldr	r2, [r7, #12]
 80093fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	689a      	ldr	r2, [r3, #8]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a16      	ldr	r2, [pc, #88]	@ (800946c <TIM_Base_SetConfig+0x12c>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d00f      	beq.n	8009438 <TIM_Base_SetConfig+0xf8>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a18      	ldr	r2, [pc, #96]	@ (800947c <TIM_Base_SetConfig+0x13c>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d00b      	beq.n	8009438 <TIM_Base_SetConfig+0xf8>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a17      	ldr	r2, [pc, #92]	@ (8009480 <TIM_Base_SetConfig+0x140>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d007      	beq.n	8009438 <TIM_Base_SetConfig+0xf8>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a16      	ldr	r2, [pc, #88]	@ (8009484 <TIM_Base_SetConfig+0x144>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d003      	beq.n	8009438 <TIM_Base_SetConfig+0xf8>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a15      	ldr	r2, [pc, #84]	@ (8009488 <TIM_Base_SetConfig+0x148>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d103      	bne.n	8009440 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	691a      	ldr	r2, [r3, #16]
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2201      	movs	r2, #1
 8009444:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b01      	cmp	r3, #1
 8009450:	d105      	bne.n	800945e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	691b      	ldr	r3, [r3, #16]
 8009456:	f023 0201 	bic.w	r2, r3, #1
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	611a      	str	r2, [r3, #16]
  }
}
 800945e:	bf00      	nop
 8009460:	3714      	adds	r7, #20
 8009462:	46bd      	mov	sp, r7
 8009464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	40010000 	.word	0x40010000
 8009470:	40000400 	.word	0x40000400
 8009474:	40000800 	.word	0x40000800
 8009478:	40000c00 	.word	0x40000c00
 800947c:	40010400 	.word	0x40010400
 8009480:	40014000 	.word	0x40014000
 8009484:	40014400 	.word	0x40014400
 8009488:	40014800 	.word	0x40014800

0800948c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e042      	b.n	8009560 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d106      	bne.n	80094f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7f8 fec1 	bl	8002274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2224      	movs	r2, #36	@ 0x24
 80094f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f022 0201 	bic.w	r2, r2, #1
 8009508:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800950e:	2b00      	cmp	r3, #0
 8009510:	d002      	beq.n	8009518 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f001 faea 	bl	800aaec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 fd7f 	bl	800a01c <UART_SetConfig>
 800951e:	4603      	mov	r3, r0
 8009520:	2b01      	cmp	r3, #1
 8009522:	d101      	bne.n	8009528 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009524:	2301      	movs	r3, #1
 8009526:	e01b      	b.n	8009560 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0201 	orr.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f001 fb69 	bl	800ac30 <UART_CheckIdleState>
 800955e:	4603      	mov	r3, r0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b08a      	sub	sp, #40	@ 0x28
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	4613      	mov	r3, r2
 8009574:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800957c:	2b20      	cmp	r3, #32
 800957e:	d167      	bne.n	8009650 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d002      	beq.n	800958c <HAL_UART_Transmit_DMA+0x24>
 8009586:	88fb      	ldrh	r3, [r7, #6]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d101      	bne.n	8009590 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e060      	b.n	8009652 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	68ba      	ldr	r2, [r7, #8]
 8009594:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	88fa      	ldrh	r2, [r7, #6]
 800959a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	88fa      	ldrh	r2, [r7, #6]
 80095a2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2221      	movs	r2, #33	@ 0x21
 80095b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d028      	beq.n	8009610 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095c2:	4a26      	ldr	r2, [pc, #152]	@ (800965c <HAL_UART_Transmit_DMA+0xf4>)
 80095c4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095ca:	4a25      	ldr	r2, [pc, #148]	@ (8009660 <HAL_UART_Transmit_DMA+0xf8>)
 80095cc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095d2:	4a24      	ldr	r2, [pc, #144]	@ (8009664 <HAL_UART_Transmit_DMA+0xfc>)
 80095d4:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80095da:	2200      	movs	r2, #0
 80095dc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80095e6:	4619      	mov	r1, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3328      	adds	r3, #40	@ 0x28
 80095ee:	461a      	mov	r2, r3
 80095f0:	88fb      	ldrh	r3, [r7, #6]
 80095f2:	f7f9 fbf9 	bl	8002de8 <HAL_DMA_Start_IT>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d009      	beq.n	8009610 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	2210      	movs	r2, #16
 8009600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2220      	movs	r2, #32
 8009608:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800960c:	2301      	movs	r3, #1
 800960e:	e020      	b.n	8009652 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	2240      	movs	r2, #64	@ 0x40
 8009616:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3308      	adds	r3, #8
 800961e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	e853 3f00 	ldrex	r3, [r3]
 8009626:	613b      	str	r3, [r7, #16]
   return(result);
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800962e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	3308      	adds	r3, #8
 8009636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009638:	623a      	str	r2, [r7, #32]
 800963a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800963c:	69f9      	ldr	r1, [r7, #28]
 800963e:	6a3a      	ldr	r2, [r7, #32]
 8009640:	e841 2300 	strex	r3, r2, [r1]
 8009644:	61bb      	str	r3, [r7, #24]
   return(result);
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d1e5      	bne.n	8009618 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800964c:	2300      	movs	r3, #0
 800964e:	e000      	b.n	8009652 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009650:	2302      	movs	r3, #2
  }
}
 8009652:	4618      	mov	r0, r3
 8009654:	3728      	adds	r7, #40	@ 0x28
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	0800b0fd 	.word	0x0800b0fd
 8009660:	0800b193 	.word	0x0800b193
 8009664:	0800b315 	.word	0x0800b315

08009668 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b08a      	sub	sp, #40	@ 0x28
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	4613      	mov	r3, r2
 8009674:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800967c:	2b20      	cmp	r3, #32
 800967e:	d137      	bne.n	80096f0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <HAL_UART_Receive_DMA+0x24>
 8009686:	88fb      	ldrh	r3, [r7, #6]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e030      	b.n	80096f2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a18      	ldr	r2, [pc, #96]	@ (80096fc <HAL_UART_Receive_DMA+0x94>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d01f      	beq.n	80096e0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d018      	beq.n	80096e0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	e853 3f00 	ldrex	r3, [r3]
 80096ba:	613b      	str	r3, [r7, #16]
   return(result);
 80096bc:	693b      	ldr	r3, [r7, #16]
 80096be:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80096c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	461a      	mov	r2, r3
 80096ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096cc:	623b      	str	r3, [r7, #32]
 80096ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096d0:	69f9      	ldr	r1, [r7, #28]
 80096d2:	6a3a      	ldr	r2, [r7, #32]
 80096d4:	e841 2300 	strex	r3, r2, [r1]
 80096d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d1e6      	bne.n	80096ae <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80096e0:	88fb      	ldrh	r3, [r7, #6]
 80096e2:	461a      	mov	r2, r3
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	68f8      	ldr	r0, [r7, #12]
 80096e8:	f001 fbba 	bl	800ae60 <UART_Start_Receive_DMA>
 80096ec:	4603      	mov	r3, r0
 80096ee:	e000      	b.n	80096f2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80096f0:	2302      	movs	r3, #2
  }
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3728      	adds	r7, #40	@ 0x28
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
 80096fa:	bf00      	nop
 80096fc:	58000c00 	.word	0x58000c00

08009700 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b090      	sub	sp, #64	@ 0x40
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800970e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009716:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009722:	2b80      	cmp	r3, #128	@ 0x80
 8009724:	d139      	bne.n	800979a <HAL_UART_DMAStop+0x9a>
 8009726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009728:	2b21      	cmp	r3, #33	@ 0x21
 800972a:	d136      	bne.n	800979a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	3308      	adds	r3, #8
 8009732:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009734:	6a3b      	ldr	r3, [r7, #32]
 8009736:	e853 3f00 	ldrex	r3, [r3]
 800973a:	61fb      	str	r3, [r7, #28]
   return(result);
 800973c:	69fb      	ldr	r3, [r7, #28]
 800973e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009742:	637b      	str	r3, [r7, #52]	@ 0x34
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	3308      	adds	r3, #8
 800974a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800974c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800974e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009750:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009752:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009754:	e841 2300 	strex	r3, r2, [r1]
 8009758:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800975a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800975c:	2b00      	cmp	r3, #0
 800975e:	d1e5      	bne.n	800972c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009764:	2b00      	cmp	r3, #0
 8009766:	d015      	beq.n	8009794 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800976c:	4618      	mov	r0, r3
 800976e:	f7f9 fda5 	bl	80032bc <HAL_DMA_Abort>
 8009772:	4603      	mov	r3, r0
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00d      	beq.n	8009794 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800977c:	4618      	mov	r0, r3
 800977e:	f7fb fa2b 	bl	8004bd8 <HAL_DMA_GetError>
 8009782:	4603      	mov	r3, r0
 8009784:	2b20      	cmp	r3, #32
 8009786:	d105      	bne.n	8009794 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2210      	movs	r2, #16
 800978c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	e047      	b.n	8009824 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f001 fc09 	bl	800afac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	689b      	ldr	r3, [r3, #8]
 80097a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097a4:	2b40      	cmp	r3, #64	@ 0x40
 80097a6:	d13c      	bne.n	8009822 <HAL_UART_DMAStop+0x122>
 80097a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097aa:	2b22      	cmp	r3, #34	@ 0x22
 80097ac:	d139      	bne.n	8009822 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	3308      	adds	r3, #8
 80097b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	e853 3f00 	ldrex	r3, [r3]
 80097bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3308      	adds	r3, #8
 80097cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80097ce:	61ba      	str	r2, [r7, #24]
 80097d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	6979      	ldr	r1, [r7, #20]
 80097d4:	69ba      	ldr	r2, [r7, #24]
 80097d6:	e841 2300 	strex	r3, r2, [r1]
 80097da:	613b      	str	r3, [r7, #16]
   return(result);
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d1e5      	bne.n	80097ae <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d017      	beq.n	800981c <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80097f2:	4618      	mov	r0, r3
 80097f4:	f7f9 fd62 	bl	80032bc <HAL_DMA_Abort>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d00e      	beq.n	800981c <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009804:	4618      	mov	r0, r3
 8009806:	f7fb f9e7 	bl	8004bd8 <HAL_DMA_GetError>
 800980a:	4603      	mov	r3, r0
 800980c:	2b20      	cmp	r3, #32
 800980e:	d105      	bne.n	800981c <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2210      	movs	r2, #16
 8009814:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8009818:	2303      	movs	r3, #3
 800981a:	e003      	b.n	8009824 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f001 fc07 	bl	800b030 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8009822:	2300      	movs	r3, #0
}
 8009824:	4618      	mov	r0, r3
 8009826:	3740      	adds	r7, #64	@ 0x40
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b0ba      	sub	sp, #232	@ 0xe8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	689b      	ldr	r3, [r3, #8]
 800984e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009852:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8009856:	f640 030f 	movw	r3, #2063	@ 0x80f
 800985a:	4013      	ands	r3, r2
 800985c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8009860:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009864:	2b00      	cmp	r3, #0
 8009866:	d11b      	bne.n	80098a0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800986c:	f003 0320 	and.w	r3, r3, #32
 8009870:	2b00      	cmp	r3, #0
 8009872:	d015      	beq.n	80098a0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009878:	f003 0320 	and.w	r3, r3, #32
 800987c:	2b00      	cmp	r3, #0
 800987e:	d105      	bne.n	800988c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009880:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009884:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009888:	2b00      	cmp	r3, #0
 800988a:	d009      	beq.n	80098a0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009890:	2b00      	cmp	r3, #0
 8009892:	f000 8377 	beq.w	8009f84 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	4798      	blx	r3
      }
      return;
 800989e:	e371      	b.n	8009f84 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80098a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f000 8123 	beq.w	8009af0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80098aa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80098ae:	4b8d      	ldr	r3, [pc, #564]	@ (8009ae4 <HAL_UART_IRQHandler+0x2b8>)
 80098b0:	4013      	ands	r3, r2
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d106      	bne.n	80098c4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80098b6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80098ba:	4b8b      	ldr	r3, [pc, #556]	@ (8009ae8 <HAL_UART_IRQHandler+0x2bc>)
 80098bc:	4013      	ands	r3, r2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f000 8116 	beq.w	8009af0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098c8:	f003 0301 	and.w	r3, r3, #1
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d011      	beq.n	80098f4 <HAL_UART_IRQHandler+0xc8>
 80098d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80098d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d00b      	beq.n	80098f4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2201      	movs	r2, #1
 80098e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098ea:	f043 0201 	orr.w	r2, r3, #1
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80098f8:	f003 0302 	and.w	r3, r3, #2
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d011      	beq.n	8009924 <HAL_UART_IRQHandler+0xf8>
 8009900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009904:	f003 0301 	and.w	r3, r3, #1
 8009908:	2b00      	cmp	r3, #0
 800990a:	d00b      	beq.n	8009924 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2202      	movs	r2, #2
 8009912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800991a:	f043 0204 	orr.w	r2, r3, #4
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009928:	f003 0304 	and.w	r3, r3, #4
 800992c:	2b00      	cmp	r3, #0
 800992e:	d011      	beq.n	8009954 <HAL_UART_IRQHandler+0x128>
 8009930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009934:	f003 0301 	and.w	r3, r3, #1
 8009938:	2b00      	cmp	r3, #0
 800993a:	d00b      	beq.n	8009954 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2204      	movs	r2, #4
 8009942:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800994a:	f043 0202 	orr.w	r2, r3, #2
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009958:	f003 0308 	and.w	r3, r3, #8
 800995c:	2b00      	cmp	r3, #0
 800995e:	d017      	beq.n	8009990 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009964:	f003 0320 	and.w	r3, r3, #32
 8009968:	2b00      	cmp	r3, #0
 800996a:	d105      	bne.n	8009978 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800996c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8009970:	4b5c      	ldr	r3, [pc, #368]	@ (8009ae4 <HAL_UART_IRQHandler+0x2b8>)
 8009972:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009974:	2b00      	cmp	r3, #0
 8009976:	d00b      	beq.n	8009990 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	2208      	movs	r2, #8
 800997e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009986:	f043 0208 	orr.w	r2, r3, #8
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009998:	2b00      	cmp	r3, #0
 800999a:	d012      	beq.n	80099c2 <HAL_UART_IRQHandler+0x196>
 800999c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00c      	beq.n	80099c2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80099b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099b8:	f043 0220 	orr.w	r2, r3, #32
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 82dd 	beq.w	8009f88 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80099ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099d2:	f003 0320 	and.w	r3, r3, #32
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d013      	beq.n	8009a02 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80099da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099de:	f003 0320 	and.w	r3, r3, #32
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d105      	bne.n	80099f2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80099e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80099ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d007      	beq.n	8009a02 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d003      	beq.n	8009a02 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a08:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a16:	2b40      	cmp	r3, #64	@ 0x40
 8009a18:	d005      	beq.n	8009a26 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009a1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8009a1e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d054      	beq.n	8009ad0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f001 fb02 	bl	800b030 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	689b      	ldr	r3, [r3, #8]
 8009a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a36:	2b40      	cmp	r3, #64	@ 0x40
 8009a38:	d146      	bne.n	8009ac8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	3308      	adds	r3, #8
 8009a40:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a44:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009a48:	e853 3f00 	ldrex	r3, [r3]
 8009a4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009a50:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009a54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009a58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	3308      	adds	r3, #8
 8009a62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009a66:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009a6a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009a72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009a76:	e841 2300 	strex	r3, r2, [r1]
 8009a7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009a7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1d9      	bne.n	8009a3a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d017      	beq.n	8009ac0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a96:	4a15      	ldr	r2, [pc, #84]	@ (8009aec <HAL_UART_IRQHandler+0x2c0>)
 8009a98:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	f7f9 ff29 	bl	80038f8 <HAL_DMA_Abort_IT>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d019      	beq.n	8009ae0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009aba:	4610      	mov	r0, r2
 8009abc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009abe:	e00f      	b.n	8009ae0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fa95 	bl	8009ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ac6:	e00b      	b.n	8009ae0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fa91 	bl	8009ff0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ace:	e007      	b.n	8009ae0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fa8d 	bl	8009ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2200      	movs	r2, #0
 8009ada:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8009ade:	e253      	b.n	8009f88 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ae0:	bf00      	nop
    return;
 8009ae2:	e251      	b.n	8009f88 <HAL_UART_IRQHandler+0x75c>
 8009ae4:	10000001 	.word	0x10000001
 8009ae8:	04000120 	.word	0x04000120
 8009aec:	0800b395 	.word	0x0800b395

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	f040 81e7 	bne.w	8009ec8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009afe:	f003 0310 	and.w	r3, r3, #16
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	f000 81e0 	beq.w	8009ec8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009b0c:	f003 0310 	and.w	r3, r3, #16
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	f000 81d9 	beq.w	8009ec8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2210      	movs	r2, #16
 8009b1c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	689b      	ldr	r3, [r3, #8]
 8009b24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b28:	2b40      	cmp	r3, #64	@ 0x40
 8009b2a:	f040 8151 	bne.w	8009dd0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a96      	ldr	r2, [pc, #600]	@ (8009d90 <HAL_UART_IRQHandler+0x564>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d068      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	4a93      	ldr	r2, [pc, #588]	@ (8009d94 <HAL_UART_IRQHandler+0x568>)
 8009b46:	4293      	cmp	r3, r2
 8009b48:	d061      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	4a91      	ldr	r2, [pc, #580]	@ (8009d98 <HAL_UART_IRQHandler+0x56c>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d05a      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4a8e      	ldr	r2, [pc, #568]	@ (8009d9c <HAL_UART_IRQHandler+0x570>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d053      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a8c      	ldr	r2, [pc, #560]	@ (8009da0 <HAL_UART_IRQHandler+0x574>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d04c      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4a89      	ldr	r2, [pc, #548]	@ (8009da4 <HAL_UART_IRQHandler+0x578>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d045      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	4a87      	ldr	r2, [pc, #540]	@ (8009da8 <HAL_UART_IRQHandler+0x57c>)
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d03e      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a84      	ldr	r2, [pc, #528]	@ (8009dac <HAL_UART_IRQHandler+0x580>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d037      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a82      	ldr	r2, [pc, #520]	@ (8009db0 <HAL_UART_IRQHandler+0x584>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d030      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	4a7f      	ldr	r2, [pc, #508]	@ (8009db4 <HAL_UART_IRQHandler+0x588>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d029      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a7d      	ldr	r2, [pc, #500]	@ (8009db8 <HAL_UART_IRQHandler+0x58c>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d022      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a7a      	ldr	r2, [pc, #488]	@ (8009dbc <HAL_UART_IRQHandler+0x590>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d01b      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	4a78      	ldr	r2, [pc, #480]	@ (8009dc0 <HAL_UART_IRQHandler+0x594>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d014      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a75      	ldr	r2, [pc, #468]	@ (8009dc4 <HAL_UART_IRQHandler+0x598>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d00d      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a73      	ldr	r2, [pc, #460]	@ (8009dc8 <HAL_UART_IRQHandler+0x59c>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d006      	beq.n	8009c0e <HAL_UART_IRQHandler+0x3e2>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a70      	ldr	r2, [pc, #448]	@ (8009dcc <HAL_UART_IRQHandler+0x5a0>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d106      	bne.n	8009c1c <HAL_UART_IRQHandler+0x3f0>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	e005      	b.n	8009c28 <HAL_UART_IRQHandler+0x3fc>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	b29b      	uxth	r3, r3
 8009c28:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009c2c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 81ab 	beq.w	8009f8c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009c3c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c40:	429a      	cmp	r2, r3
 8009c42:	f080 81a3 	bcs.w	8009f8c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009c4c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c56:	69db      	ldr	r3, [r3, #28]
 8009c58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009c5c:	f000 8087 	beq.w	8009d6e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c68:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009c6c:	e853 3f00 	ldrex	r3, [r3]
 8009c70:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009c74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	461a      	mov	r2, r3
 8009c86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009c8a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009c8e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c92:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009c96:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009c9a:	e841 2300 	strex	r3, r2, [r1]
 8009c9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009ca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d1da      	bne.n	8009c60 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	3308      	adds	r3, #8
 8009cb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009cb4:	e853 3f00 	ldrex	r3, [r3]
 8009cb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009cba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cbc:	f023 0301 	bic.w	r3, r3, #1
 8009cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	3308      	adds	r3, #8
 8009cca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009cce:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009cd2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009cd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009ce0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e1      	bne.n	8009caa <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	3308      	adds	r3, #8
 8009cec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009cf0:	e853 3f00 	ldrex	r3, [r3]
 8009cf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009cf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009cf8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	3308      	adds	r3, #8
 8009d06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009d0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009d0c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d0e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009d10:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d12:	e841 2300 	strex	r3, r2, [r1]
 8009d16:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009d18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1e3      	bne.n	8009ce6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2220      	movs	r2, #32
 8009d22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d34:	e853 3f00 	ldrex	r3, [r3]
 8009d38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009d3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009d3c:	f023 0310 	bic.w	r3, r3, #16
 8009d40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d4e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d50:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d52:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009d54:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009d56:	e841 2300 	strex	r3, r2, [r1]
 8009d5a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009d5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1e4      	bne.n	8009d2c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7f9 faa7 	bl	80032bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	2202      	movs	r2, #2
 8009d72:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	4619      	mov	r1, r3
 8009d88:	6878      	ldr	r0, [r7, #4]
 8009d8a:	f000 f93b 	bl	800a004 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d8e:	e0fd      	b.n	8009f8c <HAL_UART_IRQHandler+0x760>
 8009d90:	40020010 	.word	0x40020010
 8009d94:	40020028 	.word	0x40020028
 8009d98:	40020040 	.word	0x40020040
 8009d9c:	40020058 	.word	0x40020058
 8009da0:	40020070 	.word	0x40020070
 8009da4:	40020088 	.word	0x40020088
 8009da8:	400200a0 	.word	0x400200a0
 8009dac:	400200b8 	.word	0x400200b8
 8009db0:	40020410 	.word	0x40020410
 8009db4:	40020428 	.word	0x40020428
 8009db8:	40020440 	.word	0x40020440
 8009dbc:	40020458 	.word	0x40020458
 8009dc0:	40020470 	.word	0x40020470
 8009dc4:	40020488 	.word	0x40020488
 8009dc8:	400204a0 	.word	0x400204a0
 8009dcc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009ddc:	b29b      	uxth	r3, r3
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 80cf 	beq.w	8009f90 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 80ca 	beq.w	8009f90 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e04:	e853 3f00 	ldrex	r3, [r3]
 8009e08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009e10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	461a      	mov	r2, r3
 8009e1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009e1e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e20:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009e24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009e26:	e841 2300 	strex	r3, r2, [r1]
 8009e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d1e4      	bne.n	8009dfc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	3308      	adds	r3, #8
 8009e38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3c:	e853 3f00 	ldrex	r3, [r3]
 8009e40:	623b      	str	r3, [r7, #32]
   return(result);
 8009e42:	6a3a      	ldr	r2, [r7, #32]
 8009e44:	4b55      	ldr	r3, [pc, #340]	@ (8009f9c <HAL_UART_IRQHandler+0x770>)
 8009e46:	4013      	ands	r3, r2
 8009e48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3308      	adds	r3, #8
 8009e52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009e56:	633a      	str	r2, [r7, #48]	@ 0x30
 8009e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e5e:	e841 2300 	strex	r3, r2, [r1]
 8009e62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d1e3      	bne.n	8009e32 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2220      	movs	r2, #32
 8009e6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	2200      	movs	r2, #0
 8009e76:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	e853 3f00 	ldrex	r3, [r3]
 8009e8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	f023 0310 	bic.w	r3, r3, #16
 8009e92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009ea0:	61fb      	str	r3, [r7, #28]
 8009ea2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ea4:	69b9      	ldr	r1, [r7, #24]
 8009ea6:	69fa      	ldr	r2, [r7, #28]
 8009ea8:	e841 2300 	strex	r3, r2, [r1]
 8009eac:	617b      	str	r3, [r7, #20]
   return(result);
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d1e4      	bne.n	8009e7e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2202      	movs	r2, #2
 8009eb8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009eba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009ebe:	4619      	mov	r1, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f89f 	bl	800a004 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ec6:	e063      	b.n	8009f90 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ecc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d00e      	beq.n	8009ef2 <HAL_UART_IRQHandler+0x6c6>
 8009ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009ed8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d008      	beq.n	8009ef2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009ee8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f001 fa93 	bl	800b416 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ef0:	e051      	b.n	8009f96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d014      	beq.n	8009f28 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d105      	bne.n	8009f16 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009f0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d008      	beq.n	8009f28 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d03a      	beq.n	8009f94 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009f22:	6878      	ldr	r0, [r7, #4]
 8009f24:	4798      	blx	r3
    }
    return;
 8009f26:	e035      	b.n	8009f94 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009f28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d009      	beq.n	8009f48 <HAL_UART_IRQHandler+0x71c>
 8009f34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d003      	beq.n	8009f48 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f001 fa3d 	bl	800b3c0 <UART_EndTransmit_IT>
    return;
 8009f46:	e026      	b.n	8009f96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f4c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d009      	beq.n	8009f68 <HAL_UART_IRQHandler+0x73c>
 8009f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f58:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f001 fa6c 	bl	800b43e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f66:	e016      	b.n	8009f96 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009f6c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d010      	beq.n	8009f96 <HAL_UART_IRQHandler+0x76a>
 8009f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	da0c      	bge.n	8009f96 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 fa54 	bl	800b42a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009f82:	e008      	b.n	8009f96 <HAL_UART_IRQHandler+0x76a>
      return;
 8009f84:	bf00      	nop
 8009f86:	e006      	b.n	8009f96 <HAL_UART_IRQHandler+0x76a>
    return;
 8009f88:	bf00      	nop
 8009f8a:	e004      	b.n	8009f96 <HAL_UART_IRQHandler+0x76a>
      return;
 8009f8c:	bf00      	nop
 8009f8e:	e002      	b.n	8009f96 <HAL_UART_IRQHandler+0x76a>
      return;
 8009f90:	bf00      	nop
 8009f92:	e000      	b.n	8009f96 <HAL_UART_IRQHandler+0x76a>
    return;
 8009f94:	bf00      	nop
  }
}
 8009f96:	37e8      	adds	r7, #232	@ 0xe8
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd80      	pop	{r7, pc}
 8009f9c:	effffffe 	.word	0xeffffffe

08009fa0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b083      	sub	sp, #12
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009fa8:	bf00      	nop
 8009faa:	370c      	adds	r7, #12
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	4770      	bx	lr

08009fb4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fb4:	b480      	push	{r7}
 8009fb6:	b083      	sub	sp, #12
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009fbc:	bf00      	nop
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b083      	sub	sp, #12
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b083      	sub	sp, #12
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a010:	bf00      	nop
 800a012:	370c      	adds	r7, #12
 800a014:	46bd      	mov	sp, r7
 800a016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01a:	4770      	bx	lr

0800a01c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a01c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a020:	b092      	sub	sp, #72	@ 0x48
 800a022:	af00      	add	r7, sp, #0
 800a024:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a026:	2300      	movs	r3, #0
 800a028:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	431a      	orrs	r2, r3
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	695b      	ldr	r3, [r3, #20]
 800a03a:	431a      	orrs	r2, r3
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	69db      	ldr	r3, [r3, #28]
 800a040:	4313      	orrs	r3, r2
 800a042:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	4bbe      	ldr	r3, [pc, #760]	@ (800a344 <UART_SetConfig+0x328>)
 800a04c:	4013      	ands	r3, r2
 800a04e:	697a      	ldr	r2, [r7, #20]
 800a050:	6812      	ldr	r2, [r2, #0]
 800a052:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a054:	430b      	orrs	r3, r1
 800a056:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a062:	697b      	ldr	r3, [r7, #20]
 800a064:	68da      	ldr	r2, [r3, #12]
 800a066:	697b      	ldr	r3, [r7, #20]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	430a      	orrs	r2, r1
 800a06c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	699b      	ldr	r3, [r3, #24]
 800a072:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4ab3      	ldr	r2, [pc, #716]	@ (800a348 <UART_SetConfig+0x32c>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d004      	beq.n	800a088 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	6a1b      	ldr	r3, [r3, #32]
 800a082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a084:	4313      	orrs	r3, r2
 800a086:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	689a      	ldr	r2, [r3, #8]
 800a08e:	4baf      	ldr	r3, [pc, #700]	@ (800a34c <UART_SetConfig+0x330>)
 800a090:	4013      	ands	r3, r2
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	6812      	ldr	r2, [r2, #0]
 800a096:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a098:	430b      	orrs	r3, r1
 800a09a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a09c:	697b      	ldr	r3, [r7, #20]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0a2:	f023 010f 	bic.w	r1, r3, #15
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4aa6      	ldr	r2, [pc, #664]	@ (800a350 <UART_SetConfig+0x334>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d177      	bne.n	800a1ac <UART_SetConfig+0x190>
 800a0bc:	4ba5      	ldr	r3, [pc, #660]	@ (800a354 <UART_SetConfig+0x338>)
 800a0be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a0c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a0c4:	2b28      	cmp	r3, #40	@ 0x28
 800a0c6:	d86d      	bhi.n	800a1a4 <UART_SetConfig+0x188>
 800a0c8:	a201      	add	r2, pc, #4	@ (adr r2, 800a0d0 <UART_SetConfig+0xb4>)
 800a0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ce:	bf00      	nop
 800a0d0:	0800a175 	.word	0x0800a175
 800a0d4:	0800a1a5 	.word	0x0800a1a5
 800a0d8:	0800a1a5 	.word	0x0800a1a5
 800a0dc:	0800a1a5 	.word	0x0800a1a5
 800a0e0:	0800a1a5 	.word	0x0800a1a5
 800a0e4:	0800a1a5 	.word	0x0800a1a5
 800a0e8:	0800a1a5 	.word	0x0800a1a5
 800a0ec:	0800a1a5 	.word	0x0800a1a5
 800a0f0:	0800a17d 	.word	0x0800a17d
 800a0f4:	0800a1a5 	.word	0x0800a1a5
 800a0f8:	0800a1a5 	.word	0x0800a1a5
 800a0fc:	0800a1a5 	.word	0x0800a1a5
 800a100:	0800a1a5 	.word	0x0800a1a5
 800a104:	0800a1a5 	.word	0x0800a1a5
 800a108:	0800a1a5 	.word	0x0800a1a5
 800a10c:	0800a1a5 	.word	0x0800a1a5
 800a110:	0800a185 	.word	0x0800a185
 800a114:	0800a1a5 	.word	0x0800a1a5
 800a118:	0800a1a5 	.word	0x0800a1a5
 800a11c:	0800a1a5 	.word	0x0800a1a5
 800a120:	0800a1a5 	.word	0x0800a1a5
 800a124:	0800a1a5 	.word	0x0800a1a5
 800a128:	0800a1a5 	.word	0x0800a1a5
 800a12c:	0800a1a5 	.word	0x0800a1a5
 800a130:	0800a18d 	.word	0x0800a18d
 800a134:	0800a1a5 	.word	0x0800a1a5
 800a138:	0800a1a5 	.word	0x0800a1a5
 800a13c:	0800a1a5 	.word	0x0800a1a5
 800a140:	0800a1a5 	.word	0x0800a1a5
 800a144:	0800a1a5 	.word	0x0800a1a5
 800a148:	0800a1a5 	.word	0x0800a1a5
 800a14c:	0800a1a5 	.word	0x0800a1a5
 800a150:	0800a195 	.word	0x0800a195
 800a154:	0800a1a5 	.word	0x0800a1a5
 800a158:	0800a1a5 	.word	0x0800a1a5
 800a15c:	0800a1a5 	.word	0x0800a1a5
 800a160:	0800a1a5 	.word	0x0800a1a5
 800a164:	0800a1a5 	.word	0x0800a1a5
 800a168:	0800a1a5 	.word	0x0800a1a5
 800a16c:	0800a1a5 	.word	0x0800a1a5
 800a170:	0800a19d 	.word	0x0800a19d
 800a174:	2301      	movs	r3, #1
 800a176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a17a:	e222      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a17c:	2304      	movs	r3, #4
 800a17e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a182:	e21e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a184:	2308      	movs	r3, #8
 800a186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a18a:	e21a      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a18c:	2310      	movs	r3, #16
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a192:	e216      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a194:	2320      	movs	r3, #32
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19a:	e212      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a19c:	2340      	movs	r3, #64	@ 0x40
 800a19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a2:	e20e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a1a4:	2380      	movs	r3, #128	@ 0x80
 800a1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1aa:	e20a      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	4a69      	ldr	r2, [pc, #420]	@ (800a358 <UART_SetConfig+0x33c>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d130      	bne.n	800a218 <UART_SetConfig+0x1fc>
 800a1b6:	4b67      	ldr	r3, [pc, #412]	@ (800a354 <UART_SetConfig+0x338>)
 800a1b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	2b05      	cmp	r3, #5
 800a1c0:	d826      	bhi.n	800a210 <UART_SetConfig+0x1f4>
 800a1c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a1c8 <UART_SetConfig+0x1ac>)
 800a1c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c8:	0800a1e1 	.word	0x0800a1e1
 800a1cc:	0800a1e9 	.word	0x0800a1e9
 800a1d0:	0800a1f1 	.word	0x0800a1f1
 800a1d4:	0800a1f9 	.word	0x0800a1f9
 800a1d8:	0800a201 	.word	0x0800a201
 800a1dc:	0800a209 	.word	0x0800a209
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e6:	e1ec      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a1e8:	2304      	movs	r3, #4
 800a1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ee:	e1e8      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a1f0:	2308      	movs	r3, #8
 800a1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1f6:	e1e4      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a1f8:	2310      	movs	r3, #16
 800a1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1fe:	e1e0      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a200:	2320      	movs	r3, #32
 800a202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a206:	e1dc      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a208:	2340      	movs	r3, #64	@ 0x40
 800a20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a20e:	e1d8      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a210:	2380      	movs	r3, #128	@ 0x80
 800a212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a216:	e1d4      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a4f      	ldr	r2, [pc, #316]	@ (800a35c <UART_SetConfig+0x340>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d130      	bne.n	800a284 <UART_SetConfig+0x268>
 800a222:	4b4c      	ldr	r3, [pc, #304]	@ (800a354 <UART_SetConfig+0x338>)
 800a224:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	2b05      	cmp	r3, #5
 800a22c:	d826      	bhi.n	800a27c <UART_SetConfig+0x260>
 800a22e:	a201      	add	r2, pc, #4	@ (adr r2, 800a234 <UART_SetConfig+0x218>)
 800a230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a234:	0800a24d 	.word	0x0800a24d
 800a238:	0800a255 	.word	0x0800a255
 800a23c:	0800a25d 	.word	0x0800a25d
 800a240:	0800a265 	.word	0x0800a265
 800a244:	0800a26d 	.word	0x0800a26d
 800a248:	0800a275 	.word	0x0800a275
 800a24c:	2300      	movs	r3, #0
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a252:	e1b6      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a254:	2304      	movs	r3, #4
 800a256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a25a:	e1b2      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a25c:	2308      	movs	r3, #8
 800a25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a262:	e1ae      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a264:	2310      	movs	r3, #16
 800a266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a26a:	e1aa      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a26c:	2320      	movs	r3, #32
 800a26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a272:	e1a6      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a274:	2340      	movs	r3, #64	@ 0x40
 800a276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a27a:	e1a2      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a27c:	2380      	movs	r3, #128	@ 0x80
 800a27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a282:	e19e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a35      	ldr	r2, [pc, #212]	@ (800a360 <UART_SetConfig+0x344>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d130      	bne.n	800a2f0 <UART_SetConfig+0x2d4>
 800a28e:	4b31      	ldr	r3, [pc, #196]	@ (800a354 <UART_SetConfig+0x338>)
 800a290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a292:	f003 0307 	and.w	r3, r3, #7
 800a296:	2b05      	cmp	r3, #5
 800a298:	d826      	bhi.n	800a2e8 <UART_SetConfig+0x2cc>
 800a29a:	a201      	add	r2, pc, #4	@ (adr r2, 800a2a0 <UART_SetConfig+0x284>)
 800a29c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a0:	0800a2b9 	.word	0x0800a2b9
 800a2a4:	0800a2c1 	.word	0x0800a2c1
 800a2a8:	0800a2c9 	.word	0x0800a2c9
 800a2ac:	0800a2d1 	.word	0x0800a2d1
 800a2b0:	0800a2d9 	.word	0x0800a2d9
 800a2b4:	0800a2e1 	.word	0x0800a2e1
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2be:	e180      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2c0:	2304      	movs	r3, #4
 800a2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c6:	e17c      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2c8:	2308      	movs	r3, #8
 800a2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ce:	e178      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2d0:	2310      	movs	r3, #16
 800a2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d6:	e174      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2d8:	2320      	movs	r3, #32
 800a2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2de:	e170      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2e0:	2340      	movs	r3, #64	@ 0x40
 800a2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2e6:	e16c      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2e8:	2380      	movs	r3, #128	@ 0x80
 800a2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ee:	e168      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	4a1b      	ldr	r2, [pc, #108]	@ (800a364 <UART_SetConfig+0x348>)
 800a2f6:	4293      	cmp	r3, r2
 800a2f8:	d142      	bne.n	800a380 <UART_SetConfig+0x364>
 800a2fa:	4b16      	ldr	r3, [pc, #88]	@ (800a354 <UART_SetConfig+0x338>)
 800a2fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2fe:	f003 0307 	and.w	r3, r3, #7
 800a302:	2b05      	cmp	r3, #5
 800a304:	d838      	bhi.n	800a378 <UART_SetConfig+0x35c>
 800a306:	a201      	add	r2, pc, #4	@ (adr r2, 800a30c <UART_SetConfig+0x2f0>)
 800a308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a30c:	0800a325 	.word	0x0800a325
 800a310:	0800a32d 	.word	0x0800a32d
 800a314:	0800a335 	.word	0x0800a335
 800a318:	0800a33d 	.word	0x0800a33d
 800a31c:	0800a369 	.word	0x0800a369
 800a320:	0800a371 	.word	0x0800a371
 800a324:	2300      	movs	r3, #0
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32a:	e14a      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a32c:	2304      	movs	r3, #4
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a332:	e146      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a334:	2308      	movs	r3, #8
 800a336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33a:	e142      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a33c:	2310      	movs	r3, #16
 800a33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a342:	e13e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a344:	cfff69f3 	.word	0xcfff69f3
 800a348:	58000c00 	.word	0x58000c00
 800a34c:	11fff4ff 	.word	0x11fff4ff
 800a350:	40011000 	.word	0x40011000
 800a354:	58024400 	.word	0x58024400
 800a358:	40004400 	.word	0x40004400
 800a35c:	40004800 	.word	0x40004800
 800a360:	40004c00 	.word	0x40004c00
 800a364:	40005000 	.word	0x40005000
 800a368:	2320      	movs	r3, #32
 800a36a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a36e:	e128      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a370:	2340      	movs	r3, #64	@ 0x40
 800a372:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a376:	e124      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a378:	2380      	movs	r3, #128	@ 0x80
 800a37a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a37e:	e120      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4acb      	ldr	r2, [pc, #812]	@ (800a6b4 <UART_SetConfig+0x698>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d176      	bne.n	800a478 <UART_SetConfig+0x45c>
 800a38a:	4bcb      	ldr	r3, [pc, #812]	@ (800a6b8 <UART_SetConfig+0x69c>)
 800a38c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a38e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a392:	2b28      	cmp	r3, #40	@ 0x28
 800a394:	d86c      	bhi.n	800a470 <UART_SetConfig+0x454>
 800a396:	a201      	add	r2, pc, #4	@ (adr r2, 800a39c <UART_SetConfig+0x380>)
 800a398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a39c:	0800a441 	.word	0x0800a441
 800a3a0:	0800a471 	.word	0x0800a471
 800a3a4:	0800a471 	.word	0x0800a471
 800a3a8:	0800a471 	.word	0x0800a471
 800a3ac:	0800a471 	.word	0x0800a471
 800a3b0:	0800a471 	.word	0x0800a471
 800a3b4:	0800a471 	.word	0x0800a471
 800a3b8:	0800a471 	.word	0x0800a471
 800a3bc:	0800a449 	.word	0x0800a449
 800a3c0:	0800a471 	.word	0x0800a471
 800a3c4:	0800a471 	.word	0x0800a471
 800a3c8:	0800a471 	.word	0x0800a471
 800a3cc:	0800a471 	.word	0x0800a471
 800a3d0:	0800a471 	.word	0x0800a471
 800a3d4:	0800a471 	.word	0x0800a471
 800a3d8:	0800a471 	.word	0x0800a471
 800a3dc:	0800a451 	.word	0x0800a451
 800a3e0:	0800a471 	.word	0x0800a471
 800a3e4:	0800a471 	.word	0x0800a471
 800a3e8:	0800a471 	.word	0x0800a471
 800a3ec:	0800a471 	.word	0x0800a471
 800a3f0:	0800a471 	.word	0x0800a471
 800a3f4:	0800a471 	.word	0x0800a471
 800a3f8:	0800a471 	.word	0x0800a471
 800a3fc:	0800a459 	.word	0x0800a459
 800a400:	0800a471 	.word	0x0800a471
 800a404:	0800a471 	.word	0x0800a471
 800a408:	0800a471 	.word	0x0800a471
 800a40c:	0800a471 	.word	0x0800a471
 800a410:	0800a471 	.word	0x0800a471
 800a414:	0800a471 	.word	0x0800a471
 800a418:	0800a471 	.word	0x0800a471
 800a41c:	0800a461 	.word	0x0800a461
 800a420:	0800a471 	.word	0x0800a471
 800a424:	0800a471 	.word	0x0800a471
 800a428:	0800a471 	.word	0x0800a471
 800a42c:	0800a471 	.word	0x0800a471
 800a430:	0800a471 	.word	0x0800a471
 800a434:	0800a471 	.word	0x0800a471
 800a438:	0800a471 	.word	0x0800a471
 800a43c:	0800a469 	.word	0x0800a469
 800a440:	2301      	movs	r3, #1
 800a442:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a446:	e0bc      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a448:	2304      	movs	r3, #4
 800a44a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a44e:	e0b8      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a450:	2308      	movs	r3, #8
 800a452:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a456:	e0b4      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a458:	2310      	movs	r3, #16
 800a45a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a45e:	e0b0      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a460:	2320      	movs	r3, #32
 800a462:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a466:	e0ac      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a468:	2340      	movs	r3, #64	@ 0x40
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a46e:	e0a8      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a470:	2380      	movs	r3, #128	@ 0x80
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a476:	e0a4      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a478:	697b      	ldr	r3, [r7, #20]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	4a8f      	ldr	r2, [pc, #572]	@ (800a6bc <UART_SetConfig+0x6a0>)
 800a47e:	4293      	cmp	r3, r2
 800a480:	d130      	bne.n	800a4e4 <UART_SetConfig+0x4c8>
 800a482:	4b8d      	ldr	r3, [pc, #564]	@ (800a6b8 <UART_SetConfig+0x69c>)
 800a484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a486:	f003 0307 	and.w	r3, r3, #7
 800a48a:	2b05      	cmp	r3, #5
 800a48c:	d826      	bhi.n	800a4dc <UART_SetConfig+0x4c0>
 800a48e:	a201      	add	r2, pc, #4	@ (adr r2, 800a494 <UART_SetConfig+0x478>)
 800a490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a494:	0800a4ad 	.word	0x0800a4ad
 800a498:	0800a4b5 	.word	0x0800a4b5
 800a49c:	0800a4bd 	.word	0x0800a4bd
 800a4a0:	0800a4c5 	.word	0x0800a4c5
 800a4a4:	0800a4cd 	.word	0x0800a4cd
 800a4a8:	0800a4d5 	.word	0x0800a4d5
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4b2:	e086      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4b4:	2304      	movs	r3, #4
 800a4b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ba:	e082      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4bc:	2308      	movs	r3, #8
 800a4be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4c2:	e07e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4c4:	2310      	movs	r3, #16
 800a4c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ca:	e07a      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4cc:	2320      	movs	r3, #32
 800a4ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4d2:	e076      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4d4:	2340      	movs	r3, #64	@ 0x40
 800a4d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4da:	e072      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4dc:	2380      	movs	r3, #128	@ 0x80
 800a4de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e2:	e06e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a4e4:	697b      	ldr	r3, [r7, #20]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a75      	ldr	r2, [pc, #468]	@ (800a6c0 <UART_SetConfig+0x6a4>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d130      	bne.n	800a550 <UART_SetConfig+0x534>
 800a4ee:	4b72      	ldr	r3, [pc, #456]	@ (800a6b8 <UART_SetConfig+0x69c>)
 800a4f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4f2:	f003 0307 	and.w	r3, r3, #7
 800a4f6:	2b05      	cmp	r3, #5
 800a4f8:	d826      	bhi.n	800a548 <UART_SetConfig+0x52c>
 800a4fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a500 <UART_SetConfig+0x4e4>)
 800a4fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a500:	0800a519 	.word	0x0800a519
 800a504:	0800a521 	.word	0x0800a521
 800a508:	0800a529 	.word	0x0800a529
 800a50c:	0800a531 	.word	0x0800a531
 800a510:	0800a539 	.word	0x0800a539
 800a514:	0800a541 	.word	0x0800a541
 800a518:	2300      	movs	r3, #0
 800a51a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a51e:	e050      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a520:	2304      	movs	r3, #4
 800a522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a526:	e04c      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a528:	2308      	movs	r3, #8
 800a52a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a52e:	e048      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a530:	2310      	movs	r3, #16
 800a532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a536:	e044      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a538:	2320      	movs	r3, #32
 800a53a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a53e:	e040      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a540:	2340      	movs	r3, #64	@ 0x40
 800a542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a546:	e03c      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a548:	2380      	movs	r3, #128	@ 0x80
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54e:	e038      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a550:	697b      	ldr	r3, [r7, #20]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	4a5b      	ldr	r2, [pc, #364]	@ (800a6c4 <UART_SetConfig+0x6a8>)
 800a556:	4293      	cmp	r3, r2
 800a558:	d130      	bne.n	800a5bc <UART_SetConfig+0x5a0>
 800a55a:	4b57      	ldr	r3, [pc, #348]	@ (800a6b8 <UART_SetConfig+0x69c>)
 800a55c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a55e:	f003 0307 	and.w	r3, r3, #7
 800a562:	2b05      	cmp	r3, #5
 800a564:	d826      	bhi.n	800a5b4 <UART_SetConfig+0x598>
 800a566:	a201      	add	r2, pc, #4	@ (adr r2, 800a56c <UART_SetConfig+0x550>)
 800a568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56c:	0800a585 	.word	0x0800a585
 800a570:	0800a58d 	.word	0x0800a58d
 800a574:	0800a595 	.word	0x0800a595
 800a578:	0800a59d 	.word	0x0800a59d
 800a57c:	0800a5a5 	.word	0x0800a5a5
 800a580:	0800a5ad 	.word	0x0800a5ad
 800a584:	2302      	movs	r3, #2
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a58a:	e01a      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a58c:	2304      	movs	r3, #4
 800a58e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a592:	e016      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a594:	2308      	movs	r3, #8
 800a596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a59a:	e012      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a59c:	2310      	movs	r3, #16
 800a59e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5a2:	e00e      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a5a4:	2320      	movs	r3, #32
 800a5a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5aa:	e00a      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a5ac:	2340      	movs	r3, #64	@ 0x40
 800a5ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5b2:	e006      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a5b4:	2380      	movs	r3, #128	@ 0x80
 800a5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ba:	e002      	b.n	800a5c2 <UART_SetConfig+0x5a6>
 800a5bc:	2380      	movs	r3, #128	@ 0x80
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4a3f      	ldr	r2, [pc, #252]	@ (800a6c4 <UART_SetConfig+0x6a8>)
 800a5c8:	4293      	cmp	r3, r2
 800a5ca:	f040 80f8 	bne.w	800a7be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a5ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a5d2:	2b20      	cmp	r3, #32
 800a5d4:	dc46      	bgt.n	800a664 <UART_SetConfig+0x648>
 800a5d6:	2b02      	cmp	r3, #2
 800a5d8:	f2c0 8082 	blt.w	800a6e0 <UART_SetConfig+0x6c4>
 800a5dc:	3b02      	subs	r3, #2
 800a5de:	2b1e      	cmp	r3, #30
 800a5e0:	d87e      	bhi.n	800a6e0 <UART_SetConfig+0x6c4>
 800a5e2:	a201      	add	r2, pc, #4	@ (adr r2, 800a5e8 <UART_SetConfig+0x5cc>)
 800a5e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5e8:	0800a66b 	.word	0x0800a66b
 800a5ec:	0800a6e1 	.word	0x0800a6e1
 800a5f0:	0800a673 	.word	0x0800a673
 800a5f4:	0800a6e1 	.word	0x0800a6e1
 800a5f8:	0800a6e1 	.word	0x0800a6e1
 800a5fc:	0800a6e1 	.word	0x0800a6e1
 800a600:	0800a683 	.word	0x0800a683
 800a604:	0800a6e1 	.word	0x0800a6e1
 800a608:	0800a6e1 	.word	0x0800a6e1
 800a60c:	0800a6e1 	.word	0x0800a6e1
 800a610:	0800a6e1 	.word	0x0800a6e1
 800a614:	0800a6e1 	.word	0x0800a6e1
 800a618:	0800a6e1 	.word	0x0800a6e1
 800a61c:	0800a6e1 	.word	0x0800a6e1
 800a620:	0800a693 	.word	0x0800a693
 800a624:	0800a6e1 	.word	0x0800a6e1
 800a628:	0800a6e1 	.word	0x0800a6e1
 800a62c:	0800a6e1 	.word	0x0800a6e1
 800a630:	0800a6e1 	.word	0x0800a6e1
 800a634:	0800a6e1 	.word	0x0800a6e1
 800a638:	0800a6e1 	.word	0x0800a6e1
 800a63c:	0800a6e1 	.word	0x0800a6e1
 800a640:	0800a6e1 	.word	0x0800a6e1
 800a644:	0800a6e1 	.word	0x0800a6e1
 800a648:	0800a6e1 	.word	0x0800a6e1
 800a64c:	0800a6e1 	.word	0x0800a6e1
 800a650:	0800a6e1 	.word	0x0800a6e1
 800a654:	0800a6e1 	.word	0x0800a6e1
 800a658:	0800a6e1 	.word	0x0800a6e1
 800a65c:	0800a6e1 	.word	0x0800a6e1
 800a660:	0800a6d3 	.word	0x0800a6d3
 800a664:	2b40      	cmp	r3, #64	@ 0x40
 800a666:	d037      	beq.n	800a6d8 <UART_SetConfig+0x6bc>
 800a668:	e03a      	b.n	800a6e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a66a:	f7fe f83d 	bl	80086e8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a66e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a670:	e03c      	b.n	800a6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a676:	4618      	mov	r0, r3
 800a678:	f7fe f84c 	bl	8008714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a67c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a67e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a680:	e034      	b.n	800a6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a682:	f107 0318 	add.w	r3, r7, #24
 800a686:	4618      	mov	r0, r3
 800a688:	f7fe f998 	bl	80089bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a68c:	69fb      	ldr	r3, [r7, #28]
 800a68e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a690:	e02c      	b.n	800a6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a692:	4b09      	ldr	r3, [pc, #36]	@ (800a6b8 <UART_SetConfig+0x69c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0320 	and.w	r3, r3, #32
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d016      	beq.n	800a6cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a69e:	4b06      	ldr	r3, [pc, #24]	@ (800a6b8 <UART_SetConfig+0x69c>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	08db      	lsrs	r3, r3, #3
 800a6a4:	f003 0303 	and.w	r3, r3, #3
 800a6a8:	4a07      	ldr	r2, [pc, #28]	@ (800a6c8 <UART_SetConfig+0x6ac>)
 800a6aa:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6b0:	e01c      	b.n	800a6ec <UART_SetConfig+0x6d0>
 800a6b2:	bf00      	nop
 800a6b4:	40011400 	.word	0x40011400
 800a6b8:	58024400 	.word	0x58024400
 800a6bc:	40007800 	.word	0x40007800
 800a6c0:	40007c00 	.word	0x40007c00
 800a6c4:	58000c00 	.word	0x58000c00
 800a6c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a6cc:	4b9d      	ldr	r3, [pc, #628]	@ (800a944 <UART_SetConfig+0x928>)
 800a6ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d0:	e00c      	b.n	800a6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a6d2:	4b9d      	ldr	r3, [pc, #628]	@ (800a948 <UART_SetConfig+0x92c>)
 800a6d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6d6:	e009      	b.n	800a6ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6de:	e005      	b.n	800a6ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a6ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	f000 81de 	beq.w	800aab0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f8:	4a94      	ldr	r2, [pc, #592]	@ (800a94c <UART_SetConfig+0x930>)
 800a6fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6fe:	461a      	mov	r2, r3
 800a700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a702:	fbb3 f3f2 	udiv	r3, r3, r2
 800a706:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	685a      	ldr	r2, [r3, #4]
 800a70c:	4613      	mov	r3, r2
 800a70e:	005b      	lsls	r3, r3, #1
 800a710:	4413      	add	r3, r2
 800a712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a714:	429a      	cmp	r2, r3
 800a716:	d305      	bcc.n	800a724 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a71e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a720:	429a      	cmp	r2, r3
 800a722:	d903      	bls.n	800a72c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a72a:	e1c1      	b.n	800aab0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a72c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a72e:	2200      	movs	r2, #0
 800a730:	60bb      	str	r3, [r7, #8]
 800a732:	60fa      	str	r2, [r7, #12]
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a738:	4a84      	ldr	r2, [pc, #528]	@ (800a94c <UART_SetConfig+0x930>)
 800a73a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a73e:	b29b      	uxth	r3, r3
 800a740:	2200      	movs	r2, #0
 800a742:	603b      	str	r3, [r7, #0]
 800a744:	607a      	str	r2, [r7, #4]
 800a746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a74a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a74e:	f7f5 fe7f 	bl	8000450 <__aeabi_uldivmod>
 800a752:	4602      	mov	r2, r0
 800a754:	460b      	mov	r3, r1
 800a756:	4610      	mov	r0, r2
 800a758:	4619      	mov	r1, r3
 800a75a:	f04f 0200 	mov.w	r2, #0
 800a75e:	f04f 0300 	mov.w	r3, #0
 800a762:	020b      	lsls	r3, r1, #8
 800a764:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a768:	0202      	lsls	r2, r0, #8
 800a76a:	6979      	ldr	r1, [r7, #20]
 800a76c:	6849      	ldr	r1, [r1, #4]
 800a76e:	0849      	lsrs	r1, r1, #1
 800a770:	2000      	movs	r0, #0
 800a772:	460c      	mov	r4, r1
 800a774:	4605      	mov	r5, r0
 800a776:	eb12 0804 	adds.w	r8, r2, r4
 800a77a:	eb43 0905 	adc.w	r9, r3, r5
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	685b      	ldr	r3, [r3, #4]
 800a782:	2200      	movs	r2, #0
 800a784:	469a      	mov	sl, r3
 800a786:	4693      	mov	fp, r2
 800a788:	4652      	mov	r2, sl
 800a78a:	465b      	mov	r3, fp
 800a78c:	4640      	mov	r0, r8
 800a78e:	4649      	mov	r1, r9
 800a790:	f7f5 fe5e 	bl	8000450 <__aeabi_uldivmod>
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	4613      	mov	r3, r2
 800a79a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7a2:	d308      	bcc.n	800a7b6 <UART_SetConfig+0x79a>
 800a7a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a7aa:	d204      	bcs.n	800a7b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a7b2:	60da      	str	r2, [r3, #12]
 800a7b4:	e17c      	b.n	800aab0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a7bc:	e178      	b.n	800aab0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a7c6:	f040 80c5 	bne.w	800a954 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a7ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a7ce:	2b20      	cmp	r3, #32
 800a7d0:	dc48      	bgt.n	800a864 <UART_SetConfig+0x848>
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	db7b      	blt.n	800a8ce <UART_SetConfig+0x8b2>
 800a7d6:	2b20      	cmp	r3, #32
 800a7d8:	d879      	bhi.n	800a8ce <UART_SetConfig+0x8b2>
 800a7da:	a201      	add	r2, pc, #4	@ (adr r2, 800a7e0 <UART_SetConfig+0x7c4>)
 800a7dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7e0:	0800a86b 	.word	0x0800a86b
 800a7e4:	0800a873 	.word	0x0800a873
 800a7e8:	0800a8cf 	.word	0x0800a8cf
 800a7ec:	0800a8cf 	.word	0x0800a8cf
 800a7f0:	0800a87b 	.word	0x0800a87b
 800a7f4:	0800a8cf 	.word	0x0800a8cf
 800a7f8:	0800a8cf 	.word	0x0800a8cf
 800a7fc:	0800a8cf 	.word	0x0800a8cf
 800a800:	0800a88b 	.word	0x0800a88b
 800a804:	0800a8cf 	.word	0x0800a8cf
 800a808:	0800a8cf 	.word	0x0800a8cf
 800a80c:	0800a8cf 	.word	0x0800a8cf
 800a810:	0800a8cf 	.word	0x0800a8cf
 800a814:	0800a8cf 	.word	0x0800a8cf
 800a818:	0800a8cf 	.word	0x0800a8cf
 800a81c:	0800a8cf 	.word	0x0800a8cf
 800a820:	0800a89b 	.word	0x0800a89b
 800a824:	0800a8cf 	.word	0x0800a8cf
 800a828:	0800a8cf 	.word	0x0800a8cf
 800a82c:	0800a8cf 	.word	0x0800a8cf
 800a830:	0800a8cf 	.word	0x0800a8cf
 800a834:	0800a8cf 	.word	0x0800a8cf
 800a838:	0800a8cf 	.word	0x0800a8cf
 800a83c:	0800a8cf 	.word	0x0800a8cf
 800a840:	0800a8cf 	.word	0x0800a8cf
 800a844:	0800a8cf 	.word	0x0800a8cf
 800a848:	0800a8cf 	.word	0x0800a8cf
 800a84c:	0800a8cf 	.word	0x0800a8cf
 800a850:	0800a8cf 	.word	0x0800a8cf
 800a854:	0800a8cf 	.word	0x0800a8cf
 800a858:	0800a8cf 	.word	0x0800a8cf
 800a85c:	0800a8cf 	.word	0x0800a8cf
 800a860:	0800a8c1 	.word	0x0800a8c1
 800a864:	2b40      	cmp	r3, #64	@ 0x40
 800a866:	d02e      	beq.n	800a8c6 <UART_SetConfig+0x8aa>
 800a868:	e031      	b.n	800a8ce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a86a:	f7fc fcc5 	bl	80071f8 <HAL_RCC_GetPCLK1Freq>
 800a86e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a870:	e033      	b.n	800a8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a872:	f7fc fcd7 	bl	8007224 <HAL_RCC_GetPCLK2Freq>
 800a876:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a878:	e02f      	b.n	800a8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a87a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a87e:	4618      	mov	r0, r3
 800a880:	f7fd ff48 	bl	8008714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a888:	e027      	b.n	800a8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a88a:	f107 0318 	add.w	r3, r7, #24
 800a88e:	4618      	mov	r0, r3
 800a890:	f7fe f894 	bl	80089bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a894:	69fb      	ldr	r3, [r7, #28]
 800a896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a898:	e01f      	b.n	800a8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a89a:	4b2d      	ldr	r3, [pc, #180]	@ (800a950 <UART_SetConfig+0x934>)
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f003 0320 	and.w	r3, r3, #32
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d009      	beq.n	800a8ba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8a6:	4b2a      	ldr	r3, [pc, #168]	@ (800a950 <UART_SetConfig+0x934>)
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	08db      	lsrs	r3, r3, #3
 800a8ac:	f003 0303 	and.w	r3, r3, #3
 800a8b0:	4a24      	ldr	r2, [pc, #144]	@ (800a944 <UART_SetConfig+0x928>)
 800a8b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8b8:	e00f      	b.n	800a8da <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a8ba:	4b22      	ldr	r3, [pc, #136]	@ (800a944 <UART_SetConfig+0x928>)
 800a8bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8be:	e00c      	b.n	800a8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8c0:	4b21      	ldr	r3, [pc, #132]	@ (800a948 <UART_SetConfig+0x92c>)
 800a8c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c4:	e009      	b.n	800a8da <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8cc:	e005      	b.n	800a8da <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a8d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a8da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	f000 80e7 	beq.w	800aab0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e6:	4a19      	ldr	r2, [pc, #100]	@ (800a94c <UART_SetConfig+0x930>)
 800a8e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8ec:	461a      	mov	r2, r3
 800a8ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8f4:	005a      	lsls	r2, r3, #1
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	085b      	lsrs	r3, r3, #1
 800a8fc:	441a      	add	r2, r3
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	685b      	ldr	r3, [r3, #4]
 800a902:	fbb2 f3f3 	udiv	r3, r2, r3
 800a906:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a90a:	2b0f      	cmp	r3, #15
 800a90c:	d916      	bls.n	800a93c <UART_SetConfig+0x920>
 800a90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a914:	d212      	bcs.n	800a93c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a918:	b29b      	uxth	r3, r3
 800a91a:	f023 030f 	bic.w	r3, r3, #15
 800a91e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a922:	085b      	lsrs	r3, r3, #1
 800a924:	b29b      	uxth	r3, r3
 800a926:	f003 0307 	and.w	r3, r3, #7
 800a92a:	b29a      	uxth	r2, r3
 800a92c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a92e:	4313      	orrs	r3, r2
 800a930:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a932:	697b      	ldr	r3, [r7, #20]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a938:	60da      	str	r2, [r3, #12]
 800a93a:	e0b9      	b.n	800aab0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a93c:	2301      	movs	r3, #1
 800a93e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a942:	e0b5      	b.n	800aab0 <UART_SetConfig+0xa94>
 800a944:	03d09000 	.word	0x03d09000
 800a948:	003d0900 	.word	0x003d0900
 800a94c:	0801cc94 	.word	0x0801cc94
 800a950:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a954:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a958:	2b20      	cmp	r3, #32
 800a95a:	dc49      	bgt.n	800a9f0 <UART_SetConfig+0x9d4>
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	db7c      	blt.n	800aa5a <UART_SetConfig+0xa3e>
 800a960:	2b20      	cmp	r3, #32
 800a962:	d87a      	bhi.n	800aa5a <UART_SetConfig+0xa3e>
 800a964:	a201      	add	r2, pc, #4	@ (adr r2, 800a96c <UART_SetConfig+0x950>)
 800a966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96a:	bf00      	nop
 800a96c:	0800a9f7 	.word	0x0800a9f7
 800a970:	0800a9ff 	.word	0x0800a9ff
 800a974:	0800aa5b 	.word	0x0800aa5b
 800a978:	0800aa5b 	.word	0x0800aa5b
 800a97c:	0800aa07 	.word	0x0800aa07
 800a980:	0800aa5b 	.word	0x0800aa5b
 800a984:	0800aa5b 	.word	0x0800aa5b
 800a988:	0800aa5b 	.word	0x0800aa5b
 800a98c:	0800aa17 	.word	0x0800aa17
 800a990:	0800aa5b 	.word	0x0800aa5b
 800a994:	0800aa5b 	.word	0x0800aa5b
 800a998:	0800aa5b 	.word	0x0800aa5b
 800a99c:	0800aa5b 	.word	0x0800aa5b
 800a9a0:	0800aa5b 	.word	0x0800aa5b
 800a9a4:	0800aa5b 	.word	0x0800aa5b
 800a9a8:	0800aa5b 	.word	0x0800aa5b
 800a9ac:	0800aa27 	.word	0x0800aa27
 800a9b0:	0800aa5b 	.word	0x0800aa5b
 800a9b4:	0800aa5b 	.word	0x0800aa5b
 800a9b8:	0800aa5b 	.word	0x0800aa5b
 800a9bc:	0800aa5b 	.word	0x0800aa5b
 800a9c0:	0800aa5b 	.word	0x0800aa5b
 800a9c4:	0800aa5b 	.word	0x0800aa5b
 800a9c8:	0800aa5b 	.word	0x0800aa5b
 800a9cc:	0800aa5b 	.word	0x0800aa5b
 800a9d0:	0800aa5b 	.word	0x0800aa5b
 800a9d4:	0800aa5b 	.word	0x0800aa5b
 800a9d8:	0800aa5b 	.word	0x0800aa5b
 800a9dc:	0800aa5b 	.word	0x0800aa5b
 800a9e0:	0800aa5b 	.word	0x0800aa5b
 800a9e4:	0800aa5b 	.word	0x0800aa5b
 800a9e8:	0800aa5b 	.word	0x0800aa5b
 800a9ec:	0800aa4d 	.word	0x0800aa4d
 800a9f0:	2b40      	cmp	r3, #64	@ 0x40
 800a9f2:	d02e      	beq.n	800aa52 <UART_SetConfig+0xa36>
 800a9f4:	e031      	b.n	800aa5a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9f6:	f7fc fbff 	bl	80071f8 <HAL_RCC_GetPCLK1Freq>
 800a9fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9fc:	e033      	b.n	800aa66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9fe:	f7fc fc11 	bl	8007224 <HAL_RCC_GetPCLK2Freq>
 800aa02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa04:	e02f      	b.n	800aa66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fd fe82 	bl	8008714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa14:	e027      	b.n	800aa66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa16:	f107 0318 	add.w	r3, r7, #24
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fd ffce 	bl	80089bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa24:	e01f      	b.n	800aa66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa26:	4b2d      	ldr	r3, [pc, #180]	@ (800aadc <UART_SetConfig+0xac0>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f003 0320 	and.w	r3, r3, #32
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d009      	beq.n	800aa46 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa32:	4b2a      	ldr	r3, [pc, #168]	@ (800aadc <UART_SetConfig+0xac0>)
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	08db      	lsrs	r3, r3, #3
 800aa38:	f003 0303 	and.w	r3, r3, #3
 800aa3c:	4a28      	ldr	r2, [pc, #160]	@ (800aae0 <UART_SetConfig+0xac4>)
 800aa3e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa44:	e00f      	b.n	800aa66 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aa46:	4b26      	ldr	r3, [pc, #152]	@ (800aae0 <UART_SetConfig+0xac4>)
 800aa48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa4a:	e00c      	b.n	800aa66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa4c:	4b25      	ldr	r3, [pc, #148]	@ (800aae4 <UART_SetConfig+0xac8>)
 800aa4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa50:	e009      	b.n	800aa66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa58:	e005      	b.n	800aa66 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aa5e:	2301      	movs	r3, #1
 800aa60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aa64:	bf00      	nop
    }

    if (pclk != 0U)
 800aa66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d021      	beq.n	800aab0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa70:	4a1d      	ldr	r2, [pc, #116]	@ (800aae8 <UART_SetConfig+0xacc>)
 800aa72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa76:	461a      	mov	r2, r3
 800aa78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa7a:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	085b      	lsrs	r3, r3, #1
 800aa84:	441a      	add	r2, r3
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa92:	2b0f      	cmp	r3, #15
 800aa94:	d909      	bls.n	800aaaa <UART_SetConfig+0xa8e>
 800aa96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa9c:	d205      	bcs.n	800aaaa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	60da      	str	r2, [r3, #12]
 800aaa8:	e002      	b.n	800aab0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2201      	movs	r2, #1
 800aab4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2200      	movs	r2, #0
 800aac4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	2200      	movs	r2, #0
 800aaca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aacc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3748      	adds	r7, #72	@ 0x48
 800aad4:	46bd      	mov	sp, r7
 800aad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aada:	bf00      	nop
 800aadc:	58024400 	.word	0x58024400
 800aae0:	03d09000 	.word	0x03d09000
 800aae4:	003d0900 	.word	0x003d0900
 800aae8:	0801cc94 	.word	0x0801cc94

0800aaec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaf8:	f003 0308 	and.w	r3, r3, #8
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00a      	beq.n	800ab16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab1a:	f003 0301 	and.w	r3, r3, #1
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00a      	beq.n	800ab38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	430a      	orrs	r2, r1
 800ab36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3c:	f003 0302 	and.w	r3, r3, #2
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00a      	beq.n	800ab5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	430a      	orrs	r2, r1
 800ab58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab5e:	f003 0304 	and.w	r3, r3, #4
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d00a      	beq.n	800ab7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	685b      	ldr	r3, [r3, #4]
 800ab6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	430a      	orrs	r2, r1
 800ab7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab80:	f003 0310 	and.w	r3, r3, #16
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00a      	beq.n	800ab9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	689b      	ldr	r3, [r3, #8]
 800ab8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	430a      	orrs	r2, r1
 800ab9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aba2:	f003 0320 	and.w	r3, r3, #32
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d00a      	beq.n	800abc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	430a      	orrs	r2, r1
 800abbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d01a      	beq.n	800ac02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	685b      	ldr	r3, [r3, #4]
 800abd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	430a      	orrs	r2, r1
 800abe0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abe6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abea:	d10a      	bne.n	800ac02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	430a      	orrs	r2, r1
 800ac00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00a      	beq.n	800ac24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	685b      	ldr	r3, [r3, #4]
 800ac14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	430a      	orrs	r2, r1
 800ac22:	605a      	str	r2, [r3, #4]
  }
}
 800ac24:	bf00      	nop
 800ac26:	370c      	adds	r7, #12
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2e:	4770      	bx	lr

0800ac30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b098      	sub	sp, #96	@ 0x60
 800ac34:	af02      	add	r7, sp, #8
 800ac36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac40:	f7f7 fc6a 	bl	8002518 <HAL_GetTick>
 800ac44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0308 	and.w	r3, r3, #8
 800ac50:	2b08      	cmp	r3, #8
 800ac52:	d12f      	bne.n	800acb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac58:	9300      	str	r3, [sp, #0]
 800ac5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f88e 	bl	800ad84 <UART_WaitOnFlagUntilTimeout>
 800ac68:	4603      	mov	r3, r0
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d022      	beq.n	800acb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac76:	e853 3f00 	ldrex	r3, [r3]
 800ac7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac82:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac8c:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac94:	e841 2300 	strex	r3, r2, [r1]
 800ac98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d1e6      	bne.n	800ac6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2220      	movs	r2, #32
 800aca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800acb0:	2303      	movs	r3, #3
 800acb2:	e063      	b.n	800ad7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	f003 0304 	and.w	r3, r3, #4
 800acbe:	2b04      	cmp	r3, #4
 800acc0:	d149      	bne.n	800ad56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800acc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800acc6:	9300      	str	r3, [sp, #0]
 800acc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800acca:	2200      	movs	r2, #0
 800accc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f857 	bl	800ad84 <UART_WaitOnFlagUntilTimeout>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d03c      	beq.n	800ad56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ace4:	e853 3f00 	ldrex	r3, [r3]
 800ace8:	623b      	str	r3, [r7, #32]
   return(result);
 800acea:	6a3b      	ldr	r3, [r7, #32]
 800acec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	461a      	mov	r2, r3
 800acf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acfa:	633b      	str	r3, [r7, #48]	@ 0x30
 800acfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ad00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ad02:	e841 2300 	strex	r3, r2, [r1]
 800ad06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ad08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1e6      	bne.n	800acdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	3308      	adds	r3, #8
 800ad14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad16:	693b      	ldr	r3, [r7, #16]
 800ad18:	e853 3f00 	ldrex	r3, [r3]
 800ad1c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f023 0301 	bic.w	r3, r3, #1
 800ad24:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	3308      	adds	r3, #8
 800ad2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad2e:	61fa      	str	r2, [r7, #28]
 800ad30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad32:	69b9      	ldr	r1, [r7, #24]
 800ad34:	69fa      	ldr	r2, [r7, #28]
 800ad36:	e841 2300 	strex	r3, r2, [r1]
 800ad3a:	617b      	str	r3, [r7, #20]
   return(result);
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d1e5      	bne.n	800ad0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2220      	movs	r2, #32
 800ad46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad52:	2303      	movs	r3, #3
 800ad54:	e012      	b.n	800ad7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2220      	movs	r2, #32
 800ad5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	2220      	movs	r2, #32
 800ad62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3758      	adds	r7, #88	@ 0x58
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	60f8      	str	r0, [r7, #12]
 800ad8c:	60b9      	str	r1, [r7, #8]
 800ad8e:	603b      	str	r3, [r7, #0]
 800ad90:	4613      	mov	r3, r2
 800ad92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad94:	e04f      	b.n	800ae36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad96:	69bb      	ldr	r3, [r7, #24]
 800ad98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad9c:	d04b      	beq.n	800ae36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad9e:	f7f7 fbbb 	bl	8002518 <HAL_GetTick>
 800ada2:	4602      	mov	r2, r0
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	1ad3      	subs	r3, r2, r3
 800ada8:	69ba      	ldr	r2, [r7, #24]
 800adaa:	429a      	cmp	r2, r3
 800adac:	d302      	bcc.n	800adb4 <UART_WaitOnFlagUntilTimeout+0x30>
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d101      	bne.n	800adb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800adb4:	2303      	movs	r3, #3
 800adb6:	e04e      	b.n	800ae56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	f003 0304 	and.w	r3, r3, #4
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d037      	beq.n	800ae36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	2b80      	cmp	r3, #128	@ 0x80
 800adca:	d034      	beq.n	800ae36 <UART_WaitOnFlagUntilTimeout+0xb2>
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b40      	cmp	r3, #64	@ 0x40
 800add0:	d031      	beq.n	800ae36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	69db      	ldr	r3, [r3, #28]
 800add8:	f003 0308 	and.w	r3, r3, #8
 800addc:	2b08      	cmp	r3, #8
 800adde:	d110      	bne.n	800ae02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	2208      	movs	r2, #8
 800ade6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ade8:	68f8      	ldr	r0, [r7, #12]
 800adea:	f000 f921 	bl	800b030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2208      	movs	r2, #8
 800adf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	2200      	movs	r2, #0
 800adfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800adfe:	2301      	movs	r3, #1
 800ae00:	e029      	b.n	800ae56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	69db      	ldr	r3, [r3, #28]
 800ae08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ae0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ae10:	d111      	bne.n	800ae36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ae1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ae1c:	68f8      	ldr	r0, [r7, #12]
 800ae1e:	f000 f907 	bl	800b030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2220      	movs	r2, #32
 800ae26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800ae32:	2303      	movs	r3, #3
 800ae34:	e00f      	b.n	800ae56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	69da      	ldr	r2, [r3, #28]
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	4013      	ands	r3, r2
 800ae40:	68ba      	ldr	r2, [r7, #8]
 800ae42:	429a      	cmp	r2, r3
 800ae44:	bf0c      	ite	eq
 800ae46:	2301      	moveq	r3, #1
 800ae48:	2300      	movne	r3, #0
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	79fb      	ldrb	r3, [r7, #7]
 800ae50:	429a      	cmp	r2, r3
 800ae52:	d0a0      	beq.n	800ad96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae54:	2300      	movs	r3, #0
}
 800ae56:	4618      	mov	r0, r3
 800ae58:	3710      	adds	r7, #16
 800ae5a:	46bd      	mov	sp, r7
 800ae5c:	bd80      	pop	{r7, pc}
	...

0800ae60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b096      	sub	sp, #88	@ 0x58
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	60f8      	str	r0, [r7, #12]
 800ae68:	60b9      	str	r1, [r7, #8]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	88fa      	ldrh	r2, [r7, #6]
 800ae78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	2222      	movs	r2, #34	@ 0x22
 800ae88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d02d      	beq.n	800aef2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ae9c:	4a40      	ldr	r2, [pc, #256]	@ (800afa0 <UART_Start_Receive_DMA+0x140>)
 800ae9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aea6:	4a3f      	ldr	r2, [pc, #252]	@ (800afa4 <UART_Start_Receive_DMA+0x144>)
 800aea8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeb0:	4a3d      	ldr	r2, [pc, #244]	@ (800afa8 <UART_Start_Receive_DMA+0x148>)
 800aeb2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800aeba:	2200      	movs	r2, #0
 800aebc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	3324      	adds	r3, #36	@ 0x24
 800aeca:	4619      	mov	r1, r3
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aed0:	461a      	mov	r2, r3
 800aed2:	88fb      	ldrh	r3, [r7, #6]
 800aed4:	f7f7 ff88 	bl	8002de8 <HAL_DMA_Start_IT>
 800aed8:	4603      	mov	r3, r0
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d009      	beq.n	800aef2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	2210      	movs	r2, #16
 800aee2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2220      	movs	r2, #32
 800aeea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800aeee:	2301      	movs	r3, #1
 800aef0:	e051      	b.n	800af96 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d018      	beq.n	800af2c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800af02:	e853 3f00 	ldrex	r3, [r3]
 800af06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800af08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af0e:	657b      	str	r3, [r7, #84]	@ 0x54
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	461a      	mov	r2, r3
 800af16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800af18:	64bb      	str	r3, [r7, #72]	@ 0x48
 800af1a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800af1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800af20:	e841 2300 	strex	r3, r2, [r1]
 800af24:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800af26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d1e6      	bne.n	800aefa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	3308      	adds	r3, #8
 800af32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af36:	e853 3f00 	ldrex	r3, [r3]
 800af3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3e:	f043 0301 	orr.w	r3, r3, #1
 800af42:	653b      	str	r3, [r7, #80]	@ 0x50
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	3308      	adds	r3, #8
 800af4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800af4c:	637a      	str	r2, [r7, #52]	@ 0x34
 800af4e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800af52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800af54:	e841 2300 	strex	r3, r2, [r1]
 800af58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800af5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d1e5      	bne.n	800af2c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	3308      	adds	r3, #8
 800af66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	e853 3f00 	ldrex	r3, [r3]
 800af6e:	613b      	str	r3, [r7, #16]
   return(result);
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	3308      	adds	r3, #8
 800af7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800af80:	623a      	str	r2, [r7, #32]
 800af82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af84:	69f9      	ldr	r1, [r7, #28]
 800af86:	6a3a      	ldr	r2, [r7, #32]
 800af88:	e841 2300 	strex	r3, r2, [r1]
 800af8c:	61bb      	str	r3, [r7, #24]
   return(result);
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d1e5      	bne.n	800af60 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800af94:	2300      	movs	r3, #0
}
 800af96:	4618      	mov	r0, r3
 800af98:	3758      	adds	r7, #88	@ 0x58
 800af9a:	46bd      	mov	sp, r7
 800af9c:	bd80      	pop	{r7, pc}
 800af9e:	bf00      	nop
 800afa0:	0800b1af 	.word	0x0800b1af
 800afa4:	0800b2d7 	.word	0x0800b2d7
 800afa8:	0800b315 	.word	0x0800b315

0800afac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800afac:	b480      	push	{r7}
 800afae:	b08f      	sub	sp, #60	@ 0x3c
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	e853 3f00 	ldrex	r3, [r3]
 800afc0:	61fb      	str	r3, [r7, #28]
   return(result);
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800afc8:	637b      	str	r3, [r7, #52]	@ 0x34
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	461a      	mov	r2, r3
 800afd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800afd4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800afd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800afda:	e841 2300 	strex	r3, r2, [r1]
 800afde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800afe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d1e6      	bne.n	800afb4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	3308      	adds	r3, #8
 800afec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	e853 3f00 	ldrex	r3, [r3]
 800aff4:	60bb      	str	r3, [r7, #8]
   return(result);
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800affc:	633b      	str	r3, [r7, #48]	@ 0x30
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	3308      	adds	r3, #8
 800b004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b006:	61ba      	str	r2, [r7, #24]
 800b008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b00a:	6979      	ldr	r1, [r7, #20]
 800b00c:	69ba      	ldr	r2, [r7, #24]
 800b00e:	e841 2300 	strex	r3, r2, [r1]
 800b012:	613b      	str	r3, [r7, #16]
   return(result);
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d1e5      	bne.n	800afe6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	2220      	movs	r2, #32
 800b01e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b022:	bf00      	nop
 800b024:	373c      	adds	r7, #60	@ 0x3c
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
	...

0800b030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b030:	b480      	push	{r7}
 800b032:	b095      	sub	sp, #84	@ 0x54
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b040:	e853 3f00 	ldrex	r3, [r3]
 800b044:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b04c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	461a      	mov	r2, r3
 800b054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b056:	643b      	str	r3, [r7, #64]	@ 0x40
 800b058:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b05a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b05c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b05e:	e841 2300 	strex	r3, r2, [r1]
 800b062:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b066:	2b00      	cmp	r3, #0
 800b068:	d1e6      	bne.n	800b038 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	3308      	adds	r3, #8
 800b070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b072:	6a3b      	ldr	r3, [r7, #32]
 800b074:	e853 3f00 	ldrex	r3, [r3]
 800b078:	61fb      	str	r3, [r7, #28]
   return(result);
 800b07a:	69fa      	ldr	r2, [r7, #28]
 800b07c:	4b1e      	ldr	r3, [pc, #120]	@ (800b0f8 <UART_EndRxTransfer+0xc8>)
 800b07e:	4013      	ands	r3, r2
 800b080:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	3308      	adds	r3, #8
 800b088:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b08a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b08c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b08e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b090:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b092:	e841 2300 	strex	r3, r2, [r1]
 800b096:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1e5      	bne.n	800b06a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d118      	bne.n	800b0d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	e853 3f00 	ldrex	r3, [r3]
 800b0b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	f023 0310 	bic.w	r3, r3, #16
 800b0ba:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b0c4:	61bb      	str	r3, [r7, #24]
 800b0c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c8:	6979      	ldr	r1, [r7, #20]
 800b0ca:	69ba      	ldr	r2, [r7, #24]
 800b0cc:	e841 2300 	strex	r3, r2, [r1]
 800b0d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1e6      	bne.n	800b0a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2220      	movs	r2, #32
 800b0dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b0ec:	bf00      	nop
 800b0ee:	3754      	adds	r7, #84	@ 0x54
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f6:	4770      	bx	lr
 800b0f8:	effffffe 	.word	0xeffffffe

0800b0fc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b090      	sub	sp, #64	@ 0x40
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b108:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	69db      	ldr	r3, [r3, #28]
 800b10e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b112:	d037      	beq.n	800b184 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800b114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b116:	2200      	movs	r2, #0
 800b118:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b11c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	3308      	adds	r3, #8
 800b122:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b126:	e853 3f00 	ldrex	r3, [r3]
 800b12a:	623b      	str	r3, [r7, #32]
   return(result);
 800b12c:	6a3b      	ldr	r3, [r7, #32]
 800b12e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b132:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	3308      	adds	r3, #8
 800b13a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b13c:	633a      	str	r2, [r7, #48]	@ 0x30
 800b13e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b140:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b144:	e841 2300 	strex	r3, r2, [r1]
 800b148:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d1e5      	bne.n	800b11c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	e853 3f00 	ldrex	r3, [r3]
 800b15c:	60fb      	str	r3, [r7, #12]
   return(result);
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b164:	637b      	str	r3, [r7, #52]	@ 0x34
 800b166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	461a      	mov	r2, r3
 800b16c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b16e:	61fb      	str	r3, [r7, #28]
 800b170:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b172:	69b9      	ldr	r1, [r7, #24]
 800b174:	69fa      	ldr	r2, [r7, #28]
 800b176:	e841 2300 	strex	r3, r2, [r1]
 800b17a:	617b      	str	r3, [r7, #20]
   return(result);
 800b17c:	697b      	ldr	r3, [r7, #20]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1e6      	bne.n	800b150 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b182:	e002      	b.n	800b18a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800b184:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b186:	f7fe ff0b 	bl	8009fa0 <HAL_UART_TxCpltCallback>
}
 800b18a:	bf00      	nop
 800b18c:	3740      	adds	r7, #64	@ 0x40
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b192:	b580      	push	{r7, lr}
 800b194:	b084      	sub	sp, #16
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b19e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f7fe ff07 	bl	8009fb4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1a6:	bf00      	nop
 800b1a8:	3710      	adds	r7, #16
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}

0800b1ae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b1ae:	b580      	push	{r7, lr}
 800b1b0:	b09c      	sub	sp, #112	@ 0x70
 800b1b2:	af00      	add	r7, sp, #0
 800b1b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	69db      	ldr	r3, [r3, #28]
 800b1c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b1c4:	d071      	beq.n	800b2aa <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800b1c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b1ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b1d6:	e853 3f00 	ldrex	r3, [r3]
 800b1da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b1dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b1de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b1e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b1e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b1ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b1ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b1f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b1f4:	e841 2300 	strex	r3, r2, [r1]
 800b1f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b1fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d1e6      	bne.n	800b1ce <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	3308      	adds	r3, #8
 800b206:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b20a:	e853 3f00 	ldrex	r3, [r3]
 800b20e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b212:	f023 0301 	bic.w	r3, r3, #1
 800b216:	667b      	str	r3, [r7, #100]	@ 0x64
 800b218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	3308      	adds	r3, #8
 800b21e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800b220:	647a      	str	r2, [r7, #68]	@ 0x44
 800b222:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b224:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b228:	e841 2300 	strex	r3, r2, [r1]
 800b22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b22e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b230:	2b00      	cmp	r3, #0
 800b232:	d1e5      	bne.n	800b200 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	3308      	adds	r3, #8
 800b23a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b23e:	e853 3f00 	ldrex	r3, [r3]
 800b242:	623b      	str	r3, [r7, #32]
   return(result);
 800b244:	6a3b      	ldr	r3, [r7, #32]
 800b246:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b24a:	663b      	str	r3, [r7, #96]	@ 0x60
 800b24c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	3308      	adds	r3, #8
 800b252:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b254:	633a      	str	r2, [r7, #48]	@ 0x30
 800b256:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b258:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b25a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b25c:	e841 2300 	strex	r3, r2, [r1]
 800b260:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1e5      	bne.n	800b234 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b26a:	2220      	movs	r2, #32
 800b26c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b274:	2b01      	cmp	r3, #1
 800b276:	d118      	bne.n	800b2aa <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	e853 3f00 	ldrex	r3, [r3]
 800b284:	60fb      	str	r3, [r7, #12]
   return(result);
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f023 0310 	bic.w	r3, r3, #16
 800b28c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b28e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	461a      	mov	r2, r3
 800b294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b296:	61fb      	str	r3, [r7, #28]
 800b298:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b29a:	69b9      	ldr	r1, [r7, #24]
 800b29c:	69fa      	ldr	r2, [r7, #28]
 800b29e:	e841 2300 	strex	r3, r2, [r1]
 800b2a2:	617b      	str	r3, [r7, #20]
   return(result);
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1e6      	bne.n	800b278 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b2aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2ac:	2200      	movs	r2, #0
 800b2ae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d107      	bne.n	800b2c8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b2b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b2ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b2be:	4619      	mov	r1, r3
 800b2c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b2c2:	f7fe fe9f 	bl	800a004 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b2c6:	e002      	b.n	800b2ce <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b2c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b2ca:	f7fe fe7d 	bl	8009fc8 <HAL_UART_RxCpltCallback>
}
 800b2ce:	bf00      	nop
 800b2d0:	3770      	adds	r7, #112	@ 0x70
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b084      	sub	sp, #16
 800b2da:	af00      	add	r7, sp, #0
 800b2dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2e2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2ee:	2b01      	cmp	r3, #1
 800b2f0:	d109      	bne.n	800b306 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b2f8:	085b      	lsrs	r3, r3, #1
 800b2fa:	b29b      	uxth	r3, r3
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	68f8      	ldr	r0, [r7, #12]
 800b300:	f7fe fe80 	bl	800a004 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b304:	e002      	b.n	800b30c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f7fe fe68 	bl	8009fdc <HAL_UART_RxHalfCpltCallback>
}
 800b30c:	bf00      	nop
 800b30e:	3710      	adds	r7, #16
 800b310:	46bd      	mov	sp, r7
 800b312:	bd80      	pop	{r7, pc}

0800b314 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b086      	sub	sp, #24
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b320:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b328:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b32a:	697b      	ldr	r3, [r7, #20]
 800b32c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b330:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b332:	697b      	ldr	r3, [r7, #20]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	689b      	ldr	r3, [r3, #8]
 800b338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b33c:	2b80      	cmp	r3, #128	@ 0x80
 800b33e:	d109      	bne.n	800b354 <UART_DMAError+0x40>
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	2b21      	cmp	r3, #33	@ 0x21
 800b344:	d106      	bne.n	800b354 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b346:	697b      	ldr	r3, [r7, #20]
 800b348:	2200      	movs	r2, #0
 800b34a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b34e:	6978      	ldr	r0, [r7, #20]
 800b350:	f7ff fe2c 	bl	800afac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	689b      	ldr	r3, [r3, #8]
 800b35a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b35e:	2b40      	cmp	r3, #64	@ 0x40
 800b360:	d109      	bne.n	800b376 <UART_DMAError+0x62>
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2b22      	cmp	r3, #34	@ 0x22
 800b366:	d106      	bne.n	800b376 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b368:	697b      	ldr	r3, [r7, #20]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b370:	6978      	ldr	r0, [r7, #20]
 800b372:	f7ff fe5d 	bl	800b030 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b37c:	f043 0210 	orr.w	r2, r3, #16
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b386:	6978      	ldr	r0, [r7, #20]
 800b388:	f7fe fe32 	bl	8009ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b38c:	bf00      	nop
 800b38e:	3718      	adds	r7, #24
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}

0800b394 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b084      	sub	sp, #16
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3b2:	68f8      	ldr	r0, [r7, #12]
 800b3b4:	f7fe fe1c 	bl	8009ff0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3b8:	bf00      	nop
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b088      	sub	sp, #32
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	e853 3f00 	ldrex	r3, [r3]
 800b3d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b3dc:	61fb      	str	r3, [r7, #28]
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	61bb      	str	r3, [r7, #24]
 800b3e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ea:	6979      	ldr	r1, [r7, #20]
 800b3ec:	69ba      	ldr	r2, [r7, #24]
 800b3ee:	e841 2300 	strex	r3, r2, [r1]
 800b3f2:	613b      	str	r3, [r7, #16]
   return(result);
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d1e6      	bne.n	800b3c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	2220      	movs	r2, #32
 800b3fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b408:	6878      	ldr	r0, [r7, #4]
 800b40a:	f7fe fdc9 	bl	8009fa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b40e:	bf00      	nop
 800b410:	3720      	adds	r7, #32
 800b412:	46bd      	mov	sp, r7
 800b414:	bd80      	pop	{r7, pc}

0800b416 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b416:	b480      	push	{r7}
 800b418:	b083      	sub	sp, #12
 800b41a:	af00      	add	r7, sp, #0
 800b41c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b41e:	bf00      	nop
 800b420:	370c      	adds	r7, #12
 800b422:	46bd      	mov	sp, r7
 800b424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b428:	4770      	bx	lr

0800b42a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b42a:	b480      	push	{r7}
 800b42c:	b083      	sub	sp, #12
 800b42e:	af00      	add	r7, sp, #0
 800b430:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b432:	bf00      	nop
 800b434:	370c      	adds	r7, #12
 800b436:	46bd      	mov	sp, r7
 800b438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43c:	4770      	bx	lr

0800b43e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b43e:	b480      	push	{r7}
 800b440:	b083      	sub	sp, #12
 800b442:	af00      	add	r7, sp, #0
 800b444:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b446:	bf00      	nop
 800b448:	370c      	adds	r7, #12
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr

0800b452 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b452:	b480      	push	{r7}
 800b454:	b085      	sub	sp, #20
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b460:	2b01      	cmp	r3, #1
 800b462:	d101      	bne.n	800b468 <HAL_UARTEx_DisableFifoMode+0x16>
 800b464:	2302      	movs	r3, #2
 800b466:	e027      	b.n	800b4b8 <HAL_UARTEx_DisableFifoMode+0x66>
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2224      	movs	r2, #36	@ 0x24
 800b474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	681a      	ldr	r2, [r3, #0]
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f022 0201 	bic.w	r2, r2, #1
 800b48e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b496:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2200      	movs	r2, #0
 800b49c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	68fa      	ldr	r2, [r7, #12]
 800b4a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	2220      	movs	r2, #32
 800b4aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr

0800b4c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
 800b4cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d101      	bne.n	800b4dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b4d8:	2302      	movs	r3, #2
 800b4da:	e02d      	b.n	800b538 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2224      	movs	r2, #36	@ 0x24
 800b4e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	681a      	ldr	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f022 0201 	bic.w	r2, r2, #1
 800b502:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	689b      	ldr	r3, [r3, #8]
 800b50a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	430a      	orrs	r2, r1
 800b516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b518:	6878      	ldr	r0, [r7, #4]
 800b51a:	f000 f84f 	bl	800b5bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	2220      	movs	r2, #32
 800b52a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	2200      	movs	r2, #0
 800b532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b536:	2300      	movs	r3, #0
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b550:	2b01      	cmp	r3, #1
 800b552:	d101      	bne.n	800b558 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b554:	2302      	movs	r3, #2
 800b556:	e02d      	b.n	800b5b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2224      	movs	r2, #36	@ 0x24
 800b564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f022 0201 	bic.w	r2, r2, #1
 800b57e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	430a      	orrs	r2, r1
 800b592:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 f811 	bl	800b5bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	68fa      	ldr	r2, [r7, #12]
 800b5a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2220      	movs	r2, #32
 800b5a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3710      	adds	r7, #16
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b085      	sub	sp, #20
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d108      	bne.n	800b5de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	2201      	movs	r2, #1
 800b5d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2201      	movs	r2, #1
 800b5d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b5dc:	e031      	b.n	800b642 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b5de:	2310      	movs	r3, #16
 800b5e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b5e2:	2310      	movs	r3, #16
 800b5e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	689b      	ldr	r3, [r3, #8]
 800b5ec:	0e5b      	lsrs	r3, r3, #25
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	f003 0307 	and.w	r3, r3, #7
 800b5f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	689b      	ldr	r3, [r3, #8]
 800b5fc:	0f5b      	lsrs	r3, r3, #29
 800b5fe:	b2db      	uxtb	r3, r3
 800b600:	f003 0307 	and.w	r3, r3, #7
 800b604:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b606:	7bbb      	ldrb	r3, [r7, #14]
 800b608:	7b3a      	ldrb	r2, [r7, #12]
 800b60a:	4911      	ldr	r1, [pc, #68]	@ (800b650 <UARTEx_SetNbDataToProcess+0x94>)
 800b60c:	5c8a      	ldrb	r2, [r1, r2]
 800b60e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b612:	7b3a      	ldrb	r2, [r7, #12]
 800b614:	490f      	ldr	r1, [pc, #60]	@ (800b654 <UARTEx_SetNbDataToProcess+0x98>)
 800b616:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b618:	fb93 f3f2 	sdiv	r3, r3, r2
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b624:	7bfb      	ldrb	r3, [r7, #15]
 800b626:	7b7a      	ldrb	r2, [r7, #13]
 800b628:	4909      	ldr	r1, [pc, #36]	@ (800b650 <UARTEx_SetNbDataToProcess+0x94>)
 800b62a:	5c8a      	ldrb	r2, [r1, r2]
 800b62c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b630:	7b7a      	ldrb	r2, [r7, #13]
 800b632:	4908      	ldr	r1, [pc, #32]	@ (800b654 <UARTEx_SetNbDataToProcess+0x98>)
 800b634:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b636:	fb93 f3f2 	sdiv	r3, r3, r2
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b642:	bf00      	nop
 800b644:	3714      	adds	r7, #20
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
 800b64e:	bf00      	nop
 800b650:	0801ccac 	.word	0x0801ccac
 800b654:	0801ccb4 	.word	0x0801ccb4

0800b658 <__NVIC_SetPriority>:
{
 800b658:	b480      	push	{r7}
 800b65a:	b083      	sub	sp, #12
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	4603      	mov	r3, r0
 800b660:	6039      	str	r1, [r7, #0]
 800b662:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b664:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	db0a      	blt.n	800b682 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	b2da      	uxtb	r2, r3
 800b670:	490c      	ldr	r1, [pc, #48]	@ (800b6a4 <__NVIC_SetPriority+0x4c>)
 800b672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b676:	0112      	lsls	r2, r2, #4
 800b678:	b2d2      	uxtb	r2, r2
 800b67a:	440b      	add	r3, r1
 800b67c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b680:	e00a      	b.n	800b698 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	b2da      	uxtb	r2, r3
 800b686:	4908      	ldr	r1, [pc, #32]	@ (800b6a8 <__NVIC_SetPriority+0x50>)
 800b688:	88fb      	ldrh	r3, [r7, #6]
 800b68a:	f003 030f 	and.w	r3, r3, #15
 800b68e:	3b04      	subs	r3, #4
 800b690:	0112      	lsls	r2, r2, #4
 800b692:	b2d2      	uxtb	r2, r2
 800b694:	440b      	add	r3, r1
 800b696:	761a      	strb	r2, [r3, #24]
}
 800b698:	bf00      	nop
 800b69a:	370c      	adds	r7, #12
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr
 800b6a4:	e000e100 	.word	0xe000e100
 800b6a8:	e000ed00 	.word	0xe000ed00

0800b6ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b6b0:	4b05      	ldr	r3, [pc, #20]	@ (800b6c8 <SysTick_Handler+0x1c>)
 800b6b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b6b4:	f002 f97e 	bl	800d9b4 <xTaskGetSchedulerState>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d001      	beq.n	800b6c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b6be:	f000 fd9b 	bl	800c1f8 <xPortSysTickHandler>
  }
}
 800b6c2:	bf00      	nop
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	e000e010 	.word	0xe000e010

0800b6cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b6d0:	2100      	movs	r1, #0
 800b6d2:	f06f 0004 	mvn.w	r0, #4
 800b6d6:	f7ff ffbf 	bl	800b658 <__NVIC_SetPriority>
#endif
}
 800b6da:	bf00      	nop
 800b6dc:	bd80      	pop	{r7, pc}
	...

0800b6e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b6e6:	f3ef 8305 	mrs	r3, IPSR
 800b6ea:	603b      	str	r3, [r7, #0]
  return(result);
 800b6ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d003      	beq.n	800b6fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b6f2:	f06f 0305 	mvn.w	r3, #5
 800b6f6:	607b      	str	r3, [r7, #4]
 800b6f8:	e00c      	b.n	800b714 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b6fa:	4b0a      	ldr	r3, [pc, #40]	@ (800b724 <osKernelInitialize+0x44>)
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d105      	bne.n	800b70e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b702:	4b08      	ldr	r3, [pc, #32]	@ (800b724 <osKernelInitialize+0x44>)
 800b704:	2201      	movs	r2, #1
 800b706:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b708:	2300      	movs	r3, #0
 800b70a:	607b      	str	r3, [r7, #4]
 800b70c:	e002      	b.n	800b714 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b70e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b712:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b714:	687b      	ldr	r3, [r7, #4]
}
 800b716:	4618      	mov	r0, r3
 800b718:	370c      	adds	r7, #12
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	24009bf0 	.word	0x24009bf0

0800b728 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b72e:	f3ef 8305 	mrs	r3, IPSR
 800b732:	603b      	str	r3, [r7, #0]
  return(result);
 800b734:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b736:	2b00      	cmp	r3, #0
 800b738:	d003      	beq.n	800b742 <osKernelStart+0x1a>
    stat = osErrorISR;
 800b73a:	f06f 0305 	mvn.w	r3, #5
 800b73e:	607b      	str	r3, [r7, #4]
 800b740:	e010      	b.n	800b764 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b742:	4b0b      	ldr	r3, [pc, #44]	@ (800b770 <osKernelStart+0x48>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d109      	bne.n	800b75e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b74a:	f7ff ffbf 	bl	800b6cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b74e:	4b08      	ldr	r3, [pc, #32]	@ (800b770 <osKernelStart+0x48>)
 800b750:	2202      	movs	r2, #2
 800b752:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b754:	f001 fcb8 	bl	800d0c8 <vTaskStartScheduler>
      stat = osOK;
 800b758:	2300      	movs	r3, #0
 800b75a:	607b      	str	r3, [r7, #4]
 800b75c:	e002      	b.n	800b764 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b75e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b762:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b764:	687b      	ldr	r3, [r7, #4]
}
 800b766:	4618      	mov	r0, r3
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	24009bf0 	.word	0x24009bf0

0800b774 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b774:	b580      	push	{r7, lr}
 800b776:	b08e      	sub	sp, #56	@ 0x38
 800b778:	af04      	add	r7, sp, #16
 800b77a:	60f8      	str	r0, [r7, #12]
 800b77c:	60b9      	str	r1, [r7, #8]
 800b77e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b780:	2300      	movs	r3, #0
 800b782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b784:	f3ef 8305 	mrs	r3, IPSR
 800b788:	617b      	str	r3, [r7, #20]
  return(result);
 800b78a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d17e      	bne.n	800b88e <osThreadNew+0x11a>
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d07b      	beq.n	800b88e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b796:	2380      	movs	r3, #128	@ 0x80
 800b798:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b79a:	2318      	movs	r3, #24
 800b79c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b7a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b7a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d045      	beq.n	800b83a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d002      	beq.n	800b7bc <osThreadNew+0x48>
        name = attr->name;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	699b      	ldr	r3, [r3, #24]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d002      	beq.n	800b7ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	699b      	ldr	r3, [r3, #24]
 800b7c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b7ca:	69fb      	ldr	r3, [r7, #28]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d008      	beq.n	800b7e2 <osThreadNew+0x6e>
 800b7d0:	69fb      	ldr	r3, [r7, #28]
 800b7d2:	2b38      	cmp	r3, #56	@ 0x38
 800b7d4:	d805      	bhi.n	800b7e2 <osThreadNew+0x6e>
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	685b      	ldr	r3, [r3, #4]
 800b7da:	f003 0301 	and.w	r3, r3, #1
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d001      	beq.n	800b7e6 <osThreadNew+0x72>
        return (NULL);
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	e054      	b.n	800b890 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	695b      	ldr	r3, [r3, #20]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d003      	beq.n	800b7f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	695b      	ldr	r3, [r3, #20]
 800b7f2:	089b      	lsrs	r3, r3, #2
 800b7f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	689b      	ldr	r3, [r3, #8]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d00e      	beq.n	800b81c <osThreadNew+0xa8>
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	68db      	ldr	r3, [r3, #12]
 800b802:	2b5b      	cmp	r3, #91	@ 0x5b
 800b804:	d90a      	bls.n	800b81c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d006      	beq.n	800b81c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	695b      	ldr	r3, [r3, #20]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d002      	beq.n	800b81c <osThreadNew+0xa8>
        mem = 1;
 800b816:	2301      	movs	r3, #1
 800b818:	61bb      	str	r3, [r7, #24]
 800b81a:	e010      	b.n	800b83e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	689b      	ldr	r3, [r3, #8]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d10c      	bne.n	800b83e <osThreadNew+0xca>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d108      	bne.n	800b83e <osThreadNew+0xca>
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	691b      	ldr	r3, [r3, #16]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d104      	bne.n	800b83e <osThreadNew+0xca>
          mem = 0;
 800b834:	2300      	movs	r3, #0
 800b836:	61bb      	str	r3, [r7, #24]
 800b838:	e001      	b.n	800b83e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b83e:	69bb      	ldr	r3, [r7, #24]
 800b840:	2b01      	cmp	r3, #1
 800b842:	d110      	bne.n	800b866 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b848:	687a      	ldr	r2, [r7, #4]
 800b84a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b84c:	9202      	str	r2, [sp, #8]
 800b84e:	9301      	str	r3, [sp, #4]
 800b850:	69fb      	ldr	r3, [r7, #28]
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	6a3a      	ldr	r2, [r7, #32]
 800b858:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b85a:	68f8      	ldr	r0, [r7, #12]
 800b85c:	f001 fa58 	bl	800cd10 <xTaskCreateStatic>
 800b860:	4603      	mov	r3, r0
 800b862:	613b      	str	r3, [r7, #16]
 800b864:	e013      	b.n	800b88e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b866:	69bb      	ldr	r3, [r7, #24]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d110      	bne.n	800b88e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	b29a      	uxth	r2, r3
 800b870:	f107 0310 	add.w	r3, r7, #16
 800b874:	9301      	str	r3, [sp, #4]
 800b876:	69fb      	ldr	r3, [r7, #28]
 800b878:	9300      	str	r3, [sp, #0]
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f001 faa6 	bl	800cdd0 <xTaskCreate>
 800b884:	4603      	mov	r3, r0
 800b886:	2b01      	cmp	r3, #1
 800b888:	d001      	beq.n	800b88e <osThreadNew+0x11a>
            hTask = NULL;
 800b88a:	2300      	movs	r3, #0
 800b88c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b88e:	693b      	ldr	r3, [r7, #16]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3728      	adds	r7, #40	@ 0x28
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8a0:	f3ef 8305 	mrs	r3, IPSR
 800b8a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d003      	beq.n	800b8b4 <osDelay+0x1c>
    stat = osErrorISR;
 800b8ac:	f06f 0305 	mvn.w	r3, #5
 800b8b0:	60fb      	str	r3, [r7, #12]
 800b8b2:	e007      	b.n	800b8c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d002      	beq.n	800b8c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f001 fbcc 	bl	800d05c <vTaskDelay>
    }
  }

  return (stat);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3710      	adds	r7, #16
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	bd80      	pop	{r7, pc}
	...

0800b8d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b8d0:	b480      	push	{r7}
 800b8d2:	b085      	sub	sp, #20
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	60f8      	str	r0, [r7, #12]
 800b8d8:	60b9      	str	r1, [r7, #8]
 800b8da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	4a07      	ldr	r2, [pc, #28]	@ (800b8fc <vApplicationGetIdleTaskMemory+0x2c>)
 800b8e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	4a06      	ldr	r2, [pc, #24]	@ (800b900 <vApplicationGetIdleTaskMemory+0x30>)
 800b8e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2280      	movs	r2, #128	@ 0x80
 800b8ec:	601a      	str	r2, [r3, #0]
}
 800b8ee:	bf00      	nop
 800b8f0:	3714      	adds	r7, #20
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop
 800b8fc:	24009bf4 	.word	0x24009bf4
 800b900:	24009c50 	.word	0x24009c50

0800b904 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b904:	b480      	push	{r7}
 800b906:	b085      	sub	sp, #20
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	4a07      	ldr	r2, [pc, #28]	@ (800b930 <vApplicationGetTimerTaskMemory+0x2c>)
 800b914:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	4a06      	ldr	r2, [pc, #24]	@ (800b934 <vApplicationGetTimerTaskMemory+0x30>)
 800b91a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b922:	601a      	str	r2, [r3, #0]
}
 800b924:	bf00      	nop
 800b926:	3714      	adds	r7, #20
 800b928:	46bd      	mov	sp, r7
 800b92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92e:	4770      	bx	lr
 800b930:	24009e50 	.word	0x24009e50
 800b934:	24009eac 	.word	0x24009eac

0800b938 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b08a      	sub	sp, #40	@ 0x28
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b940:	2300      	movs	r3, #0
 800b942:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b944:	f001 fc28 	bl	800d198 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b948:	4b5c      	ldr	r3, [pc, #368]	@ (800babc <pvPortMalloc+0x184>)
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d101      	bne.n	800b954 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b950:	f000 f924 	bl	800bb9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b954:	4b5a      	ldr	r3, [pc, #360]	@ (800bac0 <pvPortMalloc+0x188>)
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	4013      	ands	r3, r2
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	f040 8095 	bne.w	800ba8c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d01e      	beq.n	800b9a6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b968:	2208      	movs	r2, #8
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	4413      	add	r3, r2
 800b96e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f003 0307 	and.w	r3, r3, #7
 800b976:	2b00      	cmp	r3, #0
 800b978:	d015      	beq.n	800b9a6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f023 0307 	bic.w	r3, r3, #7
 800b980:	3308      	adds	r3, #8
 800b982:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	f003 0307 	and.w	r3, r3, #7
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d00b      	beq.n	800b9a6 <pvPortMalloc+0x6e>
	__asm volatile
 800b98e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b992:	f383 8811 	msr	BASEPRI, r3
 800b996:	f3bf 8f6f 	isb	sy
 800b99a:	f3bf 8f4f 	dsb	sy
 800b99e:	617b      	str	r3, [r7, #20]
}
 800b9a0:	bf00      	nop
 800b9a2:	bf00      	nop
 800b9a4:	e7fd      	b.n	800b9a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d06f      	beq.n	800ba8c <pvPortMalloc+0x154>
 800b9ac:	4b45      	ldr	r3, [pc, #276]	@ (800bac4 <pvPortMalloc+0x18c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	687a      	ldr	r2, [r7, #4]
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d86a      	bhi.n	800ba8c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b9b6:	4b44      	ldr	r3, [pc, #272]	@ (800bac8 <pvPortMalloc+0x190>)
 800b9b8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b9ba:	4b43      	ldr	r3, [pc, #268]	@ (800bac8 <pvPortMalloc+0x190>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9c0:	e004      	b.n	800b9cc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b9c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ce:	685b      	ldr	r3, [r3, #4]
 800b9d0:	687a      	ldr	r2, [r7, #4]
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d903      	bls.n	800b9de <pvPortMalloc+0xa6>
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d1f1      	bne.n	800b9c2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b9de:	4b37      	ldr	r3, [pc, #220]	@ (800babc <pvPortMalloc+0x184>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d051      	beq.n	800ba8c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b9e8:	6a3b      	ldr	r3, [r7, #32]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2208      	movs	r2, #8
 800b9ee:	4413      	add	r3, r2
 800b9f0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	6a3b      	ldr	r3, [r7, #32]
 800b9f8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9fc:	685a      	ldr	r2, [r3, #4]
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	1ad2      	subs	r2, r2, r3
 800ba02:	2308      	movs	r3, #8
 800ba04:	005b      	lsls	r3, r3, #1
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d920      	bls.n	800ba4c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	4413      	add	r3, r2
 800ba10:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba12:	69bb      	ldr	r3, [r7, #24]
 800ba14:	f003 0307 	and.w	r3, r3, #7
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d00b      	beq.n	800ba34 <pvPortMalloc+0xfc>
	__asm volatile
 800ba1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba20:	f383 8811 	msr	BASEPRI, r3
 800ba24:	f3bf 8f6f 	isb	sy
 800ba28:	f3bf 8f4f 	dsb	sy
 800ba2c:	613b      	str	r3, [r7, #16]
}
 800ba2e:	bf00      	nop
 800ba30:	bf00      	nop
 800ba32:	e7fd      	b.n	800ba30 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba36:	685a      	ldr	r2, [r3, #4]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	1ad2      	subs	r2, r2, r3
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ba40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ba46:	69b8      	ldr	r0, [r7, #24]
 800ba48:	f000 f90a 	bl	800bc60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ba4c:	4b1d      	ldr	r3, [pc, #116]	@ (800bac4 <pvPortMalloc+0x18c>)
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	1ad3      	subs	r3, r2, r3
 800ba56:	4a1b      	ldr	r2, [pc, #108]	@ (800bac4 <pvPortMalloc+0x18c>)
 800ba58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ba5a:	4b1a      	ldr	r3, [pc, #104]	@ (800bac4 <pvPortMalloc+0x18c>)
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	4b1b      	ldr	r3, [pc, #108]	@ (800bacc <pvPortMalloc+0x194>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d203      	bcs.n	800ba6e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ba66:	4b17      	ldr	r3, [pc, #92]	@ (800bac4 <pvPortMalloc+0x18c>)
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	4a18      	ldr	r2, [pc, #96]	@ (800bacc <pvPortMalloc+0x194>)
 800ba6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ba6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba70:	685a      	ldr	r2, [r3, #4]
 800ba72:	4b13      	ldr	r3, [pc, #76]	@ (800bac0 <pvPortMalloc+0x188>)
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	431a      	orrs	r2, r3
 800ba78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ba7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba7e:	2200      	movs	r2, #0
 800ba80:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ba82:	4b13      	ldr	r3, [pc, #76]	@ (800bad0 <pvPortMalloc+0x198>)
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3301      	adds	r3, #1
 800ba88:	4a11      	ldr	r2, [pc, #68]	@ (800bad0 <pvPortMalloc+0x198>)
 800ba8a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ba8c:	f001 fb92 	bl	800d1b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba90:	69fb      	ldr	r3, [r7, #28]
 800ba92:	f003 0307 	and.w	r3, r3, #7
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d00b      	beq.n	800bab2 <pvPortMalloc+0x17a>
	__asm volatile
 800ba9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	60fb      	str	r3, [r7, #12]
}
 800baac:	bf00      	nop
 800baae:	bf00      	nop
 800bab0:	e7fd      	b.n	800baae <pvPortMalloc+0x176>
	return pvReturn;
 800bab2:	69fb      	ldr	r3, [r7, #28]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3728      	adds	r7, #40	@ 0x28
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	2400deb4 	.word	0x2400deb4
 800bac0:	2400dec8 	.word	0x2400dec8
 800bac4:	2400deb8 	.word	0x2400deb8
 800bac8:	2400deac 	.word	0x2400deac
 800bacc:	2400debc 	.word	0x2400debc
 800bad0:	2400dec0 	.word	0x2400dec0

0800bad4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d04f      	beq.n	800bb86 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bae6:	2308      	movs	r3, #8
 800bae8:	425b      	negs	r3, r3
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	4413      	add	r3, r2
 800baee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800baf0:	697b      	ldr	r3, [r7, #20]
 800baf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	685a      	ldr	r2, [r3, #4]
 800baf8:	4b25      	ldr	r3, [pc, #148]	@ (800bb90 <vPortFree+0xbc>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4013      	ands	r3, r2
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10b      	bne.n	800bb1a <vPortFree+0x46>
	__asm volatile
 800bb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb06:	f383 8811 	msr	BASEPRI, r3
 800bb0a:	f3bf 8f6f 	isb	sy
 800bb0e:	f3bf 8f4f 	dsb	sy
 800bb12:	60fb      	str	r3, [r7, #12]
}
 800bb14:	bf00      	nop
 800bb16:	bf00      	nop
 800bb18:	e7fd      	b.n	800bb16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d00b      	beq.n	800bb3a <vPortFree+0x66>
	__asm volatile
 800bb22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb26:	f383 8811 	msr	BASEPRI, r3
 800bb2a:	f3bf 8f6f 	isb	sy
 800bb2e:	f3bf 8f4f 	dsb	sy
 800bb32:	60bb      	str	r3, [r7, #8]
}
 800bb34:	bf00      	nop
 800bb36:	bf00      	nop
 800bb38:	e7fd      	b.n	800bb36 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	685a      	ldr	r2, [r3, #4]
 800bb3e:	4b14      	ldr	r3, [pc, #80]	@ (800bb90 <vPortFree+0xbc>)
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	4013      	ands	r3, r2
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d01e      	beq.n	800bb86 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d11a      	bne.n	800bb86 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	685a      	ldr	r2, [r3, #4]
 800bb54:	4b0e      	ldr	r3, [pc, #56]	@ (800bb90 <vPortFree+0xbc>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	43db      	mvns	r3, r3
 800bb5a:	401a      	ands	r2, r3
 800bb5c:	693b      	ldr	r3, [r7, #16]
 800bb5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bb60:	f001 fb1a 	bl	800d198 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	685a      	ldr	r2, [r3, #4]
 800bb68:	4b0a      	ldr	r3, [pc, #40]	@ (800bb94 <vPortFree+0xc0>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4413      	add	r3, r2
 800bb6e:	4a09      	ldr	r2, [pc, #36]	@ (800bb94 <vPortFree+0xc0>)
 800bb70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bb72:	6938      	ldr	r0, [r7, #16]
 800bb74:	f000 f874 	bl	800bc60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bb78:	4b07      	ldr	r3, [pc, #28]	@ (800bb98 <vPortFree+0xc4>)
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	4a06      	ldr	r2, [pc, #24]	@ (800bb98 <vPortFree+0xc4>)
 800bb80:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bb82:	f001 fb17 	bl	800d1b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bb86:	bf00      	nop
 800bb88:	3718      	adds	r7, #24
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}
 800bb8e:	bf00      	nop
 800bb90:	2400dec8 	.word	0x2400dec8
 800bb94:	2400deb8 	.word	0x2400deb8
 800bb98:	2400dec4 	.word	0x2400dec4

0800bb9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bba2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bba6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bba8:	4b27      	ldr	r3, [pc, #156]	@ (800bc48 <prvHeapInit+0xac>)
 800bbaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f003 0307 	and.w	r3, r3, #7
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d00c      	beq.n	800bbd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbb6:	68fb      	ldr	r3, [r7, #12]
 800bbb8:	3307      	adds	r3, #7
 800bbba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	f023 0307 	bic.w	r3, r3, #7
 800bbc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbc4:	68ba      	ldr	r2, [r7, #8]
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	1ad3      	subs	r3, r2, r3
 800bbca:	4a1f      	ldr	r2, [pc, #124]	@ (800bc48 <prvHeapInit+0xac>)
 800bbcc:	4413      	add	r3, r2
 800bbce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bbd4:	4a1d      	ldr	r2, [pc, #116]	@ (800bc4c <prvHeapInit+0xb0>)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bbda:	4b1c      	ldr	r3, [pc, #112]	@ (800bc4c <prvHeapInit+0xb0>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bbe8:	2208      	movs	r2, #8
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	1a9b      	subs	r3, r3, r2
 800bbee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f023 0307 	bic.w	r3, r3, #7
 800bbf6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	4a15      	ldr	r2, [pc, #84]	@ (800bc50 <prvHeapInit+0xb4>)
 800bbfc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bbfe:	4b14      	ldr	r3, [pc, #80]	@ (800bc50 <prvHeapInit+0xb4>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	2200      	movs	r2, #0
 800bc04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc06:	4b12      	ldr	r3, [pc, #72]	@ (800bc50 <prvHeapInit+0xb4>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	1ad2      	subs	r2, r2, r3
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc1c:	4b0c      	ldr	r3, [pc, #48]	@ (800bc50 <prvHeapInit+0xb4>)
 800bc1e:	681a      	ldr	r2, [r3, #0]
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	4a0a      	ldr	r2, [pc, #40]	@ (800bc54 <prvHeapInit+0xb8>)
 800bc2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	4a09      	ldr	r2, [pc, #36]	@ (800bc58 <prvHeapInit+0xbc>)
 800bc32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc34:	4b09      	ldr	r3, [pc, #36]	@ (800bc5c <prvHeapInit+0xc0>)
 800bc36:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bc3a:	601a      	str	r2, [r3, #0]
}
 800bc3c:	bf00      	nop
 800bc3e:	3714      	adds	r7, #20
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr
 800bc48:	2400a2ac 	.word	0x2400a2ac
 800bc4c:	2400deac 	.word	0x2400deac
 800bc50:	2400deb4 	.word	0x2400deb4
 800bc54:	2400debc 	.word	0x2400debc
 800bc58:	2400deb8 	.word	0x2400deb8
 800bc5c:	2400dec8 	.word	0x2400dec8

0800bc60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc60:	b480      	push	{r7}
 800bc62:	b085      	sub	sp, #20
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bc68:	4b28      	ldr	r3, [pc, #160]	@ (800bd0c <prvInsertBlockIntoFreeList+0xac>)
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	e002      	b.n	800bc74 <prvInsertBlockIntoFreeList+0x14>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	60fb      	str	r3, [r7, #12]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	429a      	cmp	r2, r3
 800bc7c:	d8f7      	bhi.n	800bc6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	4413      	add	r3, r2
 800bc8a:	687a      	ldr	r2, [r7, #4]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d108      	bne.n	800bca2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	685a      	ldr	r2, [r3, #4]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	685b      	ldr	r3, [r3, #4]
 800bc98:	441a      	add	r2, r3
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	685b      	ldr	r3, [r3, #4]
 800bcaa:	68ba      	ldr	r2, [r7, #8]
 800bcac:	441a      	add	r2, r3
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d118      	bne.n	800bce8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	681a      	ldr	r2, [r3, #0]
 800bcba:	4b15      	ldr	r3, [pc, #84]	@ (800bd10 <prvInsertBlockIntoFreeList+0xb0>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	429a      	cmp	r2, r3
 800bcc0:	d00d      	beq.n	800bcde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	685a      	ldr	r2, [r3, #4]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	441a      	add	r2, r3
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	681a      	ldr	r2, [r3, #0]
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	601a      	str	r2, [r3, #0]
 800bcdc:	e008      	b.n	800bcf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bcde:	4b0c      	ldr	r3, [pc, #48]	@ (800bd10 <prvInsertBlockIntoFreeList+0xb0>)
 800bce0:	681a      	ldr	r2, [r3, #0]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	601a      	str	r2, [r3, #0]
 800bce6:	e003      	b.n	800bcf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681a      	ldr	r2, [r3, #0]
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d002      	beq.n	800bcfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bcfe:	bf00      	nop
 800bd00:	3714      	adds	r7, #20
 800bd02:	46bd      	mov	sp, r7
 800bd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd08:	4770      	bx	lr
 800bd0a:	bf00      	nop
 800bd0c:	2400deac 	.word	0x2400deac
 800bd10:	2400deb4 	.word	0x2400deb4

0800bd14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bd14:	b480      	push	{r7}
 800bd16:	b083      	sub	sp, #12
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f103 0208 	add.w	r2, r3, #8
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	f103 0208 	add.w	r2, r3, #8
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	f103 0208 	add.w	r2, r3, #8
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	2200      	movs	r2, #0
 800bd46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bd48:	bf00      	nop
 800bd4a:	370c      	adds	r7, #12
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd52:	4770      	bx	lr

0800bd54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bd54:	b480      	push	{r7}
 800bd56:	b083      	sub	sp, #12
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bd62:	bf00      	nop
 800bd64:	370c      	adds	r7, #12
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr

0800bd6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd6e:	b480      	push	{r7}
 800bd70:	b085      	sub	sp, #20
 800bd72:	af00      	add	r7, sp, #0
 800bd74:	6078      	str	r0, [r7, #4]
 800bd76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	685b      	ldr	r3, [r3, #4]
 800bd7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	68fa      	ldr	r2, [r7, #12]
 800bd82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	689a      	ldr	r2, [r3, #8]
 800bd88:	683b      	ldr	r3, [r7, #0]
 800bd8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	689b      	ldr	r3, [r3, #8]
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	1c5a      	adds	r2, r3, #1
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	601a      	str	r2, [r3, #0]
}
 800bdaa:	bf00      	nop
 800bdac:	3714      	adds	r7, #20
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb4:	4770      	bx	lr

0800bdb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdb6:	b480      	push	{r7}
 800bdb8:	b085      	sub	sp, #20
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
 800bdbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bdcc:	d103      	bne.n	800bdd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	691b      	ldr	r3, [r3, #16]
 800bdd2:	60fb      	str	r3, [r7, #12]
 800bdd4:	e00c      	b.n	800bdf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	3308      	adds	r3, #8
 800bdda:	60fb      	str	r3, [r7, #12]
 800bddc:	e002      	b.n	800bde4 <vListInsert+0x2e>
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	60fb      	str	r3, [r7, #12]
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68ba      	ldr	r2, [r7, #8]
 800bdec:	429a      	cmp	r2, r3
 800bdee:	d2f6      	bcs.n	800bdde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	685a      	ldr	r2, [r3, #4]
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	685b      	ldr	r3, [r3, #4]
 800bdfc:	683a      	ldr	r2, [r7, #0]
 800bdfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	68fa      	ldr	r2, [r7, #12]
 800be04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	683a      	ldr	r2, [r7, #0]
 800be0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	687a      	ldr	r2, [r7, #4]
 800be10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	1c5a      	adds	r2, r3, #1
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	601a      	str	r2, [r3, #0]
}
 800be1c:	bf00      	nop
 800be1e:	3714      	adds	r7, #20
 800be20:	46bd      	mov	sp, r7
 800be22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be26:	4770      	bx	lr

0800be28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800be28:	b480      	push	{r7}
 800be2a:	b085      	sub	sp, #20
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	685b      	ldr	r3, [r3, #4]
 800be3a:	687a      	ldr	r2, [r7, #4]
 800be3c:	6892      	ldr	r2, [r2, #8]
 800be3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	6852      	ldr	r2, [r2, #4]
 800be48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	429a      	cmp	r2, r3
 800be52:	d103      	bne.n	800be5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	689a      	ldr	r2, [r3, #8]
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2200      	movs	r2, #0
 800be60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	1e5a      	subs	r2, r3, #1
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
}
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be7c:	b480      	push	{r7}
 800be7e:	b085      	sub	sp, #20
 800be80:	af00      	add	r7, sp, #0
 800be82:	60f8      	str	r0, [r7, #12]
 800be84:	60b9      	str	r1, [r7, #8]
 800be86:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	3b04      	subs	r3, #4
 800be8c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800be94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3b04      	subs	r3, #4
 800be9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	f023 0201 	bic.w	r2, r3, #1
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	3b04      	subs	r3, #4
 800beaa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800beac:	4a0c      	ldr	r2, [pc, #48]	@ (800bee0 <pxPortInitialiseStack+0x64>)
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	3b14      	subs	r3, #20
 800beb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	3b04      	subs	r3, #4
 800bec2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	f06f 0202 	mvn.w	r2, #2
 800beca:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	3b20      	subs	r3, #32
 800bed0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bed2:	68fb      	ldr	r3, [r7, #12]
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3714      	adds	r7, #20
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr
 800bee0:	0800bee5 	.word	0x0800bee5

0800bee4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bee4:	b480      	push	{r7}
 800bee6:	b085      	sub	sp, #20
 800bee8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800beea:	2300      	movs	r3, #0
 800beec:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800beee:	4b13      	ldr	r3, [pc, #76]	@ (800bf3c <prvTaskExitError+0x58>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bef6:	d00b      	beq.n	800bf10 <prvTaskExitError+0x2c>
	__asm volatile
 800bef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800befc:	f383 8811 	msr	BASEPRI, r3
 800bf00:	f3bf 8f6f 	isb	sy
 800bf04:	f3bf 8f4f 	dsb	sy
 800bf08:	60fb      	str	r3, [r7, #12]
}
 800bf0a:	bf00      	nop
 800bf0c:	bf00      	nop
 800bf0e:	e7fd      	b.n	800bf0c <prvTaskExitError+0x28>
	__asm volatile
 800bf10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf14:	f383 8811 	msr	BASEPRI, r3
 800bf18:	f3bf 8f6f 	isb	sy
 800bf1c:	f3bf 8f4f 	dsb	sy
 800bf20:	60bb      	str	r3, [r7, #8]
}
 800bf22:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf24:	bf00      	nop
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d0fc      	beq.n	800bf26 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf2c:	bf00      	nop
 800bf2e:	bf00      	nop
 800bf30:	3714      	adds	r7, #20
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	24000030 	.word	0x24000030

0800bf40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf40:	4b07      	ldr	r3, [pc, #28]	@ (800bf60 <pxCurrentTCBConst2>)
 800bf42:	6819      	ldr	r1, [r3, #0]
 800bf44:	6808      	ldr	r0, [r1, #0]
 800bf46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4a:	f380 8809 	msr	PSP, r0
 800bf4e:	f3bf 8f6f 	isb	sy
 800bf52:	f04f 0000 	mov.w	r0, #0
 800bf56:	f380 8811 	msr	BASEPRI, r0
 800bf5a:	4770      	bx	lr
 800bf5c:	f3af 8000 	nop.w

0800bf60 <pxCurrentTCBConst2>:
 800bf60:	2400df14 	.word	0x2400df14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf64:	bf00      	nop
 800bf66:	bf00      	nop

0800bf68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf68:	4808      	ldr	r0, [pc, #32]	@ (800bf8c <prvPortStartFirstTask+0x24>)
 800bf6a:	6800      	ldr	r0, [r0, #0]
 800bf6c:	6800      	ldr	r0, [r0, #0]
 800bf6e:	f380 8808 	msr	MSP, r0
 800bf72:	f04f 0000 	mov.w	r0, #0
 800bf76:	f380 8814 	msr	CONTROL, r0
 800bf7a:	b662      	cpsie	i
 800bf7c:	b661      	cpsie	f
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	f3bf 8f6f 	isb	sy
 800bf86:	df00      	svc	0
 800bf88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf8a:	bf00      	nop
 800bf8c:	e000ed08 	.word	0xe000ed08

0800bf90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b086      	sub	sp, #24
 800bf94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf96:	4b47      	ldr	r3, [pc, #284]	@ (800c0b4 <xPortStartScheduler+0x124>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	4a47      	ldr	r2, [pc, #284]	@ (800c0b8 <xPortStartScheduler+0x128>)
 800bf9c:	4293      	cmp	r3, r2
 800bf9e:	d10b      	bne.n	800bfb8 <xPortStartScheduler+0x28>
	__asm volatile
 800bfa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa4:	f383 8811 	msr	BASEPRI, r3
 800bfa8:	f3bf 8f6f 	isb	sy
 800bfac:	f3bf 8f4f 	dsb	sy
 800bfb0:	613b      	str	r3, [r7, #16]
}
 800bfb2:	bf00      	nop
 800bfb4:	bf00      	nop
 800bfb6:	e7fd      	b.n	800bfb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bfb8:	4b3e      	ldr	r3, [pc, #248]	@ (800c0b4 <xPortStartScheduler+0x124>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4a3f      	ldr	r2, [pc, #252]	@ (800c0bc <xPortStartScheduler+0x12c>)
 800bfbe:	4293      	cmp	r3, r2
 800bfc0:	d10b      	bne.n	800bfda <xPortStartScheduler+0x4a>
	__asm volatile
 800bfc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc6:	f383 8811 	msr	BASEPRI, r3
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	60fb      	str	r3, [r7, #12]
}
 800bfd4:	bf00      	nop
 800bfd6:	bf00      	nop
 800bfd8:	e7fd      	b.n	800bfd6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bfda:	4b39      	ldr	r3, [pc, #228]	@ (800c0c0 <xPortStartScheduler+0x130>)
 800bfdc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	781b      	ldrb	r3, [r3, #0]
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	22ff      	movs	r2, #255	@ 0xff
 800bfea:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfec:	697b      	ldr	r3, [r7, #20]
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bff4:	78fb      	ldrb	r3, [r7, #3]
 800bff6:	b2db      	uxtb	r3, r3
 800bff8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800bffc:	b2da      	uxtb	r2, r3
 800bffe:	4b31      	ldr	r3, [pc, #196]	@ (800c0c4 <xPortStartScheduler+0x134>)
 800c000:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c002:	4b31      	ldr	r3, [pc, #196]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c004:	2207      	movs	r2, #7
 800c006:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c008:	e009      	b.n	800c01e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c00a:	4b2f      	ldr	r3, [pc, #188]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	3b01      	subs	r3, #1
 800c010:	4a2d      	ldr	r2, [pc, #180]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c012:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c014:	78fb      	ldrb	r3, [r7, #3]
 800c016:	b2db      	uxtb	r3, r3
 800c018:	005b      	lsls	r3, r3, #1
 800c01a:	b2db      	uxtb	r3, r3
 800c01c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c01e:	78fb      	ldrb	r3, [r7, #3]
 800c020:	b2db      	uxtb	r3, r3
 800c022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c026:	2b80      	cmp	r3, #128	@ 0x80
 800c028:	d0ef      	beq.n	800c00a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c02a:	4b27      	ldr	r3, [pc, #156]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f1c3 0307 	rsb	r3, r3, #7
 800c032:	2b04      	cmp	r3, #4
 800c034:	d00b      	beq.n	800c04e <xPortStartScheduler+0xbe>
	__asm volatile
 800c036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c03a:	f383 8811 	msr	BASEPRI, r3
 800c03e:	f3bf 8f6f 	isb	sy
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	60bb      	str	r3, [r7, #8]
}
 800c048:	bf00      	nop
 800c04a:	bf00      	nop
 800c04c:	e7fd      	b.n	800c04a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c04e:	4b1e      	ldr	r3, [pc, #120]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	021b      	lsls	r3, r3, #8
 800c054:	4a1c      	ldr	r2, [pc, #112]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c056:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c058:	4b1b      	ldr	r3, [pc, #108]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c060:	4a19      	ldr	r2, [pc, #100]	@ (800c0c8 <xPortStartScheduler+0x138>)
 800c062:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	b2da      	uxtb	r2, r3
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c06c:	4b17      	ldr	r3, [pc, #92]	@ (800c0cc <xPortStartScheduler+0x13c>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a16      	ldr	r2, [pc, #88]	@ (800c0cc <xPortStartScheduler+0x13c>)
 800c072:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c076:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c078:	4b14      	ldr	r3, [pc, #80]	@ (800c0cc <xPortStartScheduler+0x13c>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	4a13      	ldr	r2, [pc, #76]	@ (800c0cc <xPortStartScheduler+0x13c>)
 800c07e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c082:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c084:	f000 f8da 	bl	800c23c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c088:	4b11      	ldr	r3, [pc, #68]	@ (800c0d0 <xPortStartScheduler+0x140>)
 800c08a:	2200      	movs	r2, #0
 800c08c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c08e:	f000 f8f9 	bl	800c284 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c092:	4b10      	ldr	r3, [pc, #64]	@ (800c0d4 <xPortStartScheduler+0x144>)
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	4a0f      	ldr	r2, [pc, #60]	@ (800c0d4 <xPortStartScheduler+0x144>)
 800c098:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c09c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c09e:	f7ff ff63 	bl	800bf68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c0a2:	f001 f9ef 	bl	800d484 <vTaskSwitchContext>
	prvTaskExitError();
 800c0a6:	f7ff ff1d 	bl	800bee4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c0aa:	2300      	movs	r3, #0
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3718      	adds	r7, #24
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}
 800c0b4:	e000ed00 	.word	0xe000ed00
 800c0b8:	410fc271 	.word	0x410fc271
 800c0bc:	410fc270 	.word	0x410fc270
 800c0c0:	e000e400 	.word	0xe000e400
 800c0c4:	2400decc 	.word	0x2400decc
 800c0c8:	2400ded0 	.word	0x2400ded0
 800c0cc:	e000ed20 	.word	0xe000ed20
 800c0d0:	24000030 	.word	0x24000030
 800c0d4:	e000ef34 	.word	0xe000ef34

0800c0d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b083      	sub	sp, #12
 800c0dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e2:	f383 8811 	msr	BASEPRI, r3
 800c0e6:	f3bf 8f6f 	isb	sy
 800c0ea:	f3bf 8f4f 	dsb	sy
 800c0ee:	607b      	str	r3, [r7, #4]
}
 800c0f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0f2:	4b10      	ldr	r3, [pc, #64]	@ (800c134 <vPortEnterCritical+0x5c>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	4a0e      	ldr	r2, [pc, #56]	@ (800c134 <vPortEnterCritical+0x5c>)
 800c0fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c0fc:	4b0d      	ldr	r3, [pc, #52]	@ (800c134 <vPortEnterCritical+0x5c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	2b01      	cmp	r3, #1
 800c102:	d110      	bne.n	800c126 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c104:	4b0c      	ldr	r3, [pc, #48]	@ (800c138 <vPortEnterCritical+0x60>)
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d00b      	beq.n	800c126 <vPortEnterCritical+0x4e>
	__asm volatile
 800c10e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c112:	f383 8811 	msr	BASEPRI, r3
 800c116:	f3bf 8f6f 	isb	sy
 800c11a:	f3bf 8f4f 	dsb	sy
 800c11e:	603b      	str	r3, [r7, #0]
}
 800c120:	bf00      	nop
 800c122:	bf00      	nop
 800c124:	e7fd      	b.n	800c122 <vPortEnterCritical+0x4a>
	}
}
 800c126:	bf00      	nop
 800c128:	370c      	adds	r7, #12
 800c12a:	46bd      	mov	sp, r7
 800c12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c130:	4770      	bx	lr
 800c132:	bf00      	nop
 800c134:	24000030 	.word	0x24000030
 800c138:	e000ed04 	.word	0xe000ed04

0800c13c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c13c:	b480      	push	{r7}
 800c13e:	b083      	sub	sp, #12
 800c140:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c142:	4b12      	ldr	r3, [pc, #72]	@ (800c18c <vPortExitCritical+0x50>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d10b      	bne.n	800c162 <vPortExitCritical+0x26>
	__asm volatile
 800c14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c14e:	f383 8811 	msr	BASEPRI, r3
 800c152:	f3bf 8f6f 	isb	sy
 800c156:	f3bf 8f4f 	dsb	sy
 800c15a:	607b      	str	r3, [r7, #4]
}
 800c15c:	bf00      	nop
 800c15e:	bf00      	nop
 800c160:	e7fd      	b.n	800c15e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c162:	4b0a      	ldr	r3, [pc, #40]	@ (800c18c <vPortExitCritical+0x50>)
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	3b01      	subs	r3, #1
 800c168:	4a08      	ldr	r2, [pc, #32]	@ (800c18c <vPortExitCritical+0x50>)
 800c16a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c16c:	4b07      	ldr	r3, [pc, #28]	@ (800c18c <vPortExitCritical+0x50>)
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d105      	bne.n	800c180 <vPortExitCritical+0x44>
 800c174:	2300      	movs	r3, #0
 800c176:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c178:	683b      	ldr	r3, [r7, #0]
 800c17a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c17e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c180:	bf00      	nop
 800c182:	370c      	adds	r7, #12
 800c184:	46bd      	mov	sp, r7
 800c186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18a:	4770      	bx	lr
 800c18c:	24000030 	.word	0x24000030

0800c190 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c190:	f3ef 8009 	mrs	r0, PSP
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	4b15      	ldr	r3, [pc, #84]	@ (800c1f0 <pxCurrentTCBConst>)
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	f01e 0f10 	tst.w	lr, #16
 800c1a0:	bf08      	it	eq
 800c1a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c1a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1aa:	6010      	str	r0, [r2, #0]
 800c1ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c1b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c1b4:	f380 8811 	msr	BASEPRI, r0
 800c1b8:	f3bf 8f4f 	dsb	sy
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f001 f960 	bl	800d484 <vTaskSwitchContext>
 800c1c4:	f04f 0000 	mov.w	r0, #0
 800c1c8:	f380 8811 	msr	BASEPRI, r0
 800c1cc:	bc09      	pop	{r0, r3}
 800c1ce:	6819      	ldr	r1, [r3, #0]
 800c1d0:	6808      	ldr	r0, [r1, #0]
 800c1d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1d6:	f01e 0f10 	tst.w	lr, #16
 800c1da:	bf08      	it	eq
 800c1dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c1e0:	f380 8809 	msr	PSP, r0
 800c1e4:	f3bf 8f6f 	isb	sy
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	f3af 8000 	nop.w

0800c1f0 <pxCurrentTCBConst>:
 800c1f0:	2400df14 	.word	0x2400df14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c1f4:	bf00      	nop
 800c1f6:	bf00      	nop

0800c1f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c1fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c202:	f383 8811 	msr	BASEPRI, r3
 800c206:	f3bf 8f6f 	isb	sy
 800c20a:	f3bf 8f4f 	dsb	sy
 800c20e:	607b      	str	r3, [r7, #4]
}
 800c210:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c212:	f001 f87d 	bl	800d310 <xTaskIncrementTick>
 800c216:	4603      	mov	r3, r0
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d003      	beq.n	800c224 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c21c:	4b06      	ldr	r3, [pc, #24]	@ (800c238 <xPortSysTickHandler+0x40>)
 800c21e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c222:	601a      	str	r2, [r3, #0]
 800c224:	2300      	movs	r3, #0
 800c226:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	f383 8811 	msr	BASEPRI, r3
}
 800c22e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	e000ed04 	.word	0xe000ed04

0800c23c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c23c:	b480      	push	{r7}
 800c23e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c240:	4b0b      	ldr	r3, [pc, #44]	@ (800c270 <vPortSetupTimerInterrupt+0x34>)
 800c242:	2200      	movs	r2, #0
 800c244:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c246:	4b0b      	ldr	r3, [pc, #44]	@ (800c274 <vPortSetupTimerInterrupt+0x38>)
 800c248:	2200      	movs	r2, #0
 800c24a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c24c:	4b0a      	ldr	r3, [pc, #40]	@ (800c278 <vPortSetupTimerInterrupt+0x3c>)
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a0a      	ldr	r2, [pc, #40]	@ (800c27c <vPortSetupTimerInterrupt+0x40>)
 800c252:	fba2 2303 	umull	r2, r3, r2, r3
 800c256:	099b      	lsrs	r3, r3, #6
 800c258:	4a09      	ldr	r2, [pc, #36]	@ (800c280 <vPortSetupTimerInterrupt+0x44>)
 800c25a:	3b01      	subs	r3, #1
 800c25c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c25e:	4b04      	ldr	r3, [pc, #16]	@ (800c270 <vPortSetupTimerInterrupt+0x34>)
 800c260:	2207      	movs	r2, #7
 800c262:	601a      	str	r2, [r3, #0]
}
 800c264:	bf00      	nop
 800c266:	46bd      	mov	sp, r7
 800c268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26c:	4770      	bx	lr
 800c26e:	bf00      	nop
 800c270:	e000e010 	.word	0xe000e010
 800c274:	e000e018 	.word	0xe000e018
 800c278:	24000000 	.word	0x24000000
 800c27c:	10624dd3 	.word	0x10624dd3
 800c280:	e000e014 	.word	0xe000e014

0800c284 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c284:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c294 <vPortEnableVFP+0x10>
 800c288:	6801      	ldr	r1, [r0, #0]
 800c28a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c28e:	6001      	str	r1, [r0, #0]
 800c290:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c292:	bf00      	nop
 800c294:	e000ed88 	.word	0xe000ed88

0800c298 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c298:	b480      	push	{r7}
 800c29a:	b085      	sub	sp, #20
 800c29c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c29e:	f3ef 8305 	mrs	r3, IPSR
 800c2a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2b0f      	cmp	r3, #15
 800c2a8:	d915      	bls.n	800c2d6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c2aa:	4a18      	ldr	r2, [pc, #96]	@ (800c30c <vPortValidateInterruptPriority+0x74>)
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	4413      	add	r3, r2
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2b4:	4b16      	ldr	r3, [pc, #88]	@ (800c310 <vPortValidateInterruptPriority+0x78>)
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	7afa      	ldrb	r2, [r7, #11]
 800c2ba:	429a      	cmp	r2, r3
 800c2bc:	d20b      	bcs.n	800c2d6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c2:	f383 8811 	msr	BASEPRI, r3
 800c2c6:	f3bf 8f6f 	isb	sy
 800c2ca:	f3bf 8f4f 	dsb	sy
 800c2ce:	607b      	str	r3, [r7, #4]
}
 800c2d0:	bf00      	nop
 800c2d2:	bf00      	nop
 800c2d4:	e7fd      	b.n	800c2d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2d6:	4b0f      	ldr	r3, [pc, #60]	@ (800c314 <vPortValidateInterruptPriority+0x7c>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c2de:	4b0e      	ldr	r3, [pc, #56]	@ (800c318 <vPortValidateInterruptPriority+0x80>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	429a      	cmp	r2, r3
 800c2e4:	d90b      	bls.n	800c2fe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c2e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ea:	f383 8811 	msr	BASEPRI, r3
 800c2ee:	f3bf 8f6f 	isb	sy
 800c2f2:	f3bf 8f4f 	dsb	sy
 800c2f6:	603b      	str	r3, [r7, #0]
}
 800c2f8:	bf00      	nop
 800c2fa:	bf00      	nop
 800c2fc:	e7fd      	b.n	800c2fa <vPortValidateInterruptPriority+0x62>
	}
 800c2fe:	bf00      	nop
 800c300:	3714      	adds	r7, #20
 800c302:	46bd      	mov	sp, r7
 800c304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c308:	4770      	bx	lr
 800c30a:	bf00      	nop
 800c30c:	e000e3f0 	.word	0xe000e3f0
 800c310:	2400decc 	.word	0x2400decc
 800c314:	e000ed0c 	.word	0xe000ed0c
 800c318:	2400ded0 	.word	0x2400ded0

0800c31c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10b      	bne.n	800c348 <xQueueGenericReset+0x2c>
	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	60bb      	str	r3, [r7, #8]
}
 800c342:	bf00      	nop
 800c344:	bf00      	nop
 800c346:	e7fd      	b.n	800c344 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c348:	f7ff fec6 	bl	800c0d8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	681a      	ldr	r2, [r3, #0]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c354:	68f9      	ldr	r1, [r7, #12]
 800c356:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c358:	fb01 f303 	mul.w	r3, r1, r3
 800c35c:	441a      	add	r2, r3
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	2200      	movs	r2, #0
 800c366:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	681a      	ldr	r2, [r3, #0]
 800c36c:	68fb      	ldr	r3, [r7, #12]
 800c36e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	681a      	ldr	r2, [r3, #0]
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c378:	3b01      	subs	r3, #1
 800c37a:	68f9      	ldr	r1, [r7, #12]
 800c37c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c37e:	fb01 f303 	mul.w	r3, r1, r3
 800c382:	441a      	add	r2, r3
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	22ff      	movs	r2, #255	@ 0xff
 800c38c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	22ff      	movs	r2, #255	@ 0xff
 800c394:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d114      	bne.n	800c3c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	691b      	ldr	r3, [r3, #16]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d01a      	beq.n	800c3dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	3310      	adds	r3, #16
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f001 f91a 	bl	800d5e4 <xTaskRemoveFromEventList>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d012      	beq.n	800c3dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800c3ec <xQueueGenericReset+0xd0>)
 800c3b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c3bc:	601a      	str	r2, [r3, #0]
 800c3be:	f3bf 8f4f 	dsb	sy
 800c3c2:	f3bf 8f6f 	isb	sy
 800c3c6:	e009      	b.n	800c3dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	3310      	adds	r3, #16
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f7ff fca1 	bl	800bd14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	3324      	adds	r3, #36	@ 0x24
 800c3d6:	4618      	mov	r0, r3
 800c3d8:	f7ff fc9c 	bl	800bd14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c3dc:	f7ff feae 	bl	800c13c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c3e0:	2301      	movs	r3, #1
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3710      	adds	r7, #16
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	e000ed04 	.word	0xe000ed04

0800c3f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b08e      	sub	sp, #56	@ 0x38
 800c3f4:	af02      	add	r7, sp, #8
 800c3f6:	60f8      	str	r0, [r7, #12]
 800c3f8:	60b9      	str	r1, [r7, #8]
 800c3fa:	607a      	str	r2, [r7, #4]
 800c3fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d10b      	bne.n	800c41c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c408:	f383 8811 	msr	BASEPRI, r3
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c416:	bf00      	nop
 800c418:	bf00      	nop
 800c41a:	e7fd      	b.n	800c418 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d10b      	bne.n	800c43a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c426:	f383 8811 	msr	BASEPRI, r3
 800c42a:	f3bf 8f6f 	isb	sy
 800c42e:	f3bf 8f4f 	dsb	sy
 800c432:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c434:	bf00      	nop
 800c436:	bf00      	nop
 800c438:	e7fd      	b.n	800c436 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <xQueueGenericCreateStatic+0x56>
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d001      	beq.n	800c44a <xQueueGenericCreateStatic+0x5a>
 800c446:	2301      	movs	r3, #1
 800c448:	e000      	b.n	800c44c <xQueueGenericCreateStatic+0x5c>
 800c44a:	2300      	movs	r3, #0
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d10b      	bne.n	800c468 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c454:	f383 8811 	msr	BASEPRI, r3
 800c458:	f3bf 8f6f 	isb	sy
 800c45c:	f3bf 8f4f 	dsb	sy
 800c460:	623b      	str	r3, [r7, #32]
}
 800c462:	bf00      	nop
 800c464:	bf00      	nop
 800c466:	e7fd      	b.n	800c464 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d102      	bne.n	800c474 <xQueueGenericCreateStatic+0x84>
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d101      	bne.n	800c478 <xQueueGenericCreateStatic+0x88>
 800c474:	2301      	movs	r3, #1
 800c476:	e000      	b.n	800c47a <xQueueGenericCreateStatic+0x8a>
 800c478:	2300      	movs	r3, #0
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d10b      	bne.n	800c496 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	61fb      	str	r3, [r7, #28]
}
 800c490:	bf00      	nop
 800c492:	bf00      	nop
 800c494:	e7fd      	b.n	800c492 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c496:	2350      	movs	r3, #80	@ 0x50
 800c498:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	2b50      	cmp	r3, #80	@ 0x50
 800c49e:	d00b      	beq.n	800c4b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a4:	f383 8811 	msr	BASEPRI, r3
 800c4a8:	f3bf 8f6f 	isb	sy
 800c4ac:	f3bf 8f4f 	dsb	sy
 800c4b0:	61bb      	str	r3, [r7, #24]
}
 800c4b2:	bf00      	nop
 800c4b4:	bf00      	nop
 800c4b6:	e7fd      	b.n	800c4b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c4b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4ba:	683b      	ldr	r3, [r7, #0]
 800c4bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c4be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d00d      	beq.n	800c4e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c4c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c4d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4d2:	9300      	str	r3, [sp, #0]
 800c4d4:	4613      	mov	r3, r2
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	68b9      	ldr	r1, [r7, #8]
 800c4da:	68f8      	ldr	r0, [r7, #12]
 800c4dc:	f000 f805 	bl	800c4ea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c4e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3730      	adds	r7, #48	@ 0x30
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b084      	sub	sp, #16
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	60f8      	str	r0, [r7, #12]
 800c4f2:	60b9      	str	r1, [r7, #8]
 800c4f4:	607a      	str	r2, [r7, #4]
 800c4f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c4f8:	68bb      	ldr	r3, [r7, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d103      	bne.n	800c506 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c4fe:	69bb      	ldr	r3, [r7, #24]
 800c500:	69ba      	ldr	r2, [r7, #24]
 800c502:	601a      	str	r2, [r3, #0]
 800c504:	e002      	b.n	800c50c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c506:	69bb      	ldr	r3, [r7, #24]
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c50c:	69bb      	ldr	r3, [r7, #24]
 800c50e:	68fa      	ldr	r2, [r7, #12]
 800c510:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c512:	69bb      	ldr	r3, [r7, #24]
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c518:	2101      	movs	r1, #1
 800c51a:	69b8      	ldr	r0, [r7, #24]
 800c51c:	f7ff fefe 	bl	800c31c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c520:	69bb      	ldr	r3, [r7, #24]
 800c522:	78fa      	ldrb	r2, [r7, #3]
 800c524:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c528:	bf00      	nop
 800c52a:	3710      	adds	r7, #16
 800c52c:	46bd      	mov	sp, r7
 800c52e:	bd80      	pop	{r7, pc}

0800c530 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b08e      	sub	sp, #56	@ 0x38
 800c534:	af00      	add	r7, sp, #0
 800c536:	60f8      	str	r0, [r7, #12]
 800c538:	60b9      	str	r1, [r7, #8]
 800c53a:	607a      	str	r2, [r7, #4]
 800c53c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c53e:	2300      	movs	r3, #0
 800c540:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d10b      	bne.n	800c564 <xQueueGenericSend+0x34>
	__asm volatile
 800c54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c550:	f383 8811 	msr	BASEPRI, r3
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c55e:	bf00      	nop
 800c560:	bf00      	nop
 800c562:	e7fd      	b.n	800c560 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d103      	bne.n	800c572 <xQueueGenericSend+0x42>
 800c56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c56c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d101      	bne.n	800c576 <xQueueGenericSend+0x46>
 800c572:	2301      	movs	r3, #1
 800c574:	e000      	b.n	800c578 <xQueueGenericSend+0x48>
 800c576:	2300      	movs	r3, #0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d10b      	bne.n	800c594 <xQueueGenericSend+0x64>
	__asm volatile
 800c57c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c580:	f383 8811 	msr	BASEPRI, r3
 800c584:	f3bf 8f6f 	isb	sy
 800c588:	f3bf 8f4f 	dsb	sy
 800c58c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c58e:	bf00      	nop
 800c590:	bf00      	nop
 800c592:	e7fd      	b.n	800c590 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c594:	683b      	ldr	r3, [r7, #0]
 800c596:	2b02      	cmp	r3, #2
 800c598:	d103      	bne.n	800c5a2 <xQueueGenericSend+0x72>
 800c59a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c59c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c59e:	2b01      	cmp	r3, #1
 800c5a0:	d101      	bne.n	800c5a6 <xQueueGenericSend+0x76>
 800c5a2:	2301      	movs	r3, #1
 800c5a4:	e000      	b.n	800c5a8 <xQueueGenericSend+0x78>
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10b      	bne.n	800c5c4 <xQueueGenericSend+0x94>
	__asm volatile
 800c5ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	623b      	str	r3, [r7, #32]
}
 800c5be:	bf00      	nop
 800c5c0:	bf00      	nop
 800c5c2:	e7fd      	b.n	800c5c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c5c4:	f001 f9f6 	bl	800d9b4 <xTaskGetSchedulerState>
 800c5c8:	4603      	mov	r3, r0
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d102      	bne.n	800c5d4 <xQueueGenericSend+0xa4>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d101      	bne.n	800c5d8 <xQueueGenericSend+0xa8>
 800c5d4:	2301      	movs	r3, #1
 800c5d6:	e000      	b.n	800c5da <xQueueGenericSend+0xaa>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d10b      	bne.n	800c5f6 <xQueueGenericSend+0xc6>
	__asm volatile
 800c5de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5e2:	f383 8811 	msr	BASEPRI, r3
 800c5e6:	f3bf 8f6f 	isb	sy
 800c5ea:	f3bf 8f4f 	dsb	sy
 800c5ee:	61fb      	str	r3, [r7, #28]
}
 800c5f0:	bf00      	nop
 800c5f2:	bf00      	nop
 800c5f4:	e7fd      	b.n	800c5f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c5f6:	f7ff fd6f 	bl	800c0d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c600:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c602:	429a      	cmp	r2, r3
 800c604:	d302      	bcc.n	800c60c <xQueueGenericSend+0xdc>
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	2b02      	cmp	r3, #2
 800c60a:	d129      	bne.n	800c660 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c60c:	683a      	ldr	r2, [r7, #0]
 800c60e:	68b9      	ldr	r1, [r7, #8]
 800c610:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c612:	f000 fa0f 	bl	800ca34 <prvCopyDataToQueue>
 800c616:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d010      	beq.n	800c642 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c622:	3324      	adds	r3, #36	@ 0x24
 800c624:	4618      	mov	r0, r3
 800c626:	f000 ffdd 	bl	800d5e4 <xTaskRemoveFromEventList>
 800c62a:	4603      	mov	r3, r0
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d013      	beq.n	800c658 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c630:	4b3f      	ldr	r3, [pc, #252]	@ (800c730 <xQueueGenericSend+0x200>)
 800c632:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c636:	601a      	str	r2, [r3, #0]
 800c638:	f3bf 8f4f 	dsb	sy
 800c63c:	f3bf 8f6f 	isb	sy
 800c640:	e00a      	b.n	800c658 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c644:	2b00      	cmp	r3, #0
 800c646:	d007      	beq.n	800c658 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c648:	4b39      	ldr	r3, [pc, #228]	@ (800c730 <xQueueGenericSend+0x200>)
 800c64a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c64e:	601a      	str	r2, [r3, #0]
 800c650:	f3bf 8f4f 	dsb	sy
 800c654:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c658:	f7ff fd70 	bl	800c13c <vPortExitCritical>
				return pdPASS;
 800c65c:	2301      	movs	r3, #1
 800c65e:	e063      	b.n	800c728 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d103      	bne.n	800c66e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c666:	f7ff fd69 	bl	800c13c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c66a:	2300      	movs	r3, #0
 800c66c:	e05c      	b.n	800c728 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c66e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c670:	2b00      	cmp	r3, #0
 800c672:	d106      	bne.n	800c682 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c674:	f107 0314 	add.w	r3, r7, #20
 800c678:	4618      	mov	r0, r3
 800c67a:	f001 f83f 	bl	800d6fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c67e:	2301      	movs	r3, #1
 800c680:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c682:	f7ff fd5b 	bl	800c13c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c686:	f000 fd87 	bl	800d198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c68a:	f7ff fd25 	bl	800c0d8 <vPortEnterCritical>
 800c68e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c690:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c694:	b25b      	sxtb	r3, r3
 800c696:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c69a:	d103      	bne.n	800c6a4 <xQueueGenericSend+0x174>
 800c69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c6a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c6aa:	b25b      	sxtb	r3, r3
 800c6ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c6b0:	d103      	bne.n	800c6ba <xQueueGenericSend+0x18a>
 800c6b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c6ba:	f7ff fd3f 	bl	800c13c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c6be:	1d3a      	adds	r2, r7, #4
 800c6c0:	f107 0314 	add.w	r3, r7, #20
 800c6c4:	4611      	mov	r1, r2
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	f001 f82e 	bl	800d728 <xTaskCheckForTimeOut>
 800c6cc:	4603      	mov	r3, r0
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d124      	bne.n	800c71c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c6d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6d4:	f000 faa6 	bl	800cc24 <prvIsQueueFull>
 800c6d8:	4603      	mov	r3, r0
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d018      	beq.n	800c710 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c6de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6e0:	3310      	adds	r3, #16
 800c6e2:	687a      	ldr	r2, [r7, #4]
 800c6e4:	4611      	mov	r1, r2
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f000 ff2a 	bl	800d540 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c6ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c6ee:	f000 fa31 	bl	800cb54 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c6f2:	f000 fd5f 	bl	800d1b4 <xTaskResumeAll>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f47f af7c 	bne.w	800c5f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c6fe:	4b0c      	ldr	r3, [pc, #48]	@ (800c730 <xQueueGenericSend+0x200>)
 800c700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c704:	601a      	str	r2, [r3, #0]
 800c706:	f3bf 8f4f 	dsb	sy
 800c70a:	f3bf 8f6f 	isb	sy
 800c70e:	e772      	b.n	800c5f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c710:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c712:	f000 fa1f 	bl	800cb54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c716:	f000 fd4d 	bl	800d1b4 <xTaskResumeAll>
 800c71a:	e76c      	b.n	800c5f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c71c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c71e:	f000 fa19 	bl	800cb54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c722:	f000 fd47 	bl	800d1b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c726:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3738      	adds	r7, #56	@ 0x38
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	e000ed04 	.word	0xe000ed04

0800c734 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b090      	sub	sp, #64	@ 0x40
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
 800c740:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10b      	bne.n	800c764 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c75e:	bf00      	nop
 800c760:	bf00      	nop
 800c762:	e7fd      	b.n	800c760 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d103      	bne.n	800c772 <xQueueGenericSendFromISR+0x3e>
 800c76a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c76c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d101      	bne.n	800c776 <xQueueGenericSendFromISR+0x42>
 800c772:	2301      	movs	r3, #1
 800c774:	e000      	b.n	800c778 <xQueueGenericSendFromISR+0x44>
 800c776:	2300      	movs	r3, #0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d10b      	bne.n	800c794 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c77c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c78e:	bf00      	nop
 800c790:	bf00      	nop
 800c792:	e7fd      	b.n	800c790 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	2b02      	cmp	r3, #2
 800c798:	d103      	bne.n	800c7a2 <xQueueGenericSendFromISR+0x6e>
 800c79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c79c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d101      	bne.n	800c7a6 <xQueueGenericSendFromISR+0x72>
 800c7a2:	2301      	movs	r3, #1
 800c7a4:	e000      	b.n	800c7a8 <xQueueGenericSendFromISR+0x74>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10b      	bne.n	800c7c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800c7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7b0:	f383 8811 	msr	BASEPRI, r3
 800c7b4:	f3bf 8f6f 	isb	sy
 800c7b8:	f3bf 8f4f 	dsb	sy
 800c7bc:	623b      	str	r3, [r7, #32]
}
 800c7be:	bf00      	nop
 800c7c0:	bf00      	nop
 800c7c2:	e7fd      	b.n	800c7c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c7c4:	f7ff fd68 	bl	800c298 <vPortValidateInterruptPriority>
	__asm volatile
 800c7c8:	f3ef 8211 	mrs	r2, BASEPRI
 800c7cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7d0:	f383 8811 	msr	BASEPRI, r3
 800c7d4:	f3bf 8f6f 	isb	sy
 800c7d8:	f3bf 8f4f 	dsb	sy
 800c7dc:	61fa      	str	r2, [r7, #28]
 800c7de:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800c7e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c7e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c7e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d302      	bcc.n	800c7f6 <xQueueGenericSendFromISR+0xc2>
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	2b02      	cmp	r3, #2
 800c7f4:	d12f      	bne.n	800c856 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c7f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c7f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c7fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c800:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c804:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c806:	683a      	ldr	r2, [r7, #0]
 800c808:	68b9      	ldr	r1, [r7, #8]
 800c80a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800c80c:	f000 f912 	bl	800ca34 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c810:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800c814:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c818:	d112      	bne.n	800c840 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c81a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c81c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d016      	beq.n	800c850 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c824:	3324      	adds	r3, #36	@ 0x24
 800c826:	4618      	mov	r0, r3
 800c828:	f000 fedc 	bl	800d5e4 <xTaskRemoveFromEventList>
 800c82c:	4603      	mov	r3, r0
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d00e      	beq.n	800c850 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d00b      	beq.n	800c850 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2201      	movs	r2, #1
 800c83c:	601a      	str	r2, [r3, #0]
 800c83e:	e007      	b.n	800c850 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c840:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800c844:	3301      	adds	r3, #1
 800c846:	b2db      	uxtb	r3, r3
 800c848:	b25a      	sxtb	r2, r3
 800c84a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c84c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800c850:	2301      	movs	r3, #1
 800c852:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800c854:	e001      	b.n	800c85a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c856:	2300      	movs	r3, #0
 800c858:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c85a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c85c:	617b      	str	r3, [r7, #20]
	__asm volatile
 800c85e:	697b      	ldr	r3, [r7, #20]
 800c860:	f383 8811 	msr	BASEPRI, r3
}
 800c864:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3740      	adds	r7, #64	@ 0x40
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b08c      	sub	sp, #48	@ 0x30
 800c874:	af00      	add	r7, sp, #0
 800c876:	60f8      	str	r0, [r7, #12]
 800c878:	60b9      	str	r1, [r7, #8]
 800c87a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c87c:	2300      	movs	r3, #0
 800c87e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c886:	2b00      	cmp	r3, #0
 800c888:	d10b      	bne.n	800c8a2 <xQueueReceive+0x32>
	__asm volatile
 800c88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c88e:	f383 8811 	msr	BASEPRI, r3
 800c892:	f3bf 8f6f 	isb	sy
 800c896:	f3bf 8f4f 	dsb	sy
 800c89a:	623b      	str	r3, [r7, #32]
}
 800c89c:	bf00      	nop
 800c89e:	bf00      	nop
 800c8a0:	e7fd      	b.n	800c89e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d103      	bne.n	800c8b0 <xQueueReceive+0x40>
 800c8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d101      	bne.n	800c8b4 <xQueueReceive+0x44>
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	e000      	b.n	800c8b6 <xQueueReceive+0x46>
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d10b      	bne.n	800c8d2 <xQueueReceive+0x62>
	__asm volatile
 800c8ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8be:	f383 8811 	msr	BASEPRI, r3
 800c8c2:	f3bf 8f6f 	isb	sy
 800c8c6:	f3bf 8f4f 	dsb	sy
 800c8ca:	61fb      	str	r3, [r7, #28]
}
 800c8cc:	bf00      	nop
 800c8ce:	bf00      	nop
 800c8d0:	e7fd      	b.n	800c8ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c8d2:	f001 f86f 	bl	800d9b4 <xTaskGetSchedulerState>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d102      	bne.n	800c8e2 <xQueueReceive+0x72>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d101      	bne.n	800c8e6 <xQueueReceive+0x76>
 800c8e2:	2301      	movs	r3, #1
 800c8e4:	e000      	b.n	800c8e8 <xQueueReceive+0x78>
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d10b      	bne.n	800c904 <xQueueReceive+0x94>
	__asm volatile
 800c8ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f0:	f383 8811 	msr	BASEPRI, r3
 800c8f4:	f3bf 8f6f 	isb	sy
 800c8f8:	f3bf 8f4f 	dsb	sy
 800c8fc:	61bb      	str	r3, [r7, #24]
}
 800c8fe:	bf00      	nop
 800c900:	bf00      	nop
 800c902:	e7fd      	b.n	800c900 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c904:	f7ff fbe8 	bl	800c0d8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c90a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c90c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c90e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c910:	2b00      	cmp	r3, #0
 800c912:	d01f      	beq.n	800c954 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c914:	68b9      	ldr	r1, [r7, #8]
 800c916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c918:	f000 f8f6 	bl	800cb08 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c91e:	1e5a      	subs	r2, r3, #1
 800c920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c922:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c924:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c926:	691b      	ldr	r3, [r3, #16]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d00f      	beq.n	800c94c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c92c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c92e:	3310      	adds	r3, #16
 800c930:	4618      	mov	r0, r3
 800c932:	f000 fe57 	bl	800d5e4 <xTaskRemoveFromEventList>
 800c936:	4603      	mov	r3, r0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d007      	beq.n	800c94c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c93c:	4b3c      	ldr	r3, [pc, #240]	@ (800ca30 <xQueueReceive+0x1c0>)
 800c93e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c942:	601a      	str	r2, [r3, #0]
 800c944:	f3bf 8f4f 	dsb	sy
 800c948:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c94c:	f7ff fbf6 	bl	800c13c <vPortExitCritical>
				return pdPASS;
 800c950:	2301      	movs	r3, #1
 800c952:	e069      	b.n	800ca28 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d103      	bne.n	800c962 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c95a:	f7ff fbef 	bl	800c13c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c95e:	2300      	movs	r3, #0
 800c960:	e062      	b.n	800ca28 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c964:	2b00      	cmp	r3, #0
 800c966:	d106      	bne.n	800c976 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c968:	f107 0310 	add.w	r3, r7, #16
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 fec5 	bl	800d6fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c972:	2301      	movs	r3, #1
 800c974:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c976:	f7ff fbe1 	bl	800c13c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c97a:	f000 fc0d 	bl	800d198 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c97e:	f7ff fbab 	bl	800c0d8 <vPortEnterCritical>
 800c982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c984:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c988:	b25b      	sxtb	r3, r3
 800c98a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c98e:	d103      	bne.n	800c998 <xQueueReceive+0x128>
 800c990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c992:	2200      	movs	r2, #0
 800c994:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c99a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c99e:	b25b      	sxtb	r3, r3
 800c9a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c9a4:	d103      	bne.n	800c9ae <xQueueReceive+0x13e>
 800c9a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c9ae:	f7ff fbc5 	bl	800c13c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c9b2:	1d3a      	adds	r2, r7, #4
 800c9b4:	f107 0310 	add.w	r3, r7, #16
 800c9b8:	4611      	mov	r1, r2
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 feb4 	bl	800d728 <xTaskCheckForTimeOut>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d123      	bne.n	800ca0e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c9c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9c8:	f000 f916 	bl	800cbf8 <prvIsQueueEmpty>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d017      	beq.n	800ca02 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c9d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c9d4:	3324      	adds	r3, #36	@ 0x24
 800c9d6:	687a      	ldr	r2, [r7, #4]
 800c9d8:	4611      	mov	r1, r2
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f000 fdb0 	bl	800d540 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c9e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c9e2:	f000 f8b7 	bl	800cb54 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c9e6:	f000 fbe5 	bl	800d1b4 <xTaskResumeAll>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d189      	bne.n	800c904 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800c9f0:	4b0f      	ldr	r3, [pc, #60]	@ (800ca30 <xQueueReceive+0x1c0>)
 800c9f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c9f6:	601a      	str	r2, [r3, #0]
 800c9f8:	f3bf 8f4f 	dsb	sy
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	e780      	b.n	800c904 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ca02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca04:	f000 f8a6 	bl	800cb54 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca08:	f000 fbd4 	bl	800d1b4 <xTaskResumeAll>
 800ca0c:	e77a      	b.n	800c904 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ca0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca10:	f000 f8a0 	bl	800cb54 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca14:	f000 fbce 	bl	800d1b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca18:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ca1a:	f000 f8ed 	bl	800cbf8 <prvIsQueueEmpty>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	f43f af6f 	beq.w	800c904 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca26:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca28:	4618      	mov	r0, r3
 800ca2a:	3730      	adds	r7, #48	@ 0x30
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	e000ed04 	.word	0xe000ed04

0800ca34 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b086      	sub	sp, #24
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	60f8      	str	r0, [r7, #12]
 800ca3c:	60b9      	str	r1, [r7, #8]
 800ca3e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ca40:	2300      	movs	r3, #0
 800ca42:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca48:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d10d      	bne.n	800ca6e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d14d      	bne.n	800caf6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	4618      	mov	r0, r3
 800ca60:	f000 ffc6 	bl	800d9f0 <xTaskPriorityDisinherit>
 800ca64:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	609a      	str	r2, [r3, #8]
 800ca6c:	e043      	b.n	800caf6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d119      	bne.n	800caa8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	6858      	ldr	r0, [r3, #4]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	68b9      	ldr	r1, [r7, #8]
 800ca80:	f00f fa57 	bl	801bf32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	685a      	ldr	r2, [r3, #4]
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca8c:	441a      	add	r2, r3
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	685a      	ldr	r2, [r3, #4]
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d32b      	bcc.n	800caf6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	605a      	str	r2, [r3, #4]
 800caa6:	e026      	b.n	800caf6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	68d8      	ldr	r0, [r3, #12]
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cab0:	461a      	mov	r2, r3
 800cab2:	68b9      	ldr	r1, [r7, #8]
 800cab4:	f00f fa3d 	bl	801bf32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	68da      	ldr	r2, [r3, #12]
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cac0:	425b      	negs	r3, r3
 800cac2:	441a      	add	r2, r3
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	68da      	ldr	r2, [r3, #12]
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d207      	bcs.n	800cae4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	689a      	ldr	r2, [r3, #8]
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cadc:	425b      	negs	r3, r3
 800cade:	441a      	add	r2, r3
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	2b02      	cmp	r3, #2
 800cae8:	d105      	bne.n	800caf6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d002      	beq.n	800caf6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	3b01      	subs	r3, #1
 800caf4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	1c5a      	adds	r2, r3, #1
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cafe:	697b      	ldr	r3, [r7, #20]
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3718      	adds	r7, #24
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b082      	sub	sp, #8
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d018      	beq.n	800cb4c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	68da      	ldr	r2, [r3, #12]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb22:	441a      	add	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	68da      	ldr	r2, [r3, #12]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	689b      	ldr	r3, [r3, #8]
 800cb30:	429a      	cmp	r2, r3
 800cb32:	d303      	bcc.n	800cb3c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	68d9      	ldr	r1, [r3, #12]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb44:	461a      	mov	r2, r3
 800cb46:	6838      	ldr	r0, [r7, #0]
 800cb48:	f00f f9f3 	bl	801bf32 <memcpy>
	}
}
 800cb4c:	bf00      	nop
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b084      	sub	sp, #16
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800cb5c:	f7ff fabc 	bl	800c0d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cb66:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb68:	e011      	b.n	800cb8e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d012      	beq.n	800cb98 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	3324      	adds	r3, #36	@ 0x24
 800cb76:	4618      	mov	r0, r3
 800cb78:	f000 fd34 	bl	800d5e4 <xTaskRemoveFromEventList>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d001      	beq.n	800cb86 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800cb82:	f000 fe35 	bl	800d7f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800cb86:	7bfb      	ldrb	r3, [r7, #15]
 800cb88:	3b01      	subs	r3, #1
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cb8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	dce9      	bgt.n	800cb6a <prvUnlockQueue+0x16>
 800cb96:	e000      	b.n	800cb9a <prvUnlockQueue+0x46>
					break;
 800cb98:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	22ff      	movs	r2, #255	@ 0xff
 800cb9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800cba2:	f7ff facb 	bl	800c13c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800cba6:	f7ff fa97 	bl	800c0d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cbb0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbb2:	e011      	b.n	800cbd8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d012      	beq.n	800cbe2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	3310      	adds	r3, #16
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f000 fd0f 	bl	800d5e4 <xTaskRemoveFromEventList>
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d001      	beq.n	800cbd0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cbcc:	f000 fe10 	bl	800d7f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cbd0:	7bbb      	ldrb	r3, [r7, #14]
 800cbd2:	3b01      	subs	r3, #1
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cbd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	dce9      	bgt.n	800cbb4 <prvUnlockQueue+0x60>
 800cbe0:	e000      	b.n	800cbe4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cbe2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	22ff      	movs	r2, #255	@ 0xff
 800cbe8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800cbec:	f7ff faa6 	bl	800c13c <vPortExitCritical>
}
 800cbf0:	bf00      	nop
 800cbf2:	3710      	adds	r7, #16
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}

0800cbf8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b084      	sub	sp, #16
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc00:	f7ff fa6a 	bl	800c0d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d102      	bne.n	800cc12 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	60fb      	str	r3, [r7, #12]
 800cc10:	e001      	b.n	800cc16 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cc12:	2300      	movs	r3, #0
 800cc14:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc16:	f7ff fa91 	bl	800c13c <vPortExitCritical>

	return xReturn;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
}
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	3710      	adds	r7, #16
 800cc20:	46bd      	mov	sp, r7
 800cc22:	bd80      	pop	{r7, pc}

0800cc24 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cc24:	b580      	push	{r7, lr}
 800cc26:	b084      	sub	sp, #16
 800cc28:	af00      	add	r7, sp, #0
 800cc2a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cc2c:	f7ff fa54 	bl	800c0d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800cc38:	429a      	cmp	r2, r3
 800cc3a:	d102      	bne.n	800cc42 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cc3c:	2301      	movs	r3, #1
 800cc3e:	60fb      	str	r3, [r7, #12]
 800cc40:	e001      	b.n	800cc46 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cc42:	2300      	movs	r3, #0
 800cc44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cc46:	f7ff fa79 	bl	800c13c <vPortExitCritical>

	return xReturn;
 800cc4a:	68fb      	ldr	r3, [r7, #12]
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	3710      	adds	r7, #16
 800cc50:	46bd      	mov	sp, r7
 800cc52:	bd80      	pop	{r7, pc}

0800cc54 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc5e:	2300      	movs	r3, #0
 800cc60:	60fb      	str	r3, [r7, #12]
 800cc62:	e014      	b.n	800cc8e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800cc64:	4a0f      	ldr	r2, [pc, #60]	@ (800cca4 <vQueueAddToRegistry+0x50>)
 800cc66:	68fb      	ldr	r3, [r7, #12]
 800cc68:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10b      	bne.n	800cc88 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800cc70:	490c      	ldr	r1, [pc, #48]	@ (800cca4 <vQueueAddToRegistry+0x50>)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800cc7a:	4a0a      	ldr	r2, [pc, #40]	@ (800cca4 <vQueueAddToRegistry+0x50>)
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	00db      	lsls	r3, r3, #3
 800cc80:	4413      	add	r3, r2
 800cc82:	687a      	ldr	r2, [r7, #4]
 800cc84:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800cc86:	e006      	b.n	800cc96 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	3301      	adds	r3, #1
 800cc8c:	60fb      	str	r3, [r7, #12]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	2b07      	cmp	r3, #7
 800cc92:	d9e7      	bls.n	800cc64 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800cc94:	bf00      	nop
 800cc96:	bf00      	nop
 800cc98:	3714      	adds	r7, #20
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca0:	4770      	bx	lr
 800cca2:	bf00      	nop
 800cca4:	2400ded4 	.word	0x2400ded4

0800cca8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b086      	sub	sp, #24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ccb8:	f7ff fa0e 	bl	800c0d8 <vPortEnterCritical>
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ccc2:	b25b      	sxtb	r3, r3
 800ccc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ccc8:	d103      	bne.n	800ccd2 <vQueueWaitForMessageRestricted+0x2a>
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	2200      	movs	r2, #0
 800ccce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ccd8:	b25b      	sxtb	r3, r3
 800ccda:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ccde:	d103      	bne.n	800cce8 <vQueueWaitForMessageRestricted+0x40>
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	2200      	movs	r2, #0
 800cce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cce8:	f7ff fa28 	bl	800c13c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d106      	bne.n	800cd02 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ccf4:	697b      	ldr	r3, [r7, #20]
 800ccf6:	3324      	adds	r3, #36	@ 0x24
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	68b9      	ldr	r1, [r7, #8]
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 fc45 	bl	800d58c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800cd02:	6978      	ldr	r0, [r7, #20]
 800cd04:	f7ff ff26 	bl	800cb54 <prvUnlockQueue>
	}
 800cd08:	bf00      	nop
 800cd0a:	3718      	adds	r7, #24
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b08e      	sub	sp, #56	@ 0x38
 800cd14:	af04      	add	r7, sp, #16
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]
 800cd1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cd1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d10b      	bne.n	800cd3c <xTaskCreateStatic+0x2c>
	__asm volatile
 800cd24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd28:	f383 8811 	msr	BASEPRI, r3
 800cd2c:	f3bf 8f6f 	isb	sy
 800cd30:	f3bf 8f4f 	dsb	sy
 800cd34:	623b      	str	r3, [r7, #32]
}
 800cd36:	bf00      	nop
 800cd38:	bf00      	nop
 800cd3a:	e7fd      	b.n	800cd38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d10b      	bne.n	800cd5a <xTaskCreateStatic+0x4a>
	__asm volatile
 800cd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	61fb      	str	r3, [r7, #28]
}
 800cd54:	bf00      	nop
 800cd56:	bf00      	nop
 800cd58:	e7fd      	b.n	800cd56 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cd5a:	235c      	movs	r3, #92	@ 0x5c
 800cd5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cd5e:	693b      	ldr	r3, [r7, #16]
 800cd60:	2b5c      	cmp	r3, #92	@ 0x5c
 800cd62:	d00b      	beq.n	800cd7c <xTaskCreateStatic+0x6c>
	__asm volatile
 800cd64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd68:	f383 8811 	msr	BASEPRI, r3
 800cd6c:	f3bf 8f6f 	isb	sy
 800cd70:	f3bf 8f4f 	dsb	sy
 800cd74:	61bb      	str	r3, [r7, #24]
}
 800cd76:	bf00      	nop
 800cd78:	bf00      	nop
 800cd7a:	e7fd      	b.n	800cd78 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800cd7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800cd7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd80:	2b00      	cmp	r3, #0
 800cd82:	d01e      	beq.n	800cdc2 <xTaskCreateStatic+0xb2>
 800cd84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d01b      	beq.n	800cdc2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cd8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cd8c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800cd8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800cd92:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800cd94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd96:	2202      	movs	r2, #2
 800cd98:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	9303      	str	r3, [sp, #12]
 800cda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cda2:	9302      	str	r3, [sp, #8]
 800cda4:	f107 0314 	add.w	r3, r7, #20
 800cda8:	9301      	str	r3, [sp, #4]
 800cdaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cdac:	9300      	str	r3, [sp, #0]
 800cdae:	683b      	ldr	r3, [r7, #0]
 800cdb0:	687a      	ldr	r2, [r7, #4]
 800cdb2:	68b9      	ldr	r1, [r7, #8]
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f000 f850 	bl	800ce5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cdba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800cdbc:	f000 f8de 	bl	800cf7c <prvAddNewTaskToReadyList>
 800cdc0:	e001      	b.n	800cdc6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800cdc2:	2300      	movs	r3, #0
 800cdc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800cdc6:	697b      	ldr	r3, [r7, #20]
	}
 800cdc8:	4618      	mov	r0, r3
 800cdca:	3728      	adds	r7, #40	@ 0x28
 800cdcc:	46bd      	mov	sp, r7
 800cdce:	bd80      	pop	{r7, pc}

0800cdd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800cdd0:	b580      	push	{r7, lr}
 800cdd2:	b08c      	sub	sp, #48	@ 0x30
 800cdd4:	af04      	add	r7, sp, #16
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	603b      	str	r3, [r7, #0]
 800cddc:	4613      	mov	r3, r2
 800cdde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cde0:	88fb      	ldrh	r3, [r7, #6]
 800cde2:	009b      	lsls	r3, r3, #2
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7fe fda7 	bl	800b938 <pvPortMalloc>
 800cdea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d00e      	beq.n	800ce10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cdf2:	205c      	movs	r0, #92	@ 0x5c
 800cdf4:	f7fe fda0 	bl	800b938 <pvPortMalloc>
 800cdf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cdfa:	69fb      	ldr	r3, [r7, #28]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d003      	beq.n	800ce08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ce00:	69fb      	ldr	r3, [r7, #28]
 800ce02:	697a      	ldr	r2, [r7, #20]
 800ce04:	631a      	str	r2, [r3, #48]	@ 0x30
 800ce06:	e005      	b.n	800ce14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ce08:	6978      	ldr	r0, [r7, #20]
 800ce0a:	f7fe fe63 	bl	800bad4 <vPortFree>
 800ce0e:	e001      	b.n	800ce14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ce10:	2300      	movs	r3, #0
 800ce12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ce14:	69fb      	ldr	r3, [r7, #28]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d017      	beq.n	800ce4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ce1a:	69fb      	ldr	r3, [r7, #28]
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ce22:	88fa      	ldrh	r2, [r7, #6]
 800ce24:	2300      	movs	r3, #0
 800ce26:	9303      	str	r3, [sp, #12]
 800ce28:	69fb      	ldr	r3, [r7, #28]
 800ce2a:	9302      	str	r3, [sp, #8]
 800ce2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce2e:	9301      	str	r3, [sp, #4]
 800ce30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ce32:	9300      	str	r3, [sp, #0]
 800ce34:	683b      	ldr	r3, [r7, #0]
 800ce36:	68b9      	ldr	r1, [r7, #8]
 800ce38:	68f8      	ldr	r0, [r7, #12]
 800ce3a:	f000 f80e 	bl	800ce5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce3e:	69f8      	ldr	r0, [r7, #28]
 800ce40:	f000 f89c 	bl	800cf7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ce44:	2301      	movs	r3, #1
 800ce46:	61bb      	str	r3, [r7, #24]
 800ce48:	e002      	b.n	800ce50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ce4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ce50:	69bb      	ldr	r3, [r7, #24]
	}
 800ce52:	4618      	mov	r0, r3
 800ce54:	3720      	adds	r7, #32
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}

0800ce5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ce5a:	b580      	push	{r7, lr}
 800ce5c:	b088      	sub	sp, #32
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	60f8      	str	r0, [r7, #12]
 800ce62:	60b9      	str	r1, [r7, #8]
 800ce64:	607a      	str	r2, [r7, #4]
 800ce66:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ce68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce6a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	009b      	lsls	r3, r3, #2
 800ce70:	461a      	mov	r2, r3
 800ce72:	21a5      	movs	r1, #165	@ 0xa5
 800ce74:	f00e ff94 	bl	801bda0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ce78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ce7c:	6879      	ldr	r1, [r7, #4]
 800ce7e:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800ce82:	440b      	add	r3, r1
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4413      	add	r3, r2
 800ce88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ce8a:	69bb      	ldr	r3, [r7, #24]
 800ce8c:	f023 0307 	bic.w	r3, r3, #7
 800ce90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ce92:	69bb      	ldr	r3, [r7, #24]
 800ce94:	f003 0307 	and.w	r3, r3, #7
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00b      	beq.n	800ceb4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ce9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cea0:	f383 8811 	msr	BASEPRI, r3
 800cea4:	f3bf 8f6f 	isb	sy
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	617b      	str	r3, [r7, #20]
}
 800ceae:	bf00      	nop
 800ceb0:	bf00      	nop
 800ceb2:	e7fd      	b.n	800ceb0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d01f      	beq.n	800cefa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ceba:	2300      	movs	r3, #0
 800cebc:	61fb      	str	r3, [r7, #28]
 800cebe:	e012      	b.n	800cee6 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cec0:	68ba      	ldr	r2, [r7, #8]
 800cec2:	69fb      	ldr	r3, [r7, #28]
 800cec4:	4413      	add	r3, r2
 800cec6:	7819      	ldrb	r1, [r3, #0]
 800cec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	4413      	add	r3, r2
 800cece:	3334      	adds	r3, #52	@ 0x34
 800ced0:	460a      	mov	r2, r1
 800ced2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	4413      	add	r3, r2
 800ceda:	781b      	ldrb	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d006      	beq.n	800ceee <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	3301      	adds	r3, #1
 800cee4:	61fb      	str	r3, [r7, #28]
 800cee6:	69fb      	ldr	r3, [r7, #28]
 800cee8:	2b0f      	cmp	r3, #15
 800ceea:	d9e9      	bls.n	800cec0 <prvInitialiseNewTask+0x66>
 800ceec:	e000      	b.n	800cef0 <prvInitialiseNewTask+0x96>
			{
				break;
 800ceee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cef2:	2200      	movs	r2, #0
 800cef4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800cef8:	e003      	b.n	800cf02 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cefa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cefc:	2200      	movs	r2, #0
 800cefe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cf02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf04:	2b37      	cmp	r3, #55	@ 0x37
 800cf06:	d901      	bls.n	800cf0c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cf08:	2337      	movs	r3, #55	@ 0x37
 800cf0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cf0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf10:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800cf16:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cf18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cf1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf20:	3304      	adds	r3, #4
 800cf22:	4618      	mov	r0, r3
 800cf24:	f7fe ff16 	bl	800bd54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cf28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf2a:	3318      	adds	r3, #24
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	f7fe ff11 	bl	800bd54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cf32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cf3a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800cf3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cf42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf46:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cf48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf50:	2200      	movs	r2, #0
 800cf52:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cf56:	683a      	ldr	r2, [r7, #0]
 800cf58:	68f9      	ldr	r1, [r7, #12]
 800cf5a:	69b8      	ldr	r0, [r7, #24]
 800cf5c:	f7fe ff8e 	bl	800be7c <pxPortInitialiseStack>
 800cf60:	4602      	mov	r2, r0
 800cf62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf64:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cf66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cf6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf72:	bf00      	nop
 800cf74:	3720      	adds	r7, #32
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
	...

0800cf7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cf84:	f7ff f8a8 	bl	800c0d8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cf88:	4b2d      	ldr	r3, [pc, #180]	@ (800d040 <prvAddNewTaskToReadyList+0xc4>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	3301      	adds	r3, #1
 800cf8e:	4a2c      	ldr	r2, [pc, #176]	@ (800d040 <prvAddNewTaskToReadyList+0xc4>)
 800cf90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cf92:	4b2c      	ldr	r3, [pc, #176]	@ (800d044 <prvAddNewTaskToReadyList+0xc8>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d109      	bne.n	800cfae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cf9a:	4a2a      	ldr	r2, [pc, #168]	@ (800d044 <prvAddNewTaskToReadyList+0xc8>)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cfa0:	4b27      	ldr	r3, [pc, #156]	@ (800d040 <prvAddNewTaskToReadyList+0xc4>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	2b01      	cmp	r3, #1
 800cfa6:	d110      	bne.n	800cfca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cfa8:	f000 fc46 	bl	800d838 <prvInitialiseTaskLists>
 800cfac:	e00d      	b.n	800cfca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cfae:	4b26      	ldr	r3, [pc, #152]	@ (800d048 <prvAddNewTaskToReadyList+0xcc>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d109      	bne.n	800cfca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cfb6:	4b23      	ldr	r3, [pc, #140]	@ (800d044 <prvAddNewTaskToReadyList+0xc8>)
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfc0:	429a      	cmp	r2, r3
 800cfc2:	d802      	bhi.n	800cfca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cfc4:	4a1f      	ldr	r2, [pc, #124]	@ (800d044 <prvAddNewTaskToReadyList+0xc8>)
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cfca:	4b20      	ldr	r3, [pc, #128]	@ (800d04c <prvAddNewTaskToReadyList+0xd0>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	4a1e      	ldr	r2, [pc, #120]	@ (800d04c <prvAddNewTaskToReadyList+0xd0>)
 800cfd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800cfd4:	4b1d      	ldr	r3, [pc, #116]	@ (800d04c <prvAddNewTaskToReadyList+0xd0>)
 800cfd6:	681a      	ldr	r2, [r3, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cfe0:	4b1b      	ldr	r3, [pc, #108]	@ (800d050 <prvAddNewTaskToReadyList+0xd4>)
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	429a      	cmp	r2, r3
 800cfe6:	d903      	bls.n	800cff0 <prvAddNewTaskToReadyList+0x74>
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfec:	4a18      	ldr	r2, [pc, #96]	@ (800d050 <prvAddNewTaskToReadyList+0xd4>)
 800cfee:	6013      	str	r3, [r2, #0]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cff4:	4613      	mov	r3, r2
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4413      	add	r3, r2
 800cffa:	009b      	lsls	r3, r3, #2
 800cffc:	4a15      	ldr	r2, [pc, #84]	@ (800d054 <prvAddNewTaskToReadyList+0xd8>)
 800cffe:	441a      	add	r2, r3
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	3304      	adds	r3, #4
 800d004:	4619      	mov	r1, r3
 800d006:	4610      	mov	r0, r2
 800d008:	f7fe feb1 	bl	800bd6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d00c:	f7ff f896 	bl	800c13c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d010:	4b0d      	ldr	r3, [pc, #52]	@ (800d048 <prvAddNewTaskToReadyList+0xcc>)
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d00e      	beq.n	800d036 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d018:	4b0a      	ldr	r3, [pc, #40]	@ (800d044 <prvAddNewTaskToReadyList+0xc8>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d022:	429a      	cmp	r2, r3
 800d024:	d207      	bcs.n	800d036 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d026:	4b0c      	ldr	r3, [pc, #48]	@ (800d058 <prvAddNewTaskToReadyList+0xdc>)
 800d028:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	f3bf 8f4f 	dsb	sy
 800d032:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d036:	bf00      	nop
 800d038:	3708      	adds	r7, #8
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	2400e3e8 	.word	0x2400e3e8
 800d044:	2400df14 	.word	0x2400df14
 800d048:	2400e3f4 	.word	0x2400e3f4
 800d04c:	2400e404 	.word	0x2400e404
 800d050:	2400e3f0 	.word	0x2400e3f0
 800d054:	2400df18 	.word	0x2400df18
 800d058:	e000ed04 	.word	0xe000ed04

0800d05c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d064:	2300      	movs	r3, #0
 800d066:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d018      	beq.n	800d0a0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d06e:	4b14      	ldr	r3, [pc, #80]	@ (800d0c0 <vTaskDelay+0x64>)
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d00b      	beq.n	800d08e <vTaskDelay+0x32>
	__asm volatile
 800d076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	60bb      	str	r3, [r7, #8]
}
 800d088:	bf00      	nop
 800d08a:	bf00      	nop
 800d08c:	e7fd      	b.n	800d08a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d08e:	f000 f883 	bl	800d198 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d092:	2100      	movs	r1, #0
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f000 fd1b 	bl	800dad0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d09a:	f000 f88b 	bl	800d1b4 <xTaskResumeAll>
 800d09e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d107      	bne.n	800d0b6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d0a6:	4b07      	ldr	r3, [pc, #28]	@ (800d0c4 <vTaskDelay+0x68>)
 800d0a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d0ac:	601a      	str	r2, [r3, #0]
 800d0ae:	f3bf 8f4f 	dsb	sy
 800d0b2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d0b6:	bf00      	nop
 800d0b8:	3710      	adds	r7, #16
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	2400e410 	.word	0x2400e410
 800d0c4:	e000ed04 	.word	0xe000ed04

0800d0c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b08a      	sub	sp, #40	@ 0x28
 800d0cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d0d6:	463a      	mov	r2, r7
 800d0d8:	1d39      	adds	r1, r7, #4
 800d0da:	f107 0308 	add.w	r3, r7, #8
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f7fe fbf6 	bl	800b8d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d0e4:	6839      	ldr	r1, [r7, #0]
 800d0e6:	687b      	ldr	r3, [r7, #4]
 800d0e8:	68ba      	ldr	r2, [r7, #8]
 800d0ea:	9202      	str	r2, [sp, #8]
 800d0ec:	9301      	str	r3, [sp, #4]
 800d0ee:	2300      	movs	r3, #0
 800d0f0:	9300      	str	r3, [sp, #0]
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	460a      	mov	r2, r1
 800d0f6:	4922      	ldr	r1, [pc, #136]	@ (800d180 <vTaskStartScheduler+0xb8>)
 800d0f8:	4822      	ldr	r0, [pc, #136]	@ (800d184 <vTaskStartScheduler+0xbc>)
 800d0fa:	f7ff fe09 	bl	800cd10 <xTaskCreateStatic>
 800d0fe:	4603      	mov	r3, r0
 800d100:	4a21      	ldr	r2, [pc, #132]	@ (800d188 <vTaskStartScheduler+0xc0>)
 800d102:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d104:	4b20      	ldr	r3, [pc, #128]	@ (800d188 <vTaskStartScheduler+0xc0>)
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d002      	beq.n	800d112 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d10c:	2301      	movs	r3, #1
 800d10e:	617b      	str	r3, [r7, #20]
 800d110:	e001      	b.n	800d116 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d112:	2300      	movs	r3, #0
 800d114:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d116:	697b      	ldr	r3, [r7, #20]
 800d118:	2b01      	cmp	r3, #1
 800d11a:	d102      	bne.n	800d122 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d11c:	f000 fd2c 	bl	800db78 <xTimerCreateTimerTask>
 800d120:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d122:	697b      	ldr	r3, [r7, #20]
 800d124:	2b01      	cmp	r3, #1
 800d126:	d116      	bne.n	800d156 <vTaskStartScheduler+0x8e>
	__asm volatile
 800d128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d12c:	f383 8811 	msr	BASEPRI, r3
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	613b      	str	r3, [r7, #16]
}
 800d13a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d13c:	4b13      	ldr	r3, [pc, #76]	@ (800d18c <vTaskStartScheduler+0xc4>)
 800d13e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d142:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d144:	4b12      	ldr	r3, [pc, #72]	@ (800d190 <vTaskStartScheduler+0xc8>)
 800d146:	2201      	movs	r2, #1
 800d148:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d14a:	4b12      	ldr	r3, [pc, #72]	@ (800d194 <vTaskStartScheduler+0xcc>)
 800d14c:	2200      	movs	r2, #0
 800d14e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d150:	f7fe ff1e 	bl	800bf90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d154:	e00f      	b.n	800d176 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d156:	697b      	ldr	r3, [r7, #20]
 800d158:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d15c:	d10b      	bne.n	800d176 <vTaskStartScheduler+0xae>
	__asm volatile
 800d15e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d162:	f383 8811 	msr	BASEPRI, r3
 800d166:	f3bf 8f6f 	isb	sy
 800d16a:	f3bf 8f4f 	dsb	sy
 800d16e:	60fb      	str	r3, [r7, #12]
}
 800d170:	bf00      	nop
 800d172:	bf00      	nop
 800d174:	e7fd      	b.n	800d172 <vTaskStartScheduler+0xaa>
}
 800d176:	bf00      	nop
 800d178:	3718      	adds	r7, #24
 800d17a:	46bd      	mov	sp, r7
 800d17c:	bd80      	pop	{r7, pc}
 800d17e:	bf00      	nop
 800d180:	0801cc24 	.word	0x0801cc24
 800d184:	0800d809 	.word	0x0800d809
 800d188:	2400e40c 	.word	0x2400e40c
 800d18c:	2400e408 	.word	0x2400e408
 800d190:	2400e3f4 	.word	0x2400e3f4
 800d194:	2400e3ec 	.word	0x2400e3ec

0800d198 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d198:	b480      	push	{r7}
 800d19a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d19c:	4b04      	ldr	r3, [pc, #16]	@ (800d1b0 <vTaskSuspendAll+0x18>)
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	4a03      	ldr	r2, [pc, #12]	@ (800d1b0 <vTaskSuspendAll+0x18>)
 800d1a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d1a6:	bf00      	nop
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ae:	4770      	bx	lr
 800d1b0:	2400e410 	.word	0x2400e410

0800d1b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d1c2:	4b42      	ldr	r3, [pc, #264]	@ (800d2cc <xTaskResumeAll+0x118>)
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d10b      	bne.n	800d1e2 <xTaskResumeAll+0x2e>
	__asm volatile
 800d1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1ce:	f383 8811 	msr	BASEPRI, r3
 800d1d2:	f3bf 8f6f 	isb	sy
 800d1d6:	f3bf 8f4f 	dsb	sy
 800d1da:	603b      	str	r3, [r7, #0]
}
 800d1dc:	bf00      	nop
 800d1de:	bf00      	nop
 800d1e0:	e7fd      	b.n	800d1de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d1e2:	f7fe ff79 	bl	800c0d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d1e6:	4b39      	ldr	r3, [pc, #228]	@ (800d2cc <xTaskResumeAll+0x118>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	3b01      	subs	r3, #1
 800d1ec:	4a37      	ldr	r2, [pc, #220]	@ (800d2cc <xTaskResumeAll+0x118>)
 800d1ee:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1f0:	4b36      	ldr	r3, [pc, #216]	@ (800d2cc <xTaskResumeAll+0x118>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d162      	bne.n	800d2be <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d1f8:	4b35      	ldr	r3, [pc, #212]	@ (800d2d0 <xTaskResumeAll+0x11c>)
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d05e      	beq.n	800d2be <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d200:	e02f      	b.n	800d262 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d202:	4b34      	ldr	r3, [pc, #208]	@ (800d2d4 <xTaskResumeAll+0x120>)
 800d204:	68db      	ldr	r3, [r3, #12]
 800d206:	68db      	ldr	r3, [r3, #12]
 800d208:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	3318      	adds	r3, #24
 800d20e:	4618      	mov	r0, r3
 800d210:	f7fe fe0a 	bl	800be28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	3304      	adds	r3, #4
 800d218:	4618      	mov	r0, r3
 800d21a:	f7fe fe05 	bl	800be28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d222:	4b2d      	ldr	r3, [pc, #180]	@ (800d2d8 <xTaskResumeAll+0x124>)
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	429a      	cmp	r2, r3
 800d228:	d903      	bls.n	800d232 <xTaskResumeAll+0x7e>
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d22e:	4a2a      	ldr	r2, [pc, #168]	@ (800d2d8 <xTaskResumeAll+0x124>)
 800d230:	6013      	str	r3, [r2, #0]
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d236:	4613      	mov	r3, r2
 800d238:	009b      	lsls	r3, r3, #2
 800d23a:	4413      	add	r3, r2
 800d23c:	009b      	lsls	r3, r3, #2
 800d23e:	4a27      	ldr	r2, [pc, #156]	@ (800d2dc <xTaskResumeAll+0x128>)
 800d240:	441a      	add	r2, r3
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	3304      	adds	r3, #4
 800d246:	4619      	mov	r1, r3
 800d248:	4610      	mov	r0, r2
 800d24a:	f7fe fd90 	bl	800bd6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d252:	4b23      	ldr	r3, [pc, #140]	@ (800d2e0 <xTaskResumeAll+0x12c>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d258:	429a      	cmp	r2, r3
 800d25a:	d302      	bcc.n	800d262 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d25c:	4b21      	ldr	r3, [pc, #132]	@ (800d2e4 <xTaskResumeAll+0x130>)
 800d25e:	2201      	movs	r2, #1
 800d260:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d262:	4b1c      	ldr	r3, [pc, #112]	@ (800d2d4 <xTaskResumeAll+0x120>)
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1cb      	bne.n	800d202 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d001      	beq.n	800d274 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d270:	f000 fb80 	bl	800d974 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d274:	4b1c      	ldr	r3, [pc, #112]	@ (800d2e8 <xTaskResumeAll+0x134>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d010      	beq.n	800d2a2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d280:	f000 f846 	bl	800d310 <xTaskIncrementTick>
 800d284:	4603      	mov	r3, r0
 800d286:	2b00      	cmp	r3, #0
 800d288:	d002      	beq.n	800d290 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d28a:	4b16      	ldr	r3, [pc, #88]	@ (800d2e4 <xTaskResumeAll+0x130>)
 800d28c:	2201      	movs	r2, #1
 800d28e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	3b01      	subs	r3, #1
 800d294:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d1f1      	bne.n	800d280 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d29c:	4b12      	ldr	r3, [pc, #72]	@ (800d2e8 <xTaskResumeAll+0x134>)
 800d29e:	2200      	movs	r2, #0
 800d2a0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d2a2:	4b10      	ldr	r3, [pc, #64]	@ (800d2e4 <xTaskResumeAll+0x130>)
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d009      	beq.n	800d2be <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d2ae:	4b0f      	ldr	r3, [pc, #60]	@ (800d2ec <xTaskResumeAll+0x138>)
 800d2b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2b4:	601a      	str	r2, [r3, #0]
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d2be:	f7fe ff3d 	bl	800c13c <vPortExitCritical>

	return xAlreadyYielded;
 800d2c2:	68bb      	ldr	r3, [r7, #8]
}
 800d2c4:	4618      	mov	r0, r3
 800d2c6:	3710      	adds	r7, #16
 800d2c8:	46bd      	mov	sp, r7
 800d2ca:	bd80      	pop	{r7, pc}
 800d2cc:	2400e410 	.word	0x2400e410
 800d2d0:	2400e3e8 	.word	0x2400e3e8
 800d2d4:	2400e3a8 	.word	0x2400e3a8
 800d2d8:	2400e3f0 	.word	0x2400e3f0
 800d2dc:	2400df18 	.word	0x2400df18
 800d2e0:	2400df14 	.word	0x2400df14
 800d2e4:	2400e3fc 	.word	0x2400e3fc
 800d2e8:	2400e3f8 	.word	0x2400e3f8
 800d2ec:	e000ed04 	.word	0xe000ed04

0800d2f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d2f0:	b480      	push	{r7}
 800d2f2:	b083      	sub	sp, #12
 800d2f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d2f6:	4b05      	ldr	r3, [pc, #20]	@ (800d30c <xTaskGetTickCount+0x1c>)
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d2fc:	687b      	ldr	r3, [r7, #4]
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	370c      	adds	r7, #12
 800d302:	46bd      	mov	sp, r7
 800d304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d308:	4770      	bx	lr
 800d30a:	bf00      	nop
 800d30c:	2400e3ec 	.word	0x2400e3ec

0800d310 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d310:	b580      	push	{r7, lr}
 800d312:	b086      	sub	sp, #24
 800d314:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d316:	2300      	movs	r3, #0
 800d318:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d31a:	4b4f      	ldr	r3, [pc, #316]	@ (800d458 <xTaskIncrementTick+0x148>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	f040 8090 	bne.w	800d444 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d324:	4b4d      	ldr	r3, [pc, #308]	@ (800d45c <xTaskIncrementTick+0x14c>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	3301      	adds	r3, #1
 800d32a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d32c:	4a4b      	ldr	r2, [pc, #300]	@ (800d45c <xTaskIncrementTick+0x14c>)
 800d32e:	693b      	ldr	r3, [r7, #16]
 800d330:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d121      	bne.n	800d37c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d338:	4b49      	ldr	r3, [pc, #292]	@ (800d460 <xTaskIncrementTick+0x150>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d00b      	beq.n	800d35a <xTaskIncrementTick+0x4a>
	__asm volatile
 800d342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d346:	f383 8811 	msr	BASEPRI, r3
 800d34a:	f3bf 8f6f 	isb	sy
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	603b      	str	r3, [r7, #0]
}
 800d354:	bf00      	nop
 800d356:	bf00      	nop
 800d358:	e7fd      	b.n	800d356 <xTaskIncrementTick+0x46>
 800d35a:	4b41      	ldr	r3, [pc, #260]	@ (800d460 <xTaskIncrementTick+0x150>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	60fb      	str	r3, [r7, #12]
 800d360:	4b40      	ldr	r3, [pc, #256]	@ (800d464 <xTaskIncrementTick+0x154>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4a3e      	ldr	r2, [pc, #248]	@ (800d460 <xTaskIncrementTick+0x150>)
 800d366:	6013      	str	r3, [r2, #0]
 800d368:	4a3e      	ldr	r2, [pc, #248]	@ (800d464 <xTaskIncrementTick+0x154>)
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	6013      	str	r3, [r2, #0]
 800d36e:	4b3e      	ldr	r3, [pc, #248]	@ (800d468 <xTaskIncrementTick+0x158>)
 800d370:	681b      	ldr	r3, [r3, #0]
 800d372:	3301      	adds	r3, #1
 800d374:	4a3c      	ldr	r2, [pc, #240]	@ (800d468 <xTaskIncrementTick+0x158>)
 800d376:	6013      	str	r3, [r2, #0]
 800d378:	f000 fafc 	bl	800d974 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d37c:	4b3b      	ldr	r3, [pc, #236]	@ (800d46c <xTaskIncrementTick+0x15c>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	693a      	ldr	r2, [r7, #16]
 800d382:	429a      	cmp	r2, r3
 800d384:	d349      	bcc.n	800d41a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d386:	4b36      	ldr	r3, [pc, #216]	@ (800d460 <xTaskIncrementTick+0x150>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d104      	bne.n	800d39a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d390:	4b36      	ldr	r3, [pc, #216]	@ (800d46c <xTaskIncrementTick+0x15c>)
 800d392:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d396:	601a      	str	r2, [r3, #0]
					break;
 800d398:	e03f      	b.n	800d41a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d39a:	4b31      	ldr	r3, [pc, #196]	@ (800d460 <xTaskIncrementTick+0x150>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	68db      	ldr	r3, [r3, #12]
 800d3a0:	68db      	ldr	r3, [r3, #12]
 800d3a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	685b      	ldr	r3, [r3, #4]
 800d3a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d3aa:	693a      	ldr	r2, [r7, #16]
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	429a      	cmp	r2, r3
 800d3b0:	d203      	bcs.n	800d3ba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d3b2:	4a2e      	ldr	r2, [pc, #184]	@ (800d46c <xTaskIncrementTick+0x15c>)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d3b8:	e02f      	b.n	800d41a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	3304      	adds	r3, #4
 800d3be:	4618      	mov	r0, r3
 800d3c0:	f7fe fd32 	bl	800be28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d3c4:	68bb      	ldr	r3, [r7, #8]
 800d3c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d004      	beq.n	800d3d6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	3318      	adds	r3, #24
 800d3d0:	4618      	mov	r0, r3
 800d3d2:	f7fe fd29 	bl	800be28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d3d6:	68bb      	ldr	r3, [r7, #8]
 800d3d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3da:	4b25      	ldr	r3, [pc, #148]	@ (800d470 <xTaskIncrementTick+0x160>)
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d903      	bls.n	800d3ea <xTaskIncrementTick+0xda>
 800d3e2:	68bb      	ldr	r3, [r7, #8]
 800d3e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3e6:	4a22      	ldr	r2, [pc, #136]	@ (800d470 <xTaskIncrementTick+0x160>)
 800d3e8:	6013      	str	r3, [r2, #0]
 800d3ea:	68bb      	ldr	r3, [r7, #8]
 800d3ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d3ee:	4613      	mov	r3, r2
 800d3f0:	009b      	lsls	r3, r3, #2
 800d3f2:	4413      	add	r3, r2
 800d3f4:	009b      	lsls	r3, r3, #2
 800d3f6:	4a1f      	ldr	r2, [pc, #124]	@ (800d474 <xTaskIncrementTick+0x164>)
 800d3f8:	441a      	add	r2, r3
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	3304      	adds	r3, #4
 800d3fe:	4619      	mov	r1, r3
 800d400:	4610      	mov	r0, r2
 800d402:	f7fe fcb4 	bl	800bd6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d40a:	4b1b      	ldr	r3, [pc, #108]	@ (800d478 <xTaskIncrementTick+0x168>)
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d410:	429a      	cmp	r2, r3
 800d412:	d3b8      	bcc.n	800d386 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d414:	2301      	movs	r3, #1
 800d416:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d418:	e7b5      	b.n	800d386 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d41a:	4b17      	ldr	r3, [pc, #92]	@ (800d478 <xTaskIncrementTick+0x168>)
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d420:	4914      	ldr	r1, [pc, #80]	@ (800d474 <xTaskIncrementTick+0x164>)
 800d422:	4613      	mov	r3, r2
 800d424:	009b      	lsls	r3, r3, #2
 800d426:	4413      	add	r3, r2
 800d428:	009b      	lsls	r3, r3, #2
 800d42a:	440b      	add	r3, r1
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d901      	bls.n	800d436 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d432:	2301      	movs	r3, #1
 800d434:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d436:	4b11      	ldr	r3, [pc, #68]	@ (800d47c <xTaskIncrementTick+0x16c>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d007      	beq.n	800d44e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d43e:	2301      	movs	r3, #1
 800d440:	617b      	str	r3, [r7, #20]
 800d442:	e004      	b.n	800d44e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d444:	4b0e      	ldr	r3, [pc, #56]	@ (800d480 <xTaskIncrementTick+0x170>)
 800d446:	681b      	ldr	r3, [r3, #0]
 800d448:	3301      	adds	r3, #1
 800d44a:	4a0d      	ldr	r2, [pc, #52]	@ (800d480 <xTaskIncrementTick+0x170>)
 800d44c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d44e:	697b      	ldr	r3, [r7, #20]
}
 800d450:	4618      	mov	r0, r3
 800d452:	3718      	adds	r7, #24
 800d454:	46bd      	mov	sp, r7
 800d456:	bd80      	pop	{r7, pc}
 800d458:	2400e410 	.word	0x2400e410
 800d45c:	2400e3ec 	.word	0x2400e3ec
 800d460:	2400e3a0 	.word	0x2400e3a0
 800d464:	2400e3a4 	.word	0x2400e3a4
 800d468:	2400e400 	.word	0x2400e400
 800d46c:	2400e408 	.word	0x2400e408
 800d470:	2400e3f0 	.word	0x2400e3f0
 800d474:	2400df18 	.word	0x2400df18
 800d478:	2400df14 	.word	0x2400df14
 800d47c:	2400e3fc 	.word	0x2400e3fc
 800d480:	2400e3f8 	.word	0x2400e3f8

0800d484 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d48a:	4b28      	ldr	r3, [pc, #160]	@ (800d52c <vTaskSwitchContext+0xa8>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d003      	beq.n	800d49a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d492:	4b27      	ldr	r3, [pc, #156]	@ (800d530 <vTaskSwitchContext+0xac>)
 800d494:	2201      	movs	r2, #1
 800d496:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d498:	e042      	b.n	800d520 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800d49a:	4b25      	ldr	r3, [pc, #148]	@ (800d530 <vTaskSwitchContext+0xac>)
 800d49c:	2200      	movs	r2, #0
 800d49e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4a0:	4b24      	ldr	r3, [pc, #144]	@ (800d534 <vTaskSwitchContext+0xb0>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	60fb      	str	r3, [r7, #12]
 800d4a6:	e011      	b.n	800d4cc <vTaskSwitchContext+0x48>
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d10b      	bne.n	800d4c6 <vTaskSwitchContext+0x42>
	__asm volatile
 800d4ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b2:	f383 8811 	msr	BASEPRI, r3
 800d4b6:	f3bf 8f6f 	isb	sy
 800d4ba:	f3bf 8f4f 	dsb	sy
 800d4be:	607b      	str	r3, [r7, #4]
}
 800d4c0:	bf00      	nop
 800d4c2:	bf00      	nop
 800d4c4:	e7fd      	b.n	800d4c2 <vTaskSwitchContext+0x3e>
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	3b01      	subs	r3, #1
 800d4ca:	60fb      	str	r3, [r7, #12]
 800d4cc:	491a      	ldr	r1, [pc, #104]	@ (800d538 <vTaskSwitchContext+0xb4>)
 800d4ce:	68fa      	ldr	r2, [r7, #12]
 800d4d0:	4613      	mov	r3, r2
 800d4d2:	009b      	lsls	r3, r3, #2
 800d4d4:	4413      	add	r3, r2
 800d4d6:	009b      	lsls	r3, r3, #2
 800d4d8:	440b      	add	r3, r1
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d0e3      	beq.n	800d4a8 <vTaskSwitchContext+0x24>
 800d4e0:	68fa      	ldr	r2, [r7, #12]
 800d4e2:	4613      	mov	r3, r2
 800d4e4:	009b      	lsls	r3, r3, #2
 800d4e6:	4413      	add	r3, r2
 800d4e8:	009b      	lsls	r3, r3, #2
 800d4ea:	4a13      	ldr	r2, [pc, #76]	@ (800d538 <vTaskSwitchContext+0xb4>)
 800d4ec:	4413      	add	r3, r2
 800d4ee:	60bb      	str	r3, [r7, #8]
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	685a      	ldr	r2, [r3, #4]
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	605a      	str	r2, [r3, #4]
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	685a      	ldr	r2, [r3, #4]
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	3308      	adds	r3, #8
 800d502:	429a      	cmp	r2, r3
 800d504:	d104      	bne.n	800d510 <vTaskSwitchContext+0x8c>
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	685a      	ldr	r2, [r3, #4]
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	605a      	str	r2, [r3, #4]
 800d510:	68bb      	ldr	r3, [r7, #8]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	4a09      	ldr	r2, [pc, #36]	@ (800d53c <vTaskSwitchContext+0xb8>)
 800d518:	6013      	str	r3, [r2, #0]
 800d51a:	4a06      	ldr	r2, [pc, #24]	@ (800d534 <vTaskSwitchContext+0xb0>)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	6013      	str	r3, [r2, #0]
}
 800d520:	bf00      	nop
 800d522:	3714      	adds	r7, #20
 800d524:	46bd      	mov	sp, r7
 800d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d52a:	4770      	bx	lr
 800d52c:	2400e410 	.word	0x2400e410
 800d530:	2400e3fc 	.word	0x2400e3fc
 800d534:	2400e3f0 	.word	0x2400e3f0
 800d538:	2400df18 	.word	0x2400df18
 800d53c:	2400df14 	.word	0x2400df14

0800d540 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
 800d548:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d10b      	bne.n	800d568 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800d550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d554:	f383 8811 	msr	BASEPRI, r3
 800d558:	f3bf 8f6f 	isb	sy
 800d55c:	f3bf 8f4f 	dsb	sy
 800d560:	60fb      	str	r3, [r7, #12]
}
 800d562:	bf00      	nop
 800d564:	bf00      	nop
 800d566:	e7fd      	b.n	800d564 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d568:	4b07      	ldr	r3, [pc, #28]	@ (800d588 <vTaskPlaceOnEventList+0x48>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	3318      	adds	r3, #24
 800d56e:	4619      	mov	r1, r3
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f7fe fc20 	bl	800bdb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d576:	2101      	movs	r1, #1
 800d578:	6838      	ldr	r0, [r7, #0]
 800d57a:	f000 faa9 	bl	800dad0 <prvAddCurrentTaskToDelayedList>
}
 800d57e:	bf00      	nop
 800d580:	3710      	adds	r7, #16
 800d582:	46bd      	mov	sp, r7
 800d584:	bd80      	pop	{r7, pc}
 800d586:	bf00      	nop
 800d588:	2400df14 	.word	0x2400df14

0800d58c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b086      	sub	sp, #24
 800d590:	af00      	add	r7, sp, #0
 800d592:	60f8      	str	r0, [r7, #12]
 800d594:	60b9      	str	r1, [r7, #8]
 800d596:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d10b      	bne.n	800d5b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800d59e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5a2:	f383 8811 	msr	BASEPRI, r3
 800d5a6:	f3bf 8f6f 	isb	sy
 800d5aa:	f3bf 8f4f 	dsb	sy
 800d5ae:	617b      	str	r3, [r7, #20]
}
 800d5b0:	bf00      	nop
 800d5b2:	bf00      	nop
 800d5b4:	e7fd      	b.n	800d5b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5b6:	4b0a      	ldr	r3, [pc, #40]	@ (800d5e0 <vTaskPlaceOnEventListRestricted+0x54>)
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	3318      	adds	r3, #24
 800d5bc:	4619      	mov	r1, r3
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f7fe fbd5 	bl	800bd6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d002      	beq.n	800d5d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800d5ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d5ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d5d0:	6879      	ldr	r1, [r7, #4]
 800d5d2:	68b8      	ldr	r0, [r7, #8]
 800d5d4:	f000 fa7c 	bl	800dad0 <prvAddCurrentTaskToDelayedList>
	}
 800d5d8:	bf00      	nop
 800d5da:	3718      	adds	r7, #24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	2400df14 	.word	0x2400df14

0800d5e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b086      	sub	sp, #24
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	68db      	ldr	r3, [r3, #12]
 800d5f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d10b      	bne.n	800d612 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800d5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5fe:	f383 8811 	msr	BASEPRI, r3
 800d602:	f3bf 8f6f 	isb	sy
 800d606:	f3bf 8f4f 	dsb	sy
 800d60a:	60fb      	str	r3, [r7, #12]
}
 800d60c:	bf00      	nop
 800d60e:	bf00      	nop
 800d610:	e7fd      	b.n	800d60e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d612:	693b      	ldr	r3, [r7, #16]
 800d614:	3318      	adds	r3, #24
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fc06 	bl	800be28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d61c:	4b1d      	ldr	r3, [pc, #116]	@ (800d694 <xTaskRemoveFromEventList+0xb0>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d11d      	bne.n	800d660 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	3304      	adds	r3, #4
 800d628:	4618      	mov	r0, r3
 800d62a:	f7fe fbfd 	bl	800be28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d62e:	693b      	ldr	r3, [r7, #16]
 800d630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d632:	4b19      	ldr	r3, [pc, #100]	@ (800d698 <xTaskRemoveFromEventList+0xb4>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	429a      	cmp	r2, r3
 800d638:	d903      	bls.n	800d642 <xTaskRemoveFromEventList+0x5e>
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d63e:	4a16      	ldr	r2, [pc, #88]	@ (800d698 <xTaskRemoveFromEventList+0xb4>)
 800d640:	6013      	str	r3, [r2, #0]
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d646:	4613      	mov	r3, r2
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	4413      	add	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	4a13      	ldr	r2, [pc, #76]	@ (800d69c <xTaskRemoveFromEventList+0xb8>)
 800d650:	441a      	add	r2, r3
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	3304      	adds	r3, #4
 800d656:	4619      	mov	r1, r3
 800d658:	4610      	mov	r0, r2
 800d65a:	f7fe fb88 	bl	800bd6e <vListInsertEnd>
 800d65e:	e005      	b.n	800d66c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d660:	693b      	ldr	r3, [r7, #16]
 800d662:	3318      	adds	r3, #24
 800d664:	4619      	mov	r1, r3
 800d666:	480e      	ldr	r0, [pc, #56]	@ (800d6a0 <xTaskRemoveFromEventList+0xbc>)
 800d668:	f7fe fb81 	bl	800bd6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d670:	4b0c      	ldr	r3, [pc, #48]	@ (800d6a4 <xTaskRemoveFromEventList+0xc0>)
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d676:	429a      	cmp	r2, r3
 800d678:	d905      	bls.n	800d686 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d67a:	2301      	movs	r3, #1
 800d67c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d67e:	4b0a      	ldr	r3, [pc, #40]	@ (800d6a8 <xTaskRemoveFromEventList+0xc4>)
 800d680:	2201      	movs	r2, #1
 800d682:	601a      	str	r2, [r3, #0]
 800d684:	e001      	b.n	800d68a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800d686:	2300      	movs	r3, #0
 800d688:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d68a:	697b      	ldr	r3, [r7, #20]
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3718      	adds	r7, #24
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	2400e410 	.word	0x2400e410
 800d698:	2400e3f0 	.word	0x2400e3f0
 800d69c:	2400df18 	.word	0x2400df18
 800d6a0:	2400e3a8 	.word	0x2400e3a8
 800d6a4:	2400df14 	.word	0x2400df14
 800d6a8:	2400e3fc 	.word	0x2400e3fc

0800d6ac <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6ac:	b580      	push	{r7, lr}
 800d6ae:	b084      	sub	sp, #16
 800d6b0:	af00      	add	r7, sp, #0
 800d6b2:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d10b      	bne.n	800d6d2 <vTaskSetTimeOutState+0x26>
	__asm volatile
 800d6ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6be:	f383 8811 	msr	BASEPRI, r3
 800d6c2:	f3bf 8f6f 	isb	sy
 800d6c6:	f3bf 8f4f 	dsb	sy
 800d6ca:	60fb      	str	r3, [r7, #12]
}
 800d6cc:	bf00      	nop
 800d6ce:	bf00      	nop
 800d6d0:	e7fd      	b.n	800d6ce <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800d6d2:	f7fe fd01 	bl	800c0d8 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6d6:	4b07      	ldr	r3, [pc, #28]	@ (800d6f4 <vTaskSetTimeOutState+0x48>)
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800d6de:	4b06      	ldr	r3, [pc, #24]	@ (800d6f8 <vTaskSetTimeOutState+0x4c>)
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 800d6e6:	f7fe fd29 	bl	800c13c <vPortExitCritical>
}
 800d6ea:	bf00      	nop
 800d6ec:	3710      	adds	r7, #16
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	2400e400 	.word	0x2400e400
 800d6f8:	2400e3ec 	.word	0x2400e3ec

0800d6fc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6fc:	b480      	push	{r7}
 800d6fe:	b083      	sub	sp, #12
 800d700:	af00      	add	r7, sp, #0
 800d702:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d704:	4b06      	ldr	r3, [pc, #24]	@ (800d720 <vTaskInternalSetTimeOutState+0x24>)
 800d706:	681a      	ldr	r2, [r3, #0]
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d70c:	4b05      	ldr	r3, [pc, #20]	@ (800d724 <vTaskInternalSetTimeOutState+0x28>)
 800d70e:	681a      	ldr	r2, [r3, #0]
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	605a      	str	r2, [r3, #4]
}
 800d714:	bf00      	nop
 800d716:	370c      	adds	r7, #12
 800d718:	46bd      	mov	sp, r7
 800d71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d71e:	4770      	bx	lr
 800d720:	2400e400 	.word	0x2400e400
 800d724:	2400e3ec 	.word	0x2400e3ec

0800d728 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b088      	sub	sp, #32
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d10b      	bne.n	800d750 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800d738:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d73c:	f383 8811 	msr	BASEPRI, r3
 800d740:	f3bf 8f6f 	isb	sy
 800d744:	f3bf 8f4f 	dsb	sy
 800d748:	613b      	str	r3, [r7, #16]
}
 800d74a:	bf00      	nop
 800d74c:	bf00      	nop
 800d74e:	e7fd      	b.n	800d74c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d10b      	bne.n	800d76e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800d756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d75a:	f383 8811 	msr	BASEPRI, r3
 800d75e:	f3bf 8f6f 	isb	sy
 800d762:	f3bf 8f4f 	dsb	sy
 800d766:	60fb      	str	r3, [r7, #12]
}
 800d768:	bf00      	nop
 800d76a:	bf00      	nop
 800d76c:	e7fd      	b.n	800d76a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800d76e:	f7fe fcb3 	bl	800c0d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d772:	4b1d      	ldr	r3, [pc, #116]	@ (800d7e8 <xTaskCheckForTimeOut+0xc0>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	69ba      	ldr	r2, [r7, #24]
 800d77e:	1ad3      	subs	r3, r2, r3
 800d780:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d78a:	d102      	bne.n	800d792 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d78c:	2300      	movs	r3, #0
 800d78e:	61fb      	str	r3, [r7, #28]
 800d790:	e023      	b.n	800d7da <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	4b15      	ldr	r3, [pc, #84]	@ (800d7ec <xTaskCheckForTimeOut+0xc4>)
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	429a      	cmp	r2, r3
 800d79c:	d007      	beq.n	800d7ae <xTaskCheckForTimeOut+0x86>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	685b      	ldr	r3, [r3, #4]
 800d7a2:	69ba      	ldr	r2, [r7, #24]
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d302      	bcc.n	800d7ae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	61fb      	str	r3, [r7, #28]
 800d7ac:	e015      	b.n	800d7da <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	697a      	ldr	r2, [r7, #20]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d20b      	bcs.n	800d7d0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d7b8:	683b      	ldr	r3, [r7, #0]
 800d7ba:	681a      	ldr	r2, [r3, #0]
 800d7bc:	697b      	ldr	r3, [r7, #20]
 800d7be:	1ad2      	subs	r2, r2, r3
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d7c4:	6878      	ldr	r0, [r7, #4]
 800d7c6:	f7ff ff99 	bl	800d6fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	61fb      	str	r3, [r7, #28]
 800d7ce:	e004      	b.n	800d7da <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d7d0:	683b      	ldr	r3, [r7, #0]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d7da:	f7fe fcaf 	bl	800c13c <vPortExitCritical>

	return xReturn;
 800d7de:	69fb      	ldr	r3, [r7, #28]
}
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	3720      	adds	r7, #32
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	bd80      	pop	{r7, pc}
 800d7e8:	2400e3ec 	.word	0x2400e3ec
 800d7ec:	2400e400 	.word	0x2400e400

0800d7f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d7f4:	4b03      	ldr	r3, [pc, #12]	@ (800d804 <vTaskMissedYield+0x14>)
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	601a      	str	r2, [r3, #0]
}
 800d7fa:	bf00      	nop
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d802:	4770      	bx	lr
 800d804:	2400e3fc 	.word	0x2400e3fc

0800d808 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b082      	sub	sp, #8
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d810:	f000 f852 	bl	800d8b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d814:	4b06      	ldr	r3, [pc, #24]	@ (800d830 <prvIdleTask+0x28>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	2b01      	cmp	r3, #1
 800d81a:	d9f9      	bls.n	800d810 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d81c:	4b05      	ldr	r3, [pc, #20]	@ (800d834 <prvIdleTask+0x2c>)
 800d81e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d822:	601a      	str	r2, [r3, #0]
 800d824:	f3bf 8f4f 	dsb	sy
 800d828:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d82c:	e7f0      	b.n	800d810 <prvIdleTask+0x8>
 800d82e:	bf00      	nop
 800d830:	2400df18 	.word	0x2400df18
 800d834:	e000ed04 	.word	0xe000ed04

0800d838 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b082      	sub	sp, #8
 800d83c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d83e:	2300      	movs	r3, #0
 800d840:	607b      	str	r3, [r7, #4]
 800d842:	e00c      	b.n	800d85e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d844:	687a      	ldr	r2, [r7, #4]
 800d846:	4613      	mov	r3, r2
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	4413      	add	r3, r2
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	4a12      	ldr	r2, [pc, #72]	@ (800d898 <prvInitialiseTaskLists+0x60>)
 800d850:	4413      	add	r3, r2
 800d852:	4618      	mov	r0, r3
 800d854:	f7fe fa5e 	bl	800bd14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	3301      	adds	r3, #1
 800d85c:	607b      	str	r3, [r7, #4]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2b37      	cmp	r3, #55	@ 0x37
 800d862:	d9ef      	bls.n	800d844 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d864:	480d      	ldr	r0, [pc, #52]	@ (800d89c <prvInitialiseTaskLists+0x64>)
 800d866:	f7fe fa55 	bl	800bd14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d86a:	480d      	ldr	r0, [pc, #52]	@ (800d8a0 <prvInitialiseTaskLists+0x68>)
 800d86c:	f7fe fa52 	bl	800bd14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d870:	480c      	ldr	r0, [pc, #48]	@ (800d8a4 <prvInitialiseTaskLists+0x6c>)
 800d872:	f7fe fa4f 	bl	800bd14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d876:	480c      	ldr	r0, [pc, #48]	@ (800d8a8 <prvInitialiseTaskLists+0x70>)
 800d878:	f7fe fa4c 	bl	800bd14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d87c:	480b      	ldr	r0, [pc, #44]	@ (800d8ac <prvInitialiseTaskLists+0x74>)
 800d87e:	f7fe fa49 	bl	800bd14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d882:	4b0b      	ldr	r3, [pc, #44]	@ (800d8b0 <prvInitialiseTaskLists+0x78>)
 800d884:	4a05      	ldr	r2, [pc, #20]	@ (800d89c <prvInitialiseTaskLists+0x64>)
 800d886:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d888:	4b0a      	ldr	r3, [pc, #40]	@ (800d8b4 <prvInitialiseTaskLists+0x7c>)
 800d88a:	4a05      	ldr	r2, [pc, #20]	@ (800d8a0 <prvInitialiseTaskLists+0x68>)
 800d88c:	601a      	str	r2, [r3, #0]
}
 800d88e:	bf00      	nop
 800d890:	3708      	adds	r7, #8
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
 800d896:	bf00      	nop
 800d898:	2400df18 	.word	0x2400df18
 800d89c:	2400e378 	.word	0x2400e378
 800d8a0:	2400e38c 	.word	0x2400e38c
 800d8a4:	2400e3a8 	.word	0x2400e3a8
 800d8a8:	2400e3bc 	.word	0x2400e3bc
 800d8ac:	2400e3d4 	.word	0x2400e3d4
 800d8b0:	2400e3a0 	.word	0x2400e3a0
 800d8b4:	2400e3a4 	.word	0x2400e3a4

0800d8b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b082      	sub	sp, #8
 800d8bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8be:	e019      	b.n	800d8f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d8c0:	f7fe fc0a 	bl	800c0d8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8c4:	4b10      	ldr	r3, [pc, #64]	@ (800d908 <prvCheckTasksWaitingTermination+0x50>)
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	3304      	adds	r3, #4
 800d8d0:	4618      	mov	r0, r3
 800d8d2:	f7fe faa9 	bl	800be28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d8d6:	4b0d      	ldr	r3, [pc, #52]	@ (800d90c <prvCheckTasksWaitingTermination+0x54>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	3b01      	subs	r3, #1
 800d8dc:	4a0b      	ldr	r2, [pc, #44]	@ (800d90c <prvCheckTasksWaitingTermination+0x54>)
 800d8de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d8e0:	4b0b      	ldr	r3, [pc, #44]	@ (800d910 <prvCheckTasksWaitingTermination+0x58>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	3b01      	subs	r3, #1
 800d8e6:	4a0a      	ldr	r2, [pc, #40]	@ (800d910 <prvCheckTasksWaitingTermination+0x58>)
 800d8e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d8ea:	f7fe fc27 	bl	800c13c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 f810 	bl	800d914 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8f4:	4b06      	ldr	r3, [pc, #24]	@ (800d910 <prvCheckTasksWaitingTermination+0x58>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d1e1      	bne.n	800d8c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8fc:	bf00      	nop
 800d8fe:	bf00      	nop
 800d900:	3708      	adds	r7, #8
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	2400e3bc 	.word	0x2400e3bc
 800d90c:	2400e3e8 	.word	0x2400e3e8
 800d910:	2400e3d0 	.word	0x2400e3d0

0800d914 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d914:	b580      	push	{r7, lr}
 800d916:	b084      	sub	sp, #16
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d922:	2b00      	cmp	r3, #0
 800d924:	d108      	bne.n	800d938 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fe f8d2 	bl	800bad4 <vPortFree>
				vPortFree( pxTCB );
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7fe f8cf 	bl	800bad4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d936:	e019      	b.n	800d96c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d103      	bne.n	800d94a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d942:	6878      	ldr	r0, [r7, #4]
 800d944:	f7fe f8c6 	bl	800bad4 <vPortFree>
	}
 800d948:	e010      	b.n	800d96c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800d950:	2b02      	cmp	r3, #2
 800d952:	d00b      	beq.n	800d96c <prvDeleteTCB+0x58>
	__asm volatile
 800d954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	60fb      	str	r3, [r7, #12]
}
 800d966:	bf00      	nop
 800d968:	bf00      	nop
 800d96a:	e7fd      	b.n	800d968 <prvDeleteTCB+0x54>
	}
 800d96c:	bf00      	nop
 800d96e:	3710      	adds	r7, #16
 800d970:	46bd      	mov	sp, r7
 800d972:	bd80      	pop	{r7, pc}

0800d974 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d974:	b480      	push	{r7}
 800d976:	b083      	sub	sp, #12
 800d978:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d97a:	4b0c      	ldr	r3, [pc, #48]	@ (800d9ac <prvResetNextTaskUnblockTime+0x38>)
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d104      	bne.n	800d98e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d984:	4b0a      	ldr	r3, [pc, #40]	@ (800d9b0 <prvResetNextTaskUnblockTime+0x3c>)
 800d986:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d98a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d98c:	e008      	b.n	800d9a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d98e:	4b07      	ldr	r3, [pc, #28]	@ (800d9ac <prvResetNextTaskUnblockTime+0x38>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	4a04      	ldr	r2, [pc, #16]	@ (800d9b0 <prvResetNextTaskUnblockTime+0x3c>)
 800d99e:	6013      	str	r3, [r2, #0]
}
 800d9a0:	bf00      	nop
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr
 800d9ac:	2400e3a0 	.word	0x2400e3a0
 800d9b0:	2400e408 	.word	0x2400e408

0800d9b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d9ba:	4b0b      	ldr	r3, [pc, #44]	@ (800d9e8 <xTaskGetSchedulerState+0x34>)
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d102      	bne.n	800d9c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	607b      	str	r3, [r7, #4]
 800d9c6:	e008      	b.n	800d9da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9c8:	4b08      	ldr	r3, [pc, #32]	@ (800d9ec <xTaskGetSchedulerState+0x38>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d102      	bne.n	800d9d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d9d0:	2302      	movs	r3, #2
 800d9d2:	607b      	str	r3, [r7, #4]
 800d9d4:	e001      	b.n	800d9da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d9da:	687b      	ldr	r3, [r7, #4]
	}
 800d9dc:	4618      	mov	r0, r3
 800d9de:	370c      	adds	r7, #12
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr
 800d9e8:	2400e3f4 	.word	0x2400e3f4
 800d9ec:	2400e410 	.word	0x2400e410

0800d9f0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b086      	sub	sp, #24
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d9fc:	2300      	movs	r3, #0
 800d9fe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d058      	beq.n	800dab8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800da06:	4b2f      	ldr	r3, [pc, #188]	@ (800dac4 <xTaskPriorityDisinherit+0xd4>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	693a      	ldr	r2, [r7, #16]
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d00b      	beq.n	800da28 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800da10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da14:	f383 8811 	msr	BASEPRI, r3
 800da18:	f3bf 8f6f 	isb	sy
 800da1c:	f3bf 8f4f 	dsb	sy
 800da20:	60fb      	str	r3, [r7, #12]
}
 800da22:	bf00      	nop
 800da24:	bf00      	nop
 800da26:	e7fd      	b.n	800da24 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800da28:	693b      	ldr	r3, [r7, #16]
 800da2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d10b      	bne.n	800da48 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800da30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da34:	f383 8811 	msr	BASEPRI, r3
 800da38:	f3bf 8f6f 	isb	sy
 800da3c:	f3bf 8f4f 	dsb	sy
 800da40:	60bb      	str	r3, [r7, #8]
}
 800da42:	bf00      	nop
 800da44:	bf00      	nop
 800da46:	e7fd      	b.n	800da44 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800da48:	693b      	ldr	r3, [r7, #16]
 800da4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da4c:	1e5a      	subs	r2, r3, #1
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da5a:	429a      	cmp	r2, r3
 800da5c:	d02c      	beq.n	800dab8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da5e:	693b      	ldr	r3, [r7, #16]
 800da60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800da62:	2b00      	cmp	r3, #0
 800da64:	d128      	bne.n	800dab8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	3304      	adds	r3, #4
 800da6a:	4618      	mov	r0, r3
 800da6c:	f7fe f9dc 	bl	800be28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800da74:	693b      	ldr	r3, [r7, #16]
 800da76:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da78:	693b      	ldr	r3, [r7, #16]
 800da7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da7c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da88:	4b0f      	ldr	r3, [pc, #60]	@ (800dac8 <xTaskPriorityDisinherit+0xd8>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	429a      	cmp	r2, r3
 800da8e:	d903      	bls.n	800da98 <xTaskPriorityDisinherit+0xa8>
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da94:	4a0c      	ldr	r2, [pc, #48]	@ (800dac8 <xTaskPriorityDisinherit+0xd8>)
 800da96:	6013      	str	r3, [r2, #0]
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800da9c:	4613      	mov	r3, r2
 800da9e:	009b      	lsls	r3, r3, #2
 800daa0:	4413      	add	r3, r2
 800daa2:	009b      	lsls	r3, r3, #2
 800daa4:	4a09      	ldr	r2, [pc, #36]	@ (800dacc <xTaskPriorityDisinherit+0xdc>)
 800daa6:	441a      	add	r2, r3
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	3304      	adds	r3, #4
 800daac:	4619      	mov	r1, r3
 800daae:	4610      	mov	r0, r2
 800dab0:	f7fe f95d 	bl	800bd6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dab4:	2301      	movs	r3, #1
 800dab6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dab8:	697b      	ldr	r3, [r7, #20]
	}
 800daba:	4618      	mov	r0, r3
 800dabc:	3718      	adds	r7, #24
 800dabe:	46bd      	mov	sp, r7
 800dac0:	bd80      	pop	{r7, pc}
 800dac2:	bf00      	nop
 800dac4:	2400df14 	.word	0x2400df14
 800dac8:	2400e3f0 	.word	0x2400e3f0
 800dacc:	2400df18 	.word	0x2400df18

0800dad0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dada:	4b21      	ldr	r3, [pc, #132]	@ (800db60 <prvAddCurrentTaskToDelayedList+0x90>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dae0:	4b20      	ldr	r3, [pc, #128]	@ (800db64 <prvAddCurrentTaskToDelayedList+0x94>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	3304      	adds	r3, #4
 800dae6:	4618      	mov	r0, r3
 800dae8:	f7fe f99e 	bl	800be28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800daf2:	d10a      	bne.n	800db0a <prvAddCurrentTaskToDelayedList+0x3a>
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d007      	beq.n	800db0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dafa:	4b1a      	ldr	r3, [pc, #104]	@ (800db64 <prvAddCurrentTaskToDelayedList+0x94>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	3304      	adds	r3, #4
 800db00:	4619      	mov	r1, r3
 800db02:	4819      	ldr	r0, [pc, #100]	@ (800db68 <prvAddCurrentTaskToDelayedList+0x98>)
 800db04:	f7fe f933 	bl	800bd6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db08:	e026      	b.n	800db58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db0a:	68fa      	ldr	r2, [r7, #12]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	4413      	add	r3, r2
 800db10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db12:	4b14      	ldr	r3, [pc, #80]	@ (800db64 <prvAddCurrentTaskToDelayedList+0x94>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	68ba      	ldr	r2, [r7, #8]
 800db18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db1a:	68ba      	ldr	r2, [r7, #8]
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	429a      	cmp	r2, r3
 800db20:	d209      	bcs.n	800db36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db22:	4b12      	ldr	r3, [pc, #72]	@ (800db6c <prvAddCurrentTaskToDelayedList+0x9c>)
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	4b0f      	ldr	r3, [pc, #60]	@ (800db64 <prvAddCurrentTaskToDelayedList+0x94>)
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	3304      	adds	r3, #4
 800db2c:	4619      	mov	r1, r3
 800db2e:	4610      	mov	r0, r2
 800db30:	f7fe f941 	bl	800bdb6 <vListInsert>
}
 800db34:	e010      	b.n	800db58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db36:	4b0e      	ldr	r3, [pc, #56]	@ (800db70 <prvAddCurrentTaskToDelayedList+0xa0>)
 800db38:	681a      	ldr	r2, [r3, #0]
 800db3a:	4b0a      	ldr	r3, [pc, #40]	@ (800db64 <prvAddCurrentTaskToDelayedList+0x94>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	3304      	adds	r3, #4
 800db40:	4619      	mov	r1, r3
 800db42:	4610      	mov	r0, r2
 800db44:	f7fe f937 	bl	800bdb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db48:	4b0a      	ldr	r3, [pc, #40]	@ (800db74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d202      	bcs.n	800db58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800db52:	4a08      	ldr	r2, [pc, #32]	@ (800db74 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	6013      	str	r3, [r2, #0]
}
 800db58:	bf00      	nop
 800db5a:	3710      	adds	r7, #16
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	2400e3ec 	.word	0x2400e3ec
 800db64:	2400df14 	.word	0x2400df14
 800db68:	2400e3d4 	.word	0x2400e3d4
 800db6c:	2400e3a4 	.word	0x2400e3a4
 800db70:	2400e3a0 	.word	0x2400e3a0
 800db74:	2400e408 	.word	0x2400e408

0800db78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b08a      	sub	sp, #40	@ 0x28
 800db7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800db7e:	2300      	movs	r3, #0
 800db80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800db82:	f000 fb13 	bl	800e1ac <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db86:	4b1d      	ldr	r3, [pc, #116]	@ (800dbfc <xTimerCreateTimerTask+0x84>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d021      	beq.n	800dbd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800db8e:	2300      	movs	r3, #0
 800db90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800db92:	2300      	movs	r3, #0
 800db94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800db96:	1d3a      	adds	r2, r7, #4
 800db98:	f107 0108 	add.w	r1, r7, #8
 800db9c:	f107 030c 	add.w	r3, r7, #12
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7fd feaf 	bl	800b904 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800dba6:	6879      	ldr	r1, [r7, #4]
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	68fa      	ldr	r2, [r7, #12]
 800dbac:	9202      	str	r2, [sp, #8]
 800dbae:	9301      	str	r3, [sp, #4]
 800dbb0:	2302      	movs	r3, #2
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	2300      	movs	r3, #0
 800dbb6:	460a      	mov	r2, r1
 800dbb8:	4911      	ldr	r1, [pc, #68]	@ (800dc00 <xTimerCreateTimerTask+0x88>)
 800dbba:	4812      	ldr	r0, [pc, #72]	@ (800dc04 <xTimerCreateTimerTask+0x8c>)
 800dbbc:	f7ff f8a8 	bl	800cd10 <xTaskCreateStatic>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	4a11      	ldr	r2, [pc, #68]	@ (800dc08 <xTimerCreateTimerTask+0x90>)
 800dbc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dbc6:	4b10      	ldr	r3, [pc, #64]	@ (800dc08 <xTimerCreateTimerTask+0x90>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d001      	beq.n	800dbd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dbce:	2301      	movs	r3, #1
 800dbd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dbd2:	697b      	ldr	r3, [r7, #20]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d10b      	bne.n	800dbf0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800dbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbdc:	f383 8811 	msr	BASEPRI, r3
 800dbe0:	f3bf 8f6f 	isb	sy
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	613b      	str	r3, [r7, #16]
}
 800dbea:	bf00      	nop
 800dbec:	bf00      	nop
 800dbee:	e7fd      	b.n	800dbec <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dbf0:	697b      	ldr	r3, [r7, #20]
}
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	3718      	adds	r7, #24
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
 800dbfa:	bf00      	nop
 800dbfc:	2400e444 	.word	0x2400e444
 800dc00:	0801cc2c 	.word	0x0801cc2c
 800dc04:	0800dd45 	.word	0x0800dd45
 800dc08:	2400e448 	.word	0x2400e448

0800dc0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b08a      	sub	sp, #40	@ 0x28
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	60f8      	str	r0, [r7, #12]
 800dc14:	60b9      	str	r1, [r7, #8]
 800dc16:	607a      	str	r2, [r7, #4]
 800dc18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d10b      	bne.n	800dc3c <xTimerGenericCommand+0x30>
	__asm volatile
 800dc24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc28:	f383 8811 	msr	BASEPRI, r3
 800dc2c:	f3bf 8f6f 	isb	sy
 800dc30:	f3bf 8f4f 	dsb	sy
 800dc34:	623b      	str	r3, [r7, #32]
}
 800dc36:	bf00      	nop
 800dc38:	bf00      	nop
 800dc3a:	e7fd      	b.n	800dc38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dc3c:	4b19      	ldr	r3, [pc, #100]	@ (800dca4 <xTimerGenericCommand+0x98>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d02a      	beq.n	800dc9a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	2b05      	cmp	r3, #5
 800dc54:	dc18      	bgt.n	800dc88 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc56:	f7ff fead 	bl	800d9b4 <xTaskGetSchedulerState>
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	2b02      	cmp	r3, #2
 800dc5e:	d109      	bne.n	800dc74 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc60:	4b10      	ldr	r3, [pc, #64]	@ (800dca4 <xTimerGenericCommand+0x98>)
 800dc62:	6818      	ldr	r0, [r3, #0]
 800dc64:	f107 0110 	add.w	r1, r7, #16
 800dc68:	2300      	movs	r3, #0
 800dc6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dc6c:	f7fe fc60 	bl	800c530 <xQueueGenericSend>
 800dc70:	6278      	str	r0, [r7, #36]	@ 0x24
 800dc72:	e012      	b.n	800dc9a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc74:	4b0b      	ldr	r3, [pc, #44]	@ (800dca4 <xTimerGenericCommand+0x98>)
 800dc76:	6818      	ldr	r0, [r3, #0]
 800dc78:	f107 0110 	add.w	r1, r7, #16
 800dc7c:	2300      	movs	r3, #0
 800dc7e:	2200      	movs	r2, #0
 800dc80:	f7fe fc56 	bl	800c530 <xQueueGenericSend>
 800dc84:	6278      	str	r0, [r7, #36]	@ 0x24
 800dc86:	e008      	b.n	800dc9a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dc88:	4b06      	ldr	r3, [pc, #24]	@ (800dca4 <xTimerGenericCommand+0x98>)
 800dc8a:	6818      	ldr	r0, [r3, #0]
 800dc8c:	f107 0110 	add.w	r1, r7, #16
 800dc90:	2300      	movs	r3, #0
 800dc92:	683a      	ldr	r2, [r7, #0]
 800dc94:	f7fe fd4e 	bl	800c734 <xQueueGenericSendFromISR>
 800dc98:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dc9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	3728      	adds	r7, #40	@ 0x28
 800dca0:	46bd      	mov	sp, r7
 800dca2:	bd80      	pop	{r7, pc}
 800dca4:	2400e444 	.word	0x2400e444

0800dca8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b088      	sub	sp, #32
 800dcac:	af02      	add	r7, sp, #8
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dcb2:	4b23      	ldr	r3, [pc, #140]	@ (800dd40 <prvProcessExpiredTimer+0x98>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	68db      	ldr	r3, [r3, #12]
 800dcb8:	68db      	ldr	r3, [r3, #12]
 800dcba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dcbc:	697b      	ldr	r3, [r7, #20]
 800dcbe:	3304      	adds	r3, #4
 800dcc0:	4618      	mov	r0, r3
 800dcc2:	f7fe f8b1 	bl	800be28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dcc6:	697b      	ldr	r3, [r7, #20]
 800dcc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dccc:	f003 0304 	and.w	r3, r3, #4
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d023      	beq.n	800dd1c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dcd4:	697b      	ldr	r3, [r7, #20]
 800dcd6:	699a      	ldr	r2, [r3, #24]
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	18d1      	adds	r1, r2, r3
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	683a      	ldr	r2, [r7, #0]
 800dce0:	6978      	ldr	r0, [r7, #20]
 800dce2:	f000 f8d5 	bl	800de90 <prvInsertTimerInActiveList>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d020      	beq.n	800dd2e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dcec:	2300      	movs	r3, #0
 800dcee:	9300      	str	r3, [sp, #0]
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	687a      	ldr	r2, [r7, #4]
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	6978      	ldr	r0, [r7, #20]
 800dcf8:	f7ff ff88 	bl	800dc0c <xTimerGenericCommand>
 800dcfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d114      	bne.n	800dd2e <prvProcessExpiredTimer+0x86>
	__asm volatile
 800dd04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd08:	f383 8811 	msr	BASEPRI, r3
 800dd0c:	f3bf 8f6f 	isb	sy
 800dd10:	f3bf 8f4f 	dsb	sy
 800dd14:	60fb      	str	r3, [r7, #12]
}
 800dd16:	bf00      	nop
 800dd18:	bf00      	nop
 800dd1a:	e7fd      	b.n	800dd18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dd22:	f023 0301 	bic.w	r3, r3, #1
 800dd26:	b2da      	uxtb	r2, r3
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	6a1b      	ldr	r3, [r3, #32]
 800dd32:	6978      	ldr	r0, [r7, #20]
 800dd34:	4798      	blx	r3
}
 800dd36:	bf00      	nop
 800dd38:	3718      	adds	r7, #24
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	2400e43c 	.word	0x2400e43c

0800dd44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b084      	sub	sp, #16
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd4c:	f107 0308 	add.w	r3, r7, #8
 800dd50:	4618      	mov	r0, r3
 800dd52:	f000 f859 	bl	800de08 <prvGetNextExpireTime>
 800dd56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	68f8      	ldr	r0, [r7, #12]
 800dd5e:	f000 f805 	bl	800dd6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd62:	f000 f8d7 	bl	800df14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd66:	bf00      	nop
 800dd68:	e7f0      	b.n	800dd4c <prvTimerTask+0x8>
	...

0800dd6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b084      	sub	sp, #16
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
 800dd74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd76:	f7ff fa0f 	bl	800d198 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd7a:	f107 0308 	add.w	r3, r7, #8
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f000 f866 	bl	800de50 <prvSampleTimeNow>
 800dd84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d130      	bne.n	800ddee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d10a      	bne.n	800dda8 <prvProcessTimerOrBlockTask+0x3c>
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d806      	bhi.n	800dda8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dd9a:	f7ff fa0b 	bl	800d1b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dd9e:	68f9      	ldr	r1, [r7, #12]
 800dda0:	6878      	ldr	r0, [r7, #4]
 800dda2:	f7ff ff81 	bl	800dca8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dda6:	e024      	b.n	800ddf2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d008      	beq.n	800ddc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ddae:	4b13      	ldr	r3, [pc, #76]	@ (800ddfc <prvProcessTimerOrBlockTask+0x90>)
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d101      	bne.n	800ddbc <prvProcessTimerOrBlockTask+0x50>
 800ddb8:	2301      	movs	r3, #1
 800ddba:	e000      	b.n	800ddbe <prvProcessTimerOrBlockTask+0x52>
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ddc0:	4b0f      	ldr	r3, [pc, #60]	@ (800de00 <prvProcessTimerOrBlockTask+0x94>)
 800ddc2:	6818      	ldr	r0, [r3, #0]
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	1ad3      	subs	r3, r2, r3
 800ddca:	683a      	ldr	r2, [r7, #0]
 800ddcc:	4619      	mov	r1, r3
 800ddce:	f7fe ff6b 	bl	800cca8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ddd2:	f7ff f9ef 	bl	800d1b4 <xTaskResumeAll>
 800ddd6:	4603      	mov	r3, r0
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d10a      	bne.n	800ddf2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800dddc:	4b09      	ldr	r3, [pc, #36]	@ (800de04 <prvProcessTimerOrBlockTask+0x98>)
 800ddde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dde2:	601a      	str	r2, [r3, #0]
 800dde4:	f3bf 8f4f 	dsb	sy
 800dde8:	f3bf 8f6f 	isb	sy
}
 800ddec:	e001      	b.n	800ddf2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ddee:	f7ff f9e1 	bl	800d1b4 <xTaskResumeAll>
}
 800ddf2:	bf00      	nop
 800ddf4:	3710      	adds	r7, #16
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	bf00      	nop
 800ddfc:	2400e440 	.word	0x2400e440
 800de00:	2400e444 	.word	0x2400e444
 800de04:	e000ed04 	.word	0xe000ed04

0800de08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800de08:	b480      	push	{r7}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800de10:	4b0e      	ldr	r3, [pc, #56]	@ (800de4c <prvGetNextExpireTime+0x44>)
 800de12:	681b      	ldr	r3, [r3, #0]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d101      	bne.n	800de1e <prvGetNextExpireTime+0x16>
 800de1a:	2201      	movs	r2, #1
 800de1c:	e000      	b.n	800de20 <prvGetNextExpireTime+0x18>
 800de1e:	2200      	movs	r2, #0
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d105      	bne.n	800de38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800de2c:	4b07      	ldr	r3, [pc, #28]	@ (800de4c <prvGetNextExpireTime+0x44>)
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	68db      	ldr	r3, [r3, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	60fb      	str	r3, [r7, #12]
 800de36:	e001      	b.n	800de3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800de38:	2300      	movs	r3, #0
 800de3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800de3c:	68fb      	ldr	r3, [r7, #12]
}
 800de3e:	4618      	mov	r0, r3
 800de40:	3714      	adds	r7, #20
 800de42:	46bd      	mov	sp, r7
 800de44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de48:	4770      	bx	lr
 800de4a:	bf00      	nop
 800de4c:	2400e43c 	.word	0x2400e43c

0800de50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de58:	f7ff fa4a 	bl	800d2f0 <xTaskGetTickCount>
 800de5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de5e:	4b0b      	ldr	r3, [pc, #44]	@ (800de8c <prvSampleTimeNow+0x3c>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	429a      	cmp	r2, r3
 800de66:	d205      	bcs.n	800de74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de68:	f000 f93a 	bl	800e0e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2201      	movs	r2, #1
 800de70:	601a      	str	r2, [r3, #0]
 800de72:	e002      	b.n	800de7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2200      	movs	r2, #0
 800de78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de7a:	4a04      	ldr	r2, [pc, #16]	@ (800de8c <prvSampleTimeNow+0x3c>)
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de80:	68fb      	ldr	r3, [r7, #12]
}
 800de82:	4618      	mov	r0, r3
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}
 800de8a:	bf00      	nop
 800de8c:	2400e44c 	.word	0x2400e44c

0800de90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b086      	sub	sp, #24
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
 800de9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800de9e:	2300      	movs	r3, #0
 800dea0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	68ba      	ldr	r2, [r7, #8]
 800dea6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	68fa      	ldr	r2, [r7, #12]
 800deac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800deae:	68ba      	ldr	r2, [r7, #8]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d812      	bhi.n	800dedc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	683b      	ldr	r3, [r7, #0]
 800deba:	1ad2      	subs	r2, r2, r3
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	699b      	ldr	r3, [r3, #24]
 800dec0:	429a      	cmp	r2, r3
 800dec2:	d302      	bcc.n	800deca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800dec4:	2301      	movs	r3, #1
 800dec6:	617b      	str	r3, [r7, #20]
 800dec8:	e01b      	b.n	800df02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800deca:	4b10      	ldr	r3, [pc, #64]	@ (800df0c <prvInsertTimerInActiveList+0x7c>)
 800decc:	681a      	ldr	r2, [r3, #0]
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	3304      	adds	r3, #4
 800ded2:	4619      	mov	r1, r3
 800ded4:	4610      	mov	r0, r2
 800ded6:	f7fd ff6e 	bl	800bdb6 <vListInsert>
 800deda:	e012      	b.n	800df02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800dedc:	687a      	ldr	r2, [r7, #4]
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d206      	bcs.n	800def2 <prvInsertTimerInActiveList+0x62>
 800dee4:	68ba      	ldr	r2, [r7, #8]
 800dee6:	683b      	ldr	r3, [r7, #0]
 800dee8:	429a      	cmp	r2, r3
 800deea:	d302      	bcc.n	800def2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800deec:	2301      	movs	r3, #1
 800deee:	617b      	str	r3, [r7, #20]
 800def0:	e007      	b.n	800df02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800def2:	4b07      	ldr	r3, [pc, #28]	@ (800df10 <prvInsertTimerInActiveList+0x80>)
 800def4:	681a      	ldr	r2, [r3, #0]
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	3304      	adds	r3, #4
 800defa:	4619      	mov	r1, r3
 800defc:	4610      	mov	r0, r2
 800defe:	f7fd ff5a 	bl	800bdb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800df02:	697b      	ldr	r3, [r7, #20]
}
 800df04:	4618      	mov	r0, r3
 800df06:	3718      	adds	r7, #24
 800df08:	46bd      	mov	sp, r7
 800df0a:	bd80      	pop	{r7, pc}
 800df0c:	2400e440 	.word	0x2400e440
 800df10:	2400e43c 	.word	0x2400e43c

0800df14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b08e      	sub	sp, #56	@ 0x38
 800df18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800df1a:	e0ce      	b.n	800e0ba <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	da19      	bge.n	800df56 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800df22:	1d3b      	adds	r3, r7, #4
 800df24:	3304      	adds	r3, #4
 800df26:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800df28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d10b      	bne.n	800df46 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800df2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	61fb      	str	r3, [r7, #28]
}
 800df40:	bf00      	nop
 800df42:	bf00      	nop
 800df44:	e7fd      	b.n	800df42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df4c:	6850      	ldr	r0, [r2, #4]
 800df4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800df50:	6892      	ldr	r2, [r2, #8]
 800df52:	4611      	mov	r1, r2
 800df54:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	f2c0 80ae 	blt.w	800e0ba <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df64:	695b      	ldr	r3, [r3, #20]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d004      	beq.n	800df74 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df6c:	3304      	adds	r3, #4
 800df6e:	4618      	mov	r0, r3
 800df70:	f7fd ff5a 	bl	800be28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df74:	463b      	mov	r3, r7
 800df76:	4618      	mov	r0, r3
 800df78:	f7ff ff6a 	bl	800de50 <prvSampleTimeNow>
 800df7c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2b09      	cmp	r3, #9
 800df82:	f200 8097 	bhi.w	800e0b4 <prvProcessReceivedCommands+0x1a0>
 800df86:	a201      	add	r2, pc, #4	@ (adr r2, 800df8c <prvProcessReceivedCommands+0x78>)
 800df88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df8c:	0800dfb5 	.word	0x0800dfb5
 800df90:	0800dfb5 	.word	0x0800dfb5
 800df94:	0800dfb5 	.word	0x0800dfb5
 800df98:	0800e02b 	.word	0x0800e02b
 800df9c:	0800e03f 	.word	0x0800e03f
 800dfa0:	0800e08b 	.word	0x0800e08b
 800dfa4:	0800dfb5 	.word	0x0800dfb5
 800dfa8:	0800dfb5 	.word	0x0800dfb5
 800dfac:	0800e02b 	.word	0x0800e02b
 800dfb0:	0800e03f 	.word	0x0800e03f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800dfb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfba:	f043 0301 	orr.w	r3, r3, #1
 800dfbe:	b2da      	uxtb	r2, r3
 800dfc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800dfc6:	68ba      	ldr	r2, [r7, #8]
 800dfc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfca:	699b      	ldr	r3, [r3, #24]
 800dfcc:	18d1      	adds	r1, r2, r3
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dfd2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfd4:	f7ff ff5c 	bl	800de90 <prvInsertTimerInActiveList>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d06c      	beq.n	800e0b8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfe0:	6a1b      	ldr	r3, [r3, #32]
 800dfe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dfe4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfe8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800dfec:	f003 0304 	and.w	r3, r3, #4
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d061      	beq.n	800e0b8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dff4:	68ba      	ldr	r2, [r7, #8]
 800dff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dff8:	699b      	ldr	r3, [r3, #24]
 800dffa:	441a      	add	r2, r3
 800dffc:	2300      	movs	r3, #0
 800dffe:	9300      	str	r3, [sp, #0]
 800e000:	2300      	movs	r3, #0
 800e002:	2100      	movs	r1, #0
 800e004:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e006:	f7ff fe01 	bl	800dc0c <xTimerGenericCommand>
 800e00a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e00c:	6a3b      	ldr	r3, [r7, #32]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d152      	bne.n	800e0b8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e016:	f383 8811 	msr	BASEPRI, r3
 800e01a:	f3bf 8f6f 	isb	sy
 800e01e:	f3bf 8f4f 	dsb	sy
 800e022:	61bb      	str	r3, [r7, #24]
}
 800e024:	bf00      	nop
 800e026:	bf00      	nop
 800e028:	e7fd      	b.n	800e026 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e02c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e030:	f023 0301 	bic.w	r3, r3, #1
 800e034:	b2da      	uxtb	r2, r3
 800e036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e038:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e03c:	e03d      	b.n	800e0ba <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e040:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e044:	f043 0301 	orr.w	r3, r3, #1
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e04c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e050:	68ba      	ldr	r2, [r7, #8]
 800e052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e054:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e058:	699b      	ldr	r3, [r3, #24]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d10b      	bne.n	800e076 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e062:	f383 8811 	msr	BASEPRI, r3
 800e066:	f3bf 8f6f 	isb	sy
 800e06a:	f3bf 8f4f 	dsb	sy
 800e06e:	617b      	str	r3, [r7, #20]
}
 800e070:	bf00      	nop
 800e072:	bf00      	nop
 800e074:	e7fd      	b.n	800e072 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e078:	699a      	ldr	r2, [r3, #24]
 800e07a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e07c:	18d1      	adds	r1, r2, r3
 800e07e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e080:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e082:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e084:	f7ff ff04 	bl	800de90 <prvInsertTimerInActiveList>
					break;
 800e088:	e017      	b.n	800e0ba <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e08c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e090:	f003 0302 	and.w	r3, r3, #2
 800e094:	2b00      	cmp	r3, #0
 800e096:	d103      	bne.n	800e0a0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e098:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e09a:	f7fd fd1b 	bl	800bad4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e09e:	e00c      	b.n	800e0ba <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e0a6:	f023 0301 	bic.w	r3, r3, #1
 800e0aa:	b2da      	uxtb	r2, r3
 800e0ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e0b2:	e002      	b.n	800e0ba <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e0b4:	bf00      	nop
 800e0b6:	e000      	b.n	800e0ba <prvProcessReceivedCommands+0x1a6>
					break;
 800e0b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e0ba:	4b08      	ldr	r3, [pc, #32]	@ (800e0dc <prvProcessReceivedCommands+0x1c8>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	1d39      	adds	r1, r7, #4
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7fe fbd4 	bl	800c870 <xQueueReceive>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	f47f af26 	bne.w	800df1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e0d0:	bf00      	nop
 800e0d2:	bf00      	nop
 800e0d4:	3730      	adds	r7, #48	@ 0x30
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	2400e444 	.word	0x2400e444

0800e0e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b088      	sub	sp, #32
 800e0e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0e6:	e049      	b.n	800e17c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0e8:	4b2e      	ldr	r3, [pc, #184]	@ (800e1a4 <prvSwitchTimerLists+0xc4>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0f2:	4b2c      	ldr	r3, [pc, #176]	@ (800e1a4 <prvSwitchTimerLists+0xc4>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	68db      	ldr	r3, [r3, #12]
 800e0f8:	68db      	ldr	r3, [r3, #12]
 800e0fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	3304      	adds	r3, #4
 800e100:	4618      	mov	r0, r3
 800e102:	f7fd fe91 	bl	800be28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	6a1b      	ldr	r3, [r3, #32]
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e114:	f003 0304 	and.w	r3, r3, #4
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d02f      	beq.n	800e17c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	699b      	ldr	r3, [r3, #24]
 800e120:	693a      	ldr	r2, [r7, #16]
 800e122:	4413      	add	r3, r2
 800e124:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e126:	68ba      	ldr	r2, [r7, #8]
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	429a      	cmp	r2, r3
 800e12c:	d90e      	bls.n	800e14c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	68ba      	ldr	r2, [r7, #8]
 800e132:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	68fa      	ldr	r2, [r7, #12]
 800e138:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e13a:	4b1a      	ldr	r3, [pc, #104]	@ (800e1a4 <prvSwitchTimerLists+0xc4>)
 800e13c:	681a      	ldr	r2, [r3, #0]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	3304      	adds	r3, #4
 800e142:	4619      	mov	r1, r3
 800e144:	4610      	mov	r0, r2
 800e146:	f7fd fe36 	bl	800bdb6 <vListInsert>
 800e14a:	e017      	b.n	800e17c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e14c:	2300      	movs	r3, #0
 800e14e:	9300      	str	r3, [sp, #0]
 800e150:	2300      	movs	r3, #0
 800e152:	693a      	ldr	r2, [r7, #16]
 800e154:	2100      	movs	r1, #0
 800e156:	68f8      	ldr	r0, [r7, #12]
 800e158:	f7ff fd58 	bl	800dc0c <xTimerGenericCommand>
 800e15c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2b00      	cmp	r3, #0
 800e162:	d10b      	bne.n	800e17c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e168:	f383 8811 	msr	BASEPRI, r3
 800e16c:	f3bf 8f6f 	isb	sy
 800e170:	f3bf 8f4f 	dsb	sy
 800e174:	603b      	str	r3, [r7, #0]
}
 800e176:	bf00      	nop
 800e178:	bf00      	nop
 800e17a:	e7fd      	b.n	800e178 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e17c:	4b09      	ldr	r3, [pc, #36]	@ (800e1a4 <prvSwitchTimerLists+0xc4>)
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d1b0      	bne.n	800e0e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e186:	4b07      	ldr	r3, [pc, #28]	@ (800e1a4 <prvSwitchTimerLists+0xc4>)
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e18c:	4b06      	ldr	r3, [pc, #24]	@ (800e1a8 <prvSwitchTimerLists+0xc8>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a04      	ldr	r2, [pc, #16]	@ (800e1a4 <prvSwitchTimerLists+0xc4>)
 800e192:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e194:	4a04      	ldr	r2, [pc, #16]	@ (800e1a8 <prvSwitchTimerLists+0xc8>)
 800e196:	697b      	ldr	r3, [r7, #20]
 800e198:	6013      	str	r3, [r2, #0]
}
 800e19a:	bf00      	nop
 800e19c:	3718      	adds	r7, #24
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}
 800e1a2:	bf00      	nop
 800e1a4:	2400e43c 	.word	0x2400e43c
 800e1a8:	2400e440 	.word	0x2400e440

0800e1ac <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e1ac:	b580      	push	{r7, lr}
 800e1ae:	b082      	sub	sp, #8
 800e1b0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e1b2:	f7fd ff91 	bl	800c0d8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e1b6:	4b15      	ldr	r3, [pc, #84]	@ (800e20c <prvCheckForValidListAndQueue+0x60>)
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d120      	bne.n	800e200 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e1be:	4814      	ldr	r0, [pc, #80]	@ (800e210 <prvCheckForValidListAndQueue+0x64>)
 800e1c0:	f7fd fda8 	bl	800bd14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e1c4:	4813      	ldr	r0, [pc, #76]	@ (800e214 <prvCheckForValidListAndQueue+0x68>)
 800e1c6:	f7fd fda5 	bl	800bd14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e1ca:	4b13      	ldr	r3, [pc, #76]	@ (800e218 <prvCheckForValidListAndQueue+0x6c>)
 800e1cc:	4a10      	ldr	r2, [pc, #64]	@ (800e210 <prvCheckForValidListAndQueue+0x64>)
 800e1ce:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e1d0:	4b12      	ldr	r3, [pc, #72]	@ (800e21c <prvCheckForValidListAndQueue+0x70>)
 800e1d2:	4a10      	ldr	r2, [pc, #64]	@ (800e214 <prvCheckForValidListAndQueue+0x68>)
 800e1d4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	9300      	str	r3, [sp, #0]
 800e1da:	4b11      	ldr	r3, [pc, #68]	@ (800e220 <prvCheckForValidListAndQueue+0x74>)
 800e1dc:	4a11      	ldr	r2, [pc, #68]	@ (800e224 <prvCheckForValidListAndQueue+0x78>)
 800e1de:	2110      	movs	r1, #16
 800e1e0:	200a      	movs	r0, #10
 800e1e2:	f7fe f905 	bl	800c3f0 <xQueueGenericCreateStatic>
 800e1e6:	4603      	mov	r3, r0
 800e1e8:	4a08      	ldr	r2, [pc, #32]	@ (800e20c <prvCheckForValidListAndQueue+0x60>)
 800e1ea:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e1ec:	4b07      	ldr	r3, [pc, #28]	@ (800e20c <prvCheckForValidListAndQueue+0x60>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d005      	beq.n	800e200 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e1f4:	4b05      	ldr	r3, [pc, #20]	@ (800e20c <prvCheckForValidListAndQueue+0x60>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	490b      	ldr	r1, [pc, #44]	@ (800e228 <prvCheckForValidListAndQueue+0x7c>)
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	f7fe fd2a 	bl	800cc54 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e200:	f7fd ff9c 	bl	800c13c <vPortExitCritical>
}
 800e204:	bf00      	nop
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
 800e20a:	bf00      	nop
 800e20c:	2400e444 	.word	0x2400e444
 800e210:	2400e414 	.word	0x2400e414
 800e214:	2400e428 	.word	0x2400e428
 800e218:	2400e43c 	.word	0x2400e43c
 800e21c:	2400e440 	.word	0x2400e440
 800e220:	2400e4f0 	.word	0x2400e4f0
 800e224:	2400e450 	.word	0x2400e450
 800e228:	0801cc34 	.word	0x0801cc34

0800e22c <rcl_get_zero_initialized_init_options>:
 800e22c:	2000      	movs	r0, #0
 800e22e:	4770      	bx	lr

0800e230 <rcl_init_options_init>:
 800e230:	b084      	sub	sp, #16
 800e232:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e234:	b097      	sub	sp, #92	@ 0x5c
 800e236:	ae1d      	add	r6, sp, #116	@ 0x74
 800e238:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800e23c:	2800      	cmp	r0, #0
 800e23e:	d058      	beq.n	800e2f2 <rcl_init_options_init+0xc2>
 800e240:	6803      	ldr	r3, [r0, #0]
 800e242:	4605      	mov	r5, r0
 800e244:	b133      	cbz	r3, 800e254 <rcl_init_options_init+0x24>
 800e246:	2464      	movs	r4, #100	@ 0x64
 800e248:	4620      	mov	r0, r4
 800e24a:	b017      	add	sp, #92	@ 0x5c
 800e24c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800e250:	b004      	add	sp, #16
 800e252:	4770      	bx	lr
 800e254:	4630      	mov	r0, r6
 800e256:	f001 f953 	bl	800f500 <rcutils_allocator_is_valid>
 800e25a:	2800      	cmp	r0, #0
 800e25c:	d049      	beq.n	800e2f2 <rcl_init_options_init+0xc2>
 800e25e:	46b4      	mov	ip, r6
 800e260:	ac11      	add	r4, sp, #68	@ 0x44
 800e262:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e268:	f8dc 3000 	ldr.w	r3, [ip]
 800e26c:	2050      	movs	r0, #80	@ 0x50
 800e26e:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e270:	6023      	str	r3, [r4, #0]
 800e272:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800e274:	4798      	blx	r3
 800e276:	4604      	mov	r4, r0
 800e278:	6028      	str	r0, [r5, #0]
 800e27a:	2800      	cmp	r0, #0
 800e27c:	d03b      	beq.n	800e2f6 <rcl_init_options_init+0xc6>
 800e27e:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800e282:	4686      	mov	lr, r0
 800e284:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e288:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e28c:	f8dc 3000 	ldr.w	r3, [ip]
 800e290:	a802      	add	r0, sp, #8
 800e292:	f8ce 3000 	str.w	r3, [lr]
 800e296:	f001 f9bf 	bl	800f618 <rmw_get_zero_initialized_init_options>
 800e29a:	f10d 0e08 	add.w	lr, sp, #8
 800e29e:	f104 0c18 	add.w	ip, r4, #24
 800e2a2:	682f      	ldr	r7, [r5, #0]
 800e2a4:	ac20      	add	r4, sp, #128	@ 0x80
 800e2a6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e2aa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e2ae:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e2b2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e2b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e2ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e2be:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e2c2:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e2c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 800e2ca:	e88d 0003 	stmia.w	sp, {r0, r1}
 800e2ce:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800e2d2:	f107 0018 	add.w	r0, r7, #24
 800e2d6:	f001 f9cd 	bl	800f674 <rmw_init_options_init>
 800e2da:	4604      	mov	r4, r0
 800e2dc:	2800      	cmp	r0, #0
 800e2de:	d0b3      	beq.n	800e248 <rcl_init_options_init+0x18>
 800e2e0:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800e2e2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800e2e4:	6828      	ldr	r0, [r5, #0]
 800e2e6:	4798      	blx	r3
 800e2e8:	4620      	mov	r0, r4
 800e2ea:	f007 fb4b 	bl	8015984 <rcl_convert_rmw_ret_to_rcl_ret>
 800e2ee:	4604      	mov	r4, r0
 800e2f0:	e7aa      	b.n	800e248 <rcl_init_options_init+0x18>
 800e2f2:	240b      	movs	r4, #11
 800e2f4:	e7a8      	b.n	800e248 <rcl_init_options_init+0x18>
 800e2f6:	240a      	movs	r4, #10
 800e2f8:	e7a6      	b.n	800e248 <rcl_init_options_init+0x18>
 800e2fa:	bf00      	nop

0800e2fc <rcl_init_options_fini>:
 800e2fc:	b530      	push	{r4, r5, lr}
 800e2fe:	b087      	sub	sp, #28
 800e300:	b1f0      	cbz	r0, 800e340 <rcl_init_options_fini+0x44>
 800e302:	6803      	ldr	r3, [r0, #0]
 800e304:	4604      	mov	r4, r0
 800e306:	b1db      	cbz	r3, 800e340 <rcl_init_options_fini+0x44>
 800e308:	469c      	mov	ip, r3
 800e30a:	f10d 0e04 	add.w	lr, sp, #4
 800e30e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e312:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e316:	f8dc 3000 	ldr.w	r3, [ip]
 800e31a:	a801      	add	r0, sp, #4
 800e31c:	f8ce 3000 	str.w	r3, [lr]
 800e320:	f001 f8ee 	bl	800f500 <rcutils_allocator_is_valid>
 800e324:	b160      	cbz	r0, 800e340 <rcl_init_options_fini+0x44>
 800e326:	6820      	ldr	r0, [r4, #0]
 800e328:	3018      	adds	r0, #24
 800e32a:	f001 fa5d 	bl	800f7e8 <rmw_init_options_fini>
 800e32e:	4605      	mov	r5, r0
 800e330:	b950      	cbnz	r0, 800e348 <rcl_init_options_fini+0x4c>
 800e332:	6820      	ldr	r0, [r4, #0]
 800e334:	9b02      	ldr	r3, [sp, #8]
 800e336:	9905      	ldr	r1, [sp, #20]
 800e338:	4798      	blx	r3
 800e33a:	4628      	mov	r0, r5
 800e33c:	b007      	add	sp, #28
 800e33e:	bd30      	pop	{r4, r5, pc}
 800e340:	250b      	movs	r5, #11
 800e342:	4628      	mov	r0, r5
 800e344:	b007      	add	sp, #28
 800e346:	bd30      	pop	{r4, r5, pc}
 800e348:	f007 fb1c 	bl	8015984 <rcl_convert_rmw_ret_to_rcl_ret>
 800e34c:	4605      	mov	r5, r0
 800e34e:	e7f8      	b.n	800e342 <rcl_init_options_fini+0x46>

0800e350 <rcl_init_options_copy>:
 800e350:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e354:	b094      	sub	sp, #80	@ 0x50
 800e356:	2800      	cmp	r0, #0
 800e358:	d05b      	beq.n	800e412 <rcl_init_options_copy+0xc2>
 800e35a:	4604      	mov	r4, r0
 800e35c:	6800      	ldr	r0, [r0, #0]
 800e35e:	2800      	cmp	r0, #0
 800e360:	d057      	beq.n	800e412 <rcl_init_options_copy+0xc2>
 800e362:	460e      	mov	r6, r1
 800e364:	f001 f8cc 	bl	800f500 <rcutils_allocator_is_valid>
 800e368:	2e00      	cmp	r6, #0
 800e36a:	d052      	beq.n	800e412 <rcl_init_options_copy+0xc2>
 800e36c:	f080 0001 	eor.w	r0, r0, #1
 800e370:	b2c0      	uxtb	r0, r0
 800e372:	2800      	cmp	r0, #0
 800e374:	d14d      	bne.n	800e412 <rcl_init_options_copy+0xc2>
 800e376:	6833      	ldr	r3, [r6, #0]
 800e378:	b123      	cbz	r3, 800e384 <rcl_init_options_copy+0x34>
 800e37a:	2464      	movs	r4, #100	@ 0x64
 800e37c:	4620      	mov	r0, r4
 800e37e:	b014      	add	sp, #80	@ 0x50
 800e380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e384:	6827      	ldr	r7, [r4, #0]
 800e386:	ad0f      	add	r5, sp, #60	@ 0x3c
 800e388:	46bc      	mov	ip, r7
 800e38a:	f8d7 8000 	ldr.w	r8, [r7]
 800e38e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800e394:	f8dc 3000 	ldr.w	r3, [ip]
 800e398:	2050      	movs	r0, #80	@ 0x50
 800e39a:	4619      	mov	r1, r3
 800e39c:	602b      	str	r3, [r5, #0]
 800e39e:	47c0      	blx	r8
 800e3a0:	4605      	mov	r5, r0
 800e3a2:	6030      	str	r0, [r6, #0]
 800e3a4:	b3d0      	cbz	r0, 800e41c <rcl_init_options_copy+0xcc>
 800e3a6:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800e3aa:	4686      	mov	lr, r0
 800e3ac:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e3b0:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e3b4:	f8dc 3000 	ldr.w	r3, [ip]
 800e3b8:	4668      	mov	r0, sp
 800e3ba:	f8ce 3000 	str.w	r3, [lr]
 800e3be:	f001 f92b 	bl	800f618 <rmw_get_zero_initialized_init_options>
 800e3c2:	46ee      	mov	lr, sp
 800e3c4:	f105 0c18 	add.w	ip, r5, #24
 800e3c8:	6824      	ldr	r4, [r4, #0]
 800e3ca:	6835      	ldr	r5, [r6, #0]
 800e3cc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e3d0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3d4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e3d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3dc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800e3e0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e3e4:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800e3e8:	e88c 0003 	stmia.w	ip, {r0, r1}
 800e3ec:	f104 0018 	add.w	r0, r4, #24
 800e3f0:	f105 0118 	add.w	r1, r5, #24
 800e3f4:	f001 f9a6 	bl	800f744 <rmw_init_options_copy>
 800e3f8:	4604      	mov	r4, r0
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	d0be      	beq.n	800e37c <rcl_init_options_copy+0x2c>
 800e3fe:	f001 f88d 	bl	800f51c <rcutils_get_error_string>
 800e402:	f001 f8a1 	bl	800f548 <rcutils_reset_error>
 800e406:	4630      	mov	r0, r6
 800e408:	f7ff ff78 	bl	800e2fc <rcl_init_options_fini>
 800e40c:	b140      	cbz	r0, 800e420 <rcl_init_options_copy+0xd0>
 800e40e:	4604      	mov	r4, r0
 800e410:	e7b4      	b.n	800e37c <rcl_init_options_copy+0x2c>
 800e412:	240b      	movs	r4, #11
 800e414:	4620      	mov	r0, r4
 800e416:	b014      	add	sp, #80	@ 0x50
 800e418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e41c:	240a      	movs	r4, #10
 800e41e:	e7ad      	b.n	800e37c <rcl_init_options_copy+0x2c>
 800e420:	4620      	mov	r0, r4
 800e422:	b014      	add	sp, #80	@ 0x50
 800e424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e428:	f007 baac 	b.w	8015984 <rcl_convert_rmw_ret_to_rcl_ret>

0800e42c <rcl_init_options_set_domain_id>:
 800e42c:	b120      	cbz	r0, 800e438 <rcl_init_options_set_domain_id+0xc>
 800e42e:	6803      	ldr	r3, [r0, #0]
 800e430:	b113      	cbz	r3, 800e438 <rcl_init_options_set_domain_id+0xc>
 800e432:	2000      	movs	r0, #0
 800e434:	6259      	str	r1, [r3, #36]	@ 0x24
 800e436:	4770      	bx	lr
 800e438:	200b      	movs	r0, #11
 800e43a:	4770      	bx	lr

0800e43c <rcl_get_zero_initialized_publisher>:
 800e43c:	4b01      	ldr	r3, [pc, #4]	@ (800e444 <rcl_get_zero_initialized_publisher+0x8>)
 800e43e:	6818      	ldr	r0, [r3, #0]
 800e440:	4770      	bx	lr
 800e442:	bf00      	nop
 800e444:	0801ccbc 	.word	0x0801ccbc

0800e448 <rcl_publisher_init>:
 800e448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e44c:	b088      	sub	sp, #32
 800e44e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 800e450:	2e00      	cmp	r6, #0
 800e452:	d06b      	beq.n	800e52c <rcl_publisher_init+0xe4>
 800e454:	f106 0a50 	add.w	sl, r6, #80	@ 0x50
 800e458:	4605      	mov	r5, r0
 800e45a:	460f      	mov	r7, r1
 800e45c:	4690      	mov	r8, r2
 800e45e:	4650      	mov	r0, sl
 800e460:	4699      	mov	r9, r3
 800e462:	f001 f84d 	bl	800f500 <rcutils_allocator_is_valid>
 800e466:	f080 0401 	eor.w	r4, r0, #1
 800e46a:	b2e4      	uxtb	r4, r4
 800e46c:	2c00      	cmp	r4, #0
 800e46e:	d15d      	bne.n	800e52c <rcl_publisher_init+0xe4>
 800e470:	2d00      	cmp	r5, #0
 800e472:	d05b      	beq.n	800e52c <rcl_publisher_init+0xe4>
 800e474:	682b      	ldr	r3, [r5, #0]
 800e476:	b123      	cbz	r3, 800e482 <rcl_publisher_init+0x3a>
 800e478:	2464      	movs	r4, #100	@ 0x64
 800e47a:	4620      	mov	r0, r4
 800e47c:	b008      	add	sp, #32
 800e47e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e482:	4638      	mov	r0, r7
 800e484:	f007 fd7c 	bl	8015f80 <rcl_node_is_valid>
 800e488:	2800      	cmp	r0, #0
 800e48a:	d054      	beq.n	800e536 <rcl_publisher_init+0xee>
 800e48c:	f1b8 0f00 	cmp.w	r8, #0
 800e490:	d04c      	beq.n	800e52c <rcl_publisher_init+0xe4>
 800e492:	fab9 f389 	clz	r3, r9
 800e496:	095b      	lsrs	r3, r3, #5
 800e498:	f1b9 0f00 	cmp.w	r9, #0
 800e49c:	d046      	beq.n	800e52c <rcl_publisher_init+0xe4>
 800e49e:	aa07      	add	r2, sp, #28
 800e4a0:	9307      	str	r3, [sp, #28]
 800e4a2:	e9cd 3303 	strd	r3, r3, [sp, #12]
 800e4a6:	f106 0358 	add.w	r3, r6, #88	@ 0x58
 800e4aa:	9205      	str	r2, [sp, #20]
 800e4ac:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e4b0:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800e4b4:	4649      	mov	r1, r9
 800e4b6:	4638      	mov	r0, r7
 800e4b8:	e89a 000c 	ldmia.w	sl, {r2, r3}
 800e4bc:	f007 fdb8 	bl	8016030 <rcl_node_resolve_name>
 800e4c0:	2800      	cmp	r0, #0
 800e4c2:	d14f      	bne.n	800e564 <rcl_publisher_init+0x11c>
 800e4c4:	6d33      	ldr	r3, [r6, #80]	@ 0x50
 800e4c6:	20c8      	movs	r0, #200	@ 0xc8
 800e4c8:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e4ca:	4798      	blx	r3
 800e4cc:	6028      	str	r0, [r5, #0]
 800e4ce:	2800      	cmp	r0, #0
 800e4d0:	d050      	beq.n	800e574 <rcl_publisher_init+0x12c>
 800e4d2:	4638      	mov	r0, r7
 800e4d4:	f007 fd76 	bl	8015fc4 <rcl_node_get_rmw_handle>
 800e4d8:	f106 0364 	add.w	r3, r6, #100	@ 0x64
 800e4dc:	4641      	mov	r1, r8
 800e4de:	9a07      	ldr	r2, [sp, #28]
 800e4e0:	9300      	str	r3, [sp, #0]
 800e4e2:	4633      	mov	r3, r6
 800e4e4:	682c      	ldr	r4, [r5, #0]
 800e4e6:	f001 fca5 	bl	800fe34 <rmw_create_publisher>
 800e4ea:	682b      	ldr	r3, [r5, #0]
 800e4ec:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
 800e4f0:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e4f4:	b370      	cbz	r0, 800e554 <rcl_publisher_init+0x10c>
 800e4f6:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800e4fa:	f001 fd7f 	bl	800fffc <rmw_publisher_get_actual_qos>
 800e4fe:	682b      	ldr	r3, [r5, #0]
 800e500:	4604      	mov	r4, r0
 800e502:	b9d0      	cbnz	r0, 800e53a <rcl_publisher_init+0xf2>
 800e504:	f896 2048 	ldrb.w	r2, [r6, #72]	@ 0x48
 800e508:	4631      	mov	r1, r6
 800e50a:	4618      	mov	r0, r3
 800e50c:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800e510:	2270      	movs	r2, #112	@ 0x70
 800e512:	f00d fd0e 	bl	801bf32 <memcpy>
 800e516:	683a      	ldr	r2, [r7, #0]
 800e518:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800e51c:	9807      	ldr	r0, [sp, #28]
 800e51e:	6d73      	ldr	r3, [r6, #84]	@ 0x54
 800e520:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e522:	4798      	blx	r3
 800e524:	4620      	mov	r0, r4
 800e526:	b008      	add	sp, #32
 800e528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e52c:	240b      	movs	r4, #11
 800e52e:	4620      	mov	r0, r4
 800e530:	b008      	add	sp, #32
 800e532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e536:	24c8      	movs	r4, #200	@ 0xc8
 800e538:	e79f      	b.n	800e47a <rcl_publisher_init+0x32>
 800e53a:	b1cb      	cbz	r3, 800e570 <rcl_publisher_init+0x128>
 800e53c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e540:	b142      	cbz	r2, 800e554 <rcl_publisher_init+0x10c>
 800e542:	4638      	mov	r0, r7
 800e544:	f007 fd3e 	bl	8015fc4 <rcl_node_get_rmw_handle>
 800e548:	682b      	ldr	r3, [r5, #0]
 800e54a:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800e54e:	f001 fd69 	bl	8010024 <rmw_destroy_publisher>
 800e552:	682b      	ldr	r3, [r5, #0]
 800e554:	4618      	mov	r0, r3
 800e556:	6d72      	ldr	r2, [r6, #84]	@ 0x54
 800e558:	6e31      	ldr	r1, [r6, #96]	@ 0x60
 800e55a:	2401      	movs	r4, #1
 800e55c:	4790      	blx	r2
 800e55e:	2300      	movs	r3, #0
 800e560:	602b      	str	r3, [r5, #0]
 800e562:	e7db      	b.n	800e51c <rcl_publisher_init+0xd4>
 800e564:	2867      	cmp	r0, #103	@ 0x67
 800e566:	d007      	beq.n	800e578 <rcl_publisher_init+0x130>
 800e568:	2869      	cmp	r0, #105	@ 0x69
 800e56a:	d005      	beq.n	800e578 <rcl_publisher_init+0x130>
 800e56c:	280a      	cmp	r0, #10
 800e56e:	d001      	beq.n	800e574 <rcl_publisher_init+0x12c>
 800e570:	2401      	movs	r4, #1
 800e572:	e7d3      	b.n	800e51c <rcl_publisher_init+0xd4>
 800e574:	240a      	movs	r4, #10
 800e576:	e7d1      	b.n	800e51c <rcl_publisher_init+0xd4>
 800e578:	2467      	movs	r4, #103	@ 0x67
 800e57a:	e7cf      	b.n	800e51c <rcl_publisher_init+0xd4>

0800e57c <rcl_publisher_get_default_options>:
 800e57c:	b570      	push	{r4, r5, r6, lr}
 800e57e:	4d14      	ldr	r5, [pc, #80]	@ (800e5d0 <rcl_publisher_get_default_options+0x54>)
 800e580:	b088      	sub	sp, #32
 800e582:	4604      	mov	r4, r0
 800e584:	2250      	movs	r2, #80	@ 0x50
 800e586:	4913      	ldr	r1, [pc, #76]	@ (800e5d4 <rcl_publisher_get_default_options+0x58>)
 800e588:	4628      	mov	r0, r5
 800e58a:	f00d fcd2 	bl	801bf32 <memcpy>
 800e58e:	a802      	add	r0, sp, #8
 800e590:	f000 ffa8 	bl	800f4e4 <rcutils_get_default_allocator>
 800e594:	f10d 0c08 	add.w	ip, sp, #8
 800e598:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800e59c:	466e      	mov	r6, sp
 800e59e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800e5a2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800e5a6:	f8dc 3000 	ldr.w	r3, [ip]
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	f8ce 3000 	str.w	r3, [lr]
 800e5b0:	f001 f842 	bl	800f638 <rmw_get_default_publisher_options>
 800e5b4:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800e5b8:	2270      	movs	r2, #112	@ 0x70
 800e5ba:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e5be:	e883 0003 	stmia.w	r3, {r0, r1}
 800e5c2:	4629      	mov	r1, r5
 800e5c4:	4620      	mov	r0, r4
 800e5c6:	f00d fcb4 	bl	801bf32 <memcpy>
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	b008      	add	sp, #32
 800e5ce:	bd70      	pop	{r4, r5, r6, pc}
 800e5d0:	2400e540 	.word	0x2400e540
 800e5d4:	0801ccc0 	.word	0x0801ccc0

0800e5d8 <rcl_publish>:
 800e5d8:	b1f8      	cbz	r0, 800e61a <rcl_publish+0x42>
 800e5da:	6803      	ldr	r3, [r0, #0]
 800e5dc:	b570      	push	{r4, r5, r6, lr}
 800e5de:	4604      	mov	r4, r0
 800e5e0:	b1b3      	cbz	r3, 800e610 <rcl_publish+0x38>
 800e5e2:	4616      	mov	r6, r2
 800e5e4:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e5e8:	b192      	cbz	r2, 800e610 <rcl_publish+0x38>
 800e5ea:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e5ee:	460d      	mov	r5, r1
 800e5f0:	f007 f9e6 	bl	80159c0 <rcl_context_is_valid>
 800e5f4:	b160      	cbz	r0, 800e610 <rcl_publish+0x38>
 800e5f6:	6823      	ldr	r3, [r4, #0]
 800e5f8:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e5fc:	b140      	cbz	r0, 800e610 <rcl_publish+0x38>
 800e5fe:	b155      	cbz	r5, 800e616 <rcl_publish+0x3e>
 800e600:	4632      	mov	r2, r6
 800e602:	4629      	mov	r1, r5
 800e604:	f001 fbb6 	bl	800fd74 <rmw_publish>
 800e608:	3800      	subs	r0, #0
 800e60a:	bf18      	it	ne
 800e60c:	2001      	movne	r0, #1
 800e60e:	bd70      	pop	{r4, r5, r6, pc}
 800e610:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e614:	bd70      	pop	{r4, r5, r6, pc}
 800e616:	200b      	movs	r0, #11
 800e618:	bd70      	pop	{r4, r5, r6, pc}
 800e61a:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e61e:	4770      	bx	lr

0800e620 <rcl_publisher_is_valid>:
 800e620:	b1a0      	cbz	r0, 800e64c <rcl_publisher_is_valid+0x2c>
 800e622:	6803      	ldr	r3, [r0, #0]
 800e624:	b510      	push	{r4, lr}
 800e626:	4604      	mov	r4, r0
 800e628:	b173      	cbz	r3, 800e648 <rcl_publisher_is_valid+0x28>
 800e62a:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800e62e:	b15a      	cbz	r2, 800e648 <rcl_publisher_is_valid+0x28>
 800e630:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800e634:	f007 f9c4 	bl	80159c0 <rcl_context_is_valid>
 800e638:	b130      	cbz	r0, 800e648 <rcl_publisher_is_valid+0x28>
 800e63a:	6823      	ldr	r3, [r4, #0]
 800e63c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800e640:	3800      	subs	r0, #0
 800e642:	bf18      	it	ne
 800e644:	2001      	movne	r0, #1
 800e646:	bd10      	pop	{r4, pc}
 800e648:	2000      	movs	r0, #0
 800e64a:	bd10      	pop	{r4, pc}
 800e64c:	2000      	movs	r0, #0
 800e64e:	4770      	bx	lr

0800e650 <rcl_publisher_is_valid_except_context>:
 800e650:	b130      	cbz	r0, 800e660 <rcl_publisher_is_valid_except_context+0x10>
 800e652:	6800      	ldr	r0, [r0, #0]
 800e654:	b120      	cbz	r0, 800e660 <rcl_publisher_is_valid_except_context+0x10>
 800e656:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800e65a:	3800      	subs	r0, #0
 800e65c:	bf18      	it	ne
 800e65e:	2001      	movne	r0, #1
 800e660:	4770      	bx	lr
 800e662:	bf00      	nop

0800e664 <_rclc_check_for_new_data>:
 800e664:	2800      	cmp	r0, #0
 800e666:	d046      	beq.n	800e6f6 <_rclc_check_for_new_data+0x92>
 800e668:	4603      	mov	r3, r0
 800e66a:	b530      	push	{r4, r5, lr}
 800e66c:	7802      	ldrb	r2, [r0, #0]
 800e66e:	b085      	sub	sp, #20
 800e670:	2a0a      	cmp	r2, #10
 800e672:	d842      	bhi.n	800e6fa <_rclc_check_for_new_data+0x96>
 800e674:	e8df f002 	tbb	[pc, r2]
 800e678:	14181212 	.word	0x14181212
 800e67c:	06060614 	.word	0x06060614
 800e680:	2e1a      	.short	0x2e1a
 800e682:	16          	.byte	0x16
 800e683:	00          	.byte	0x00
 800e684:	6a0a      	ldr	r2, [r1, #32]
 800e686:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800e688:	2000      	movs	r0, #0
 800e68a:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e68e:	1a12      	subs	r2, r2, r0
 800e690:	bf18      	it	ne
 800e692:	2201      	movne	r2, #1
 800e694:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800e698:	b005      	add	sp, #20
 800e69a:	bd30      	pop	{r4, r5, pc}
 800e69c:	680a      	ldr	r2, [r1, #0]
 800e69e:	e7f2      	b.n	800e686 <_rclc_check_for_new_data+0x22>
 800e6a0:	698a      	ldr	r2, [r1, #24]
 800e6a2:	e7f0      	b.n	800e686 <_rclc_check_for_new_data+0x22>
 800e6a4:	688a      	ldr	r2, [r1, #8]
 800e6a6:	e7ee      	b.n	800e686 <_rclc_check_for_new_data+0x22>
 800e6a8:	690a      	ldr	r2, [r1, #16]
 800e6aa:	e7ec      	b.n	800e686 <_rclc_check_for_new_data+0x22>
 800e6ac:	685c      	ldr	r4, [r3, #4]
 800e6ae:	4608      	mov	r0, r1
 800e6b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e6b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6b8:	f104 0542 	add.w	r5, r4, #66	@ 0x42
 800e6bc:	f104 0110 	add.w	r1, r4, #16
 800e6c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e6c4:	9500      	str	r5, [sp, #0]
 800e6c6:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800e6ca:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800e6ce:	f009 fb0b 	bl	8017ce8 <rcl_action_client_wait_set_get_entities_ready>
 800e6d2:	e7e1      	b.n	800e698 <_rclc_check_for_new_data+0x34>
 800e6d4:	685c      	ldr	r4, [r3, #4]
 800e6d6:	4608      	mov	r0, r1
 800e6d8:	f104 0222 	add.w	r2, r4, #34	@ 0x22
 800e6dc:	f104 0123 	add.w	r1, r4, #35	@ 0x23
 800e6e0:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800e6e4:	e9cd 2100 	strd	r2, r1, [sp]
 800e6e8:	f104 0220 	add.w	r2, r4, #32
 800e6ec:	f104 0110 	add.w	r1, r4, #16
 800e6f0:	f009 fd14 	bl	801811c <rcl_action_server_wait_set_get_entities_ready>
 800e6f4:	e7d0      	b.n	800e698 <_rclc_check_for_new_data+0x34>
 800e6f6:	200b      	movs	r0, #11
 800e6f8:	4770      	bx	lr
 800e6fa:	2001      	movs	r0, #1
 800e6fc:	e7cc      	b.n	800e698 <_rclc_check_for_new_data+0x34>
 800e6fe:	bf00      	nop

0800e700 <_rclc_take_new_data>:
 800e700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e702:	b09b      	sub	sp, #108	@ 0x6c
 800e704:	2800      	cmp	r0, #0
 800e706:	f000 8088 	beq.w	800e81a <_rclc_take_new_data+0x11a>
 800e70a:	7803      	ldrb	r3, [r0, #0]
 800e70c:	4604      	mov	r4, r0
 800e70e:	2b0a      	cmp	r3, #10
 800e710:	f200 8167 	bhi.w	800e9e2 <_rclc_take_new_data+0x2e2>
 800e714:	e8df f003 	tbb	[pc, r3]
 800e718:	44152d2d 	.word	0x44152d2d
 800e71c:	19191944 	.word	0x19191944
 800e720:	065a      	.short	0x065a
 800e722:	15          	.byte	0x15
 800e723:	00          	.byte	0x00
 800e724:	6840      	ldr	r0, [r0, #4]
 800e726:	f890 3020 	ldrb.w	r3, [r0, #32]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	f040 80b2 	bne.w	800e894 <_rclc_take_new_data+0x194>
 800e730:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800e734:	2b00      	cmp	r3, #0
 800e736:	f040 80e4 	bne.w	800e902 <_rclc_take_new_data+0x202>
 800e73a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d16f      	bne.n	800e822 <_rclc_take_new_data+0x122>
 800e742:	2500      	movs	r5, #0
 800e744:	4628      	mov	r0, r5
 800e746:	b01b      	add	sp, #108	@ 0x6c
 800e748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e74a:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e74c:	6a0b      	ldr	r3, [r1, #32]
 800e74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d0f5      	beq.n	800e742 <_rclc_take_new_data+0x42>
 800e756:	6882      	ldr	r2, [r0, #8]
 800e758:	f100 0110 	add.w	r1, r0, #16
 800e75c:	6840      	ldr	r0, [r0, #4]
 800e75e:	f007 fe41 	bl	80163e4 <rcl_take_request>
 800e762:	4605      	mov	r5, r0
 800e764:	2800      	cmp	r0, #0
 800e766:	d0ec      	beq.n	800e742 <_rclc_take_new_data+0x42>
 800e768:	f240 2359 	movw	r3, #601	@ 0x259
 800e76c:	4298      	cmp	r0, r3
 800e76e:	d013      	beq.n	800e798 <_rclc_take_new_data+0x98>
 800e770:	e029      	b.n	800e7c6 <_rclc_take_new_data+0xc6>
 800e772:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e774:	680b      	ldr	r3, [r1, #0]
 800e776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d0e1      	beq.n	800e742 <_rclc_take_new_data+0x42>
 800e77e:	2300      	movs	r3, #0
 800e780:	aa0a      	add	r2, sp, #40	@ 0x28
 800e782:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800e786:	f007 fe8f 	bl	80164a8 <rcl_take>
 800e78a:	4605      	mov	r5, r0
 800e78c:	2800      	cmp	r0, #0
 800e78e:	d0d9      	beq.n	800e744 <_rclc_take_new_data+0x44>
 800e790:	f240 1391 	movw	r3, #401	@ 0x191
 800e794:	4298      	cmp	r0, r3
 800e796:	d116      	bne.n	800e7c6 <_rclc_take_new_data+0xc6>
 800e798:	2300      	movs	r3, #0
 800e79a:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800e79e:	e7d1      	b.n	800e744 <_rclc_take_new_data+0x44>
 800e7a0:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800e7a2:	698b      	ldr	r3, [r1, #24]
 800e7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d0ca      	beq.n	800e742 <_rclc_take_new_data+0x42>
 800e7ac:	6882      	ldr	r2, [r0, #8]
 800e7ae:	f100 0110 	add.w	r1, r0, #16
 800e7b2:	6840      	ldr	r0, [r0, #4]
 800e7b4:	f007 f894 	bl	80158e0 <rcl_take_response>
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	2800      	cmp	r0, #0
 800e7bc:	d0c1      	beq.n	800e742 <_rclc_take_new_data+0x42>
 800e7be:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800e7c2:	4298      	cmp	r0, r3
 800e7c4:	d0be      	beq.n	800e744 <_rclc_take_new_data+0x44>
 800e7c6:	f000 febf 	bl	800f548 <rcutils_reset_error>
 800e7ca:	e7bb      	b.n	800e744 <_rclc_take_new_data+0x44>
 800e7cc:	6840      	ldr	r0, [r0, #4]
 800e7ce:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	d17d      	bne.n	800e8d2 <_rclc_take_new_data+0x1d2>
 800e7d6:	69c3      	ldr	r3, [r0, #28]
 800e7d8:	b11b      	cbz	r3, 800e7e2 <_rclc_take_new_data+0xe2>
 800e7da:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d144      	bne.n	800e86c <_rclc_take_new_data+0x16c>
 800e7e2:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	f040 80ac 	bne.w	800e944 <_rclc_take_new_data+0x244>
 800e7ec:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d0a6      	beq.n	800e742 <_rclc_take_new_data+0x42>
 800e7f4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800e7f6:	a90a      	add	r1, sp, #40	@ 0x28
 800e7f8:	3010      	adds	r0, #16
 800e7fa:	f009 f94d 	bl	8017a98 <rcl_action_take_result_response>
 800e7fe:	4605      	mov	r5, r0
 800e800:	2800      	cmp	r0, #0
 800e802:	d1e0      	bne.n	800e7c6 <_rclc_take_new_data+0xc6>
 800e804:	6860      	ldr	r0, [r4, #4]
 800e806:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e80a:	f009 fdb7 	bl	801837c <rclc_action_find_handle_by_result_request_sequence_number>
 800e80e:	2800      	cmp	r0, #0
 800e810:	d098      	beq.n	800e744 <_rclc_take_new_data+0x44>
 800e812:	2301      	movs	r3, #1
 800e814:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800e818:	e794      	b.n	800e744 <_rclc_take_new_data+0x44>
 800e81a:	250b      	movs	r5, #11
 800e81c:	4628      	mov	r0, r5
 800e81e:	b01b      	add	sp, #108	@ 0x6c
 800e820:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e822:	ae04      	add	r6, sp, #16
 800e824:	3010      	adds	r0, #16
 800e826:	aa0a      	add	r2, sp, #40	@ 0x28
 800e828:	4631      	mov	r1, r6
 800e82a:	f009 fbab 	bl	8017f84 <rcl_action_take_cancel_request>
 800e82e:	4605      	mov	r5, r0
 800e830:	2800      	cmp	r0, #0
 800e832:	d1c8      	bne.n	800e7c6 <_rclc_take_new_data+0xc6>
 800e834:	a90a      	add	r1, sp, #40	@ 0x28
 800e836:	6860      	ldr	r0, [r4, #4]
 800e838:	f009 fd60 	bl	80182fc <rclc_action_find_goal_handle_by_uuid>
 800e83c:	4607      	mov	r7, r0
 800e83e:	2800      	cmp	r0, #0
 800e840:	f000 80bb 	beq.w	800e9ba <_rclc_take_new_data+0x2ba>
 800e844:	2101      	movs	r1, #1
 800e846:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800e84a:	f009 fce1 	bl	8018210 <rcl_action_transition_goal_state>
 800e84e:	2803      	cmp	r0, #3
 800e850:	4684      	mov	ip, r0
 800e852:	f040 80a7 	bne.w	800e9a4 <_rclc_take_new_data+0x2a4>
 800e856:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800e85a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800e85c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e85e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800e862:	e884 0003 	stmia.w	r4, {r0, r1}
 800e866:	f887 c008 	strb.w	ip, [r7, #8]
 800e86a:	e76b      	b.n	800e744 <_rclc_take_new_data+0x44>
 800e86c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e86e:	3010      	adds	r0, #16
 800e870:	f009 f992 	bl	8017b98 <rcl_action_take_feedback>
 800e874:	4605      	mov	r5, r0
 800e876:	2800      	cmp	r0, #0
 800e878:	d1a5      	bne.n	800e7c6 <_rclc_take_new_data+0xc6>
 800e87a:	6860      	ldr	r0, [r4, #4]
 800e87c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800e87e:	f009 fd3d 	bl	80182fc <rclc_action_find_goal_handle_by_uuid>
 800e882:	4603      	mov	r3, r0
 800e884:	2800      	cmp	r0, #0
 800e886:	f000 80a3 	beq.w	800e9d0 <_rclc_take_new_data+0x2d0>
 800e88a:	2201      	movs	r2, #1
 800e88c:	6860      	ldr	r0, [r4, #4]
 800e88e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800e892:	e7a6      	b.n	800e7e2 <_rclc_take_new_data+0xe2>
 800e894:	f009 fd0c 	bl	80182b0 <rclc_action_take_goal_handle>
 800e898:	4606      	mov	r6, r0
 800e89a:	6860      	ldr	r0, [r4, #4]
 800e89c:	2e00      	cmp	r6, #0
 800e89e:	f43f af47 	beq.w	800e730 <_rclc_take_new_data+0x30>
 800e8a2:	6070      	str	r0, [r6, #4]
 800e8a4:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800e8a8:	69f2      	ldr	r2, [r6, #28]
 800e8aa:	3010      	adds	r0, #16
 800e8ac:	f009 fab2 	bl	8017e14 <rcl_action_take_goal_request>
 800e8b0:	4605      	mov	r5, r0
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	f040 808e 	bne.w	800e9d4 <_rclc_take_new_data+0x2d4>
 800e8b8:	69f7      	ldr	r7, [r6, #28]
 800e8ba:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800e8bc:	7235      	strb	r5, [r6, #8]
 800e8be:	f8c6 0009 	str.w	r0, [r6, #9]
 800e8c2:	f8c6 100d 	str.w	r1, [r6, #13]
 800e8c6:	6860      	ldr	r0, [r4, #4]
 800e8c8:	f8c6 2011 	str.w	r2, [r6, #17]
 800e8cc:	f8c6 3015 	str.w	r3, [r6, #21]
 800e8d0:	e72e      	b.n	800e730 <_rclc_take_new_data+0x30>
 800e8d2:	aa04      	add	r2, sp, #16
 800e8d4:	a90a      	add	r1, sp, #40	@ 0x28
 800e8d6:	3010      	adds	r0, #16
 800e8d8:	f009 f866 	bl	80179a8 <rcl_action_take_goal_response>
 800e8dc:	4605      	mov	r5, r0
 800e8de:	2800      	cmp	r0, #0
 800e8e0:	f47f af71 	bne.w	800e7c6 <_rclc_take_new_data+0xc6>
 800e8e4:	6860      	ldr	r0, [r4, #4]
 800e8e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e8ea:	f009 fd35 	bl	8018358 <rclc_action_find_handle_by_goal_request_sequence_number>
 800e8ee:	b130      	cbz	r0, 800e8fe <_rclc_take_new_data+0x1fe>
 800e8f0:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800e8f4:	2201      	movs	r2, #1
 800e8f6:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800e8fa:	f880 2020 	strb.w	r2, [r0, #32]
 800e8fe:	6860      	ldr	r0, [r4, #4]
 800e900:	e769      	b.n	800e7d6 <_rclc_take_new_data+0xd6>
 800e902:	3010      	adds	r0, #16
 800e904:	aa04      	add	r2, sp, #16
 800e906:	a90a      	add	r1, sp, #40	@ 0x28
 800e908:	f009 fafc 	bl	8017f04 <rcl_action_take_result_request>
 800e90c:	4605      	mov	r5, r0
 800e90e:	2800      	cmp	r0, #0
 800e910:	f47f af59 	bne.w	800e7c6 <_rclc_take_new_data+0xc6>
 800e914:	a904      	add	r1, sp, #16
 800e916:	6860      	ldr	r0, [r4, #4]
 800e918:	f009 fcf0 	bl	80182fc <rclc_action_find_goal_handle_by_uuid>
 800e91c:	4607      	mov	r7, r0
 800e91e:	b160      	cbz	r0, 800e93a <_rclc_take_new_data+0x23a>
 800e920:	ad0a      	add	r5, sp, #40	@ 0x28
 800e922:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800e926:	f04f 0c02 	mov.w	ip, #2
 800e92a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e92c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800e92e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e932:	e886 0003 	stmia.w	r6, {r0, r1}
 800e936:	f887 c008 	strb.w	ip, [r7, #8]
 800e93a:	6860      	ldr	r0, [r4, #4]
 800e93c:	2300      	movs	r3, #0
 800e93e:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800e942:	e6fa      	b.n	800e73a <_rclc_take_new_data+0x3a>
 800e944:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800e948:	a90a      	add	r1, sp, #40	@ 0x28
 800e94a:	3010      	adds	r0, #16
 800e94c:	f009 f8e4 	bl	8017b18 <rcl_action_take_cancel_response>
 800e950:	4605      	mov	r5, r0
 800e952:	2800      	cmp	r0, #0
 800e954:	f47f af37 	bne.w	800e7c6 <_rclc_take_new_data+0xc6>
 800e958:	6860      	ldr	r0, [r4, #4]
 800e95a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e95e:	f009 fd1f 	bl	80183a0 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800e962:	4606      	mov	r6, r0
 800e964:	6860      	ldr	r0, [r4, #4]
 800e966:	2e00      	cmp	r6, #0
 800e968:	f43f af40 	beq.w	800e7ec <_rclc_take_new_data+0xec>
 800e96c:	2701      	movs	r7, #1
 800e96e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e970:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800e972:	2b00      	cmp	r3, #0
 800e974:	f43f af3a 	beq.w	800e7ec <_rclc_take_new_data+0xec>
 800e978:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800e97a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800e97e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800e982:	f009 fcbb 	bl	80182fc <rclc_action_find_goal_handle_by_uuid>
 800e986:	b138      	cbz	r0, 800e998 <_rclc_take_new_data+0x298>
 800e988:	6860      	ldr	r0, [r4, #4]
 800e98a:	3501      	adds	r5, #1
 800e98c:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800e990:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e992:	42ab      	cmp	r3, r5
 800e994:	d8f0      	bhi.n	800e978 <_rclc_take_new_data+0x278>
 800e996:	e729      	b.n	800e7ec <_rclc_take_new_data+0xec>
 800e998:	6860      	ldr	r0, [r4, #4]
 800e99a:	3501      	adds	r5, #1
 800e99c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800e99e:	42ab      	cmp	r3, r5
 800e9a0:	d8ea      	bhi.n	800e978 <_rclc_take_new_data+0x278>
 800e9a2:	e723      	b.n	800e7ec <_rclc_take_new_data+0xec>
 800e9a4:	ab06      	add	r3, sp, #24
 800e9a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e9a8:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e9ac:	2103      	movs	r1, #3
 800e9ae:	6860      	ldr	r0, [r4, #4]
 800e9b0:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e9b4:	f009 fd68 	bl	8018488 <rclc_action_server_goal_cancel_reject>
 800e9b8:	e6c4      	b.n	800e744 <_rclc_take_new_data+0x44>
 800e9ba:	ab06      	add	r3, sp, #24
 800e9bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e9be:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e9c2:	2102      	movs	r1, #2
 800e9c4:	6860      	ldr	r0, [r4, #4]
 800e9c6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800e9ca:	f009 fd5d 	bl	8018488 <rclc_action_server_goal_cancel_reject>
 800e9ce:	e6b9      	b.n	800e744 <_rclc_take_new_data+0x44>
 800e9d0:	6860      	ldr	r0, [r4, #4]
 800e9d2:	e706      	b.n	800e7e2 <_rclc_take_new_data+0xe2>
 800e9d4:	4631      	mov	r1, r6
 800e9d6:	6860      	ldr	r0, [r4, #4]
 800e9d8:	f009 fc7a 	bl	80182d0 <rclc_action_remove_used_goal_handle>
 800e9dc:	f000 fdb4 	bl	800f548 <rcutils_reset_error>
 800e9e0:	e6b0      	b.n	800e744 <_rclc_take_new_data+0x44>
 800e9e2:	2501      	movs	r5, #1
 800e9e4:	e6ae      	b.n	800e744 <_rclc_take_new_data+0x44>
 800e9e6:	bf00      	nop

0800e9e8 <_rclc_execute.part.0>:
 800e9e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9ea:	7803      	ldrb	r3, [r0, #0]
 800e9ec:	b085      	sub	sp, #20
 800e9ee:	4604      	mov	r4, r0
 800e9f0:	2b0a      	cmp	r3, #10
 800e9f2:	f200 8139 	bhi.w	800ec68 <_rclc_execute.part.0+0x280>
 800e9f6:	e8df f003 	tbb	[pc, r3]
 800e9fa:	4268      	.short	0x4268
 800e9fc:	06a75b4d 	.word	0x06a75b4d
 800ea00:	721d0606 	.word	0x721d0606
 800ea04:	62          	.byte	0x62
 800ea05:	00          	.byte	0x00
 800ea06:	2b06      	cmp	r3, #6
 800ea08:	f000 8126 	beq.w	800ec58 <_rclc_execute.part.0+0x270>
 800ea0c:	2b07      	cmp	r3, #7
 800ea0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ea10:	f040 811c 	bne.w	800ec4c <_rclc_execute.part.0+0x264>
 800ea14:	f104 0510 	add.w	r5, r4, #16
 800ea18:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800ea1c:	6880      	ldr	r0, [r0, #8]
 800ea1e:	4798      	blx	r3
 800ea20:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800ea22:	4629      	mov	r1, r5
 800ea24:	6860      	ldr	r0, [r4, #4]
 800ea26:	f007 fd1d 	bl	8016464 <rcl_send_response>
 800ea2a:	4604      	mov	r4, r0
 800ea2c:	b378      	cbz	r0, 800ea8e <_rclc_execute.part.0+0xa6>
 800ea2e:	f000 fd8b 	bl	800f548 <rcutils_reset_error>
 800ea32:	e02c      	b.n	800ea8e <_rclc_execute.part.0+0xa6>
 800ea34:	6840      	ldr	r0, [r0, #4]
 800ea36:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	f000 808e 	beq.w	800eb5c <_rclc_execute.part.0+0x174>
 800ea40:	2600      	movs	r6, #0
 800ea42:	2701      	movs	r7, #1
 800ea44:	e004      	b.n	800ea50 <_rclc_execute.part.0+0x68>
 800ea46:	f009 fc0d 	bl	8018264 <rclc_action_send_result_request>
 800ea4a:	b998      	cbnz	r0, 800ea74 <_rclc_execute.part.0+0x8c>
 800ea4c:	722f      	strb	r7, [r5, #8]
 800ea4e:	6860      	ldr	r0, [r4, #4]
 800ea50:	f009 fcb8 	bl	80183c4 <rclc_action_find_first_handle_with_goal_response>
 800ea54:	4605      	mov	r5, r0
 800ea56:	2800      	cmp	r0, #0
 800ea58:	d07f      	beq.n	800eb5a <_rclc_execute.part.0+0x172>
 800ea5a:	6863      	ldr	r3, [r4, #4]
 800ea5c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ea5e:	699b      	ldr	r3, [r3, #24]
 800ea60:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800ea64:	f885 6020 	strb.w	r6, [r5, #32]
 800ea68:	4798      	blx	r3
 800ea6a:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800ea6e:	4628      	mov	r0, r5
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d1e8      	bne.n	800ea46 <_rclc_execute.part.0+0x5e>
 800ea74:	6860      	ldr	r0, [r4, #4]
 800ea76:	4629      	mov	r1, r5
 800ea78:	f009 fc2a 	bl	80182d0 <rclc_action_remove_used_goal_handle>
 800ea7c:	e7e7      	b.n	800ea4e <_rclc_execute.part.0+0x66>
 800ea7e:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800ea82:	e9d4 130b 	ldrd	r1, r3, [r4, #44]	@ 0x2c
 800ea86:	b100      	cbz	r0, 800ea8a <_rclc_execute.part.0+0xa2>
 800ea88:	68a0      	ldr	r0, [r4, #8]
 800ea8a:	2400      	movs	r4, #0
 800ea8c:	4798      	blx	r3
 800ea8e:	4620      	mov	r0, r4
 800ea90:	b005      	add	sp, #20
 800ea92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea94:	6840      	ldr	r0, [r0, #4]
 800ea96:	f008 f83d 	bl	8016b14 <rcl_timer_call>
 800ea9a:	f240 3321 	movw	r3, #801	@ 0x321
 800ea9e:	4604      	mov	r4, r0
 800eaa0:	4298      	cmp	r0, r3
 800eaa2:	d001      	beq.n	800eaa8 <_rclc_execute.part.0+0xc0>
 800eaa4:	2800      	cmp	r0, #0
 800eaa6:	d1c2      	bne.n	800ea2e <_rclc_execute.part.0+0x46>
 800eaa8:	2400      	movs	r4, #0
 800eaaa:	4620      	mov	r0, r4
 800eaac:	b005      	add	sp, #20
 800eaae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eab0:	2400      	movs	r4, #0
 800eab2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800eab4:	6880      	ldr	r0, [r0, #8]
 800eab6:	4798      	blx	r3
 800eab8:	4620      	mov	r0, r4
 800eaba:	b005      	add	sp, #20
 800eabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eabe:	2400      	movs	r4, #0
 800eac0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800eac2:	4798      	blx	r3
 800eac4:	4620      	mov	r0, r4
 800eac6:	b005      	add	sp, #20
 800eac8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eaca:	f890 0039 	ldrb.w	r0, [r0, #57]	@ 0x39
 800eace:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ead0:	b100      	cbz	r0, 800ead4 <_rclc_execute.part.0+0xec>
 800ead2:	68a0      	ldr	r0, [r4, #8]
 800ead4:	2400      	movs	r4, #0
 800ead6:	4798      	blx	r3
 800ead8:	4620      	mov	r0, r4
 800eada:	b005      	add	sp, #20
 800eadc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eade:	6840      	ldr	r0, [r0, #4]
 800eae0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800eae4:	bb3b      	cbnz	r3, 800eb36 <_rclc_execute.part.0+0x14e>
 800eae6:	f890 3020 	ldrb.w	r3, [r0, #32]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d07d      	beq.n	800ebea <_rclc_execute.part.0+0x202>
 800eaee:	f640 0634 	movw	r6, #2100	@ 0x834
 800eaf2:	2701      	movs	r7, #1
 800eaf4:	e007      	b.n	800eb06 <_rclc_execute.part.0+0x11e>
 800eaf6:	4628      	mov	r0, r5
 800eaf8:	f009 fc7c 	bl	80183f4 <rclc_action_server_response_goal_request>
 800eafc:	4629      	mov	r1, r5
 800eafe:	6860      	ldr	r0, [r4, #4]
 800eb00:	f009 fbe6 	bl	80182d0 <rclc_action_remove_used_goal_handle>
 800eb04:	6860      	ldr	r0, [r4, #4]
 800eb06:	2100      	movs	r1, #0
 800eb08:	f009 fc0e 	bl	8018328 <rclc_action_find_first_handle_by_status>
 800eb0c:	4605      	mov	r5, r0
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	d068      	beq.n	800ebe4 <_rclc_execute.part.0+0x1fc>
 800eb12:	6863      	ldr	r3, [r4, #4]
 800eb14:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800eb16:	699b      	ldr	r3, [r3, #24]
 800eb18:	4798      	blx	r3
 800eb1a:	42b0      	cmp	r0, r6
 800eb1c:	f04f 0100 	mov.w	r1, #0
 800eb20:	d1e9      	bne.n	800eaf6 <_rclc_execute.part.0+0x10e>
 800eb22:	2101      	movs	r1, #1
 800eb24:	4628      	mov	r0, r5
 800eb26:	f009 fc65 	bl	80183f4 <rclc_action_server_response_goal_request>
 800eb2a:	722f      	strb	r7, [r5, #8]
 800eb2c:	e7ea      	b.n	800eb04 <_rclc_execute.part.0+0x11c>
 800eb2e:	6848      	ldr	r0, [r1, #4]
 800eb30:	f009 fbce 	bl	80182d0 <rclc_action_remove_used_goal_handle>
 800eb34:	6860      	ldr	r0, [r4, #4]
 800eb36:	f009 fc03 	bl	8018340 <rclc_action_find_first_terminated_handle>
 800eb3a:	4601      	mov	r1, r0
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	d1f6      	bne.n	800eb2e <_rclc_execute.part.0+0x146>
 800eb40:	6860      	ldr	r0, [r4, #4]
 800eb42:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800eb46:	e7ce      	b.n	800eae6 <_rclc_execute.part.0+0xfe>
 800eb48:	2400      	movs	r4, #0
 800eb4a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800eb4c:	f100 0110 	add.w	r1, r0, #16
 800eb50:	6880      	ldr	r0, [r0, #8]
 800eb52:	4798      	blx	r3
 800eb54:	4620      	mov	r0, r4
 800eb56:	b005      	add	sp, #20
 800eb58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb5a:	6860      	ldr	r0, [r4, #4]
 800eb5c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800eb60:	b18b      	cbz	r3, 800eb86 <_rclc_execute.part.0+0x19e>
 800eb62:	68c5      	ldr	r5, [r0, #12]
 800eb64:	b32d      	cbz	r5, 800ebb2 <_rclc_execute.part.0+0x1ca>
 800eb66:	2600      	movs	r6, #0
 800eb68:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800eb6c:	b143      	cbz	r3, 800eb80 <_rclc_execute.part.0+0x198>
 800eb6e:	69c3      	ldr	r3, [r0, #28]
 800eb70:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800eb74:	b123      	cbz	r3, 800eb80 <_rclc_execute.part.0+0x198>
 800eb76:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800eb78:	4628      	mov	r0, r5
 800eb7a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eb7c:	4798      	blx	r3
 800eb7e:	6860      	ldr	r0, [r4, #4]
 800eb80:	682d      	ldr	r5, [r5, #0]
 800eb82:	2d00      	cmp	r5, #0
 800eb84:	d1f0      	bne.n	800eb68 <_rclc_execute.part.0+0x180>
 800eb86:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800eb8a:	b193      	cbz	r3, 800ebb2 <_rclc_execute.part.0+0x1ca>
 800eb8c:	68c5      	ldr	r5, [r0, #12]
 800eb8e:	b185      	cbz	r5, 800ebb2 <_rclc_execute.part.0+0x1ca>
 800eb90:	2600      	movs	r6, #0
 800eb92:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800eb96:	b14b      	cbz	r3, 800ebac <_rclc_execute.part.0+0x1c4>
 800eb98:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800eb9a:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800eb9e:	b12b      	cbz	r3, 800ebac <_rclc_execute.part.0+0x1c4>
 800eba0:	4628      	mov	r0, r5
 800eba2:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800eba6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800eba8:	4798      	blx	r3
 800ebaa:	6860      	ldr	r0, [r4, #4]
 800ebac:	682d      	ldr	r5, [r5, #0]
 800ebae:	2d00      	cmp	r5, #0
 800ebb0:	d1ef      	bne.n	800eb92 <_rclc_execute.part.0+0x1aa>
 800ebb2:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	f43f af76 	beq.w	800eaa8 <_rclc_execute.part.0+0xc0>
 800ebbc:	2700      	movs	r7, #0
 800ebbe:	e00b      	b.n	800ebd8 <_rclc_execute.part.0+0x1f0>
 800ebc0:	6863      	ldr	r3, [r4, #4]
 800ebc2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800ebc4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ebc6:	6a1e      	ldr	r6, [r3, #32]
 800ebc8:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800ebcc:	47b0      	blx	r6
 800ebce:	6860      	ldr	r0, [r4, #4]
 800ebd0:	4629      	mov	r1, r5
 800ebd2:	f009 fb7d 	bl	80182d0 <rclc_action_remove_used_goal_handle>
 800ebd6:	6860      	ldr	r0, [r4, #4]
 800ebd8:	f009 fc00 	bl	80183dc <rclc_action_find_first_handle_with_result_response>
 800ebdc:	4605      	mov	r5, r0
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	d1ee      	bne.n	800ebc0 <_rclc_execute.part.0+0x1d8>
 800ebe2:	e761      	b.n	800eaa8 <_rclc_execute.part.0+0xc0>
 800ebe4:	6860      	ldr	r0, [r4, #4]
 800ebe6:	f880 5020 	strb.w	r5, [r0, #32]
 800ebea:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	f43f af5a 	beq.w	800eaa8 <_rclc_execute.part.0+0xc0>
 800ebf4:	68c5      	ldr	r5, [r0, #12]
 800ebf6:	b1b5      	cbz	r5, 800ec26 <_rclc_execute.part.0+0x23e>
 800ebf8:	2602      	movs	r6, #2
 800ebfa:	e001      	b.n	800ec00 <_rclc_execute.part.0+0x218>
 800ebfc:	682d      	ldr	r5, [r5, #0]
 800ebfe:	b195      	cbz	r5, 800ec26 <_rclc_execute.part.0+0x23e>
 800ec00:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800ec04:	2b03      	cmp	r3, #3
 800ec06:	d1f9      	bne.n	800ebfc <_rclc_execute.part.0+0x214>
 800ec08:	69c3      	ldr	r3, [r0, #28]
 800ec0a:	4628      	mov	r0, r5
 800ec0c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ec0e:	4798      	blx	r3
 800ec10:	4603      	mov	r3, r0
 800ec12:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800ec16:	4628      	mov	r0, r5
 800ec18:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ec1c:	b143      	cbz	r3, 800ec30 <_rclc_execute.part.0+0x248>
 800ec1e:	f009 fc07 	bl	8018430 <rclc_action_server_goal_cancel_accept>
 800ec22:	6860      	ldr	r0, [r4, #4]
 800ec24:	e7ea      	b.n	800ebfc <_rclc_execute.part.0+0x214>
 800ec26:	2300      	movs	r3, #0
 800ec28:	461c      	mov	r4, r3
 800ec2a:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ec2e:	e72e      	b.n	800ea8e <_rclc_execute.part.0+0xa6>
 800ec30:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ec32:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800ec36:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ec3a:	2101      	movs	r1, #1
 800ec3c:	6860      	ldr	r0, [r4, #4]
 800ec3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec42:	f009 fc21 	bl	8018488 <rclc_action_server_goal_cancel_reject>
 800ec46:	722e      	strb	r6, [r5, #8]
 800ec48:	6860      	ldr	r0, [r4, #4]
 800ec4a:	e7d7      	b.n	800ebfc <_rclc_execute.part.0+0x214>
 800ec4c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ec4e:	f104 0510 	add.w	r5, r4, #16
 800ec52:	6880      	ldr	r0, [r0, #8]
 800ec54:	4798      	blx	r3
 800ec56:	e6e3      	b.n	800ea20 <_rclc_execute.part.0+0x38>
 800ec58:	f100 0510 	add.w	r5, r0, #16
 800ec5c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ec5e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800ec60:	4629      	mov	r1, r5
 800ec62:	6880      	ldr	r0, [r0, #8]
 800ec64:	4798      	blx	r3
 800ec66:	e6db      	b.n	800ea20 <_rclc_execute.part.0+0x38>
 800ec68:	2401      	movs	r4, #1
 800ec6a:	e710      	b.n	800ea8e <_rclc_execute.part.0+0xa6>

0800ec6c <rclc_executor_trigger_any>:
 800ec6c:	2800      	cmp	r0, #0
 800ec6e:	d03d      	beq.n	800ecec <rclc_executor_trigger_any+0x80>
 800ec70:	2900      	cmp	r1, #0
 800ec72:	d03c      	beq.n	800ecee <rclc_executor_trigger_any+0x82>
 800ec74:	4603      	mov	r3, r0
 800ec76:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	2800      	cmp	r0, #0
 800ec7e:	d035      	beq.n	800ecec <rclc_executor_trigger_any+0x80>
 800ec80:	b430      	push	{r4, r5}
 800ec82:	f893 c000 	ldrb.w	ip, [r3]
 800ec86:	f1bc 0f08 	cmp.w	ip, #8
 800ec8a:	d11d      	bne.n	800ecc8 <rclc_executor_trigger_any+0x5c>
 800ec8c:	685c      	ldr	r4, [r3, #4]
 800ec8e:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800ec90:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800ec94:	d105      	bne.n	800eca2 <rclc_executor_trigger_any+0x36>
 800ec96:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800ec9a:	b910      	cbnz	r0, 800eca2 <rclc_executor_trigger_any+0x36>
 800ec9c:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800eca0:	b128      	cbz	r0, 800ecae <rclc_executor_trigger_any+0x42>
 800eca2:	bc30      	pop	{r4, r5}
 800eca4:	4770      	bx	lr
 800eca6:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800ecaa:	2800      	cmp	r0, #0
 800ecac:	d1f9      	bne.n	800eca2 <rclc_executor_trigger_any+0x36>
 800ecae:	3201      	adds	r2, #1
 800ecb0:	3340      	adds	r3, #64	@ 0x40
 800ecb2:	4291      	cmp	r1, r2
 800ecb4:	d017      	beq.n	800ece6 <rclc_executor_trigger_any+0x7a>
 800ecb6:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d0f1      	beq.n	800eca2 <rclc_executor_trigger_any+0x36>
 800ecbe:	f893 c000 	ldrb.w	ip, [r3]
 800ecc2:	f1bc 0f08 	cmp.w	ip, #8
 800ecc6:	d0e1      	beq.n	800ec8c <rclc_executor_trigger_any+0x20>
 800ecc8:	f1bc 0f09 	cmp.w	ip, #9
 800eccc:	d1eb      	bne.n	800eca6 <rclc_executor_trigger_any+0x3a>
 800ecce:	685c      	ldr	r4, [r3, #4]
 800ecd0:	6a25      	ldr	r5, [r4, #32]
 800ecd2:	2d00      	cmp	r5, #0
 800ecd4:	d1e5      	bne.n	800eca2 <rclc_executor_trigger_any+0x36>
 800ecd6:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800ecda:	2800      	cmp	r0, #0
 800ecdc:	d1e1      	bne.n	800eca2 <rclc_executor_trigger_any+0x36>
 800ecde:	3201      	adds	r2, #1
 800ece0:	3340      	adds	r3, #64	@ 0x40
 800ece2:	4291      	cmp	r1, r2
 800ece4:	d1e7      	bne.n	800ecb6 <rclc_executor_trigger_any+0x4a>
 800ece6:	2000      	movs	r0, #0
 800ece8:	bc30      	pop	{r4, r5}
 800ecea:	4770      	bx	lr
 800ecec:	4770      	bx	lr
 800ecee:	4608      	mov	r0, r1
 800ecf0:	4770      	bx	lr
 800ecf2:	bf00      	nop

0800ecf4 <rclc_executor_get_zero_initialized_executor>:
 800ecf4:	b510      	push	{r4, lr}
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	2288      	movs	r2, #136	@ 0x88
 800ecfa:	4902      	ldr	r1, [pc, #8]	@ (800ed04 <rclc_executor_get_zero_initialized_executor+0x10>)
 800ecfc:	f00d f919 	bl	801bf32 <memcpy>
 800ed00:	4620      	mov	r0, r4
 800ed02:	bd10      	pop	{r4, pc}
 800ed04:	0801cd10 	.word	0x0801cd10

0800ed08 <rclc_executor_init>:
 800ed08:	2900      	cmp	r1, #0
 800ed0a:	d06a      	beq.n	800ede2 <rclc_executor_init+0xda>
 800ed0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed10:	4605      	mov	r5, r0
 800ed12:	b0b0      	sub	sp, #192	@ 0xc0
 800ed14:	2800      	cmp	r0, #0
 800ed16:	d05c      	beq.n	800edd2 <rclc_executor_init+0xca>
 800ed18:	4616      	mov	r6, r2
 800ed1a:	4618      	mov	r0, r3
 800ed1c:	4688      	mov	r8, r1
 800ed1e:	461f      	mov	r7, r3
 800ed20:	f000 fbee 	bl	800f500 <rcutils_allocator_is_valid>
 800ed24:	2e00      	cmp	r6, #0
 800ed26:	d054      	beq.n	800edd2 <rclc_executor_init+0xca>
 800ed28:	f080 0401 	eor.w	r4, r0, #1
 800ed2c:	f014 04ff 	ands.w	r4, r4, #255	@ 0xff
 800ed30:	d14f      	bne.n	800edd2 <rclc_executor_init+0xca>
 800ed32:	2288      	movs	r2, #136	@ 0x88
 800ed34:	4930      	ldr	r1, [pc, #192]	@ (800edf8 <rclc_executor_init+0xf0>)
 800ed36:	a80e      	add	r0, sp, #56	@ 0x38
 800ed38:	f00d f8fb 	bl	801bf32 <memcpy>
 800ed3c:	a90e      	add	r1, sp, #56	@ 0x38
 800ed3e:	2288      	movs	r2, #136	@ 0x88
 800ed40:	4628      	mov	r0, r5
 800ed42:	f00d f8f6 	bl	801bf32 <memcpy>
 800ed46:	4668      	mov	r0, sp
 800ed48:	f8c5 8000 	str.w	r8, [r5]
 800ed4c:	60ae      	str	r6, [r5, #8]
 800ed4e:	f008 f857 	bl	8016e00 <rcl_get_zero_initialized_wait_set>
 800ed52:	46ec      	mov	ip, sp
 800ed54:	f105 0e14 	add.w	lr, r5, #20
 800ed58:	f8d7 8000 	ldr.w	r8, [r7]
 800ed5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ed60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ed64:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ed68:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ed6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ed70:	ed9f 7b1f 	vldr	d7, [pc, #124]	@ 800edf0 <rclc_executor_init+0xe8>
 800ed74:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ed78:	f8dc 3000 	ldr.w	r3, [ip]
 800ed7c:	01b0      	lsls	r0, r6, #6
 800ed7e:	6939      	ldr	r1, [r7, #16]
 800ed80:	f8ce 3000 	str.w	r3, [lr]
 800ed84:	612f      	str	r7, [r5, #16]
 800ed86:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800ed8a:	47c0      	blx	r8
 800ed8c:	6068      	str	r0, [r5, #4]
 800ed8e:	b908      	cbnz	r0, 800ed94 <rclc_executor_init+0x8c>
 800ed90:	e029      	b.n	800ede6 <rclc_executor_init+0xde>
 800ed92:	6868      	ldr	r0, [r5, #4]
 800ed94:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800ed98:	3401      	adds	r4, #1
 800ed9a:	4631      	mov	r1, r6
 800ed9c:	f000 fa74 	bl	800f288 <rclc_executor_handle_init>
 800eda0:	42a6      	cmp	r6, r4
 800eda2:	d8f6      	bhi.n	800ed92 <rclc_executor_init+0x8a>
 800eda4:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800eda8:	f000 fa62 	bl	800f270 <rclc_executor_handle_counters_zero_init>
 800edac:	4a13      	ldr	r2, [pc, #76]	@ (800edfc <rclc_executor_init+0xf4>)
 800edae:	2300      	movs	r3, #0
 800edb0:	6868      	ldr	r0, [r5, #4]
 800edb2:	e9c5 231e 	strd	r2, r3, [r5, #120]	@ 0x78
 800edb6:	b168      	cbz	r0, 800edd4 <rclc_executor_init+0xcc>
 800edb8:	68ab      	ldr	r3, [r5, #8]
 800edba:	b173      	cbz	r3, 800edda <rclc_executor_init+0xd2>
 800edbc:	692a      	ldr	r2, [r5, #16]
 800edbe:	fab2 f382 	clz	r3, r2
 800edc2:	095b      	lsrs	r3, r3, #5
 800edc4:	b14a      	cbz	r2, 800edda <rclc_executor_init+0xd2>
 800edc6:	4618      	mov	r0, r3
 800edc8:	f885 3080 	strb.w	r3, [r5, #128]	@ 0x80
 800edcc:	b030      	add	sp, #192	@ 0xc0
 800edce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edd2:	200b      	movs	r0, #11
 800edd4:	b030      	add	sp, #192	@ 0xc0
 800edd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edda:	2000      	movs	r0, #0
 800eddc:	b030      	add	sp, #192	@ 0xc0
 800edde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ede2:	200b      	movs	r0, #11
 800ede4:	4770      	bx	lr
 800ede6:	200a      	movs	r0, #10
 800ede8:	e7f4      	b.n	800edd4 <rclc_executor_init+0xcc>
 800edea:	bf00      	nop
 800edec:	f3af 8000 	nop.w
 800edf0:	3b9aca00 	.word	0x3b9aca00
 800edf4:	00000000 	.word	0x00000000
 800edf8:	0801cd10 	.word	0x0801cd10
 800edfc:	0800ec6d 	.word	0x0800ec6d

0800ee00 <rclc_executor_add_timer>:
 800ee00:	b351      	cbz	r1, 800ee58 <rclc_executor_add_timer+0x58>
 800ee02:	fab0 f280 	clz	r2, r0
 800ee06:	b570      	push	{r4, r5, r6, lr}
 800ee08:	0952      	lsrs	r2, r2, #5
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	b1e0      	cbz	r0, 800ee48 <rclc_executor_add_timer+0x48>
 800ee0e:	e9d0 0302 	ldrd	r0, r3, [r0, #8]
 800ee12:	4283      	cmp	r3, r0
 800ee14:	d301      	bcc.n	800ee1a <rclc_executor_add_timer+0x1a>
 800ee16:	2001      	movs	r0, #1
 800ee18:	bd70      	pop	{r4, r5, r6, pc}
 800ee1a:	6860      	ldr	r0, [r4, #4]
 800ee1c:	019d      	lsls	r5, r3, #6
 800ee1e:	1c5e      	adds	r6, r3, #1
 800ee20:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 800ee24:	6059      	str	r1, [r3, #4]
 800ee26:	2102      	movs	r1, #2
 800ee28:	5341      	strh	r1, [r0, r5]
 800ee2a:	2101      	movs	r1, #1
 800ee2c:	f104 0514 	add.w	r5, r4, #20
 800ee30:	62da      	str	r2, [r3, #44]	@ 0x2c
 800ee32:	8719      	strh	r1, [r3, #56]	@ 0x38
 800ee34:	4628      	mov	r0, r5
 800ee36:	60e6      	str	r6, [r4, #12]
 800ee38:	f007 fff6 	bl	8016e28 <rcl_wait_set_is_valid>
 800ee3c:	b930      	cbnz	r0, 800ee4c <rclc_executor_add_timer+0x4c>
 800ee3e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800ee40:	2000      	movs	r0, #0
 800ee42:	3301      	adds	r3, #1
 800ee44:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800ee46:	bd70      	pop	{r4, r5, r6, pc}
 800ee48:	200b      	movs	r0, #11
 800ee4a:	bd70      	pop	{r4, r5, r6, pc}
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	f007 fff1 	bl	8016e34 <rcl_wait_set_fini>
 800ee52:	2800      	cmp	r0, #0
 800ee54:	d0f3      	beq.n	800ee3e <rclc_executor_add_timer+0x3e>
 800ee56:	bd70      	pop	{r4, r5, r6, pc}
 800ee58:	200b      	movs	r0, #11
 800ee5a:	4770      	bx	lr

0800ee5c <rclc_executor_prepare>:
 800ee5c:	2800      	cmp	r0, #0
 800ee5e:	d044      	beq.n	800eeea <rclc_executor_prepare+0x8e>
 800ee60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee62:	f100 0514 	add.w	r5, r0, #20
 800ee66:	b09b      	sub	sp, #108	@ 0x6c
 800ee68:	4604      	mov	r4, r0
 800ee6a:	4628      	mov	r0, r5
 800ee6c:	f007 ffdc 	bl	8016e28 <rcl_wait_set_is_valid>
 800ee70:	b110      	cbz	r0, 800ee78 <rclc_executor_prepare+0x1c>
 800ee72:	2000      	movs	r0, #0
 800ee74:	b01b      	add	sp, #108	@ 0x6c
 800ee76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee78:	4628      	mov	r0, r5
 800ee7a:	f007 ffdb 	bl	8016e34 <rcl_wait_set_fini>
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	d130      	bne.n	800eee4 <rclc_executor_prepare+0x88>
 800ee82:	a80c      	add	r0, sp, #48	@ 0x30
 800ee84:	ae04      	add	r6, sp, #16
 800ee86:	f007 ffbb 	bl	8016e00 <rcl_get_zero_initialized_wait_set>
 800ee8a:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ee8e:	46ae      	mov	lr, r5
 800ee90:	6927      	ldr	r7, [r4, #16]
 800ee92:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee96:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ee9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ee9e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eea2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eea6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eeaa:	f8dc 3000 	ldr.w	r3, [ip]
 800eeae:	f8ce 3000 	str.w	r3, [lr]
 800eeb2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800eeb4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	4628      	mov	r0, r5
 800eeba:	6822      	ldr	r2, [r4, #0]
 800eebc:	6033      	str	r3, [r6, #0]
 800eebe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800eec0:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800eec2:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800eec6:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800eeca:	e9cd 2100 	strd	r2, r1, [sp]
 800eece:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800eed0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800eed2:	f008 faaf 	bl	8017434 <rcl_wait_set_init>
 800eed6:	2800      	cmp	r0, #0
 800eed8:	d0cc      	beq.n	800ee74 <rclc_executor_prepare+0x18>
 800eeda:	900b      	str	r0, [sp, #44]	@ 0x2c
 800eedc:	f000 fb34 	bl	800f548 <rcutils_reset_error>
 800eee0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800eee2:	e7c7      	b.n	800ee74 <rclc_executor_prepare+0x18>
 800eee4:	f000 fb30 	bl	800f548 <rcutils_reset_error>
 800eee8:	e7cb      	b.n	800ee82 <rclc_executor_prepare+0x26>
 800eeea:	200b      	movs	r0, #11
 800eeec:	4770      	bx	lr
 800eeee:	bf00      	nop

0800eef0 <rclc_executor_spin_some.part.0>:
 800eef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eef4:	4605      	mov	r5, r0
 800eef6:	4691      	mov	r9, r2
 800eef8:	4698      	mov	r8, r3
 800eefa:	f7ff ffaf 	bl	800ee5c <rclc_executor_prepare>
 800eefe:	f105 0614 	add.w	r6, r5, #20
 800ef02:	4630      	mov	r0, r6
 800ef04:	f008 f862 	bl	8016fcc <rcl_wait_set_clear>
 800ef08:	4607      	mov	r7, r0
 800ef0a:	2800      	cmp	r0, #0
 800ef0c:	f040 80a8 	bne.w	800f060 <rclc_executor_spin_some.part.0+0x170>
 800ef10:	68ab      	ldr	r3, [r5, #8]
 800ef12:	b30b      	cbz	r3, 800ef58 <rclc_executor_spin_some.part.0+0x68>
 800ef14:	4604      	mov	r4, r0
 800ef16:	6869      	ldr	r1, [r5, #4]
 800ef18:	01a2      	lsls	r2, r4, #6
 800ef1a:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800ef1e:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800ef22:	b1cb      	cbz	r3, 800ef58 <rclc_executor_spin_some.part.0+0x68>
 800ef24:	5c8b      	ldrb	r3, [r1, r2]
 800ef26:	2b0a      	cmp	r3, #10
 800ef28:	f200 80de 	bhi.w	800f0e8 <rclc_executor_spin_some.part.0+0x1f8>
 800ef2c:	e8df f003 	tbb	[pc, r3]
 800ef30:	8da99d9d 	.word	0x8da99d9d
 800ef34:	0606068d 	.word	0x0606068d
 800ef38:	c1ce      	.short	0xc1ce
 800ef3a:	b5          	.byte	0xb5
 800ef3b:	00          	.byte	0x00
 800ef3c:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ef40:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ef44:	4630      	mov	r0, r6
 800ef46:	f008 fb91 	bl	801766c <rcl_wait_set_add_service>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	f040 8087 	bne.w	800f05e <rclc_executor_spin_some.part.0+0x16e>
 800ef50:	3401      	adds	r4, #1
 800ef52:	68ab      	ldr	r3, [r5, #8]
 800ef54:	429c      	cmp	r4, r3
 800ef56:	d3de      	bcc.n	800ef16 <rclc_executor_spin_some.part.0+0x26>
 800ef58:	4643      	mov	r3, r8
 800ef5a:	464a      	mov	r2, r9
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	f008 fbb3 	bl	80176c8 <rcl_wait>
 800ef62:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	f000 80c6 	beq.w	800f0f8 <rclc_executor_spin_some.part.0+0x208>
 800ef6c:	2b01      	cmp	r3, #1
 800ef6e:	f040 80bb 	bne.w	800f0e8 <rclc_executor_spin_some.part.0+0x1f8>
 800ef72:	68ab      	ldr	r3, [r5, #8]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	f000 8159 	beq.w	800f22c <rclc_executor_spin_some.part.0+0x33c>
 800ef7a:	2400      	movs	r4, #0
 800ef7c:	f240 1991 	movw	r9, #401	@ 0x191
 800ef80:	46a0      	mov	r8, r4
 800ef82:	e00a      	b.n	800ef9a <rclc_executor_spin_some.part.0+0xaa>
 800ef84:	f7ff fb6e 	bl	800e664 <_rclc_check_for_new_data>
 800ef88:	4604      	mov	r4, r0
 800ef8a:	b110      	cbz	r0, 800ef92 <rclc_executor_spin_some.part.0+0xa2>
 800ef8c:	4548      	cmp	r0, r9
 800ef8e:	f040 80b1 	bne.w	800f0f4 <rclc_executor_spin_some.part.0+0x204>
 800ef92:	68ab      	ldr	r3, [r5, #8]
 800ef94:	4598      	cmp	r8, r3
 800ef96:	f080 8126 	bcs.w	800f1e6 <rclc_executor_spin_some.part.0+0x2f6>
 800ef9a:	686a      	ldr	r2, [r5, #4]
 800ef9c:	4631      	mov	r1, r6
 800ef9e:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800efa2:	f108 0801 	add.w	r8, r8, #1
 800efa6:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800efaa:	f1bc 0f00 	cmp.w	ip, #0
 800efae:	d1e9      	bne.n	800ef84 <rclc_executor_spin_some.part.0+0x94>
 800efb0:	4619      	mov	r1, r3
 800efb2:	4610      	mov	r0, r2
 800efb4:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800efb8:	4798      	blx	r3
 800efba:	2800      	cmp	r0, #0
 800efbc:	f000 809a 	beq.w	800f0f4 <rclc_executor_spin_some.part.0+0x204>
 800efc0:	68ab      	ldr	r3, [r5, #8]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	f000 8096 	beq.w	800f0f4 <rclc_executor_spin_some.part.0+0x204>
 800efc8:	f04f 0800 	mov.w	r8, #0
 800efcc:	f240 1991 	movw	r9, #401	@ 0x191
 800efd0:	e009      	b.n	800efe6 <rclc_executor_spin_some.part.0+0xf6>
 800efd2:	f7ff fb95 	bl	800e700 <_rclc_take_new_data>
 800efd6:	4604      	mov	r4, r0
 800efd8:	b110      	cbz	r0, 800efe0 <rclc_executor_spin_some.part.0+0xf0>
 800efda:	4548      	cmp	r0, r9
 800efdc:	f040 808a 	bne.w	800f0f4 <rclc_executor_spin_some.part.0+0x204>
 800efe0:	68ab      	ldr	r3, [r5, #8]
 800efe2:	4598      	cmp	r8, r3
 800efe4:	d209      	bcs.n	800effa <rclc_executor_spin_some.part.0+0x10a>
 800efe6:	6868      	ldr	r0, [r5, #4]
 800efe8:	4631      	mov	r1, r6
 800efea:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800efee:	f108 0801 	add.w	r8, r8, #1
 800eff2:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800eff6:	2a00      	cmp	r2, #0
 800eff8:	d1eb      	bne.n	800efd2 <rclc_executor_spin_some.part.0+0xe2>
 800effa:	2b00      	cmp	r3, #0
 800effc:	d07a      	beq.n	800f0f4 <rclc_executor_spin_some.part.0+0x204>
 800effe:	2600      	movs	r6, #0
 800f000:	e00e      	b.n	800f020 <rclc_executor_spin_some.part.0+0x130>
 800f002:	f812 200c 	ldrb.w	r2, [r2, ip]
 800f006:	2a08      	cmp	r2, #8
 800f008:	f000 80fc 	beq.w	800f204 <rclc_executor_spin_some.part.0+0x314>
 800f00c:	2a09      	cmp	r2, #9
 800f00e:	f000 80ee 	beq.w	800f1ee <rclc_executor_spin_some.part.0+0x2fe>
 800f012:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800f016:	b98a      	cbnz	r2, 800f03c <rclc_executor_spin_some.part.0+0x14c>
 800f018:	3601      	adds	r6, #1
 800f01a:	429e      	cmp	r6, r3
 800f01c:	d267      	bcs.n	800f0ee <rclc_executor_spin_some.part.0+0x1fe>
 800f01e:	2400      	movs	r4, #0
 800f020:	686a      	ldr	r2, [r5, #4]
 800f022:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800f026:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800f02a:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800f02e:	2900      	cmp	r1, #0
 800f030:	d060      	beq.n	800f0f4 <rclc_executor_spin_some.part.0+0x204>
 800f032:	7841      	ldrb	r1, [r0, #1]
 800f034:	2900      	cmp	r1, #0
 800f036:	d0e4      	beq.n	800f002 <rclc_executor_spin_some.part.0+0x112>
 800f038:	2901      	cmp	r1, #1
 800f03a:	d1ed      	bne.n	800f018 <rclc_executor_spin_some.part.0+0x128>
 800f03c:	f7ff fcd4 	bl	800e9e8 <_rclc_execute.part.0>
 800f040:	2800      	cmp	r0, #0
 800f042:	f040 80b5 	bne.w	800f1b0 <rclc_executor_spin_some.part.0+0x2c0>
 800f046:	68ab      	ldr	r3, [r5, #8]
 800f048:	e7e6      	b.n	800f018 <rclc_executor_spin_some.part.0+0x128>
 800f04a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f04e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f052:	4630      	mov	r0, r6
 800f054:	f008 fade 	bl	8017614 <rcl_wait_set_add_client>
 800f058:	2800      	cmp	r0, #0
 800f05a:	f43f af79 	beq.w	800ef50 <rclc_executor_spin_some.part.0+0x60>
 800f05e:	4607      	mov	r7, r0
 800f060:	f000 fa72 	bl	800f548 <rcutils_reset_error>
 800f064:	4638      	mov	r0, r7
 800f066:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f06a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f06e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f072:	4630      	mov	r0, r6
 800f074:	f007 ff7e 	bl	8016f74 <rcl_wait_set_add_subscription>
 800f078:	2800      	cmp	r0, #0
 800f07a:	f43f af69 	beq.w	800ef50 <rclc_executor_spin_some.part.0+0x60>
 800f07e:	4607      	mov	r7, r0
 800f080:	e7ee      	b.n	800f060 <rclc_executor_spin_some.part.0+0x170>
 800f082:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f086:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f08a:	4630      	mov	r0, r6
 800f08c:	f008 fa92 	bl	80175b4 <rcl_wait_set_add_timer>
 800f090:	2800      	cmp	r0, #0
 800f092:	f43f af5d 	beq.w	800ef50 <rclc_executor_spin_some.part.0+0x60>
 800f096:	4607      	mov	r7, r0
 800f098:	e7e2      	b.n	800f060 <rclc_executor_spin_some.part.0+0x170>
 800f09a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f09e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	f008 fa5a 	bl	801755c <rcl_wait_set_add_guard_condition>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	f43f af51 	beq.w	800ef50 <rclc_executor_spin_some.part.0+0x60>
 800f0ae:	4607      	mov	r7, r0
 800f0b0:	e7d6      	b.n	800f060 <rclc_executor_spin_some.part.0+0x170>
 800f0b2:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f0b6:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f0ba:	4630      	mov	r0, r6
 800f0bc:	3110      	adds	r1, #16
 800f0be:	f008 ffd9 	bl	8018074 <rcl_action_wait_set_add_action_server>
 800f0c2:	2800      	cmp	r0, #0
 800f0c4:	f43f af44 	beq.w	800ef50 <rclc_executor_spin_some.part.0+0x60>
 800f0c8:	4607      	mov	r7, r0
 800f0ca:	e7c9      	b.n	800f060 <rclc_executor_spin_some.part.0+0x170>
 800f0cc:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800f0d6:	4630      	mov	r0, r6
 800f0d8:	3110      	adds	r1, #16
 800f0da:	f008 fda1 	bl	8017c20 <rcl_action_wait_set_add_action_client>
 800f0de:	2800      	cmp	r0, #0
 800f0e0:	f43f af36 	beq.w	800ef50 <rclc_executor_spin_some.part.0+0x60>
 800f0e4:	4607      	mov	r7, r0
 800f0e6:	e7bb      	b.n	800f060 <rclc_executor_spin_some.part.0+0x170>
 800f0e8:	2701      	movs	r7, #1
 800f0ea:	f000 fa2d 	bl	800f548 <rcutils_reset_error>
 800f0ee:	4638      	mov	r0, r7
 800f0f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0f4:	4627      	mov	r7, r4
 800f0f6:	e7fa      	b.n	800f0ee <rclc_executor_spin_some.part.0+0x1fe>
 800f0f8:	68ab      	ldr	r3, [r5, #8]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	f000 8093 	beq.w	800f226 <rclc_executor_spin_some.part.0+0x336>
 800f100:	2400      	movs	r4, #0
 800f102:	f240 1991 	movw	r9, #401	@ 0x191
 800f106:	46a0      	mov	r8, r4
 800f108:	e008      	b.n	800f11c <rclc_executor_spin_some.part.0+0x22c>
 800f10a:	f7ff faab 	bl	800e664 <_rclc_check_for_new_data>
 800f10e:	4604      	mov	r4, r0
 800f110:	b108      	cbz	r0, 800f116 <rclc_executor_spin_some.part.0+0x226>
 800f112:	4548      	cmp	r0, r9
 800f114:	d1ee      	bne.n	800f0f4 <rclc_executor_spin_some.part.0+0x204>
 800f116:	68ab      	ldr	r3, [r5, #8]
 800f118:	4598      	cmp	r8, r3
 800f11a:	d266      	bcs.n	800f1ea <rclc_executor_spin_some.part.0+0x2fa>
 800f11c:	686a      	ldr	r2, [r5, #4]
 800f11e:	4631      	mov	r1, r6
 800f120:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800f124:	f108 0801 	add.w	r8, r8, #1
 800f128:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800f12c:	f1bc 0f00 	cmp.w	ip, #0
 800f130:	d1eb      	bne.n	800f10a <rclc_executor_spin_some.part.0+0x21a>
 800f132:	4619      	mov	r1, r3
 800f134:	4610      	mov	r0, r2
 800f136:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800f13a:	4798      	blx	r3
 800f13c:	2800      	cmp	r0, #0
 800f13e:	d0d9      	beq.n	800f0f4 <rclc_executor_spin_some.part.0+0x204>
 800f140:	68ab      	ldr	r3, [r5, #8]
 800f142:	2b00      	cmp	r3, #0
 800f144:	d0d6      	beq.n	800f0f4 <rclc_executor_spin_some.part.0+0x204>
 800f146:	f04f 0a00 	mov.w	sl, #0
 800f14a:	f240 1891 	movw	r8, #401	@ 0x191
 800f14e:	f240 2959 	movw	r9, #601	@ 0x259
 800f152:	e00e      	b.n	800f172 <rclc_executor_spin_some.part.0+0x282>
 800f154:	f813 300b 	ldrb.w	r3, [r3, fp]
 800f158:	2b08      	cmp	r3, #8
 800f15a:	d034      	beq.n	800f1c6 <rclc_executor_spin_some.part.0+0x2d6>
 800f15c:	2b09      	cmp	r3, #9
 800f15e:	d029      	beq.n	800f1b4 <rclc_executor_spin_some.part.0+0x2c4>
 800f160:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800f164:	bb03      	cbnz	r3, 800f1a8 <rclc_executor_spin_some.part.0+0x2b8>
 800f166:	f10a 0a01 	add.w	sl, sl, #1
 800f16a:	68ab      	ldr	r3, [r5, #8]
 800f16c:	459a      	cmp	sl, r3
 800f16e:	d2be      	bcs.n	800f0ee <rclc_executor_spin_some.part.0+0x1fe>
 800f170:	2400      	movs	r4, #0
 800f172:	6868      	ldr	r0, [r5, #4]
 800f174:	ea4f 1b8a 	mov.w	fp, sl, lsl #6
 800f178:	eb00 108a 	add.w	r0, r0, sl, lsl #6
 800f17c:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800f180:	2b00      	cmp	r3, #0
 800f182:	d0b7      	beq.n	800f0f4 <rclc_executor_spin_some.part.0+0x204>
 800f184:	4631      	mov	r1, r6
 800f186:	f7ff fabb 	bl	800e700 <_rclc_take_new_data>
 800f18a:	2800      	cmp	r0, #0
 800f18c:	bf18      	it	ne
 800f18e:	4540      	cmpne	r0, r8
 800f190:	d001      	beq.n	800f196 <rclc_executor_spin_some.part.0+0x2a6>
 800f192:	4548      	cmp	r0, r9
 800f194:	d10c      	bne.n	800f1b0 <rclc_executor_spin_some.part.0+0x2c0>
 800f196:	686b      	ldr	r3, [r5, #4]
 800f198:	eb13 000b 	adds.w	r0, r3, fp
 800f19c:	d021      	beq.n	800f1e2 <rclc_executor_spin_some.part.0+0x2f2>
 800f19e:	7842      	ldrb	r2, [r0, #1]
 800f1a0:	2a00      	cmp	r2, #0
 800f1a2:	d0d7      	beq.n	800f154 <rclc_executor_spin_some.part.0+0x264>
 800f1a4:	2a01      	cmp	r2, #1
 800f1a6:	d1de      	bne.n	800f166 <rclc_executor_spin_some.part.0+0x276>
 800f1a8:	f7ff fc1e 	bl	800e9e8 <_rclc_execute.part.0>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	d0da      	beq.n	800f166 <rclc_executor_spin_some.part.0+0x276>
 800f1b0:	4607      	mov	r7, r0
 800f1b2:	e79c      	b.n	800f0ee <rclc_executor_spin_some.part.0+0x1fe>
 800f1b4:	6843      	ldr	r3, [r0, #4]
 800f1b6:	6a1a      	ldr	r2, [r3, #32]
 800f1b8:	2a00      	cmp	r2, #0
 800f1ba:	d1f5      	bne.n	800f1a8 <rclc_executor_spin_some.part.0+0x2b8>
 800f1bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d0d0      	beq.n	800f166 <rclc_executor_spin_some.part.0+0x276>
 800f1c4:	e7f0      	b.n	800f1a8 <rclc_executor_spin_some.part.0+0x2b8>
 800f1c6:	6843      	ldr	r3, [r0, #4]
 800f1c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800f1ca:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800f1ce:	d1eb      	bne.n	800f1a8 <rclc_executor_spin_some.part.0+0x2b8>
 800f1d0:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800f1d4:	2a00      	cmp	r2, #0
 800f1d6:	d1e7      	bne.n	800f1a8 <rclc_executor_spin_some.part.0+0x2b8>
 800f1d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d0c2      	beq.n	800f166 <rclc_executor_spin_some.part.0+0x276>
 800f1e0:	e7e2      	b.n	800f1a8 <rclc_executor_spin_some.part.0+0x2b8>
 800f1e2:	270b      	movs	r7, #11
 800f1e4:	e783      	b.n	800f0ee <rclc_executor_spin_some.part.0+0x1fe>
 800f1e6:	686a      	ldr	r2, [r5, #4]
 800f1e8:	e6e2      	b.n	800efb0 <rclc_executor_spin_some.part.0+0xc0>
 800f1ea:	686a      	ldr	r2, [r5, #4]
 800f1ec:	e7a1      	b.n	800f132 <rclc_executor_spin_some.part.0+0x242>
 800f1ee:	6842      	ldr	r2, [r0, #4]
 800f1f0:	6a11      	ldr	r1, [r2, #32]
 800f1f2:	2900      	cmp	r1, #0
 800f1f4:	f47f af22 	bne.w	800f03c <rclc_executor_spin_some.part.0+0x14c>
 800f1f8:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800f1fc:	2a00      	cmp	r2, #0
 800f1fe:	f43f af0b 	beq.w	800f018 <rclc_executor_spin_some.part.0+0x128>
 800f202:	e71b      	b.n	800f03c <rclc_executor_spin_some.part.0+0x14c>
 800f204:	6842      	ldr	r2, [r0, #4]
 800f206:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800f208:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800f20c:	f47f af16 	bne.w	800f03c <rclc_executor_spin_some.part.0+0x14c>
 800f210:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800f214:	2900      	cmp	r1, #0
 800f216:	f47f af11 	bne.w	800f03c <rclc_executor_spin_some.part.0+0x14c>
 800f21a:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800f21e:	2a00      	cmp	r2, #0
 800f220:	f43f aefa 	beq.w	800f018 <rclc_executor_spin_some.part.0+0x128>
 800f224:	e70a      	b.n	800f03c <rclc_executor_spin_some.part.0+0x14c>
 800f226:	686a      	ldr	r2, [r5, #4]
 800f228:	461c      	mov	r4, r3
 800f22a:	e782      	b.n	800f132 <rclc_executor_spin_some.part.0+0x242>
 800f22c:	686a      	ldr	r2, [r5, #4]
 800f22e:	461c      	mov	r4, r3
 800f230:	e6be      	b.n	800efb0 <rclc_executor_spin_some.part.0+0xc0>
 800f232:	bf00      	nop

0800f234 <rclc_executor_spin>:
 800f234:	b1d0      	cbz	r0, 800f26c <rclc_executor_spin+0x38>
 800f236:	b510      	push	{r4, lr}
 800f238:	4604      	mov	r4, r0
 800f23a:	b082      	sub	sp, #8
 800f23c:	e004      	b.n	800f248 <rclc_executor_spin+0x14>
 800f23e:	f7ff fe57 	bl	800eef0 <rclc_executor_spin_some.part.0>
 800f242:	f030 0302 	bics.w	r3, r0, #2
 800f246:	d10f      	bne.n	800f268 <rclc_executor_spin+0x34>
 800f248:	6820      	ldr	r0, [r4, #0]
 800f24a:	e9d4 231a 	ldrd	r2, r3, [r4, #104]	@ 0x68
 800f24e:	e9cd 2300 	strd	r2, r3, [sp]
 800f252:	f006 fbb5 	bl	80159c0 <rcl_context_is_valid>
 800f256:	4601      	mov	r1, r0
 800f258:	4620      	mov	r0, r4
 800f25a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f25e:	2900      	cmp	r1, #0
 800f260:	d1ed      	bne.n	800f23e <rclc_executor_spin+0xa>
 800f262:	f000 f971 	bl	800f548 <rcutils_reset_error>
 800f266:	2001      	movs	r0, #1
 800f268:	b002      	add	sp, #8
 800f26a:	bd10      	pop	{r4, pc}
 800f26c:	200b      	movs	r0, #11
 800f26e:	4770      	bx	lr

0800f270 <rclc_executor_handle_counters_zero_init>:
 800f270:	b130      	cbz	r0, 800f280 <rclc_executor_handle_counters_zero_init+0x10>
 800f272:	2220      	movs	r2, #32
 800f274:	2100      	movs	r1, #0
 800f276:	b508      	push	{r3, lr}
 800f278:	f00c fd92 	bl	801bda0 <memset>
 800f27c:	2000      	movs	r0, #0
 800f27e:	bd08      	pop	{r3, pc}
 800f280:	200b      	movs	r0, #11
 800f282:	4770      	bx	lr
 800f284:	0000      	movs	r0, r0
	...

0800f288 <rclc_executor_handle_init>:
 800f288:	4603      	mov	r3, r0
 800f28a:	b178      	cbz	r0, 800f2ac <rclc_executor_handle_init+0x24>
 800f28c:	2200      	movs	r2, #0
 800f28e:	f04f 0c0b 	mov.w	ip, #11
 800f292:	6341      	str	r1, [r0, #52]	@ 0x34
 800f294:	4610      	mov	r0, r2
 800f296:	f8a3 c000 	strh.w	ip, [r3]
 800f29a:	631a      	str	r2, [r3, #48]	@ 0x30
 800f29c:	871a      	strh	r2, [r3, #56]	@ 0x38
 800f29e:	ed9f 7b04 	vldr	d7, [pc, #16]	@ 800f2b0 <rclc_executor_handle_init+0x28>
 800f2a2:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800f2a6:	ed83 7b0a 	vstr	d7, [r3, #40]	@ 0x28
 800f2aa:	4770      	bx	lr
 800f2ac:	200b      	movs	r0, #11
 800f2ae:	4770      	bx	lr
	...

0800f2b8 <rclc_support_init_with_options>:
 800f2b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f2bc:	b083      	sub	sp, #12
 800f2be:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	bf18      	it	ne
 800f2c4:	2f00      	cmpne	r7, #0
 800f2c6:	d027      	beq.n	800f318 <rclc_support_init_with_options+0x60>
 800f2c8:	4604      	mov	r4, r0
 800f2ca:	b328      	cbz	r0, 800f318 <rclc_support_init_with_options+0x60>
 800f2cc:	46e9      	mov	r9, sp
 800f2ce:	461d      	mov	r5, r3
 800f2d0:	460e      	mov	r6, r1
 800f2d2:	4690      	mov	r8, r2
 800f2d4:	4648      	mov	r0, r9
 800f2d6:	f006 fb69 	bl	80159ac <rcl_get_zero_initialized_context>
 800f2da:	462a      	mov	r2, r5
 800f2dc:	4623      	mov	r3, r4
 800f2de:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f2e2:	e884 0003 	stmia.w	r4, {r0, r1}
 800f2e6:	4641      	mov	r1, r8
 800f2e8:	4630      	mov	r0, r6
 800f2ea:	f006 fbcf 	bl	8015a8c <rcl_init>
 800f2ee:	4605      	mov	r5, r0
 800f2f0:	b960      	cbnz	r0, 800f30c <rclc_support_init_with_options+0x54>
 800f2f2:	463a      	mov	r2, r7
 800f2f4:	f104 010c 	add.w	r1, r4, #12
 800f2f8:	2003      	movs	r0, #3
 800f2fa:	60a7      	str	r7, [r4, #8]
 800f2fc:	f007 f954 	bl	80165a8 <rcl_clock_init>
 800f300:	4605      	mov	r5, r0
 800f302:	b918      	cbnz	r0, 800f30c <rclc_support_init_with_options+0x54>
 800f304:	4628      	mov	r0, r5
 800f306:	b003      	add	sp, #12
 800f308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f30c:	f000 f91c 	bl	800f548 <rcutils_reset_error>
 800f310:	4628      	mov	r0, r5
 800f312:	b003      	add	sp, #12
 800f314:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f318:	250b      	movs	r5, #11
 800f31a:	4628      	mov	r0, r5
 800f31c:	b003      	add	sp, #12
 800f31e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f322:	bf00      	nop

0800f324 <rclc_node_init_default>:
 800f324:	2b00      	cmp	r3, #0
 800f326:	bf18      	it	ne
 800f328:	2a00      	cmpne	r2, #0
 800f32a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f32e:	4616      	mov	r6, r2
 800f330:	bf0c      	ite	eq
 800f332:	2201      	moveq	r2, #1
 800f334:	2200      	movne	r2, #0
 800f336:	b0a1      	sub	sp, #132	@ 0x84
 800f338:	2900      	cmp	r1, #0
 800f33a:	bf08      	it	eq
 800f33c:	f042 0201 	orreq.w	r2, r2, #1
 800f340:	bb22      	cbnz	r2, 800f38c <rclc_node_init_default+0x68>
 800f342:	4604      	mov	r4, r0
 800f344:	b310      	cbz	r0, 800f38c <rclc_node_init_default+0x68>
 800f346:	f10d 0810 	add.w	r8, sp, #16
 800f34a:	461f      	mov	r7, r3
 800f34c:	460d      	mov	r5, r1
 800f34e:	f10d 0918 	add.w	r9, sp, #24
 800f352:	4640      	mov	r0, r8
 800f354:	f006 fcc2 	bl	8015cdc <rcl_get_zero_initialized_node>
 800f358:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f35c:	e884 0003 	stmia.w	r4, {r0, r1}
 800f360:	4648      	mov	r0, r9
 800f362:	f006 fe35 	bl	8015fd0 <rcl_node_get_default_options>
 800f366:	4640      	mov	r0, r8
 800f368:	f006 fcb8 	bl	8015cdc <rcl_get_zero_initialized_node>
 800f36c:	f8cd 9000 	str.w	r9, [sp]
 800f370:	463b      	mov	r3, r7
 800f372:	4632      	mov	r2, r6
 800f374:	e898 0003 	ldmia.w	r8, {r0, r1}
 800f378:	e884 0003 	stmia.w	r4, {r0, r1}
 800f37c:	4629      	mov	r1, r5
 800f37e:	4620      	mov	r0, r4
 800f380:	f006 fcb6 	bl	8015cf0 <rcl_node_init>
 800f384:	b930      	cbnz	r0, 800f394 <rclc_node_init_default+0x70>
 800f386:	b021      	add	sp, #132	@ 0x84
 800f388:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f38c:	200b      	movs	r0, #11
 800f38e:	b021      	add	sp, #132	@ 0x84
 800f390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f394:	9003      	str	r0, [sp, #12]
 800f396:	f000 f8d7 	bl	800f548 <rcutils_reset_error>
 800f39a:	f000 f8d5 	bl	800f548 <rcutils_reset_error>
 800f39e:	9803      	ldr	r0, [sp, #12]
 800f3a0:	b021      	add	sp, #132	@ 0x84
 800f3a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3a6:	bf00      	nop

0800f3a8 <rclc_publisher_init_best_effort>:
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	bf18      	it	ne
 800f3ac:	2a00      	cmpne	r2, #0
 800f3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3b2:	4616      	mov	r6, r2
 800f3b4:	bf0c      	ite	eq
 800f3b6:	2201      	moveq	r2, #1
 800f3b8:	2200      	movne	r2, #0
 800f3ba:	b0a0      	sub	sp, #128	@ 0x80
 800f3bc:	2900      	cmp	r1, #0
 800f3be:	bf08      	it	eq
 800f3c0:	f042 0201 	orreq.w	r2, r2, #1
 800f3c4:	bb1a      	cbnz	r2, 800f40e <rclc_publisher_init_best_effort+0x66>
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	b308      	cbz	r0, 800f40e <rclc_publisher_init_best_effort+0x66>
 800f3ca:	f10d 0810 	add.w	r8, sp, #16
 800f3ce:	461f      	mov	r7, r3
 800f3d0:	460d      	mov	r5, r1
 800f3d2:	f7ff f833 	bl	800e43c <rcl_get_zero_initialized_publisher>
 800f3d6:	6020      	str	r0, [r4, #0]
 800f3d8:	4640      	mov	r0, r8
 800f3da:	f7ff f8cf 	bl	800e57c <rcl_publisher_get_default_options>
 800f3de:	2250      	movs	r2, #80	@ 0x50
 800f3e0:	490d      	ldr	r1, [pc, #52]	@ (800f418 <rclc_publisher_init_best_effort+0x70>)
 800f3e2:	4640      	mov	r0, r8
 800f3e4:	f00c fda5 	bl	801bf32 <memcpy>
 800f3e8:	463b      	mov	r3, r7
 800f3ea:	4632      	mov	r2, r6
 800f3ec:	4629      	mov	r1, r5
 800f3ee:	4620      	mov	r0, r4
 800f3f0:	f8cd 8000 	str.w	r8, [sp]
 800f3f4:	f7ff f828 	bl	800e448 <rcl_publisher_init>
 800f3f8:	b910      	cbnz	r0, 800f400 <rclc_publisher_init_best_effort+0x58>
 800f3fa:	b020      	add	sp, #128	@ 0x80
 800f3fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f400:	9003      	str	r0, [sp, #12]
 800f402:	f000 f8a1 	bl	800f548 <rcutils_reset_error>
 800f406:	9803      	ldr	r0, [sp, #12]
 800f408:	b020      	add	sp, #128	@ 0x80
 800f40a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f40e:	200b      	movs	r0, #11
 800f410:	b020      	add	sp, #128	@ 0x80
 800f412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f416:	bf00      	nop
 800f418:	0801cd98 	.word	0x0801cd98

0800f41c <rclc_timer_init_default>:
 800f41c:	b361      	cbz	r1, 800f478 <rclc_timer_init_default+0x5c>
 800f41e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f422:	4606      	mov	r6, r0
 800f424:	b08a      	sub	sp, #40	@ 0x28
 800f426:	b318      	cbz	r0, 800f470 <rclc_timer_init_default+0x54>
 800f428:	460d      	mov	r5, r1
 800f42a:	4690      	mov	r8, r2
 800f42c:	461f      	mov	r7, r3
 800f42e:	f007 fab3 	bl	8016998 <rcl_get_zero_initialized_timer>
 800f432:	68ac      	ldr	r4, [r5, #8]
 800f434:	f10d 0c0c 	add.w	ip, sp, #12
 800f438:	6030      	str	r0, [r6, #0]
 800f43a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f43c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f440:	6823      	ldr	r3, [r4, #0]
 800f442:	462a      	mov	r2, r5
 800f444:	f105 010c 	add.w	r1, r5, #12
 800f448:	4630      	mov	r0, r6
 800f44a:	f8cc 3000 	str.w	r3, [ip]
 800f44e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f450:	e9cd 8700 	strd	r8, r7, [sp]
 800f454:	9302      	str	r3, [sp, #8]
 800f456:	f007 faa7 	bl	80169a8 <rcl_timer_init>
 800f45a:	b910      	cbnz	r0, 800f462 <rclc_timer_init_default+0x46>
 800f45c:	b00a      	add	sp, #40	@ 0x28
 800f45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f462:	9009      	str	r0, [sp, #36]	@ 0x24
 800f464:	f000 f870 	bl	800f548 <rcutils_reset_error>
 800f468:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f46a:	b00a      	add	sp, #40	@ 0x28
 800f46c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f470:	200b      	movs	r0, #11
 800f472:	b00a      	add	sp, #40	@ 0x28
 800f474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f478:	200b      	movs	r0, #11
 800f47a:	4770      	bx	lr

0800f47c <__default_zero_allocate>:
 800f47c:	f00b bfa6 	b.w	801b3cc <calloc>

0800f480 <__default_reallocate>:
 800f480:	f00c b944 	b.w	801b70c <realloc>

0800f484 <__default_deallocate>:
 800f484:	f00c b820 	b.w	801b4c8 <free>

0800f488 <__default_allocate>:
 800f488:	f00c b816 	b.w	801b4b8 <malloc>

0800f48c <rcutils_get_zero_initialized_allocator>:
 800f48c:	b510      	push	{r4, lr}
 800f48e:	4c05      	ldr	r4, [pc, #20]	@ (800f4a4 <rcutils_get_zero_initialized_allocator+0x18>)
 800f490:	4686      	mov	lr, r0
 800f492:	4684      	mov	ip, r0
 800f494:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f496:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f49a:	6823      	ldr	r3, [r4, #0]
 800f49c:	4670      	mov	r0, lr
 800f49e:	f8cc 3000 	str.w	r3, [ip]
 800f4a2:	bd10      	pop	{r4, pc}
 800f4a4:	0801cde8 	.word	0x0801cde8

0800f4a8 <rcutils_set_default_allocator>:
 800f4a8:	b1a8      	cbz	r0, 800f4d6 <rcutils_set_default_allocator+0x2e>
 800f4aa:	6802      	ldr	r2, [r0, #0]
 800f4ac:	b1a2      	cbz	r2, 800f4d8 <rcutils_set_default_allocator+0x30>
 800f4ae:	6841      	ldr	r1, [r0, #4]
 800f4b0:	b1a1      	cbz	r1, 800f4dc <rcutils_set_default_allocator+0x34>
 800f4b2:	b410      	push	{r4}
 800f4b4:	68c4      	ldr	r4, [r0, #12]
 800f4b6:	b164      	cbz	r4, 800f4d2 <rcutils_set_default_allocator+0x2a>
 800f4b8:	6880      	ldr	r0, [r0, #8]
 800f4ba:	b138      	cbz	r0, 800f4cc <rcutils_set_default_allocator+0x24>
 800f4bc:	4b08      	ldr	r3, [pc, #32]	@ (800f4e0 <rcutils_set_default_allocator+0x38>)
 800f4be:	601a      	str	r2, [r3, #0]
 800f4c0:	2200      	movs	r2, #0
 800f4c2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800f4c6:	2001      	movs	r0, #1
 800f4c8:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800f4cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4d0:	4770      	bx	lr
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	e7fa      	b.n	800f4cc <rcutils_set_default_allocator+0x24>
 800f4d6:	4770      	bx	lr
 800f4d8:	4610      	mov	r0, r2
 800f4da:	4770      	bx	lr
 800f4dc:	4608      	mov	r0, r1
 800f4de:	4770      	bx	lr
 800f4e0:	24000034 	.word	0x24000034

0800f4e4 <rcutils_get_default_allocator>:
 800f4e4:	b510      	push	{r4, lr}
 800f4e6:	4c05      	ldr	r4, [pc, #20]	@ (800f4fc <rcutils_get_default_allocator+0x18>)
 800f4e8:	4686      	mov	lr, r0
 800f4ea:	4684      	mov	ip, r0
 800f4ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f4ee:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f4f2:	6823      	ldr	r3, [r4, #0]
 800f4f4:	4670      	mov	r0, lr
 800f4f6:	f8cc 3000 	str.w	r3, [ip]
 800f4fa:	bd10      	pop	{r4, pc}
 800f4fc:	24000034 	.word	0x24000034

0800f500 <rcutils_allocator_is_valid>:
 800f500:	b158      	cbz	r0, 800f51a <rcutils_allocator_is_valid+0x1a>
 800f502:	6803      	ldr	r3, [r0, #0]
 800f504:	b143      	cbz	r3, 800f518 <rcutils_allocator_is_valid+0x18>
 800f506:	6843      	ldr	r3, [r0, #4]
 800f508:	b133      	cbz	r3, 800f518 <rcutils_allocator_is_valid+0x18>
 800f50a:	68c3      	ldr	r3, [r0, #12]
 800f50c:	b123      	cbz	r3, 800f518 <rcutils_allocator_is_valid+0x18>
 800f50e:	6880      	ldr	r0, [r0, #8]
 800f510:	3800      	subs	r0, #0
 800f512:	bf18      	it	ne
 800f514:	2001      	movne	r0, #1
 800f516:	4770      	bx	lr
 800f518:	4618      	mov	r0, r3
 800f51a:	4770      	bx	lr

0800f51c <rcutils_get_error_string>:
 800f51c:	4b06      	ldr	r3, [pc, #24]	@ (800f538 <rcutils_get_error_string+0x1c>)
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	b13b      	cbz	r3, 800f532 <rcutils_get_error_string+0x16>
 800f522:	4b06      	ldr	r3, [pc, #24]	@ (800f53c <rcutils_get_error_string+0x20>)
 800f524:	781a      	ldrb	r2, [r3, #0]
 800f526:	b90a      	cbnz	r2, 800f52c <rcutils_get_error_string+0x10>
 800f528:	2201      	movs	r2, #1
 800f52a:	701a      	strb	r2, [r3, #0]
 800f52c:	4b04      	ldr	r3, [pc, #16]	@ (800f540 <rcutils_get_error_string+0x24>)
 800f52e:	7818      	ldrb	r0, [r3, #0]
 800f530:	4770      	bx	lr
 800f532:	4b04      	ldr	r3, [pc, #16]	@ (800f544 <rcutils_get_error_string+0x28>)
 800f534:	7818      	ldrb	r0, [r3, #0]
 800f536:	4770      	bx	lr
 800f538:	2400e5b0 	.word	0x2400e5b0
 800f53c:	2400e5c9 	.word	0x2400e5c9
 800f540:	2400e5c8 	.word	0x2400e5c8
 800f544:	0801cdfc 	.word	0x0801cdfc

0800f548 <rcutils_reset_error>:
 800f548:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800f568 <rcutils_reset_error+0x20>
 800f54c:	2300      	movs	r3, #0
 800f54e:	4a08      	ldr	r2, [pc, #32]	@ (800f570 <rcutils_reset_error+0x28>)
 800f550:	4808      	ldr	r0, [pc, #32]	@ (800f574 <rcutils_reset_error+0x2c>)
 800f552:	8013      	strh	r3, [r2, #0]
 800f554:	4908      	ldr	r1, [pc, #32]	@ (800f578 <rcutils_reset_error+0x30>)
 800f556:	7003      	strb	r3, [r0, #0]
 800f558:	700b      	strb	r3, [r1, #0]
 800f55a:	ed82 7b02 	vstr	d7, [r2, #8]
 800f55e:	4a07      	ldr	r2, [pc, #28]	@ (800f57c <rcutils_reset_error+0x34>)
 800f560:	7013      	strb	r3, [r2, #0]
 800f562:	4770      	bx	lr
 800f564:	f3af 8000 	nop.w
	...
 800f570:	2400e5b8 	.word	0x2400e5b8
 800f574:	2400e5c9 	.word	0x2400e5c9
 800f578:	2400e5c8 	.word	0x2400e5c8
 800f57c:	2400e5b0 	.word	0x2400e5b0

0800f580 <rcutils_system_time_now>:
 800f580:	b300      	cbz	r0, 800f5c4 <rcutils_system_time_now+0x44>
 800f582:	b570      	push	{r4, r5, r6, lr}
 800f584:	b084      	sub	sp, #16
 800f586:	4604      	mov	r4, r0
 800f588:	2001      	movs	r0, #1
 800f58a:	4669      	mov	r1, sp
 800f58c:	f7f2 fc14 	bl	8001db8 <clock_gettime>
 800f590:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f594:	2900      	cmp	r1, #0
 800f596:	db12      	blt.n	800f5be <rcutils_system_time_now+0x3e>
 800f598:	ea53 0201 	orrs.w	r2, r3, r1
 800f59c:	9d02      	ldr	r5, [sp, #8]
 800f59e:	d101      	bne.n	800f5a4 <rcutils_system_time_now+0x24>
 800f5a0:	2d00      	cmp	r5, #0
 800f5a2:	db0c      	blt.n	800f5be <rcutils_system_time_now+0x3e>
 800f5a4:	4e08      	ldr	r6, [pc, #32]	@ (800f5c8 <rcutils_system_time_now+0x48>)
 800f5a6:	2000      	movs	r0, #0
 800f5a8:	fba3 3206 	umull	r3, r2, r3, r6
 800f5ac:	195b      	adds	r3, r3, r5
 800f5ae:	fb06 2201 	mla	r2, r6, r1, r2
 800f5b2:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f5b6:	e9c4 3200 	strd	r3, r2, [r4]
 800f5ba:	b004      	add	sp, #16
 800f5bc:	bd70      	pop	{r4, r5, r6, pc}
 800f5be:	2002      	movs	r0, #2
 800f5c0:	b004      	add	sp, #16
 800f5c2:	bd70      	pop	{r4, r5, r6, pc}
 800f5c4:	200b      	movs	r0, #11
 800f5c6:	4770      	bx	lr
 800f5c8:	3b9aca00 	.word	0x3b9aca00

0800f5cc <rcutils_steady_time_now>:
 800f5cc:	b300      	cbz	r0, 800f610 <rcutils_steady_time_now+0x44>
 800f5ce:	b570      	push	{r4, r5, r6, lr}
 800f5d0:	b084      	sub	sp, #16
 800f5d2:	4604      	mov	r4, r0
 800f5d4:	2000      	movs	r0, #0
 800f5d6:	4669      	mov	r1, sp
 800f5d8:	f7f2 fbee 	bl	8001db8 <clock_gettime>
 800f5dc:	e9dd 3100 	ldrd	r3, r1, [sp]
 800f5e0:	2900      	cmp	r1, #0
 800f5e2:	db12      	blt.n	800f60a <rcutils_steady_time_now+0x3e>
 800f5e4:	ea53 0201 	orrs.w	r2, r3, r1
 800f5e8:	9d02      	ldr	r5, [sp, #8]
 800f5ea:	d101      	bne.n	800f5f0 <rcutils_steady_time_now+0x24>
 800f5ec:	2d00      	cmp	r5, #0
 800f5ee:	db0c      	blt.n	800f60a <rcutils_steady_time_now+0x3e>
 800f5f0:	4e08      	ldr	r6, [pc, #32]	@ (800f614 <rcutils_steady_time_now+0x48>)
 800f5f2:	2000      	movs	r0, #0
 800f5f4:	fba3 3206 	umull	r3, r2, r3, r6
 800f5f8:	195b      	adds	r3, r3, r5
 800f5fa:	fb06 2201 	mla	r2, r6, r1, r2
 800f5fe:	eb42 72e5 	adc.w	r2, r2, r5, asr #31
 800f602:	e9c4 3200 	strd	r3, r2, [r4]
 800f606:	b004      	add	sp, #16
 800f608:	bd70      	pop	{r4, r5, r6, pc}
 800f60a:	2002      	movs	r0, #2
 800f60c:	b004      	add	sp, #16
 800f60e:	bd70      	pop	{r4, r5, r6, pc}
 800f610:	200b      	movs	r0, #11
 800f612:	4770      	bx	lr
 800f614:	3b9aca00 	.word	0x3b9aca00

0800f618 <rmw_get_zero_initialized_init_options>:
 800f618:	b510      	push	{r4, lr}
 800f61a:	4604      	mov	r4, r0
 800f61c:	2238      	movs	r2, #56	@ 0x38
 800f61e:	2100      	movs	r1, #0
 800f620:	f00c fbbe 	bl	801bda0 <memset>
 800f624:	f104 0010 	add.w	r0, r4, #16
 800f628:	f000 f80a 	bl	800f640 <rmw_get_default_security_options>
 800f62c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800f630:	4620      	mov	r0, r4
 800f632:	60e3      	str	r3, [r4, #12]
 800f634:	bd10      	pop	{r4, pc}
 800f636:	bf00      	nop

0800f638 <rmw_get_default_publisher_options>:
 800f638:	2200      	movs	r2, #0
 800f63a:	6002      	str	r2, [r0, #0]
 800f63c:	7102      	strb	r2, [r0, #4]
 800f63e:	4770      	bx	lr

0800f640 <rmw_get_default_security_options>:
 800f640:	2200      	movs	r2, #0
 800f642:	7002      	strb	r2, [r0, #0]
 800f644:	6042      	str	r2, [r0, #4]
 800f646:	4770      	bx	lr

0800f648 <rmw_uros_set_custom_transport>:
 800f648:	b470      	push	{r4, r5, r6}
 800f64a:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800f64e:	b162      	cbz	r2, 800f66a <rmw_uros_set_custom_transport+0x22>
 800f650:	b15b      	cbz	r3, 800f66a <rmw_uros_set_custom_transport+0x22>
 800f652:	b155      	cbz	r5, 800f66a <rmw_uros_set_custom_transport+0x22>
 800f654:	b14e      	cbz	r6, 800f66a <rmw_uros_set_custom_transport+0x22>
 800f656:	4c06      	ldr	r4, [pc, #24]	@ (800f670 <rmw_uros_set_custom_transport+0x28>)
 800f658:	7020      	strb	r0, [r4, #0]
 800f65a:	2000      	movs	r0, #0
 800f65c:	6166      	str	r6, [r4, #20]
 800f65e:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800f662:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f666:	bc70      	pop	{r4, r5, r6}
 800f668:	4770      	bx	lr
 800f66a:	200b      	movs	r0, #11
 800f66c:	bc70      	pop	{r4, r5, r6}
 800f66e:	4770      	bx	lr
 800f670:	2400e5cc 	.word	0x2400e5cc

0800f674 <rmw_init_options_init>:
 800f674:	b084      	sub	sp, #16
 800f676:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f678:	b083      	sub	sp, #12
 800f67a:	ad09      	add	r5, sp, #36	@ 0x24
 800f67c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800f680:	b130      	cbz	r0, 800f690 <rmw_init_options_init+0x1c>
 800f682:	4604      	mov	r4, r0
 800f684:	4628      	mov	r0, r5
 800f686:	f7ff ff3b 	bl	800f500 <rcutils_allocator_is_valid>
 800f68a:	b108      	cbz	r0, 800f690 <rmw_init_options_init+0x1c>
 800f68c:	68a6      	ldr	r6, [r4, #8]
 800f68e:	b12e      	cbz	r6, 800f69c <rmw_init_options_init+0x28>
 800f690:	200b      	movs	r0, #11
 800f692:	b003      	add	sp, #12
 800f694:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f698:	b004      	add	sp, #16
 800f69a:	4770      	bx	lr
 800f69c:	2200      	movs	r2, #0
 800f69e:	2300      	movs	r3, #0
 800f6a0:	f104 0c20 	add.w	ip, r4, #32
 800f6a4:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800f740 <rmw_init_options_init+0xcc>
 800f6a8:	466f      	mov	r7, sp
 800f6aa:	e9c4 2300 	strd	r2, r3, [r4]
 800f6ae:	4b20      	ldr	r3, [pc, #128]	@ (800f730 <rmw_init_options_init+0xbc>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	60a3      	str	r3, [r4, #8]
 800f6b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f6b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f6ba:	682b      	ldr	r3, [r5, #0]
 800f6bc:	4638      	mov	r0, r7
 800f6be:	f8cc 3000 	str.w	r3, [ip]
 800f6c2:	f8c4 e01c 	str.w	lr, [r4, #28]
 800f6c6:	60e6      	str	r6, [r4, #12]
 800f6c8:	f7ff ffba 	bl	800f640 <rmw_get_default_security_options>
 800f6cc:	f104 0310 	add.w	r3, r4, #16
 800f6d0:	2203      	movs	r2, #3
 800f6d2:	e897 0003 	ldmia.w	r7, {r0, r1}
 800f6d6:	e883 0003 	stmia.w	r3, {r0, r1}
 800f6da:	4816      	ldr	r0, [pc, #88]	@ (800f734 <rmw_init_options_init+0xc0>)
 800f6dc:	4916      	ldr	r1, [pc, #88]	@ (800f738 <rmw_init_options_init+0xc4>)
 800f6de:	7626      	strb	r6, [r4, #24]
 800f6e0:	f000 fed2 	bl	8010488 <rmw_uxrce_init_init_options_impl_memory>
 800f6e4:	4813      	ldr	r0, [pc, #76]	@ (800f734 <rmw_init_options_init+0xc0>)
 800f6e6:	f009 fd3d 	bl	8019164 <get_memory>
 800f6ea:	b1f0      	cbz	r0, 800f72a <rmw_init_options_init+0xb6>
 800f6ec:	4a13      	ldr	r2, [pc, #76]	@ (800f73c <rmw_init_options_init+0xc8>)
 800f6ee:	6883      	ldr	r3, [r0, #8]
 800f6f0:	6851      	ldr	r1, [r2, #4]
 800f6f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6f4:	7810      	ldrb	r0, [r2, #0]
 800f6f6:	6159      	str	r1, [r3, #20]
 800f6f8:	68d1      	ldr	r1, [r2, #12]
 800f6fa:	7418      	strb	r0, [r3, #16]
 800f6fc:	61d9      	str	r1, [r3, #28]
 800f6fe:	6911      	ldr	r1, [r2, #16]
 800f700:	6219      	str	r1, [r3, #32]
 800f702:	6951      	ldr	r1, [r2, #20]
 800f704:	6892      	ldr	r2, [r2, #8]
 800f706:	6259      	str	r1, [r3, #36]	@ 0x24
 800f708:	619a      	str	r2, [r3, #24]
 800f70a:	f004 ff61 	bl	80145d0 <uxr_nanos>
 800f70e:	f00b ff91 	bl	801b634 <srand>
 800f712:	f00b ffbd 	bl	801b690 <rand>
 800f716:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f718:	6298      	str	r0, [r3, #40]	@ 0x28
 800f71a:	2800      	cmp	r0, #0
 800f71c:	d0f9      	beq.n	800f712 <rmw_init_options_init+0x9e>
 800f71e:	2000      	movs	r0, #0
 800f720:	b003      	add	sp, #12
 800f722:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f726:	b004      	add	sp, #16
 800f728:	4770      	bx	lr
 800f72a:	2001      	movs	r0, #1
 800f72c:	e7b1      	b.n	800f692 <rmw_init_options_init+0x1e>
 800f72e:	bf00      	nop
 800f730:	0801d764 	.word	0x0801d764
 800f734:	24012ee4 	.word	0x24012ee4
 800f738:	2400e780 	.word	0x2400e780
 800f73c:	2400e5cc 	.word	0x2400e5cc
 800f740:	0801ce00 	.word	0x0801ce00

0800f744 <rmw_init_options_copy>:
 800f744:	2800      	cmp	r0, #0
 800f746:	d047      	beq.n	800f7d8 <rmw_init_options_copy+0x94>
 800f748:	b570      	push	{r4, r5, r6, lr}
 800f74a:	460d      	mov	r5, r1
 800f74c:	b149      	cbz	r1, 800f762 <rmw_init_options_copy+0x1e>
 800f74e:	4604      	mov	r4, r0
 800f750:	6880      	ldr	r0, [r0, #8]
 800f752:	b120      	cbz	r0, 800f75e <rmw_init_options_copy+0x1a>
 800f754:	4b22      	ldr	r3, [pc, #136]	@ (800f7e0 <rmw_init_options_copy+0x9c>)
 800f756:	6819      	ldr	r1, [r3, #0]
 800f758:	f7f0 fdc2 	bl	80002e0 <strcmp>
 800f75c:	bba8      	cbnz	r0, 800f7ca <rmw_init_options_copy+0x86>
 800f75e:	68ab      	ldr	r3, [r5, #8]
 800f760:	b11b      	cbz	r3, 800f76a <rmw_init_options_copy+0x26>
 800f762:	f04f 0c0b 	mov.w	ip, #11
 800f766:	4660      	mov	r0, ip
 800f768:	bd70      	pop	{r4, r5, r6, pc}
 800f76a:	4623      	mov	r3, r4
 800f76c:	462a      	mov	r2, r5
 800f76e:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800f772:	f8d3 e000 	ldr.w	lr, [r3]
 800f776:	3310      	adds	r3, #16
 800f778:	f853 cc0c 	ldr.w	ip, [r3, #-12]
 800f77c:	3210      	adds	r2, #16
 800f77e:	f853 0c08 	ldr.w	r0, [r3, #-8]
 800f782:	f853 1c04 	ldr.w	r1, [r3, #-4]
 800f786:	42b3      	cmp	r3, r6
 800f788:	f842 ec10 	str.w	lr, [r2, #-16]
 800f78c:	f842 cc0c 	str.w	ip, [r2, #-12]
 800f790:	f842 0c08 	str.w	r0, [r2, #-8]
 800f794:	f842 1c04 	str.w	r1, [r2, #-4]
 800f798:	d1eb      	bne.n	800f772 <rmw_init_options_copy+0x2e>
 800f79a:	6819      	ldr	r1, [r3, #0]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	4811      	ldr	r0, [pc, #68]	@ (800f7e4 <rmw_init_options_copy+0xa0>)
 800f7a0:	6011      	str	r1, [r2, #0]
 800f7a2:	6053      	str	r3, [r2, #4]
 800f7a4:	f009 fcde 	bl	8019164 <get_memory>
 800f7a8:	b198      	cbz	r0, 800f7d2 <rmw_init_options_copy+0x8e>
 800f7aa:	6883      	ldr	r3, [r0, #8]
 800f7ac:	f04f 0c00 	mov.w	ip, #0
 800f7b0:	636b      	str	r3, [r5, #52]	@ 0x34
 800f7b2:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800f7b4:	f103 0410 	add.w	r4, r3, #16
 800f7b8:	3510      	adds	r5, #16
 800f7ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f7bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f7be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800f7c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f7c6:	4660      	mov	r0, ip
 800f7c8:	bd70      	pop	{r4, r5, r6, pc}
 800f7ca:	f04f 0c0c 	mov.w	ip, #12
 800f7ce:	4660      	mov	r0, ip
 800f7d0:	bd70      	pop	{r4, r5, r6, pc}
 800f7d2:	f04f 0c01 	mov.w	ip, #1
 800f7d6:	e7c6      	b.n	800f766 <rmw_init_options_copy+0x22>
 800f7d8:	f04f 0c0b 	mov.w	ip, #11
 800f7dc:	4660      	mov	r0, ip
 800f7de:	4770      	bx	lr
 800f7e0:	0801d764 	.word	0x0801d764
 800f7e4:	24012ee4 	.word	0x24012ee4

0800f7e8 <rmw_init_options_fini>:
 800f7e8:	b510      	push	{r4, lr}
 800f7ea:	b08e      	sub	sp, #56	@ 0x38
 800f7ec:	b388      	cbz	r0, 800f852 <rmw_init_options_fini+0x6a>
 800f7ee:	4604      	mov	r4, r0
 800f7f0:	3020      	adds	r0, #32
 800f7f2:	f7ff fe85 	bl	800f500 <rcutils_allocator_is_valid>
 800f7f6:	b360      	cbz	r0, 800f852 <rmw_init_options_fini+0x6a>
 800f7f8:	68a0      	ldr	r0, [r4, #8]
 800f7fa:	b120      	cbz	r0, 800f806 <rmw_init_options_fini+0x1e>
 800f7fc:	4b1a      	ldr	r3, [pc, #104]	@ (800f868 <rmw_init_options_fini+0x80>)
 800f7fe:	6819      	ldr	r1, [r3, #0]
 800f800:	f7f0 fd6e 	bl	80002e0 <strcmp>
 800f804:	bb68      	cbnz	r0, 800f862 <rmw_init_options_fini+0x7a>
 800f806:	4b19      	ldr	r3, [pc, #100]	@ (800f86c <rmw_init_options_fini+0x84>)
 800f808:	6819      	ldr	r1, [r3, #0]
 800f80a:	b331      	cbz	r1, 800f85a <rmw_init_options_fini+0x72>
 800f80c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800f80e:	e001      	b.n	800f814 <rmw_init_options_fini+0x2c>
 800f810:	6849      	ldr	r1, [r1, #4]
 800f812:	b311      	cbz	r1, 800f85a <rmw_init_options_fini+0x72>
 800f814:	688b      	ldr	r3, [r1, #8]
 800f816:	429a      	cmp	r2, r3
 800f818:	d1fa      	bne.n	800f810 <rmw_init_options_fini+0x28>
 800f81a:	4814      	ldr	r0, [pc, #80]	@ (800f86c <rmw_init_options_fini+0x84>)
 800f81c:	f009 fcb2 	bl	8019184 <put_memory>
 800f820:	4668      	mov	r0, sp
 800f822:	f7ff fef9 	bl	800f618 <rmw_get_zero_initialized_init_options>
 800f826:	46ee      	mov	lr, sp
 800f828:	46a4      	mov	ip, r4
 800f82a:	2400      	movs	r4, #0
 800f82c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f830:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f834:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f838:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f83c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f840:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f844:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800f848:	e88c 0003 	stmia.w	ip, {r0, r1}
 800f84c:	4620      	mov	r0, r4
 800f84e:	b00e      	add	sp, #56	@ 0x38
 800f850:	bd10      	pop	{r4, pc}
 800f852:	240b      	movs	r4, #11
 800f854:	4620      	mov	r0, r4
 800f856:	b00e      	add	sp, #56	@ 0x38
 800f858:	bd10      	pop	{r4, pc}
 800f85a:	2401      	movs	r4, #1
 800f85c:	4620      	mov	r0, r4
 800f85e:	b00e      	add	sp, #56	@ 0x38
 800f860:	bd10      	pop	{r4, pc}
 800f862:	240c      	movs	r4, #12
 800f864:	e7f2      	b.n	800f84c <rmw_init_options_fini+0x64>
 800f866:	bf00      	nop
 800f868:	0801d764 	.word	0x0801d764
 800f86c:	24012ee4 	.word	0x24012ee4

0800f870 <rmw_init>:
 800f870:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f874:	b083      	sub	sp, #12
 800f876:	2800      	cmp	r0, #0
 800f878:	f000 80d3 	beq.w	800fa22 <rmw_init+0x1b2>
 800f87c:	460e      	mov	r6, r1
 800f87e:	2900      	cmp	r1, #0
 800f880:	f000 80cf 	beq.w	800fa22 <rmw_init+0x1b2>
 800f884:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800f886:	4605      	mov	r5, r0
 800f888:	2b00      	cmp	r3, #0
 800f88a:	f000 80ca 	beq.w	800fa22 <rmw_init+0x1b2>
 800f88e:	4b78      	ldr	r3, [pc, #480]	@ (800fa70 <rmw_init+0x200>)
 800f890:	6880      	ldr	r0, [r0, #8]
 800f892:	681f      	ldr	r7, [r3, #0]
 800f894:	b128      	cbz	r0, 800f8a2 <rmw_init+0x32>
 800f896:	4639      	mov	r1, r7
 800f898:	f7f0 fd22 	bl	80002e0 <strcmp>
 800f89c:	2800      	cmp	r0, #0
 800f89e:	f040 80ca 	bne.w	800fa36 <rmw_init+0x1c6>
 800f8a2:	4c74      	ldr	r4, [pc, #464]	@ (800fa74 <rmw_init+0x204>)
 800f8a4:	f04f 0800 	mov.w	r8, #0
 800f8a8:	4973      	ldr	r1, [pc, #460]	@ (800fa78 <rmw_init+0x208>)
 800f8aa:	4874      	ldr	r0, [pc, #464]	@ (800fa7c <rmw_init+0x20c>)
 800f8ac:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f8b0:	60b7      	str	r7, [r6, #8]
 800f8b2:	e9c6 2300 	strd	r2, r3, [r6]
 800f8b6:	68eb      	ldr	r3, [r5, #12]
 800f8b8:	2201      	movs	r2, #1
 800f8ba:	64b3      	str	r3, [r6, #72]	@ 0x48
 800f8bc:	f000 fd84 	bl	80103c8 <rmw_uxrce_init_session_memory>
 800f8c0:	4620      	mov	r0, r4
 800f8c2:	2204      	movs	r2, #4
 800f8c4:	496e      	ldr	r1, [pc, #440]	@ (800fa80 <rmw_init+0x210>)
 800f8c6:	f000 fdbf 	bl	8010448 <rmw_uxrce_init_static_input_buffer_memory>
 800f8ca:	486c      	ldr	r0, [pc, #432]	@ (800fa7c <rmw_init+0x20c>)
 800f8cc:	f884 800d 	strb.w	r8, [r4, #13]
 800f8d0:	f009 fc48 	bl	8019164 <get_memory>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	f000 80a9 	beq.w	800fa2c <rmw_init+0x1bc>
 800f8da:	6884      	ldr	r4, [r0, #8]
 800f8dc:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800f8de:	f104 0910 	add.w	r9, r4, #16
 800f8e2:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800f8e4:	f890 c010 	ldrb.w	ip, [r0, #16]
 800f8e8:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800f8ec:	9101      	str	r1, [sp, #4]
 800f8ee:	4661      	mov	r1, ip
 800f8f0:	6a00      	ldr	r0, [r0, #32]
 800f8f2:	9000      	str	r0, [sp, #0]
 800f8f4:	4648      	mov	r0, r9
 800f8f6:	f002 fdf9 	bl	80124ec <uxr_set_custom_transport_callbacks>
 800f8fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f8fe:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800f902:	4960      	ldr	r1, [pc, #384]	@ (800fa84 <rmw_init+0x214>)
 800f904:	4860      	ldr	r0, [pc, #384]	@ (800fa88 <rmw_init+0x218>)
 800f906:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800f90a:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800f90e:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800f912:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800f916:	2201      	movs	r2, #1
 800f918:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800f91c:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800f920:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800f924:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800f928:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800f92a:	f000 fd2d 	bl	8010388 <rmw_uxrce_init_node_memory>
 800f92e:	2205      	movs	r2, #5
 800f930:	4956      	ldr	r1, [pc, #344]	@ (800fa8c <rmw_init+0x21c>)
 800f932:	4857      	ldr	r0, [pc, #348]	@ (800fa90 <rmw_init+0x220>)
 800f934:	f000 fd08 	bl	8010348 <rmw_uxrce_init_subscription_memory>
 800f938:	220a      	movs	r2, #10
 800f93a:	4956      	ldr	r1, [pc, #344]	@ (800fa94 <rmw_init+0x224>)
 800f93c:	4856      	ldr	r0, [pc, #344]	@ (800fa98 <rmw_init+0x228>)
 800f93e:	f000 fce3 	bl	8010308 <rmw_uxrce_init_publisher_memory>
 800f942:	2201      	movs	r2, #1
 800f944:	4955      	ldr	r1, [pc, #340]	@ (800fa9c <rmw_init+0x22c>)
 800f946:	4856      	ldr	r0, [pc, #344]	@ (800faa0 <rmw_init+0x230>)
 800f948:	f000 fc9e 	bl	8010288 <rmw_uxrce_init_service_memory>
 800f94c:	2201      	movs	r2, #1
 800f94e:	4955      	ldr	r1, [pc, #340]	@ (800faa4 <rmw_init+0x234>)
 800f950:	4855      	ldr	r0, [pc, #340]	@ (800faa8 <rmw_init+0x238>)
 800f952:	f000 fcb9 	bl	80102c8 <rmw_uxrce_init_client_memory>
 800f956:	220f      	movs	r2, #15
 800f958:	4954      	ldr	r1, [pc, #336]	@ (800faac <rmw_init+0x23c>)
 800f95a:	4855      	ldr	r0, [pc, #340]	@ (800fab0 <rmw_init+0x240>)
 800f95c:	f000 fd54 	bl	8010408 <rmw_uxrce_init_topic_memory>
 800f960:	2203      	movs	r2, #3
 800f962:	4954      	ldr	r1, [pc, #336]	@ (800fab4 <rmw_init+0x244>)
 800f964:	4854      	ldr	r0, [pc, #336]	@ (800fab8 <rmw_init+0x248>)
 800f966:	f000 fd8f 	bl	8010488 <rmw_uxrce_init_init_options_impl_memory>
 800f96a:	2204      	movs	r2, #4
 800f96c:	4953      	ldr	r1, [pc, #332]	@ (800fabc <rmw_init+0x24c>)
 800f96e:	4854      	ldr	r0, [pc, #336]	@ (800fac0 <rmw_init+0x250>)
 800f970:	f000 fdaa 	bl	80104c8 <rmw_uxrce_init_wait_set_memory>
 800f974:	4953      	ldr	r1, [pc, #332]	@ (800fac4 <rmw_init+0x254>)
 800f976:	4854      	ldr	r0, [pc, #336]	@ (800fac8 <rmw_init+0x258>)
 800f978:	2204      	movs	r2, #4
 800f97a:	f000 fdc5 	bl	8010508 <rmw_uxrce_init_guard_condition_memory>
 800f97e:	4642      	mov	r2, r8
 800f980:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800f982:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800f984:	f000 fc48 	bl	8010218 <rmw_uxrce_transport_init>
 800f988:	4607      	mov	r7, r0
 800f98a:	2800      	cmp	r0, #0
 800f98c:	d158      	bne.n	800fa40 <rmw_init+0x1d0>
 800f98e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800f990:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800f994:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800f998:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800f99a:	4628      	mov	r0, r5
 800f99c:	f002 ff9c 	bl	80128d8 <uxr_init_session>
 800f9a0:	4622      	mov	r2, r4
 800f9a2:	494a      	ldr	r1, [pc, #296]	@ (800facc <rmw_init+0x25c>)
 800f9a4:	4628      	mov	r0, r5
 800f9a6:	f002 ffbb 	bl	8012920 <uxr_set_topic_callback>
 800f9aa:	463a      	mov	r2, r7
 800f9ac:	4948      	ldr	r1, [pc, #288]	@ (800fad0 <rmw_init+0x260>)
 800f9ae:	4628      	mov	r0, r5
 800f9b0:	f002 ffb2 	bl	8012918 <uxr_set_status_callback>
 800f9b4:	463a      	mov	r2, r7
 800f9b6:	4947      	ldr	r1, [pc, #284]	@ (800fad4 <rmw_init+0x264>)
 800f9b8:	4628      	mov	r0, r5
 800f9ba:	f002 ffb5 	bl	8012928 <uxr_set_request_callback>
 800f9be:	463a      	mov	r2, r7
 800f9c0:	4945      	ldr	r1, [pc, #276]	@ (800fad8 <rmw_init+0x268>)
 800f9c2:	4628      	mov	r0, r5
 800f9c4:	f002 ffb4 	bl	8012930 <uxr_set_reply_callback>
 800f9c8:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f9cc:	2304      	movs	r3, #4
 800f9ce:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800f9d2:	0092      	lsls	r2, r2, #2
 800f9d4:	4628      	mov	r0, r5
 800f9d6:	f002 ffeb 	bl	80129b0 <uxr_create_input_reliable_stream>
 800f9da:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800f9de:	2304      	movs	r3, #4
 800f9e0:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800f9e4:	0092      	lsls	r2, r2, #2
 800f9e6:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800f9ea:	4628      	mov	r0, r5
 800f9ec:	f002 ffb6 	bl	801295c <uxr_create_output_reliable_stream>
 800f9f0:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	f002 ffd5 	bl	80129a4 <uxr_create_input_best_effort_stream>
 800f9fa:	f241 3194 	movw	r1, #5012	@ 0x1394
 800f9fe:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800fa02:	4628      	mov	r0, r5
 800fa04:	4421      	add	r1, r4
 800fa06:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800fa0a:	f002 ff95 	bl	8012938 <uxr_create_output_best_effort_stream>
 800fa0e:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800fa12:	4628      	mov	r0, r5
 800fa14:	f003 fd74 	bl	8013500 <uxr_create_session>
 800fa18:	b1f8      	cbz	r0, 800fa5a <rmw_init+0x1ea>
 800fa1a:	4638      	mov	r0, r7
 800fa1c:	b003      	add	sp, #12
 800fa1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa22:	270b      	movs	r7, #11
 800fa24:	4638      	mov	r0, r7
 800fa26:	b003      	add	sp, #12
 800fa28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa2c:	2701      	movs	r7, #1
 800fa2e:	4638      	mov	r0, r7
 800fa30:	b003      	add	sp, #12
 800fa32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa36:	270c      	movs	r7, #12
 800fa38:	4638      	mov	r0, r7
 800fa3a:	b003      	add	sp, #12
 800fa3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa40:	4648      	mov	r0, r9
 800fa42:	f002 fd91 	bl	8012568 <uxr_close_custom_transport>
 800fa46:	4621      	mov	r1, r4
 800fa48:	480c      	ldr	r0, [pc, #48]	@ (800fa7c <rmw_init+0x20c>)
 800fa4a:	f009 fb9b 	bl	8019184 <put_memory>
 800fa4e:	4638      	mov	r0, r7
 800fa50:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800fa54:	b003      	add	sp, #12
 800fa56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa5a:	4648      	mov	r0, r9
 800fa5c:	f002 fd84 	bl	8012568 <uxr_close_custom_transport>
 800fa60:	4621      	mov	r1, r4
 800fa62:	4806      	ldr	r0, [pc, #24]	@ (800fa7c <rmw_init+0x20c>)
 800fa64:	f009 fb8e 	bl	8019184 <put_memory>
 800fa68:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800fa6a:	2701      	movs	r7, #1
 800fa6c:	e7d5      	b.n	800fa1a <rmw_init+0x1aa>
 800fa6e:	bf00      	nop
 800fa70:	0801d764 	.word	0x0801d764
 800fa74:	24012f34 	.word	0x24012f34
 800fa78:	2400f1e0 	.word	0x2400f1e0
 800fa7c:	24012f24 	.word	0x24012f24
 800fa80:	24010788 	.word	0x24010788
 800fa84:	2400e804 	.word	0x2400e804
 800fa88:	24012ef4 	.word	0x24012ef4
 800fa8c:	24012888 	.word	0x24012888
 800fa90:	24012f44 	.word	0x24012f44
 800fa94:	2400e8a8 	.word	0x2400e8a8
 800fa98:	24012f04 	.word	0x24012f04
 800fa9c:	2400f118 	.word	0x2400f118
 800faa0:	24012f14 	.word	0x24012f14
 800faa4:	2400e638 	.word	0x2400e638
 800faa8:	2400e624 	.word	0x2400e624
 800faac:	24012cc0 	.word	0x24012cc0
 800fab0:	24012f54 	.word	0x24012f54
 800fab4:	2400e780 	.word	0x2400e780
 800fab8:	24012ee4 	.word	0x24012ee4
 800fabc:	24012e64 	.word	0x24012e64
 800fac0:	24012f64 	.word	0x24012f64
 800fac4:	2400e700 	.word	0x2400e700
 800fac8:	24012ed4 	.word	0x24012ed4
 800facc:	08018f9d 	.word	0x08018f9d
 800fad0:	08018f95 	.word	0x08018f95
 800fad4:	08019035 	.word	0x08019035
 800fad8:	080190d1 	.word	0x080190d1

0800fadc <rmw_context_fini>:
 800fadc:	4b17      	ldr	r3, [pc, #92]	@ (800fb3c <rmw_context_fini+0x60>)
 800fade:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800fae0:	b570      	push	{r4, r5, r6, lr}
 800fae2:	681c      	ldr	r4, [r3, #0]
 800fae4:	4605      	mov	r5, r0
 800fae6:	b334      	cbz	r4, 800fb36 <rmw_context_fini+0x5a>
 800fae8:	2600      	movs	r6, #0
 800faea:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800faee:	6902      	ldr	r2, [r0, #16]
 800faf0:	428a      	cmp	r2, r1
 800faf2:	d018      	beq.n	800fb26 <rmw_context_fini+0x4a>
 800faf4:	2c00      	cmp	r4, #0
 800faf6:	d1f8      	bne.n	800faea <rmw_context_fini+0xe>
 800faf8:	b189      	cbz	r1, 800fb1e <rmw_context_fini+0x42>
 800fafa:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800fafe:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800fb02:	789b      	ldrb	r3, [r3, #2]
 800fb04:	2b01      	cmp	r3, #1
 800fb06:	bf14      	ite	ne
 800fb08:	210a      	movne	r1, #10
 800fb0a:	2100      	moveq	r1, #0
 800fb0c:	f003 fcd0 	bl	80134b0 <uxr_delete_session_retries>
 800fb10:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800fb12:	f000 fd19 	bl	8010548 <rmw_uxrce_fini_session_memory>
 800fb16:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800fb18:	3010      	adds	r0, #16
 800fb1a:	f002 fd25 	bl	8012568 <uxr_close_custom_transport>
 800fb1e:	2300      	movs	r3, #0
 800fb20:	4630      	mov	r0, r6
 800fb22:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800fb24:	bd70      	pop	{r4, r5, r6, pc}
 800fb26:	3018      	adds	r0, #24
 800fb28:	f000 f89c 	bl	800fc64 <rmw_destroy_node>
 800fb2c:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800fb2e:	4606      	mov	r6, r0
 800fb30:	2c00      	cmp	r4, #0
 800fb32:	d1da      	bne.n	800faea <rmw_context_fini+0xe>
 800fb34:	e7e0      	b.n	800faf8 <rmw_context_fini+0x1c>
 800fb36:	4626      	mov	r6, r4
 800fb38:	e7de      	b.n	800faf8 <rmw_context_fini+0x1c>
 800fb3a:	bf00      	nop
 800fb3c:	24012ef4 	.word	0x24012ef4

0800fb40 <create_node>:
 800fb40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fb44:	b083      	sub	sp, #12
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d064      	beq.n	800fc14 <create_node+0xd4>
 800fb4a:	4606      	mov	r6, r0
 800fb4c:	4838      	ldr	r0, [pc, #224]	@ (800fc30 <create_node+0xf0>)
 800fb4e:	460f      	mov	r7, r1
 800fb50:	4690      	mov	r8, r2
 800fb52:	461d      	mov	r5, r3
 800fb54:	f009 fb06 	bl	8019164 <get_memory>
 800fb58:	2800      	cmp	r0, #0
 800fb5a:	d05b      	beq.n	800fc14 <create_node+0xd4>
 800fb5c:	6884      	ldr	r4, [r0, #8]
 800fb5e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800fb60:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800fb64:	f104 0518 	add.w	r5, r4, #24
 800fb68:	6123      	str	r3, [r4, #16]
 800fb6a:	f009 fb63 	bl	8019234 <rmw_get_implementation_identifier>
 800fb6e:	f8c4 9020 	str.w	r9, [r4, #32]
 800fb72:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800fb76:	4630      	mov	r0, r6
 800fb78:	f7f0 fbbc 	bl	80002f4 <strlen>
 800fb7c:	1c42      	adds	r2, r0, #1
 800fb7e:	2a3c      	cmp	r2, #60	@ 0x3c
 800fb80:	d840      	bhi.n	800fc04 <create_node+0xc4>
 800fb82:	4648      	mov	r0, r9
 800fb84:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800fb88:	4631      	mov	r1, r6
 800fb8a:	f00c f9d2 	bl	801bf32 <memcpy>
 800fb8e:	4638      	mov	r0, r7
 800fb90:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800fb94:	f7f0 fbae 	bl	80002f4 <strlen>
 800fb98:	1c42      	adds	r2, r0, #1
 800fb9a:	2a3c      	cmp	r2, #60	@ 0x3c
 800fb9c:	d832      	bhi.n	800fc04 <create_node+0xc4>
 800fb9e:	4639      	mov	r1, r7
 800fba0:	4648      	mov	r0, r9
 800fba2:	f00c f9c6 	bl	801bf32 <memcpy>
 800fba6:	6923      	ldr	r3, [r4, #16]
 800fba8:	2101      	movs	r1, #1
 800fbaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800fbae:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800fbb2:	1842      	adds	r2, r0, r1
 800fbb4:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800fbb8:	f002 fcda 	bl	8012570 <uxr_object_id>
 800fbbc:	6160      	str	r0, [r4, #20]
 800fbbe:	783b      	ldrb	r3, [r7, #0]
 800fbc0:	2b2f      	cmp	r3, #47	@ 0x2f
 800fbc2:	d12c      	bne.n	800fc1e <create_node+0xde>
 800fbc4:	787b      	ldrb	r3, [r7, #1]
 800fbc6:	bb53      	cbnz	r3, 800fc1e <create_node+0xde>
 800fbc8:	4633      	mov	r3, r6
 800fbca:	4a1a      	ldr	r2, [pc, #104]	@ (800fc34 <create_node+0xf4>)
 800fbcc:	213c      	movs	r1, #60	@ 0x3c
 800fbce:	481a      	ldr	r0, [pc, #104]	@ (800fc38 <create_node+0xf8>)
 800fbd0:	f00b ff78 	bl	801bac4 <sniprintf>
 800fbd4:	6920      	ldr	r0, [r4, #16]
 800fbd6:	2106      	movs	r1, #6
 800fbd8:	fa1f f388 	uxth.w	r3, r8
 800fbdc:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800fbe0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fbe4:	9101      	str	r1, [sp, #4]
 800fbe6:	4914      	ldr	r1, [pc, #80]	@ (800fc38 <create_node+0xf8>)
 800fbe8:	9100      	str	r1, [sp, #0]
 800fbea:	6811      	ldr	r1, [r2, #0]
 800fbec:	6962      	ldr	r2, [r4, #20]
 800fbee:	f002 faf3 	bl	80121d8 <uxr_buffer_create_participant_bin>
 800fbf2:	4602      	mov	r2, r0
 800fbf4:	6920      	ldr	r0, [r4, #16]
 800fbf6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800fbfa:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800fbfe:	f000 fe25 	bl	801084c <run_xrce_session>
 800fc02:	b918      	cbnz	r0, 800fc0c <create_node+0xcc>
 800fc04:	4628      	mov	r0, r5
 800fc06:	2500      	movs	r5, #0
 800fc08:	f000 fca4 	bl	8010554 <rmw_uxrce_fini_node_memory>
 800fc0c:	4628      	mov	r0, r5
 800fc0e:	b003      	add	sp, #12
 800fc10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc14:	2500      	movs	r5, #0
 800fc16:	4628      	mov	r0, r5
 800fc18:	b003      	add	sp, #12
 800fc1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc1e:	463b      	mov	r3, r7
 800fc20:	4a06      	ldr	r2, [pc, #24]	@ (800fc3c <create_node+0xfc>)
 800fc22:	213c      	movs	r1, #60	@ 0x3c
 800fc24:	9600      	str	r6, [sp, #0]
 800fc26:	4804      	ldr	r0, [pc, #16]	@ (800fc38 <create_node+0xf8>)
 800fc28:	f00b ff4c 	bl	801bac4 <sniprintf>
 800fc2c:	e7d2      	b.n	800fbd4 <create_node+0x94>
 800fc2e:	bf00      	nop
 800fc30:	24012ef4 	.word	0x24012ef4
 800fc34:	0801ce40 	.word	0x0801ce40
 800fc38:	2400e5e8 	.word	0x2400e5e8
 800fc3c:	0801ce04 	.word	0x0801ce04

0800fc40 <rmw_create_node>:
 800fc40:	468c      	mov	ip, r1
 800fc42:	4611      	mov	r1, r2
 800fc44:	f1bc 0f00 	cmp.w	ip, #0
 800fc48:	d00a      	beq.n	800fc60 <rmw_create_node+0x20>
 800fc4a:	f89c 3000 	ldrb.w	r3, [ip]
 800fc4e:	b13b      	cbz	r3, 800fc60 <rmw_create_node+0x20>
 800fc50:	b132      	cbz	r2, 800fc60 <rmw_create_node+0x20>
 800fc52:	7813      	ldrb	r3, [r2, #0]
 800fc54:	b123      	cbz	r3, 800fc60 <rmw_create_node+0x20>
 800fc56:	4603      	mov	r3, r0
 800fc58:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800fc5a:	4660      	mov	r0, ip
 800fc5c:	f7ff bf70 	b.w	800fb40 <create_node>
 800fc60:	2000      	movs	r0, #0
 800fc62:	4770      	bx	lr

0800fc64 <rmw_destroy_node>:
 800fc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc66:	b328      	cbz	r0, 800fcb4 <rmw_destroy_node+0x50>
 800fc68:	4607      	mov	r7, r0
 800fc6a:	6800      	ldr	r0, [r0, #0]
 800fc6c:	b120      	cbz	r0, 800fc78 <rmw_destroy_node+0x14>
 800fc6e:	4b37      	ldr	r3, [pc, #220]	@ (800fd4c <rmw_destroy_node+0xe8>)
 800fc70:	6819      	ldr	r1, [r3, #0]
 800fc72:	f7f0 fb35 	bl	80002e0 <strcmp>
 800fc76:	b9e8      	cbnz	r0, 800fcb4 <rmw_destroy_node+0x50>
 800fc78:	687d      	ldr	r5, [r7, #4]
 800fc7a:	b1dd      	cbz	r5, 800fcb4 <rmw_destroy_node+0x50>
 800fc7c:	4b34      	ldr	r3, [pc, #208]	@ (800fd50 <rmw_destroy_node+0xec>)
 800fc7e:	681c      	ldr	r4, [r3, #0]
 800fc80:	2c00      	cmp	r4, #0
 800fc82:	d060      	beq.n	800fd46 <rmw_destroy_node+0xe2>
 800fc84:	2600      	movs	r6, #0
 800fc86:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fc8a:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800fc8e:	429d      	cmp	r5, r3
 800fc90:	d013      	beq.n	800fcba <rmw_destroy_node+0x56>
 800fc92:	2c00      	cmp	r4, #0
 800fc94:	d1f7      	bne.n	800fc86 <rmw_destroy_node+0x22>
 800fc96:	4b2f      	ldr	r3, [pc, #188]	@ (800fd54 <rmw_destroy_node+0xf0>)
 800fc98:	681c      	ldr	r4, [r3, #0]
 800fc9a:	b1c4      	cbz	r4, 800fcce <rmw_destroy_node+0x6a>
 800fc9c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fca0:	6a0b      	ldr	r3, [r1, #32]
 800fca2:	429d      	cmp	r5, r3
 800fca4:	d1f9      	bne.n	800fc9a <rmw_destroy_node+0x36>
 800fca6:	317c      	adds	r1, #124	@ 0x7c
 800fca8:	4638      	mov	r0, r7
 800fcaa:	f000 fa53 	bl	8010154 <rmw_destroy_subscription>
 800fcae:	2801      	cmp	r0, #1
 800fcb0:	4606      	mov	r6, r0
 800fcb2:	d1f2      	bne.n	800fc9a <rmw_destroy_node+0x36>
 800fcb4:	2601      	movs	r6, #1
 800fcb6:	4630      	mov	r0, r6
 800fcb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcba:	3184      	adds	r1, #132	@ 0x84
 800fcbc:	4638      	mov	r0, r7
 800fcbe:	f000 f9b1 	bl	8010024 <rmw_destroy_publisher>
 800fcc2:	2801      	cmp	r0, #1
 800fcc4:	4606      	mov	r6, r0
 800fcc6:	d0f5      	beq.n	800fcb4 <rmw_destroy_node+0x50>
 800fcc8:	2c00      	cmp	r4, #0
 800fcca:	d1dc      	bne.n	800fc86 <rmw_destroy_node+0x22>
 800fccc:	e7e3      	b.n	800fc96 <rmw_destroy_node+0x32>
 800fcce:	4b22      	ldr	r3, [pc, #136]	@ (800fd58 <rmw_destroy_node+0xf4>)
 800fcd0:	681c      	ldr	r4, [r3, #0]
 800fcd2:	b16c      	cbz	r4, 800fcf0 <rmw_destroy_node+0x8c>
 800fcd4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fcd8:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800fcda:	429d      	cmp	r5, r3
 800fcdc:	d1f9      	bne.n	800fcd2 <rmw_destroy_node+0x6e>
 800fcde:	317c      	adds	r1, #124	@ 0x7c
 800fce0:	4638      	mov	r0, r7
 800fce2:	f000 f9f3 	bl	80100cc <rmw_destroy_service>
 800fce6:	2801      	cmp	r0, #1
 800fce8:	4606      	mov	r6, r0
 800fcea:	d0e3      	beq.n	800fcb4 <rmw_destroy_node+0x50>
 800fcec:	2c00      	cmp	r4, #0
 800fcee:	d1f1      	bne.n	800fcd4 <rmw_destroy_node+0x70>
 800fcf0:	4b1a      	ldr	r3, [pc, #104]	@ (800fd5c <rmw_destroy_node+0xf8>)
 800fcf2:	681c      	ldr	r4, [r3, #0]
 800fcf4:	b16c      	cbz	r4, 800fd12 <rmw_destroy_node+0xae>
 800fcf6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800fcfa:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800fcfc:	429d      	cmp	r5, r3
 800fcfe:	d1f9      	bne.n	800fcf4 <rmw_destroy_node+0x90>
 800fd00:	317c      	adds	r1, #124	@ 0x7c
 800fd02:	4638      	mov	r0, r7
 800fd04:	f009 fa52 	bl	80191ac <rmw_destroy_client>
 800fd08:	2801      	cmp	r0, #1
 800fd0a:	4606      	mov	r6, r0
 800fd0c:	d0d2      	beq.n	800fcb4 <rmw_destroy_node+0x50>
 800fd0e:	2c00      	cmp	r4, #0
 800fd10:	d1f1      	bne.n	800fcf6 <rmw_destroy_node+0x92>
 800fd12:	6928      	ldr	r0, [r5, #16]
 800fd14:	696a      	ldr	r2, [r5, #20]
 800fd16:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800fd1a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fd1e:	6819      	ldr	r1, [r3, #0]
 800fd20:	f002 fa0e 	bl	8012140 <uxr_buffer_delete_entity>
 800fd24:	4602      	mov	r2, r0
 800fd26:	6928      	ldr	r0, [r5, #16]
 800fd28:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800fd2c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800fd30:	f000 fd8c 	bl	801084c <run_xrce_session>
 800fd34:	4603      	mov	r3, r0
 800fd36:	4638      	mov	r0, r7
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	bf08      	it	eq
 800fd3c:	2602      	moveq	r6, #2
 800fd3e:	f000 fc09 	bl	8010554 <rmw_uxrce_fini_node_memory>
 800fd42:	4630      	mov	r0, r6
 800fd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd46:	4626      	mov	r6, r4
 800fd48:	e7a5      	b.n	800fc96 <rmw_destroy_node+0x32>
 800fd4a:	bf00      	nop
 800fd4c:	0801d764 	.word	0x0801d764
 800fd50:	24012f04 	.word	0x24012f04
 800fd54:	24012f44 	.word	0x24012f44
 800fd58:	24012f14 	.word	0x24012f14
 800fd5c:	2400e624 	.word	0x2400e624

0800fd60 <rmw_node_get_graph_guard_condition>:
 800fd60:	6843      	ldr	r3, [r0, #4]
 800fd62:	6918      	ldr	r0, [r3, #16]
 800fd64:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop

0800fd6c <flush_session>:
 800fd6c:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800fd6e:	f003 b9ff 	b.w	8013170 <uxr_run_session_until_confirm_delivery>
 800fd72:	bf00      	nop

0800fd74 <rmw_publish>:
 800fd74:	2800      	cmp	r0, #0
 800fd76:	d053      	beq.n	800fe20 <rmw_publish+0xac>
 800fd78:	b570      	push	{r4, r5, r6, lr}
 800fd7a:	460d      	mov	r5, r1
 800fd7c:	b08e      	sub	sp, #56	@ 0x38
 800fd7e:	2900      	cmp	r1, #0
 800fd80:	d04b      	beq.n	800fe1a <rmw_publish+0xa6>
 800fd82:	4604      	mov	r4, r0
 800fd84:	6800      	ldr	r0, [r0, #0]
 800fd86:	f000 fddb 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 800fd8a:	2800      	cmp	r0, #0
 800fd8c:	d045      	beq.n	800fe1a <rmw_publish+0xa6>
 800fd8e:	6866      	ldr	r6, [r4, #4]
 800fd90:	2e00      	cmp	r6, #0
 800fd92:	d042      	beq.n	800fe1a <rmw_publish+0xa6>
 800fd94:	69b4      	ldr	r4, [r6, #24]
 800fd96:	4628      	mov	r0, r5
 800fd98:	6923      	ldr	r3, [r4, #16]
 800fd9a:	4798      	blx	r3
 800fd9c:	69f3      	ldr	r3, [r6, #28]
 800fd9e:	9005      	str	r0, [sp, #20]
 800fda0:	b113      	cbz	r3, 800fda8 <rmw_publish+0x34>
 800fda2:	a805      	add	r0, sp, #20
 800fda4:	4798      	blx	r3
 800fda6:	9805      	ldr	r0, [sp, #20]
 800fda8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fdac:	691b      	ldr	r3, [r3, #16]
 800fdae:	9000      	str	r0, [sp, #0]
 800fdb0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800fdb4:	6972      	ldr	r2, [r6, #20]
 800fdb6:	ab06      	add	r3, sp, #24
 800fdb8:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800fdba:	f004 fca9 	bl	8014710 <uxr_prepare_output_stream>
 800fdbe:	b1d8      	cbz	r0, 800fdf8 <rmw_publish+0x84>
 800fdc0:	68a3      	ldr	r3, [r4, #8]
 800fdc2:	a906      	add	r1, sp, #24
 800fdc4:	4628      	mov	r0, r5
 800fdc6:	4798      	blx	r3
 800fdc8:	6a33      	ldr	r3, [r6, #32]
 800fdca:	4604      	mov	r4, r0
 800fdcc:	b10b      	cbz	r3, 800fdd2 <rmw_publish+0x5e>
 800fdce:	a806      	add	r0, sp, #24
 800fdd0:	4798      	blx	r3
 800fdd2:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800fdd6:	2b01      	cmp	r3, #1
 800fdd8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fddc:	d022      	beq.n	800fe24 <rmw_publish+0xb0>
 800fdde:	6918      	ldr	r0, [r3, #16]
 800fde0:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800fde2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fde6:	f003 f9c3 	bl	8013170 <uxr_run_session_until_confirm_delivery>
 800fdea:	4020      	ands	r0, r4
 800fdec:	b2c4      	uxtb	r4, r0
 800fdee:	f084 0001 	eor.w	r0, r4, #1
 800fdf2:	b2c0      	uxtb	r0, r0
 800fdf4:	b00e      	add	sp, #56	@ 0x38
 800fdf6:	bd70      	pop	{r4, r5, r6, pc}
 800fdf8:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800fdfc:	6918      	ldr	r0, [r3, #16]
 800fdfe:	9b05      	ldr	r3, [sp, #20]
 800fe00:	9602      	str	r6, [sp, #8]
 800fe02:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fe06:	9300      	str	r3, [sp, #0]
 800fe08:	4b09      	ldr	r3, [pc, #36]	@ (800fe30 <rmw_publish+0xbc>)
 800fe0a:	9301      	str	r3, [sp, #4]
 800fe0c:	ab06      	add	r3, sp, #24
 800fe0e:	6972      	ldr	r2, [r6, #20]
 800fe10:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800fe12:	f004 fcad 	bl	8014770 <uxr_prepare_output_stream_fragmented>
 800fe16:	2800      	cmp	r0, #0
 800fe18:	d1d2      	bne.n	800fdc0 <rmw_publish+0x4c>
 800fe1a:	2001      	movs	r0, #1
 800fe1c:	b00e      	add	sp, #56	@ 0x38
 800fe1e:	bd70      	pop	{r4, r5, r6, pc}
 800fe20:	2001      	movs	r0, #1
 800fe22:	4770      	bx	lr
 800fe24:	6918      	ldr	r0, [r3, #16]
 800fe26:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800fe2a:	f002 fde7 	bl	80129fc <uxr_flash_output_streams>
 800fe2e:	e7de      	b.n	800fdee <rmw_publish+0x7a>
 800fe30:	0800fd6d 	.word	0x0800fd6d

0800fe34 <rmw_create_publisher>:
 800fe34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe38:	b087      	sub	sp, #28
 800fe3a:	2800      	cmp	r0, #0
 800fe3c:	f000 80d2 	beq.w	800ffe4 <rmw_create_publisher+0x1b0>
 800fe40:	460e      	mov	r6, r1
 800fe42:	2900      	cmp	r1, #0
 800fe44:	f000 80ce 	beq.w	800ffe4 <rmw_create_publisher+0x1b0>
 800fe48:	4604      	mov	r4, r0
 800fe4a:	6800      	ldr	r0, [r0, #0]
 800fe4c:	4615      	mov	r5, r2
 800fe4e:	461f      	mov	r7, r3
 800fe50:	f000 fd76 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 800fe54:	f080 0001 	eor.w	r0, r0, #1
 800fe58:	b2c0      	uxtb	r0, r0
 800fe5a:	2800      	cmp	r0, #0
 800fe5c:	f040 80c2 	bne.w	800ffe4 <rmw_create_publisher+0x1b0>
 800fe60:	2d00      	cmp	r5, #0
 800fe62:	f000 80bf 	beq.w	800ffe4 <rmw_create_publisher+0x1b0>
 800fe66:	782b      	ldrb	r3, [r5, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	f000 80bb 	beq.w	800ffe4 <rmw_create_publisher+0x1b0>
 800fe6e:	2f00      	cmp	r7, #0
 800fe70:	f000 80b8 	beq.w	800ffe4 <rmw_create_publisher+0x1b0>
 800fe74:	485e      	ldr	r0, [pc, #376]	@ (800fff0 <rmw_create_publisher+0x1bc>)
 800fe76:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800fe7a:	f009 f973 	bl	8019164 <get_memory>
 800fe7e:	2800      	cmp	r0, #0
 800fe80:	f000 80b0 	beq.w	800ffe4 <rmw_create_publisher+0x1b0>
 800fe84:	6884      	ldr	r4, [r0, #8]
 800fe86:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800fe8a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800fe8e:	f009 f9d1 	bl	8019234 <rmw_get_implementation_identifier>
 800fe92:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800fe96:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800fe9a:	4628      	mov	r0, r5
 800fe9c:	f7f0 fa2a 	bl	80002f4 <strlen>
 800fea0:	3001      	adds	r0, #1
 800fea2:	f104 0884 	add.w	r8, r4, #132	@ 0x84
 800fea6:	283c      	cmp	r0, #60	@ 0x3c
 800fea8:	f200 808f 	bhi.w	800ffca <rmw_create_publisher+0x196>
 800feac:	462b      	mov	r3, r5
 800feae:	4a51      	ldr	r2, [pc, #324]	@ (800fff4 <rmw_create_publisher+0x1c0>)
 800feb0:	213c      	movs	r1, #60	@ 0x3c
 800feb2:	4650      	mov	r0, sl
 800feb4:	f00b fe06 	bl	801bac4 <sniprintf>
 800feb8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800febc:	4639      	mov	r1, r7
 800febe:	2250      	movs	r2, #80	@ 0x50
 800fec0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800fec2:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800fec6:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800feca:	f00c f832 	bl	801bf32 <memcpy>
 800fece:	7a3b      	ldrb	r3, [r7, #8]
 800fed0:	4630      	mov	r0, r6
 800fed2:	4949      	ldr	r1, [pc, #292]	@ (800fff8 <rmw_create_publisher+0x1c4>)
 800fed4:	2b02      	cmp	r3, #2
 800fed6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800feda:	bf0c      	ite	eq
 800fedc:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800fee0:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800fee4:	67a3      	str	r3, [r4, #120]	@ 0x78
 800fee6:	2300      	movs	r3, #0
 800fee8:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800feec:	f000 fd36 	bl	801095c <get_message_typesupport_handle>
 800fef0:	2800      	cmp	r0, #0
 800fef2:	d06a      	beq.n	800ffca <rmw_create_publisher+0x196>
 800fef4:	6842      	ldr	r2, [r0, #4]
 800fef6:	61a2      	str	r2, [r4, #24]
 800fef8:	2a00      	cmp	r2, #0
 800fefa:	d066      	beq.n	800ffca <rmw_create_publisher+0x196>
 800fefc:	4629      	mov	r1, r5
 800fefe:	463b      	mov	r3, r7
 800ff00:	4648      	mov	r0, r9
 800ff02:	f009 f99d 	bl	8019240 <create_topic>
 800ff06:	6260      	str	r0, [r4, #36]	@ 0x24
 800ff08:	2800      	cmp	r0, #0
 800ff0a:	d062      	beq.n	800ffd2 <rmw_create_publisher+0x19e>
 800ff0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff10:	2103      	movs	r1, #3
 800ff12:	2506      	movs	r5, #6
 800ff14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ff18:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800ff1c:	1c42      	adds	r2, r0, #1
 800ff1e:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800ff22:	f002 fb25 	bl	8012570 <uxr_object_id>
 800ff26:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800ff2a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff2e:	6120      	str	r0, [r4, #16]
 800ff30:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800ff34:	6910      	ldr	r0, [r2, #16]
 800ff36:	9500      	str	r5, [sp, #0]
 800ff38:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800ff3c:	6819      	ldr	r1, [r3, #0]
 800ff3e:	6922      	ldr	r2, [r4, #16]
 800ff40:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800ff44:	f002 f9b0 	bl	80122a8 <uxr_buffer_create_publisher_bin>
 800ff48:	4602      	mov	r2, r0
 800ff4a:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ff4e:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ff52:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ff56:	f000 fc79 	bl	801084c <run_xrce_session>
 800ff5a:	b3b0      	cbz	r0, 800ffca <rmw_create_publisher+0x196>
 800ff5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff60:	2105      	movs	r1, #5
 800ff62:	f10d 0a10 	add.w	sl, sp, #16
 800ff66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ff6a:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800ff6e:	1c42      	adds	r2, r0, #1
 800ff70:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800ff74:	f002 fafc 	bl	8012570 <uxr_object_id>
 800ff78:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800ff7c:	4639      	mov	r1, r7
 800ff7e:	6160      	str	r0, [r4, #20]
 800ff80:	691e      	ldr	r6, [r3, #16]
 800ff82:	4650      	mov	r0, sl
 800ff84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ff88:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800ff8c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800ff90:	f8d3 7384 	ldr.w	r7, [r3, #900]	@ 0x384
 800ff94:	f000 fc76 	bl	8010884 <convert_qos_profile>
 800ff98:	9503      	str	r5, [sp, #12]
 800ff9a:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800ff9e:	9001      	str	r0, [sp, #4]
 800ffa0:	4630      	mov	r0, r6
 800ffa2:	f8ad 1008 	strh.w	r1, [sp, #8]
 800ffa6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800ffaa:	9300      	str	r3, [sp, #0]
 800ffac:	6839      	ldr	r1, [r7, #0]
 800ffae:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ffb2:	f002 f9a9 	bl	8012308 <uxr_buffer_create_datawriter_bin>
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ffbc:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ffc0:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ffc4:	f000 fc42 	bl	801084c <run_xrce_session>
 800ffc8:	b970      	cbnz	r0, 800ffe8 <rmw_create_publisher+0x1b4>
 800ffca:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ffcc:	b108      	cbz	r0, 800ffd2 <rmw_create_publisher+0x19e>
 800ffce:	f000 fb31 	bl	8010634 <rmw_uxrce_fini_topic_memory>
 800ffd2:	4640      	mov	r0, r8
 800ffd4:	f04f 0800 	mov.w	r8, #0
 800ffd8:	f000 fad4 	bl	8010584 <rmw_uxrce_fini_publisher_memory>
 800ffdc:	4640      	mov	r0, r8
 800ffde:	b007      	add	sp, #28
 800ffe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffe4:	f04f 0800 	mov.w	r8, #0
 800ffe8:	4640      	mov	r0, r8
 800ffea:	b007      	add	sp, #28
 800ffec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fff0:	24012f04 	.word	0x24012f04
 800fff4:	0801ce40 	.word	0x0801ce40
 800fff8:	0801ce0c 	.word	0x0801ce0c

0800fffc <rmw_publisher_get_actual_qos>:
 800fffc:	b178      	cbz	r0, 801001e <rmw_publisher_get_actual_qos+0x22>
 800fffe:	b510      	push	{r4, lr}
 8010000:	fab1 f481 	clz	r4, r1
 8010004:	0964      	lsrs	r4, r4, #5
 8010006:	b141      	cbz	r1, 801001a <rmw_publisher_get_actual_qos+0x1e>
 8010008:	6843      	ldr	r3, [r0, #4]
 801000a:	2250      	movs	r2, #80	@ 0x50
 801000c:	4608      	mov	r0, r1
 801000e:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8010012:	f00b ff8e 	bl	801bf32 <memcpy>
 8010016:	4620      	mov	r0, r4
 8010018:	bd10      	pop	{r4, pc}
 801001a:	200b      	movs	r0, #11
 801001c:	bd10      	pop	{r4, pc}
 801001e:	200b      	movs	r0, #11
 8010020:	4770      	bx	lr
 8010022:	bf00      	nop

08010024 <rmw_destroy_publisher>:
 8010024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010028:	b128      	cbz	r0, 8010036 <rmw_destroy_publisher+0x12>
 801002a:	4604      	mov	r4, r0
 801002c:	6800      	ldr	r0, [r0, #0]
 801002e:	460d      	mov	r5, r1
 8010030:	f000 fc86 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 8010034:	b918      	cbnz	r0, 801003e <rmw_destroy_publisher+0x1a>
 8010036:	2401      	movs	r4, #1
 8010038:	4620      	mov	r0, r4
 801003a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801003e:	6863      	ldr	r3, [r4, #4]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d0f8      	beq.n	8010036 <rmw_destroy_publisher+0x12>
 8010044:	fab5 f485 	clz	r4, r5
 8010048:	0964      	lsrs	r4, r4, #5
 801004a:	2d00      	cmp	r5, #0
 801004c:	d0f3      	beq.n	8010036 <rmw_destroy_publisher+0x12>
 801004e:	6828      	ldr	r0, [r5, #0]
 8010050:	f000 fc76 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 8010054:	2800      	cmp	r0, #0
 8010056:	d0ee      	beq.n	8010036 <rmw_destroy_publisher+0x12>
 8010058:	686e      	ldr	r6, [r5, #4]
 801005a:	2e00      	cmp	r6, #0
 801005c:	d0eb      	beq.n	8010036 <rmw_destroy_publisher+0x12>
 801005e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8010060:	f8d6 7080 	ldr.w	r7, [r6, #128]	@ 0x80
 8010064:	f009 f93c 	bl	80192e0 <destroy_topic>
 8010068:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 801006c:	6972      	ldr	r2, [r6, #20]
 801006e:	6918      	ldr	r0, [r3, #16]
 8010070:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010074:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010078:	6819      	ldr	r1, [r3, #0]
 801007a:	f002 f861 	bl	8012140 <uxr_buffer_delete_entity>
 801007e:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 8010082:	4680      	mov	r8, r0
 8010084:	6932      	ldr	r2, [r6, #16]
 8010086:	6918      	ldr	r0, [r3, #16]
 8010088:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801008c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010090:	6819      	ldr	r1, [r3, #0]
 8010092:	f002 f855 	bl	8012140 <uxr_buffer_delete_entity>
 8010096:	4606      	mov	r6, r0
 8010098:	6938      	ldr	r0, [r7, #16]
 801009a:	4642      	mov	r2, r8
 801009c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80100a0:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80100a4:	f000 fbd2 	bl	801084c <run_xrce_session>
 80100a8:	693f      	ldr	r7, [r7, #16]
 80100aa:	4632      	mov	r2, r6
 80100ac:	4606      	mov	r6, r0
 80100ae:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80100b2:	4638      	mov	r0, r7
 80100b4:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 80100b8:	f000 fbc8 	bl	801084c <run_xrce_session>
 80100bc:	b126      	cbz	r6, 80100c8 <rmw_destroy_publisher+0xa4>
 80100be:	b118      	cbz	r0, 80100c8 <rmw_destroy_publisher+0xa4>
 80100c0:	4628      	mov	r0, r5
 80100c2:	f000 fa5f 	bl	8010584 <rmw_uxrce_fini_publisher_memory>
 80100c6:	e7b7      	b.n	8010038 <rmw_destroy_publisher+0x14>
 80100c8:	2402      	movs	r4, #2
 80100ca:	e7f9      	b.n	80100c0 <rmw_destroy_publisher+0x9c>

080100cc <rmw_destroy_service>:
 80100cc:	b570      	push	{r4, r5, r6, lr}
 80100ce:	b128      	cbz	r0, 80100dc <rmw_destroy_service+0x10>
 80100d0:	4604      	mov	r4, r0
 80100d2:	6800      	ldr	r0, [r0, #0]
 80100d4:	460d      	mov	r5, r1
 80100d6:	f000 fc33 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 80100da:	b910      	cbnz	r0, 80100e2 <rmw_destroy_service+0x16>
 80100dc:	2401      	movs	r4, #1
 80100de:	4620      	mov	r0, r4
 80100e0:	bd70      	pop	{r4, r5, r6, pc}
 80100e2:	6863      	ldr	r3, [r4, #4]
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d0f9      	beq.n	80100dc <rmw_destroy_service+0x10>
 80100e8:	2d00      	cmp	r5, #0
 80100ea:	d0f7      	beq.n	80100dc <rmw_destroy_service+0x10>
 80100ec:	6828      	ldr	r0, [r5, #0]
 80100ee:	f000 fc27 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 80100f2:	2800      	cmp	r0, #0
 80100f4:	d0f2      	beq.n	80100dc <rmw_destroy_service+0x10>
 80100f6:	686e      	ldr	r6, [r5, #4]
 80100f8:	2e00      	cmp	r6, #0
 80100fa:	d0ef      	beq.n	80100dc <rmw_destroy_service+0x10>
 80100fc:	6864      	ldr	r4, [r4, #4]
 80100fe:	6932      	ldr	r2, [r6, #16]
 8010100:	6920      	ldr	r0, [r4, #16]
 8010102:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010106:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801010a:	6819      	ldr	r1, [r3, #0]
 801010c:	f002 fa60 	bl	80125d0 <uxr_buffer_cancel_data>
 8010110:	4602      	mov	r2, r0
 8010112:	6920      	ldr	r0, [r4, #16]
 8010114:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8010118:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801011c:	f000 fb96 	bl	801084c <run_xrce_session>
 8010120:	6920      	ldr	r0, [r4, #16]
 8010122:	6932      	ldr	r2, [r6, #16]
 8010124:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010128:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801012c:	6819      	ldr	r1, [r3, #0]
 801012e:	f002 f807 	bl	8012140 <uxr_buffer_delete_entity>
 8010132:	4602      	mov	r2, r0
 8010134:	6920      	ldr	r0, [r4, #16]
 8010136:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801013a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801013e:	f000 fb85 	bl	801084c <run_xrce_session>
 8010142:	4603      	mov	r3, r0
 8010144:	4628      	mov	r0, r5
 8010146:	2b00      	cmp	r3, #0
 8010148:	bf14      	ite	ne
 801014a:	2400      	movne	r4, #0
 801014c:	2402      	moveq	r4, #2
 801014e:	f000 fa45 	bl	80105dc <rmw_uxrce_fini_service_memory>
 8010152:	e7c4      	b.n	80100de <rmw_destroy_service+0x12>

08010154 <rmw_destroy_subscription>:
 8010154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010158:	b128      	cbz	r0, 8010166 <rmw_destroy_subscription+0x12>
 801015a:	4604      	mov	r4, r0
 801015c:	6800      	ldr	r0, [r0, #0]
 801015e:	460d      	mov	r5, r1
 8010160:	f000 fbee 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 8010164:	b918      	cbnz	r0, 801016e <rmw_destroy_subscription+0x1a>
 8010166:	2401      	movs	r4, #1
 8010168:	4620      	mov	r0, r4
 801016a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801016e:	6863      	ldr	r3, [r4, #4]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d0f8      	beq.n	8010166 <rmw_destroy_subscription+0x12>
 8010174:	fab5 f485 	clz	r4, r5
 8010178:	0964      	lsrs	r4, r4, #5
 801017a:	2d00      	cmp	r5, #0
 801017c:	d0f3      	beq.n	8010166 <rmw_destroy_subscription+0x12>
 801017e:	6828      	ldr	r0, [r5, #0]
 8010180:	f000 fbde 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 8010184:	2800      	cmp	r0, #0
 8010186:	d0ee      	beq.n	8010166 <rmw_destroy_subscription+0x12>
 8010188:	686e      	ldr	r6, [r5, #4]
 801018a:	2e00      	cmp	r6, #0
 801018c:	d0eb      	beq.n	8010166 <rmw_destroy_subscription+0x12>
 801018e:	6a37      	ldr	r7, [r6, #32]
 8010190:	6972      	ldr	r2, [r6, #20]
 8010192:	6938      	ldr	r0, [r7, #16]
 8010194:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8010198:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801019c:	6819      	ldr	r1, [r3, #0]
 801019e:	f002 fa17 	bl	80125d0 <uxr_buffer_cancel_data>
 80101a2:	4602      	mov	r2, r0
 80101a4:	6938      	ldr	r0, [r7, #16]
 80101a6:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80101aa:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80101ae:	f000 fb4d 	bl	801084c <run_xrce_session>
 80101b2:	69f0      	ldr	r0, [r6, #28]
 80101b4:	f009 f894 	bl	80192e0 <destroy_topic>
 80101b8:	6a33      	ldr	r3, [r6, #32]
 80101ba:	6972      	ldr	r2, [r6, #20]
 80101bc:	6918      	ldr	r0, [r3, #16]
 80101be:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80101c2:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101c6:	6819      	ldr	r1, [r3, #0]
 80101c8:	f001 ffba 	bl	8012140 <uxr_buffer_delete_entity>
 80101cc:	6a33      	ldr	r3, [r6, #32]
 80101ce:	4680      	mov	r8, r0
 80101d0:	6932      	ldr	r2, [r6, #16]
 80101d2:	6918      	ldr	r0, [r3, #16]
 80101d4:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80101d8:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80101dc:	6819      	ldr	r1, [r3, #0]
 80101de:	f001 ffaf 	bl	8012140 <uxr_buffer_delete_entity>
 80101e2:	4606      	mov	r6, r0
 80101e4:	6938      	ldr	r0, [r7, #16]
 80101e6:	4642      	mov	r2, r8
 80101e8:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80101ec:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80101f0:	f000 fb2c 	bl	801084c <run_xrce_session>
 80101f4:	693f      	ldr	r7, [r7, #16]
 80101f6:	4632      	mov	r2, r6
 80101f8:	4606      	mov	r6, r0
 80101fa:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 80101fe:	4638      	mov	r0, r7
 8010200:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 8010204:	f000 fb22 	bl	801084c <run_xrce_session>
 8010208:	b126      	cbz	r6, 8010214 <rmw_destroy_subscription+0xc0>
 801020a:	b118      	cbz	r0, 8010214 <rmw_destroy_subscription+0xc0>
 801020c:	4628      	mov	r0, r5
 801020e:	f000 f9cf 	bl	80105b0 <rmw_uxrce_fini_subscription_memory>
 8010212:	e7a9      	b.n	8010168 <rmw_destroy_subscription+0x14>
 8010214:	2402      	movs	r4, #2
 8010216:	e7f9      	b.n	801020c <rmw_destroy_subscription+0xb8>

08010218 <rmw_uxrce_transport_init>:
 8010218:	b508      	push	{r3, lr}
 801021a:	b108      	cbz	r0, 8010220 <rmw_uxrce_transport_init+0x8>
 801021c:	f100 0210 	add.w	r2, r0, #16
 8010220:	b139      	cbz	r1, 8010232 <rmw_uxrce_transport_init+0x1a>
 8010222:	6949      	ldr	r1, [r1, #20]
 8010224:	4610      	mov	r0, r2
 8010226:	f002 f96b 	bl	8012500 <uxr_init_custom_transport>
 801022a:	f080 0001 	eor.w	r0, r0, #1
 801022e:	b2c0      	uxtb	r0, r0
 8010230:	bd08      	pop	{r3, pc}
 8010232:	4b04      	ldr	r3, [pc, #16]	@ (8010244 <rmw_uxrce_transport_init+0x2c>)
 8010234:	4610      	mov	r0, r2
 8010236:	6859      	ldr	r1, [r3, #4]
 8010238:	f002 f962 	bl	8012500 <uxr_init_custom_transport>
 801023c:	f080 0001 	eor.w	r0, r0, #1
 8010240:	b2c0      	uxtb	r0, r0
 8010242:	bd08      	pop	{r3, pc}
 8010244:	2400e5cc 	.word	0x2400e5cc

08010248 <rmw_uros_epoch_nanos>:
 8010248:	4b05      	ldr	r3, [pc, #20]	@ (8010260 <rmw_uros_epoch_nanos+0x18>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	b123      	cbz	r3, 8010258 <rmw_uros_epoch_nanos+0x10>
 801024e:	6898      	ldr	r0, [r3, #8]
 8010250:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010254:	f002 bbc8 	b.w	80129e8 <uxr_epoch_nanos>
 8010258:	2000      	movs	r0, #0
 801025a:	2100      	movs	r1, #0
 801025c:	4770      	bx	lr
 801025e:	bf00      	nop
 8010260:	24012f24 	.word	0x24012f24

08010264 <rmw_uros_sync_session>:
 8010264:	b508      	push	{r3, lr}
 8010266:	4b07      	ldr	r3, [pc, #28]	@ (8010284 <rmw_uros_sync_session+0x20>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	b14b      	cbz	r3, 8010280 <rmw_uros_sync_session+0x1c>
 801026c:	4601      	mov	r1, r0
 801026e:	6898      	ldr	r0, [r3, #8]
 8010270:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010274:	f002 fff8 	bl	8013268 <uxr_sync_session>
 8010278:	f080 0001 	eor.w	r0, r0, #1
 801027c:	b2c0      	uxtb	r0, r0
 801027e:	bd08      	pop	{r3, pc}
 8010280:	2001      	movs	r0, #1
 8010282:	bd08      	pop	{r3, pc}
 8010284:	24012f24 	.word	0x24012f24

08010288 <rmw_uxrce_init_service_memory>:
 8010288:	b1e2      	cbz	r2, 80102c4 <rmw_uxrce_init_service_memory+0x3c>
 801028a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801028e:	7b05      	ldrb	r5, [r0, #12]
 8010290:	4606      	mov	r6, r0
 8010292:	b9ad      	cbnz	r5, 80102c0 <rmw_uxrce_init_service_memory+0x38>
 8010294:	23c8      	movs	r3, #200	@ 0xc8
 8010296:	4617      	mov	r7, r2
 8010298:	460c      	mov	r4, r1
 801029a:	46a8      	mov	r8, r5
 801029c:	6083      	str	r3, [r0, #8]
 801029e:	f240 1301 	movw	r3, #257	@ 0x101
 80102a2:	e9c0 5500 	strd	r5, r5, [r0]
 80102a6:	8183      	strh	r3, [r0, #12]
 80102a8:	3501      	adds	r5, #1
 80102aa:	4621      	mov	r1, r4
 80102ac:	4630      	mov	r0, r6
 80102ae:	f008 ff69 	bl	8019184 <put_memory>
 80102b2:	42af      	cmp	r7, r5
 80102b4:	60a4      	str	r4, [r4, #8]
 80102b6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80102ba:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80102be:	d1f3      	bne.n	80102a8 <rmw_uxrce_init_service_memory+0x20>
 80102c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102c4:	4770      	bx	lr
 80102c6:	bf00      	nop

080102c8 <rmw_uxrce_init_client_memory>:
 80102c8:	b1e2      	cbz	r2, 8010304 <rmw_uxrce_init_client_memory+0x3c>
 80102ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102ce:	7b05      	ldrb	r5, [r0, #12]
 80102d0:	4606      	mov	r6, r0
 80102d2:	b9ad      	cbnz	r5, 8010300 <rmw_uxrce_init_client_memory+0x38>
 80102d4:	23c8      	movs	r3, #200	@ 0xc8
 80102d6:	4617      	mov	r7, r2
 80102d8:	460c      	mov	r4, r1
 80102da:	46a8      	mov	r8, r5
 80102dc:	6083      	str	r3, [r0, #8]
 80102de:	f240 1301 	movw	r3, #257	@ 0x101
 80102e2:	e9c0 5500 	strd	r5, r5, [r0]
 80102e6:	8183      	strh	r3, [r0, #12]
 80102e8:	3501      	adds	r5, #1
 80102ea:	4621      	mov	r1, r4
 80102ec:	4630      	mov	r0, r6
 80102ee:	f008 ff49 	bl	8019184 <put_memory>
 80102f2:	42af      	cmp	r7, r5
 80102f4:	60a4      	str	r4, [r4, #8]
 80102f6:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 80102fa:	f804 8cbc 	strb.w	r8, [r4, #-188]
 80102fe:	d1f3      	bne.n	80102e8 <rmw_uxrce_init_client_memory+0x20>
 8010300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010304:	4770      	bx	lr
 8010306:	bf00      	nop

08010308 <rmw_uxrce_init_publisher_memory>:
 8010308:	b1e2      	cbz	r2, 8010344 <rmw_uxrce_init_publisher_memory+0x3c>
 801030a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801030e:	7b05      	ldrb	r5, [r0, #12]
 8010310:	4606      	mov	r6, r0
 8010312:	b9ad      	cbnz	r5, 8010340 <rmw_uxrce_init_publisher_memory+0x38>
 8010314:	23d8      	movs	r3, #216	@ 0xd8
 8010316:	4617      	mov	r7, r2
 8010318:	460c      	mov	r4, r1
 801031a:	46a8      	mov	r8, r5
 801031c:	6083      	str	r3, [r0, #8]
 801031e:	f240 1301 	movw	r3, #257	@ 0x101
 8010322:	e9c0 5500 	strd	r5, r5, [r0]
 8010326:	8183      	strh	r3, [r0, #12]
 8010328:	3501      	adds	r5, #1
 801032a:	4621      	mov	r1, r4
 801032c:	4630      	mov	r0, r6
 801032e:	f008 ff29 	bl	8019184 <put_memory>
 8010332:	42af      	cmp	r7, r5
 8010334:	60a4      	str	r4, [r4, #8]
 8010336:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801033a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801033e:	d1f3      	bne.n	8010328 <rmw_uxrce_init_publisher_memory+0x20>
 8010340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010344:	4770      	bx	lr
 8010346:	bf00      	nop

08010348 <rmw_uxrce_init_subscription_memory>:
 8010348:	b1e2      	cbz	r2, 8010384 <rmw_uxrce_init_subscription_memory+0x3c>
 801034a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801034e:	7b05      	ldrb	r5, [r0, #12]
 8010350:	4606      	mov	r6, r0
 8010352:	b9ad      	cbnz	r5, 8010380 <rmw_uxrce_init_subscription_memory+0x38>
 8010354:	23d8      	movs	r3, #216	@ 0xd8
 8010356:	4617      	mov	r7, r2
 8010358:	460c      	mov	r4, r1
 801035a:	46a8      	mov	r8, r5
 801035c:	6083      	str	r3, [r0, #8]
 801035e:	f240 1301 	movw	r3, #257	@ 0x101
 8010362:	e9c0 5500 	strd	r5, r5, [r0]
 8010366:	8183      	strh	r3, [r0, #12]
 8010368:	3501      	adds	r5, #1
 801036a:	4621      	mov	r1, r4
 801036c:	4630      	mov	r0, r6
 801036e:	f008 ff09 	bl	8019184 <put_memory>
 8010372:	42af      	cmp	r7, r5
 8010374:	60a4      	str	r4, [r4, #8]
 8010376:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 801037a:	f804 8ccc 	strb.w	r8, [r4, #-204]
 801037e:	d1f3      	bne.n	8010368 <rmw_uxrce_init_subscription_memory+0x20>
 8010380:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010384:	4770      	bx	lr
 8010386:	bf00      	nop

08010388 <rmw_uxrce_init_node_memory>:
 8010388:	b1e2      	cbz	r2, 80103c4 <rmw_uxrce_init_node_memory+0x3c>
 801038a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801038e:	7b05      	ldrb	r5, [r0, #12]
 8010390:	4606      	mov	r6, r0
 8010392:	b9ad      	cbnz	r5, 80103c0 <rmw_uxrce_init_node_memory+0x38>
 8010394:	23a4      	movs	r3, #164	@ 0xa4
 8010396:	4617      	mov	r7, r2
 8010398:	460c      	mov	r4, r1
 801039a:	46a8      	mov	r8, r5
 801039c:	6083      	str	r3, [r0, #8]
 801039e:	f240 1301 	movw	r3, #257	@ 0x101
 80103a2:	e9c0 5500 	strd	r5, r5, [r0]
 80103a6:	8183      	strh	r3, [r0, #12]
 80103a8:	3501      	adds	r5, #1
 80103aa:	4621      	mov	r1, r4
 80103ac:	4630      	mov	r0, r6
 80103ae:	f008 fee9 	bl	8019184 <put_memory>
 80103b2:	42af      	cmp	r7, r5
 80103b4:	60a4      	str	r4, [r4, #8]
 80103b6:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 80103ba:	f804 8c98 	strb.w	r8, [r4, #-152]
 80103be:	d1f3      	bne.n	80103a8 <rmw_uxrce_init_node_memory+0x20>
 80103c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103c4:	4770      	bx	lr
 80103c6:	bf00      	nop

080103c8 <rmw_uxrce_init_session_memory>:
 80103c8:	b1ea      	cbz	r2, 8010406 <rmw_uxrce_init_session_memory+0x3e>
 80103ca:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80103ce:	7b05      	ldrb	r5, [r0, #12]
 80103d0:	4606      	mov	r6, r0
 80103d2:	b9b5      	cbnz	r5, 8010402 <rmw_uxrce_init_session_memory+0x3a>
 80103d4:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 80103d8:	f240 1301 	movw	r3, #257	@ 0x101
 80103dc:	4617      	mov	r7, r2
 80103de:	460c      	mov	r4, r1
 80103e0:	46a9      	mov	r9, r5
 80103e2:	f8c0 8008 	str.w	r8, [r0, #8]
 80103e6:	8183      	strh	r3, [r0, #12]
 80103e8:	e9c0 5500 	strd	r5, r5, [r0]
 80103ec:	3501      	adds	r5, #1
 80103ee:	4621      	mov	r1, r4
 80103f0:	4630      	mov	r0, r6
 80103f2:	f008 fec7 	bl	8019184 <put_memory>
 80103f6:	42af      	cmp	r7, r5
 80103f8:	60a4      	str	r4, [r4, #8]
 80103fa:	f884 900c 	strb.w	r9, [r4, #12]
 80103fe:	4444      	add	r4, r8
 8010400:	d1f4      	bne.n	80103ec <rmw_uxrce_init_session_memory+0x24>
 8010402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010406:	4770      	bx	lr

08010408 <rmw_uxrce_init_topic_memory>:
 8010408:	b1e2      	cbz	r2, 8010444 <rmw_uxrce_init_topic_memory+0x3c>
 801040a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801040e:	7b05      	ldrb	r5, [r0, #12]
 8010410:	4606      	mov	r6, r0
 8010412:	b9ad      	cbnz	r5, 8010440 <rmw_uxrce_init_topic_memory+0x38>
 8010414:	231c      	movs	r3, #28
 8010416:	4617      	mov	r7, r2
 8010418:	460c      	mov	r4, r1
 801041a:	46a8      	mov	r8, r5
 801041c:	6083      	str	r3, [r0, #8]
 801041e:	f240 1301 	movw	r3, #257	@ 0x101
 8010422:	e9c0 5500 	strd	r5, r5, [r0]
 8010426:	8183      	strh	r3, [r0, #12]
 8010428:	3501      	adds	r5, #1
 801042a:	4621      	mov	r1, r4
 801042c:	4630      	mov	r0, r6
 801042e:	f008 fea9 	bl	8019184 <put_memory>
 8010432:	42af      	cmp	r7, r5
 8010434:	60a4      	str	r4, [r4, #8]
 8010436:	f104 041c 	add.w	r4, r4, #28
 801043a:	f804 8c10 	strb.w	r8, [r4, #-16]
 801043e:	d1f3      	bne.n	8010428 <rmw_uxrce_init_topic_memory+0x20>
 8010440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010444:	4770      	bx	lr
 8010446:	bf00      	nop

08010448 <rmw_uxrce_init_static_input_buffer_memory>:
 8010448:	b1ea      	cbz	r2, 8010486 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 801044a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801044e:	7b05      	ldrb	r5, [r0, #12]
 8010450:	4606      	mov	r6, r0
 8010452:	b9b5      	cbnz	r5, 8010482 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 8010454:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 8010458:	4617      	mov	r7, r2
 801045a:	460c      	mov	r4, r1
 801045c:	46a8      	mov	r8, r5
 801045e:	6083      	str	r3, [r0, #8]
 8010460:	f240 1301 	movw	r3, #257	@ 0x101
 8010464:	e9c0 5500 	strd	r5, r5, [r0]
 8010468:	8183      	strh	r3, [r0, #12]
 801046a:	3501      	adds	r5, #1
 801046c:	4621      	mov	r1, r4
 801046e:	4630      	mov	r0, r6
 8010470:	f008 fe88 	bl	8019184 <put_memory>
 8010474:	42af      	cmp	r7, r5
 8010476:	60a4      	str	r4, [r4, #8]
 8010478:	f884 800c 	strb.w	r8, [r4, #12]
 801047c:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 8010480:	d1f3      	bne.n	801046a <rmw_uxrce_init_static_input_buffer_memory+0x22>
 8010482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010486:	4770      	bx	lr

08010488 <rmw_uxrce_init_init_options_impl_memory>:
 8010488:	b1e2      	cbz	r2, 80104c4 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 801048a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801048e:	7b05      	ldrb	r5, [r0, #12]
 8010490:	4606      	mov	r6, r0
 8010492:	b9ad      	cbnz	r5, 80104c0 <rmw_uxrce_init_init_options_impl_memory+0x38>
 8010494:	232c      	movs	r3, #44	@ 0x2c
 8010496:	4617      	mov	r7, r2
 8010498:	460c      	mov	r4, r1
 801049a:	46a8      	mov	r8, r5
 801049c:	6083      	str	r3, [r0, #8]
 801049e:	f240 1301 	movw	r3, #257	@ 0x101
 80104a2:	e9c0 5500 	strd	r5, r5, [r0]
 80104a6:	8183      	strh	r3, [r0, #12]
 80104a8:	3501      	adds	r5, #1
 80104aa:	4621      	mov	r1, r4
 80104ac:	4630      	mov	r0, r6
 80104ae:	f008 fe69 	bl	8019184 <put_memory>
 80104b2:	42af      	cmp	r7, r5
 80104b4:	60a4      	str	r4, [r4, #8]
 80104b6:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 80104ba:	f804 8c20 	strb.w	r8, [r4, #-32]
 80104be:	d1f3      	bne.n	80104a8 <rmw_uxrce_init_init_options_impl_memory+0x20>
 80104c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104c4:	4770      	bx	lr
 80104c6:	bf00      	nop

080104c8 <rmw_uxrce_init_wait_set_memory>:
 80104c8:	b1e2      	cbz	r2, 8010504 <rmw_uxrce_init_wait_set_memory+0x3c>
 80104ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104ce:	7b05      	ldrb	r5, [r0, #12]
 80104d0:	4606      	mov	r6, r0
 80104d2:	b9ad      	cbnz	r5, 8010500 <rmw_uxrce_init_wait_set_memory+0x38>
 80104d4:	231c      	movs	r3, #28
 80104d6:	4617      	mov	r7, r2
 80104d8:	460c      	mov	r4, r1
 80104da:	46a8      	mov	r8, r5
 80104dc:	6083      	str	r3, [r0, #8]
 80104de:	f240 1301 	movw	r3, #257	@ 0x101
 80104e2:	e9c0 5500 	strd	r5, r5, [r0]
 80104e6:	8183      	strh	r3, [r0, #12]
 80104e8:	3501      	adds	r5, #1
 80104ea:	4621      	mov	r1, r4
 80104ec:	4630      	mov	r0, r6
 80104ee:	f008 fe49 	bl	8019184 <put_memory>
 80104f2:	42af      	cmp	r7, r5
 80104f4:	60a4      	str	r4, [r4, #8]
 80104f6:	f104 041c 	add.w	r4, r4, #28
 80104fa:	f804 8c10 	strb.w	r8, [r4, #-16]
 80104fe:	d1f3      	bne.n	80104e8 <rmw_uxrce_init_wait_set_memory+0x20>
 8010500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010504:	4770      	bx	lr
 8010506:	bf00      	nop

08010508 <rmw_uxrce_init_guard_condition_memory>:
 8010508:	b1e2      	cbz	r2, 8010544 <rmw_uxrce_init_guard_condition_memory+0x3c>
 801050a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801050e:	7b05      	ldrb	r5, [r0, #12]
 8010510:	4606      	mov	r6, r0
 8010512:	b9ad      	cbnz	r5, 8010540 <rmw_uxrce_init_guard_condition_memory+0x38>
 8010514:	2320      	movs	r3, #32
 8010516:	4617      	mov	r7, r2
 8010518:	460c      	mov	r4, r1
 801051a:	46a8      	mov	r8, r5
 801051c:	6083      	str	r3, [r0, #8]
 801051e:	f240 1301 	movw	r3, #257	@ 0x101
 8010522:	e9c0 5500 	strd	r5, r5, [r0]
 8010526:	8183      	strh	r3, [r0, #12]
 8010528:	3501      	adds	r5, #1
 801052a:	4621      	mov	r1, r4
 801052c:	4630      	mov	r0, r6
 801052e:	f008 fe29 	bl	8019184 <put_memory>
 8010532:	42af      	cmp	r7, r5
 8010534:	60a4      	str	r4, [r4, #8]
 8010536:	f104 0420 	add.w	r4, r4, #32
 801053a:	f804 8c14 	strb.w	r8, [r4, #-20]
 801053e:	d1f3      	bne.n	8010528 <rmw_uxrce_init_guard_condition_memory+0x20>
 8010540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010544:	4770      	bx	lr
 8010546:	bf00      	nop

08010548 <rmw_uxrce_fini_session_memory>:
 8010548:	4601      	mov	r1, r0
 801054a:	4801      	ldr	r0, [pc, #4]	@ (8010550 <rmw_uxrce_fini_session_memory+0x8>)
 801054c:	f008 be1a 	b.w	8019184 <put_memory>
 8010550:	24012f24 	.word	0x24012f24

08010554 <rmw_uxrce_fini_node_memory>:
 8010554:	b538      	push	{r3, r4, r5, lr}
 8010556:	4604      	mov	r4, r0
 8010558:	6800      	ldr	r0, [r0, #0]
 801055a:	b128      	cbz	r0, 8010568 <rmw_uxrce_fini_node_memory+0x14>
 801055c:	4b07      	ldr	r3, [pc, #28]	@ (801057c <rmw_uxrce_fini_node_memory+0x28>)
 801055e:	6819      	ldr	r1, [r3, #0]
 8010560:	f7ef febe 	bl	80002e0 <strcmp>
 8010564:	b940      	cbnz	r0, 8010578 <rmw_uxrce_fini_node_memory+0x24>
 8010566:	6020      	str	r0, [r4, #0]
 8010568:	6861      	ldr	r1, [r4, #4]
 801056a:	b129      	cbz	r1, 8010578 <rmw_uxrce_fini_node_memory+0x24>
 801056c:	2500      	movs	r5, #0
 801056e:	4804      	ldr	r0, [pc, #16]	@ (8010580 <rmw_uxrce_fini_node_memory+0x2c>)
 8010570:	610d      	str	r5, [r1, #16]
 8010572:	f008 fe07 	bl	8019184 <put_memory>
 8010576:	6065      	str	r5, [r4, #4]
 8010578:	bd38      	pop	{r3, r4, r5, pc}
 801057a:	bf00      	nop
 801057c:	0801d764 	.word	0x0801d764
 8010580:	24012ef4 	.word	0x24012ef4

08010584 <rmw_uxrce_fini_publisher_memory>:
 8010584:	b510      	push	{r4, lr}
 8010586:	4604      	mov	r4, r0
 8010588:	6800      	ldr	r0, [r0, #0]
 801058a:	b128      	cbz	r0, 8010598 <rmw_uxrce_fini_publisher_memory+0x14>
 801058c:	4b06      	ldr	r3, [pc, #24]	@ (80105a8 <rmw_uxrce_fini_publisher_memory+0x24>)
 801058e:	6819      	ldr	r1, [r3, #0]
 8010590:	f7ef fea6 	bl	80002e0 <strcmp>
 8010594:	b938      	cbnz	r0, 80105a6 <rmw_uxrce_fini_publisher_memory+0x22>
 8010596:	6020      	str	r0, [r4, #0]
 8010598:	6861      	ldr	r1, [r4, #4]
 801059a:	b121      	cbz	r1, 80105a6 <rmw_uxrce_fini_publisher_memory+0x22>
 801059c:	4803      	ldr	r0, [pc, #12]	@ (80105ac <rmw_uxrce_fini_publisher_memory+0x28>)
 801059e:	f008 fdf1 	bl	8019184 <put_memory>
 80105a2:	2300      	movs	r3, #0
 80105a4:	6063      	str	r3, [r4, #4]
 80105a6:	bd10      	pop	{r4, pc}
 80105a8:	0801d764 	.word	0x0801d764
 80105ac:	24012f04 	.word	0x24012f04

080105b0 <rmw_uxrce_fini_subscription_memory>:
 80105b0:	b510      	push	{r4, lr}
 80105b2:	4604      	mov	r4, r0
 80105b4:	6800      	ldr	r0, [r0, #0]
 80105b6:	b128      	cbz	r0, 80105c4 <rmw_uxrce_fini_subscription_memory+0x14>
 80105b8:	4b06      	ldr	r3, [pc, #24]	@ (80105d4 <rmw_uxrce_fini_subscription_memory+0x24>)
 80105ba:	6819      	ldr	r1, [r3, #0]
 80105bc:	f7ef fe90 	bl	80002e0 <strcmp>
 80105c0:	b938      	cbnz	r0, 80105d2 <rmw_uxrce_fini_subscription_memory+0x22>
 80105c2:	6020      	str	r0, [r4, #0]
 80105c4:	6861      	ldr	r1, [r4, #4]
 80105c6:	b121      	cbz	r1, 80105d2 <rmw_uxrce_fini_subscription_memory+0x22>
 80105c8:	4803      	ldr	r0, [pc, #12]	@ (80105d8 <rmw_uxrce_fini_subscription_memory+0x28>)
 80105ca:	f008 fddb 	bl	8019184 <put_memory>
 80105ce:	2300      	movs	r3, #0
 80105d0:	6063      	str	r3, [r4, #4]
 80105d2:	bd10      	pop	{r4, pc}
 80105d4:	0801d764 	.word	0x0801d764
 80105d8:	24012f44 	.word	0x24012f44

080105dc <rmw_uxrce_fini_service_memory>:
 80105dc:	b510      	push	{r4, lr}
 80105de:	4604      	mov	r4, r0
 80105e0:	6800      	ldr	r0, [r0, #0]
 80105e2:	b128      	cbz	r0, 80105f0 <rmw_uxrce_fini_service_memory+0x14>
 80105e4:	4b06      	ldr	r3, [pc, #24]	@ (8010600 <rmw_uxrce_fini_service_memory+0x24>)
 80105e6:	6819      	ldr	r1, [r3, #0]
 80105e8:	f7ef fe7a 	bl	80002e0 <strcmp>
 80105ec:	b938      	cbnz	r0, 80105fe <rmw_uxrce_fini_service_memory+0x22>
 80105ee:	6020      	str	r0, [r4, #0]
 80105f0:	6861      	ldr	r1, [r4, #4]
 80105f2:	b121      	cbz	r1, 80105fe <rmw_uxrce_fini_service_memory+0x22>
 80105f4:	4803      	ldr	r0, [pc, #12]	@ (8010604 <rmw_uxrce_fini_service_memory+0x28>)
 80105f6:	f008 fdc5 	bl	8019184 <put_memory>
 80105fa:	2300      	movs	r3, #0
 80105fc:	6063      	str	r3, [r4, #4]
 80105fe:	bd10      	pop	{r4, pc}
 8010600:	0801d764 	.word	0x0801d764
 8010604:	24012f14 	.word	0x24012f14

08010608 <rmw_uxrce_fini_client_memory>:
 8010608:	b510      	push	{r4, lr}
 801060a:	4604      	mov	r4, r0
 801060c:	6800      	ldr	r0, [r0, #0]
 801060e:	b128      	cbz	r0, 801061c <rmw_uxrce_fini_client_memory+0x14>
 8010610:	4b06      	ldr	r3, [pc, #24]	@ (801062c <rmw_uxrce_fini_client_memory+0x24>)
 8010612:	6819      	ldr	r1, [r3, #0]
 8010614:	f7ef fe64 	bl	80002e0 <strcmp>
 8010618:	b938      	cbnz	r0, 801062a <rmw_uxrce_fini_client_memory+0x22>
 801061a:	6020      	str	r0, [r4, #0]
 801061c:	6861      	ldr	r1, [r4, #4]
 801061e:	b121      	cbz	r1, 801062a <rmw_uxrce_fini_client_memory+0x22>
 8010620:	4803      	ldr	r0, [pc, #12]	@ (8010630 <rmw_uxrce_fini_client_memory+0x28>)
 8010622:	f008 fdaf 	bl	8019184 <put_memory>
 8010626:	2300      	movs	r3, #0
 8010628:	6063      	str	r3, [r4, #4]
 801062a:	bd10      	pop	{r4, pc}
 801062c:	0801d764 	.word	0x0801d764
 8010630:	2400e624 	.word	0x2400e624

08010634 <rmw_uxrce_fini_topic_memory>:
 8010634:	b510      	push	{r4, lr}
 8010636:	4604      	mov	r4, r0
 8010638:	4803      	ldr	r0, [pc, #12]	@ (8010648 <rmw_uxrce_fini_topic_memory+0x14>)
 801063a:	4621      	mov	r1, r4
 801063c:	f008 fda2 	bl	8019184 <put_memory>
 8010640:	2300      	movs	r3, #0
 8010642:	61a3      	str	r3, [r4, #24]
 8010644:	bd10      	pop	{r4, pc}
 8010646:	bf00      	nop
 8010648:	24012f54 	.word	0x24012f54

0801064c <rmw_uxrce_get_static_input_buffer_for_entity>:
 801064c:	b082      	sub	sp, #8
 801064e:	492b      	ldr	r1, [pc, #172]	@ (80106fc <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 8010650:	b530      	push	{r4, r5, lr}
 8010652:	680d      	ldr	r5, [r1, #0]
 8010654:	ac03      	add	r4, sp, #12
 8010656:	e884 000c 	stmia.w	r4, {r2, r3}
 801065a:	461c      	mov	r4, r3
 801065c:	2d00      	cmp	r5, #0
 801065e:	d04b      	beq.n	80106f8 <rmw_uxrce_get_static_input_buffer_for_entity+0xac>
 8010660:	462b      	mov	r3, r5
 8010662:	2100      	movs	r1, #0
 8010664:	689a      	ldr	r2, [r3, #8]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 801066c:	4290      	cmp	r0, r2
 801066e:	bf08      	it	eq
 8010670:	3101      	addeq	r1, #1
 8010672:	2b00      	cmp	r3, #0
 8010674:	d1f6      	bne.n	8010664 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 8010676:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801067a:	2b02      	cmp	r3, #2
 801067c:	d029      	beq.n	80106d2 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 801067e:	d820      	bhi.n	80106c2 <rmw_uxrce_get_static_input_buffer_for_entity+0x76>
 8010680:	428c      	cmp	r4, r1
 8010682:	d828      	bhi.n	80106d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 8010684:	fab4 f284 	clz	r2, r4
 8010688:	0952      	lsrs	r2, r2, #5
 801068a:	b324      	cbz	r4, 80106d6 <rmw_uxrce_get_static_input_buffer_for_entity+0x8a>
 801068c:	b1dd      	cbz	r5, 80106c6 <rmw_uxrce_get_static_input_buffer_for_entity+0x7a>
 801068e:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8010692:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 8010696:	e001      	b.n	801069c <rmw_uxrce_get_static_input_buffer_for_entity+0x50>
 8010698:	686d      	ldr	r5, [r5, #4]
 801069a:	b1ad      	cbz	r5, 80106c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 801069c:	68ab      	ldr	r3, [r5, #8]
 801069e:	f8d3 1814 	ldr.w	r1, [r3, #2068]	@ 0x814
 80106a2:	4288      	cmp	r0, r1
 80106a4:	d1f8      	bne.n	8010698 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80106a6:	f8d3 1818 	ldr.w	r1, [r3, #2072]	@ 0x818
 80106aa:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 80106ae:	4561      	cmp	r1, ip
 80106b0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80106b4:	eb73 0e04 	sbcs.w	lr, r3, r4
 80106b8:	daee      	bge.n	8010698 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80106ba:	468c      	mov	ip, r1
 80106bc:	461c      	mov	r4, r3
 80106be:	462a      	mov	r2, r5
 80106c0:	e7ea      	b.n	8010698 <rmw_uxrce_get_static_input_buffer_for_entity+0x4c>
 80106c2:	2b03      	cmp	r3, #3
 80106c4:	d0dc      	beq.n	8010680 <rmw_uxrce_get_static_input_buffer_for_entity+0x34>
 80106c6:	2200      	movs	r2, #0
 80106c8:	4610      	mov	r0, r2
 80106ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106ce:	b002      	add	sp, #8
 80106d0:	4770      	bx	lr
 80106d2:	428c      	cmp	r4, r1
 80106d4:	d905      	bls.n	80106e2 <rmw_uxrce_get_static_input_buffer_for_entity+0x96>
 80106d6:	4809      	ldr	r0, [pc, #36]	@ (80106fc <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80106d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106dc:	b002      	add	sp, #8
 80106de:	f008 bd41 	b.w	8019164 <get_memory>
 80106e2:	fab4 f284 	clz	r2, r4
 80106e6:	0952      	lsrs	r2, r2, #5
 80106e8:	2c00      	cmp	r4, #0
 80106ea:	d1ed      	bne.n	80106c8 <rmw_uxrce_get_static_input_buffer_for_entity+0x7c>
 80106ec:	4803      	ldr	r0, [pc, #12]	@ (80106fc <rmw_uxrce_get_static_input_buffer_for_entity+0xb0>)
 80106ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80106f2:	b002      	add	sp, #8
 80106f4:	f008 bd36 	b.w	8019164 <get_memory>
 80106f8:	4629      	mov	r1, r5
 80106fa:	e7bc      	b.n	8010676 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 80106fc:	24012f34 	.word	0x24012f34

08010700 <rmw_uxrce_find_static_input_buffer_by_owner>:
 8010700:	4b12      	ldr	r3, [pc, #72]	@ (801074c <rmw_uxrce_find_static_input_buffer_by_owner+0x4c>)
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	b530      	push	{r4, r5, lr}
 8010706:	b1f3      	cbz	r3, 8010746 <rmw_uxrce_find_static_input_buffer_by_owner+0x46>
 8010708:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 801070c:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 8010710:	2400      	movs	r4, #0
 8010712:	e001      	b.n	8010718 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	b1a3      	cbz	r3, 8010742 <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 8010718:	689a      	ldr	r2, [r3, #8]
 801071a:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 801071e:	4288      	cmp	r0, r1
 8010720:	d1f8      	bne.n	8010714 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010722:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 8010726:	f502 6202 	add.w	r2, r2, #2080	@ 0x820
 801072a:	4571      	cmp	r1, lr
 801072c:	f852 2c04 	ldr.w	r2, [r2, #-4]
 8010730:	eb72 050c 	sbcs.w	r5, r2, ip
 8010734:	daee      	bge.n	8010714 <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 8010736:	461c      	mov	r4, r3
 8010738:	685b      	ldr	r3, [r3, #4]
 801073a:	468e      	mov	lr, r1
 801073c:	4694      	mov	ip, r2
 801073e:	2b00      	cmp	r3, #0
 8010740:	d1ea      	bne.n	8010718 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 8010742:	4620      	mov	r0, r4
 8010744:	bd30      	pop	{r4, r5, pc}
 8010746:	461c      	mov	r4, r3
 8010748:	4620      	mov	r0, r4
 801074a:	bd30      	pop	{r4, r5, pc}
 801074c:	24012f34 	.word	0x24012f34

08010750 <rmw_uxrce_clean_expired_static_input_buffer>:
 8010750:	4b3d      	ldr	r3, [pc, #244]	@ (8010848 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 8010752:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010756:	681f      	ldr	r7, [r3, #0]
 8010758:	ed2d 8b06 	vpush	{d8-d10}
 801075c:	b08d      	sub	sp, #52	@ 0x34
 801075e:	f7ff fd73 	bl	8010248 <rmw_uros_epoch_nanos>
 8010762:	2f00      	cmp	r7, #0
 8010764:	d05d      	beq.n	8010822 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 8010766:	46b8      	mov	r8, r7
 8010768:	4681      	mov	r9, r0
 801076a:	468a      	mov	sl, r1
 801076c:	ac04      	add	r4, sp, #16
 801076e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010772:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010776:	2b04      	cmp	r3, #4
 8010778:	ed9f 8b2d 	vldr	d8, [pc, #180]	@ 8010830 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 801077c:	ed9f ab2e 	vldr	d10, [pc, #184]	@ 8010838 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 8010780:	ed9f 9b2f 	vldr	d9, [pc, #188]	@ 8010840 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 8010784:	d03f      	beq.n	8010806 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 8010786:	2b05      	cmp	r3, #5
 8010788:	d044      	beq.n	8010814 <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 801078a:	2b03      	cmp	r3, #3
 801078c:	d03b      	beq.n	8010806 <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 801078e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010792:	ed8d ab06 	vstr	d10, [sp, #24]
 8010796:	ab08      	add	r3, sp, #32
 8010798:	ed8d 8b08 	vstr	d8, [sp, #32]
 801079c:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 80107a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80107a2:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 80107a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80107aa:	f008 fa15 	bl	8018bd8 <rmw_time_equal>
 80107ae:	b118      	cbz	r0, 80107b8 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 80107b0:	ed8d 9b04 	vstr	d9, [sp, #16]
 80107b4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80107b8:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 80107bc:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 80107c0:	f855 7c04 	ldr.w	r7, [r5, #-4]
 80107c4:	f8d8 b004 	ldr.w	fp, [r8, #4]
 80107c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80107cc:	f008 fa5a 	bl	8018c84 <rmw_time_total_nsec>
 80107d0:	1830      	adds	r0, r6, r0
 80107d2:	eb47 0101 	adc.w	r1, r7, r1
 80107d6:	4548      	cmp	r0, r9
 80107d8:	eb71 030a 	sbcs.w	r3, r1, sl
 80107dc:	db05      	blt.n	80107ea <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 80107de:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 80107e2:	4591      	cmp	r9, r2
 80107e4:	eb7a 0303 	sbcs.w	r3, sl, r3
 80107e8:	da03      	bge.n	80107f2 <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 80107ea:	4641      	mov	r1, r8
 80107ec:	4816      	ldr	r0, [pc, #88]	@ (8010848 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 80107ee:	f008 fcc9 	bl	8019184 <put_memory>
 80107f2:	f1bb 0f00 	cmp.w	fp, #0
 80107f6:	d014      	beq.n	8010822 <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 80107f8:	46d8      	mov	r8, fp
 80107fa:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80107fe:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 8010802:	2b04      	cmp	r3, #4
 8010804:	d1bf      	bne.n	8010786 <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 8010806:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 801080a:	3340      	adds	r3, #64	@ 0x40
 801080c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801080e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010812:	e7c0      	b.n	8010796 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010814:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 8010818:	3348      	adds	r3, #72	@ 0x48
 801081a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801081c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8010820:	e7b9      	b.n	8010796 <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 8010822:	b00d      	add	sp, #52	@ 0x34
 8010824:	ecbd 8b06 	vpop	{d8-d10}
 8010828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801082c:	f3af 8000 	nop.w
	...
 8010838:	00000001 	.word	0x00000001
 801083c:	00000000 	.word	0x00000000
 8010840:	0000001e 	.word	0x0000001e
 8010844:	00000000 	.word	0x00000000
 8010848:	24012f34 	.word	0x24012f34

0801084c <run_xrce_session>:
 801084c:	b510      	push	{r4, lr}
 801084e:	788c      	ldrb	r4, [r1, #2]
 8010850:	b086      	sub	sp, #24
 8010852:	2c01      	cmp	r4, #1
 8010854:	f8ad 200e 	strh.w	r2, [sp, #14]
 8010858:	d00c      	beq.n	8010874 <run_xrce_session+0x28>
 801085a:	2401      	movs	r4, #1
 801085c:	4619      	mov	r1, r3
 801085e:	f10d 020e 	add.w	r2, sp, #14
 8010862:	f10d 0317 	add.w	r3, sp, #23
 8010866:	9400      	str	r4, [sp, #0]
 8010868:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801086c:	f002 fca4 	bl	80131b8 <uxr_run_session_until_all_status>
 8010870:	b006      	add	sp, #24
 8010872:	bd10      	pop	{r4, pc}
 8010874:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8010878:	f002 f8c0 	bl	80129fc <uxr_flash_output_streams>
 801087c:	4620      	mov	r0, r4
 801087e:	b006      	add	sp, #24
 8010880:	bd10      	pop	{r4, pc}
 8010882:	bf00      	nop

08010884 <convert_qos_profile>:
 8010884:	7a4a      	ldrb	r2, [r1, #9]
 8010886:	f891 c008 	ldrb.w	ip, [r1, #8]
 801088a:	2a02      	cmp	r2, #2
 801088c:	bf18      	it	ne
 801088e:	2200      	movne	r2, #0
 8010890:	7002      	strb	r2, [r0, #0]
 8010892:	f1ac 0202 	sub.w	r2, ip, #2
 8010896:	fab2 f282 	clz	r2, r2
 801089a:	0952      	lsrs	r2, r2, #5
 801089c:	7042      	strb	r2, [r0, #1]
 801089e:	780a      	ldrb	r2, [r1, #0]
 80108a0:	8889      	ldrh	r1, [r1, #4]
 80108a2:	f1a2 0202 	sub.w	r2, r2, #2
 80108a6:	8081      	strh	r1, [r0, #4]
 80108a8:	fab2 f282 	clz	r2, r2
 80108ac:	0952      	lsrs	r2, r2, #5
 80108ae:	7082      	strb	r2, [r0, #2]
 80108b0:	4770      	bx	lr
 80108b2:	bf00      	nop

080108b4 <generate_type_name>:
 80108b4:	2300      	movs	r3, #0
 80108b6:	b530      	push	{r4, r5, lr}
 80108b8:	700b      	strb	r3, [r1, #0]
 80108ba:	b087      	sub	sp, #28
 80108bc:	6803      	ldr	r3, [r0, #0]
 80108be:	4614      	mov	r4, r2
 80108c0:	b1bb      	cbz	r3, 80108f2 <generate_type_name+0x3e>
 80108c2:	4a0e      	ldr	r2, [pc, #56]	@ (80108fc <generate_type_name+0x48>)
 80108c4:	4615      	mov	r5, r2
 80108c6:	9500      	str	r5, [sp, #0]
 80108c8:	9203      	str	r2, [sp, #12]
 80108ca:	4d0d      	ldr	r5, [pc, #52]	@ (8010900 <generate_type_name+0x4c>)
 80108cc:	6842      	ldr	r2, [r0, #4]
 80108ce:	4608      	mov	r0, r1
 80108d0:	490c      	ldr	r1, [pc, #48]	@ (8010904 <generate_type_name+0x50>)
 80108d2:	9204      	str	r2, [sp, #16]
 80108d4:	9105      	str	r1, [sp, #20]
 80108d6:	9102      	str	r1, [sp, #8]
 80108d8:	4621      	mov	r1, r4
 80108da:	4a0b      	ldr	r2, [pc, #44]	@ (8010908 <generate_type_name+0x54>)
 80108dc:	9501      	str	r5, [sp, #4]
 80108de:	f00b f8f1 	bl	801bac4 <sniprintf>
 80108e2:	2800      	cmp	r0, #0
 80108e4:	bfa8      	it	ge
 80108e6:	4284      	cmpge	r4, r0
 80108e8:	bfcc      	ite	gt
 80108ea:	2001      	movgt	r0, #1
 80108ec:	2000      	movle	r0, #0
 80108ee:	b007      	add	sp, #28
 80108f0:	bd30      	pop	{r4, r5, pc}
 80108f2:	4b06      	ldr	r3, [pc, #24]	@ (801090c <generate_type_name+0x58>)
 80108f4:	4a01      	ldr	r2, [pc, #4]	@ (80108fc <generate_type_name+0x48>)
 80108f6:	461d      	mov	r5, r3
 80108f8:	e7e5      	b.n	80108c6 <generate_type_name+0x12>
 80108fa:	bf00      	nop
 80108fc:	0801ce30 	.word	0x0801ce30
 8010900:	0801ce48 	.word	0x0801ce48
 8010904:	0801ce44 	.word	0x0801ce44
 8010908:	0801ce34 	.word	0x0801ce34
 801090c:	0801d850 	.word	0x0801d850

08010910 <generate_topic_name>:
 8010910:	b530      	push	{r4, r5, lr}
 8010912:	4614      	mov	r4, r2
 8010914:	b083      	sub	sp, #12
 8010916:	4605      	mov	r5, r0
 8010918:	4b07      	ldr	r3, [pc, #28]	@ (8010938 <generate_topic_name+0x28>)
 801091a:	4a08      	ldr	r2, [pc, #32]	@ (801093c <generate_topic_name+0x2c>)
 801091c:	4608      	mov	r0, r1
 801091e:	9500      	str	r5, [sp, #0]
 8010920:	4621      	mov	r1, r4
 8010922:	f00b f8cf 	bl	801bac4 <sniprintf>
 8010926:	2800      	cmp	r0, #0
 8010928:	bfa8      	it	ge
 801092a:	4284      	cmpge	r4, r0
 801092c:	bfcc      	ite	gt
 801092e:	2001      	movgt	r0, #1
 8010930:	2000      	movle	r0, #0
 8010932:	b003      	add	sp, #12
 8010934:	bd30      	pop	{r4, r5, pc}
 8010936:	bf00      	nop
 8010938:	0801ce54 	.word	0x0801ce54
 801093c:	0801ce4c 	.word	0x0801ce4c

08010940 <is_uxrce_rmw_identifier_valid>:
 8010940:	b510      	push	{r4, lr}
 8010942:	4604      	mov	r4, r0
 8010944:	b140      	cbz	r0, 8010958 <is_uxrce_rmw_identifier_valid+0x18>
 8010946:	f008 fc75 	bl	8019234 <rmw_get_implementation_identifier>
 801094a:	4601      	mov	r1, r0
 801094c:	4620      	mov	r0, r4
 801094e:	f7ef fcc7 	bl	80002e0 <strcmp>
 8010952:	fab0 f080 	clz	r0, r0
 8010956:	0940      	lsrs	r0, r0, #5
 8010958:	bd10      	pop	{r4, pc}
 801095a:	bf00      	nop

0801095c <get_message_typesupport_handle>:
 801095c:	6883      	ldr	r3, [r0, #8]
 801095e:	4718      	bx	r3

08010960 <get_message_typesupport_handle_function>:
 8010960:	b510      	push	{r4, lr}
 8010962:	4604      	mov	r4, r0
 8010964:	6800      	ldr	r0, [r0, #0]
 8010966:	f7ef fcbb 	bl	80002e0 <strcmp>
 801096a:	2800      	cmp	r0, #0
 801096c:	bf0c      	ite	eq
 801096e:	4620      	moveq	r0, r4
 8010970:	2000      	movne	r0, #0
 8010972:	bd10      	pop	{r4, pc}

08010974 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 8010974:	4b04      	ldr	r3, [pc, #16]	@ (8010988 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 8010976:	681a      	ldr	r2, [r3, #0]
 8010978:	b10a      	cbz	r2, 801097e <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0xa>
 801097a:	4803      	ldr	r0, [pc, #12]	@ (8010988 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 801097c:	4770      	bx	lr
 801097e:	4a03      	ldr	r2, [pc, #12]	@ (801098c <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x18>)
 8010980:	4801      	ldr	r0, [pc, #4]	@ (8010988 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>)
 8010982:	6812      	ldr	r2, [r2, #0]
 8010984:	601a      	str	r2, [r3, #0]
 8010986:	4770      	bx	lr
 8010988:	24000050 	.word	0x24000050
 801098c:	240001b4 	.word	0x240001b4

08010990 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 8010990:	4a02      	ldr	r2, [pc, #8]	@ (801099c <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0xc>)
 8010992:	4b03      	ldr	r3, [pc, #12]	@ (80109a0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x10>)
 8010994:	6812      	ldr	r2, [r2, #0]
 8010996:	601a      	str	r2, [r3, #0]
 8010998:	4770      	bx	lr
 801099a:	bf00      	nop
 801099c:	240001b4 	.word	0x240001b4
 80109a0:	24000050 	.word	0x24000050

080109a4 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__size_function__Float32MultiArray__data>:
 80109a4:	6840      	ldr	r0, [r0, #4]
 80109a6:	4770      	bx	lr

080109a8 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__get_const_function__Float32MultiArray__data>:
 80109a8:	6800      	ldr	r0, [r0, #0]
 80109aa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80109ae:	4770      	bx	lr

080109b0 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__fetch_function__Float32MultiArray__data>:
 80109b0:	6803      	ldr	r3, [r0, #0]
 80109b2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80109b6:	680b      	ldr	r3, [r1, #0]
 80109b8:	6013      	str	r3, [r2, #0]
 80109ba:	4770      	bx	lr

080109bc <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__assign_function__Float32MultiArray__data>:
 80109bc:	6803      	ldr	r3, [r0, #0]
 80109be:	6812      	ldr	r2, [r2, #0]
 80109c0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80109c4:	600a      	str	r2, [r1, #0]
 80109c6:	4770      	bx	lr

080109c8 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__Float32MultiArray_init_function>:
 80109c8:	f009 b82c 	b.w	8019a24 <std_msgs__msg__Float32MultiArray__init>

080109cc <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__Float32MultiArray_fini_function>:
 80109cc:	f009 b84e 	b.w	8019a6c <std_msgs__msg__Float32MultiArray__fini>

080109d0 <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__resize_function__Float32MultiArray__data>:
 80109d0:	b510      	push	{r4, lr}
 80109d2:	4604      	mov	r4, r0
 80109d4:	b082      	sub	sp, #8
 80109d6:	9101      	str	r1, [sp, #4]
 80109d8:	f008 ffe2 	bl	80199a0 <rosidl_runtime_c__float__Sequence__fini>
 80109dc:	9901      	ldr	r1, [sp, #4]
 80109de:	4620      	mov	r0, r4
 80109e0:	b002      	add	sp, #8
 80109e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109e6:	f008 bfc3 	b.w	8019970 <rosidl_runtime_c__float__Sequence__init>
 80109ea:	bf00      	nop

080109ec <std_msgs__msg__Float32MultiArray__rosidl_typesupport_introspection_c__get_function__Float32MultiArray__data>:
 80109ec:	6800      	ldr	r0, [r0, #0]
 80109ee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80109f2:	4770      	bx	lr

080109f4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 80109f4:	b508      	push	{r3, lr}
 80109f6:	f000 f857 	bl	8010aa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 80109fa:	4b06      	ldr	r3, [pc, #24]	@ (8010a14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 80109fc:	4906      	ldr	r1, [pc, #24]	@ (8010a18 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x24>)
 80109fe:	681a      	ldr	r2, [r3, #0]
 8010a00:	60c8      	str	r0, [r1, #12]
 8010a02:	b10a      	cbz	r2, 8010a08 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x14>
 8010a04:	4803      	ldr	r0, [pc, #12]	@ (8010a14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 8010a06:	bd08      	pop	{r3, pc}
 8010a08:	4a04      	ldr	r2, [pc, #16]	@ (8010a1c <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x28>)
 8010a0a:	4802      	ldr	r0, [pc, #8]	@ (8010a14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x20>)
 8010a0c:	6812      	ldr	r2, [r2, #0]
 8010a0e:	601a      	str	r2, [r3, #0]
 8010a10:	bd08      	pop	{r3, pc}
 8010a12:	bf00      	nop
 8010a14:	240000d4 	.word	0x240000d4
 8010a18:	2400005c 	.word	0x2400005c
 8010a1c:	240001b8 	.word	0x240001b8

08010a20 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__size_function__MultiArrayLayout__dim>:
 8010a20:	6840      	ldr	r0, [r0, #4]
 8010a22:	4770      	bx	lr

08010a24 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_const_function__MultiArrayLayout__dim>:
 8010a24:	6800      	ldr	r0, [r0, #0]
 8010a26:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010a2a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010a2e:	4770      	bx	lr

08010a30 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__fetch_function__MultiArrayLayout__dim>:
 8010a30:	6803      	ldr	r3, [r0, #0]
 8010a32:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010a36:	4694      	mov	ip, r2
 8010a38:	b500      	push	{lr}
 8010a3a:	eb03 0e81 	add.w	lr, r3, r1, lsl #2
 8010a3e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a46:	f8de 3000 	ldr.w	r3, [lr]
 8010a4a:	f8cc 3000 	str.w	r3, [ip]
 8010a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a52:	bf00      	nop

08010a54 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__assign_function__MultiArrayLayout__dim>:
 8010a54:	6803      	ldr	r3, [r0, #0]
 8010a56:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010a5a:	b500      	push	{lr}
 8010a5c:	4696      	mov	lr, r2
 8010a5e:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
 8010a62:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010a66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010a6a:	f8de 3000 	ldr.w	r3, [lr]
 8010a6e:	f8cc 3000 	str.w	r3, [ip]
 8010a72:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a76:	bf00      	nop

08010a78 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_init_function>:
 8010a78:	f009 b88c 	b.w	8019b94 <std_msgs__msg__MultiArrayLayout__init>

08010a7c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__MultiArrayLayout_fini_function>:
 8010a7c:	f009 b89c 	b.w	8019bb8 <std_msgs__msg__MultiArrayLayout__fini>

08010a80 <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__resize_function__MultiArrayLayout__dim>:
 8010a80:	b510      	push	{r4, lr}
 8010a82:	4604      	mov	r4, r0
 8010a84:	b082      	sub	sp, #8
 8010a86:	9101      	str	r1, [sp, #4]
 8010a88:	f009 f85c 	bl	8019b44 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8010a8c:	9901      	ldr	r1, [sp, #4]
 8010a8e:	4620      	mov	r0, r4
 8010a90:	b002      	add	sp, #8
 8010a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a96:	f009 b851 	b.w	8019b3c <std_msgs__msg__MultiArrayDimension__Sequence__init>
 8010a9a:	bf00      	nop

08010a9c <std_msgs__msg__MultiArrayLayout__rosidl_typesupport_introspection_c__get_function__MultiArrayLayout__dim>:
 8010a9c:	6800      	ldr	r0, [r0, #0]
 8010a9e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010aa2:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8010aa6:	4770      	bx	lr

08010aa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8010aa8:	b508      	push	{r3, lr}
 8010aaa:	f009 f88d 	bl	8019bc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010aae:	4b06      	ldr	r3, [pc, #24]	@ (8010ac8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8010ab0:	4906      	ldr	r1, [pc, #24]	@ (8010acc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x24>)
 8010ab2:	681a      	ldr	r2, [r3, #0]
 8010ab4:	60c8      	str	r0, [r1, #12]
 8010ab6:	b10a      	cbz	r2, 8010abc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x14>
 8010ab8:	4803      	ldr	r0, [pc, #12]	@ (8010ac8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8010aba:	bd08      	pop	{r3, pc}
 8010abc:	4a04      	ldr	r2, [pc, #16]	@ (8010ad0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x28>)
 8010abe:	4802      	ldr	r0, [pc, #8]	@ (8010ac8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x20>)
 8010ac0:	6812      	ldr	r2, [r2, #0]
 8010ac2:	601a      	str	r2, [r3, #0]
 8010ac4:	bd08      	pop	{r3, pc}
 8010ac6:	bf00      	nop
 8010ac8:	24000158 	.word	0x24000158
 8010acc:	240000e0 	.word	0x240000e0
 8010ad0:	240001b8 	.word	0x240001b8

08010ad4 <_Float32MultiArray__max_serialized_size>:
 8010ad4:	b500      	push	{lr}
 8010ad6:	b083      	sub	sp, #12
 8010ad8:	2301      	movs	r3, #1
 8010ada:	2100      	movs	r1, #0
 8010adc:	f10d 0007 	add.w	r0, sp, #7
 8010ae0:	f88d 3007 	strb.w	r3, [sp, #7]
 8010ae4:	f000 f91c 	bl	8010d20 <max_serialized_size_std_msgs__msg__MultiArrayLayout>
 8010ae8:	b003      	add	sp, #12
 8010aea:	f85d fb04 	ldr.w	pc, [sp], #4
 8010aee:	bf00      	nop

08010af0 <get_serialized_size_std_msgs__msg__Float32MultiArray>:
 8010af0:	b570      	push	{r4, r5, r6, lr}
 8010af2:	4604      	mov	r4, r0
 8010af4:	b160      	cbz	r0, 8010b10 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x20>
 8010af6:	460d      	mov	r5, r1
 8010af8:	f000 f8b6 	bl	8010c68 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8010afc:	6966      	ldr	r6, [r4, #20]
 8010afe:	2104      	movs	r1, #4
 8010b00:	182c      	adds	r4, r5, r0
 8010b02:	4620      	mov	r0, r4
 8010b04:	f001 fa28 	bl	8011f58 <ucdr_alignment>
 8010b08:	1d03      	adds	r3, r0, #4
 8010b0a:	441c      	add	r4, r3
 8010b0c:	b90e      	cbnz	r6, 8010b12 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x22>
 8010b0e:	1b60      	subs	r0, r4, r5
 8010b10:	bd70      	pop	{r4, r5, r6, pc}
 8010b12:	4620      	mov	r0, r4
 8010b14:	2104      	movs	r1, #4
 8010b16:	f001 fa1f 	bl	8011f58 <ucdr_alignment>
 8010b1a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8010b1e:	181c      	adds	r4, r3, r0
 8010b20:	1b60      	subs	r0, r4, r5
 8010b22:	e7f5      	b.n	8010b10 <get_serialized_size_std_msgs__msg__Float32MultiArray+0x20>

08010b24 <_Float32MultiArray__cdr_deserialize>:
 8010b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b26:	460c      	mov	r4, r1
 8010b28:	b083      	sub	sp, #12
 8010b2a:	b1d9      	cbz	r1, 8010b64 <_Float32MultiArray__cdr_deserialize+0x40>
 8010b2c:	4606      	mov	r6, r0
 8010b2e:	f000 f901 	bl	8010d34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8010b32:	4603      	mov	r3, r0
 8010b34:	4621      	mov	r1, r4
 8010b36:	4630      	mov	r0, r6
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	68db      	ldr	r3, [r3, #12]
 8010b3c:	4798      	blx	r3
 8010b3e:	69a7      	ldr	r7, [r4, #24]
 8010b40:	ab01      	add	r3, sp, #4
 8010b42:	6921      	ldr	r1, [r4, #16]
 8010b44:	463a      	mov	r2, r7
 8010b46:	4630      	mov	r0, r6
 8010b48:	f001 fae0 	bl	801210c <ucdr_deserialize_sequence_float>
 8010b4c:	9b01      	ldr	r3, [sp, #4]
 8010b4e:	4605      	mov	r5, r0
 8010b50:	b920      	cbnz	r0, 8010b5c <_Float32MultiArray__cdr_deserialize+0x38>
 8010b52:	429f      	cmp	r7, r3
 8010b54:	d30a      	bcc.n	8010b6c <_Float32MultiArray__cdr_deserialize+0x48>
 8010b56:	4628      	mov	r0, r5
 8010b58:	b003      	add	sp, #12
 8010b5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b5c:	4628      	mov	r0, r5
 8010b5e:	6163      	str	r3, [r4, #20]
 8010b60:	b003      	add	sp, #12
 8010b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b64:	460d      	mov	r5, r1
 8010b66:	4628      	mov	r0, r5
 8010b68:	b003      	add	sp, #12
 8010b6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	4630      	mov	r0, r6
 8010b70:	75b5      	strb	r5, [r6, #22]
 8010b72:	2104      	movs	r1, #4
 8010b74:	7573      	strb	r3, [r6, #21]
 8010b76:	6165      	str	r5, [r4, #20]
 8010b78:	f001 fa06 	bl	8011f88 <ucdr_align_to>
 8010b7c:	9901      	ldr	r1, [sp, #4]
 8010b7e:	4630      	mov	r0, r6
 8010b80:	0089      	lsls	r1, r1, #2
 8010b82:	f001 fa39 	bl	8011ff8 <ucdr_advance_buffer>
 8010b86:	4628      	mov	r0, r5
 8010b88:	b003      	add	sp, #12
 8010b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010b8c <_Float32MultiArray__cdr_serialize>:
 8010b8c:	b188      	cbz	r0, 8010bb2 <_Float32MultiArray__cdr_serialize+0x26>
 8010b8e:	b538      	push	{r3, r4, r5, lr}
 8010b90:	4604      	mov	r4, r0
 8010b92:	460d      	mov	r5, r1
 8010b94:	f000 f8ce 	bl	8010d34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	4629      	mov	r1, r5
 8010b9c:	4620      	mov	r0, r4
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	689b      	ldr	r3, [r3, #8]
 8010ba2:	4798      	blx	r3
 8010ba4:	4628      	mov	r0, r5
 8010ba6:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 8010baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010bae:	f001 ba9b 	b.w	80120e8 <ucdr_serialize_sequence_float>
 8010bb2:	4770      	bx	lr

08010bb4 <_Float32MultiArray__get_serialized_size>:
 8010bb4:	b538      	push	{r3, r4, r5, lr}
 8010bb6:	4604      	mov	r4, r0
 8010bb8:	b150      	cbz	r0, 8010bd0 <_Float32MultiArray__get_serialized_size+0x1c>
 8010bba:	2100      	movs	r1, #0
 8010bbc:	f000 f854 	bl	8010c68 <get_serialized_size_std_msgs__msg__MultiArrayLayout>
 8010bc0:	6965      	ldr	r5, [r4, #20]
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	2104      	movs	r1, #4
 8010bc6:	f001 f9c7 	bl	8011f58 <ucdr_alignment>
 8010bca:	4404      	add	r4, r0
 8010bcc:	3404      	adds	r4, #4
 8010bce:	b90d      	cbnz	r5, 8010bd4 <_Float32MultiArray__get_serialized_size+0x20>
 8010bd0:	4620      	mov	r0, r4
 8010bd2:	bd38      	pop	{r3, r4, r5, pc}
 8010bd4:	4620      	mov	r0, r4
 8010bd6:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8010bda:	2104      	movs	r1, #4
 8010bdc:	f001 f9bc 	bl	8011f58 <ucdr_alignment>
 8010be0:	4404      	add	r4, r0
 8010be2:	4620      	mov	r0, r4
 8010be4:	bd38      	pop	{r3, r4, r5, pc}
 8010be6:	bf00      	nop

08010be8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray>:
 8010be8:	4800      	ldr	r0, [pc, #0]	@ (8010bec <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Float32MultiArray+0x4>)
 8010bea:	4770      	bx	lr
 8010bec:	24000164 	.word	0x24000164

08010bf0 <_MultiArrayLayout__max_serialized_size>:
 8010bf0:	2104      	movs	r1, #4
 8010bf2:	2000      	movs	r0, #0
 8010bf4:	b508      	push	{r3, lr}
 8010bf6:	f001 f9af 	bl	8011f58 <ucdr_alignment>
 8010bfa:	3004      	adds	r0, #4
 8010bfc:	bd08      	pop	{r3, pc}
 8010bfe:	bf00      	nop

08010c00 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>:
 8010c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c04:	4689      	mov	r9, r1
 8010c06:	4607      	mov	r7, r0
 8010c08:	2104      	movs	r1, #4
 8010c0a:	4648      	mov	r0, r9
 8010c0c:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8010c10:	f001 f9a2 	bl	8011f58 <ucdr_alignment>
 8010c14:	f109 0304 	add.w	r3, r9, #4
 8010c18:	18c6      	adds	r6, r0, r3
 8010c1a:	f1b8 0f00 	cmp.w	r8, #0
 8010c1e:	d018      	beq.n	8010c52 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x52>
 8010c20:	2500      	movs	r5, #0
 8010c22:	f009 f86f 	bl	8019d04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010c26:	683a      	ldr	r2, [r7, #0]
 8010c28:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 8010c2c:	6843      	ldr	r3, [r0, #4]
 8010c2e:	4631      	mov	r1, r6
 8010c30:	3501      	adds	r5, #1
 8010c32:	eb02 0084 	add.w	r0, r2, r4, lsl #2
 8010c36:	695b      	ldr	r3, [r3, #20]
 8010c38:	4798      	blx	r3
 8010c3a:	4604      	mov	r4, r0
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	2c04      	cmp	r4, #4
 8010c40:	4621      	mov	r1, r4
 8010c42:	bf28      	it	cs
 8010c44:	2104      	movcs	r1, #4
 8010c46:	f001 f987 	bl	8011f58 <ucdr_alignment>
 8010c4a:	45a8      	cmp	r8, r5
 8010c4c:	4404      	add	r4, r0
 8010c4e:	4426      	add	r6, r4
 8010c50:	d1e7      	bne.n	8010c22 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0+0x22>
 8010c52:	f1c9 0904 	rsb	r9, r9, #4
 8010c56:	4630      	mov	r0, r6
 8010c58:	2104      	movs	r1, #4
 8010c5a:	444e      	add	r6, r9
 8010c5c:	f001 f97c 	bl	8011f58 <ucdr_alignment>
 8010c60:	4430      	add	r0, r6
 8010c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c66:	bf00      	nop

08010c68 <get_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8010c68:	b108      	cbz	r0, 8010c6e <get_serialized_size_std_msgs__msg__MultiArrayLayout+0x6>
 8010c6a:	f7ff bfc9 	b.w	8010c00 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8010c6e:	4770      	bx	lr

08010c70 <_MultiArrayLayout__get_serialized_size>:
 8010c70:	b110      	cbz	r0, 8010c78 <_MultiArrayLayout__get_serialized_size+0x8>
 8010c72:	2100      	movs	r1, #0
 8010c74:	f7ff bfc4 	b.w	8010c00 <get_serialized_size_std_msgs__msg__MultiArrayLayout.part.0>
 8010c78:	4770      	bx	lr
 8010c7a:	bf00      	nop

08010c7c <_MultiArrayLayout__cdr_deserialize>:
 8010c7c:	b349      	cbz	r1, 8010cd2 <_MultiArrayLayout__cdr_deserialize+0x56>
 8010c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c80:	b083      	sub	sp, #12
 8010c82:	460e      	mov	r6, r1
 8010c84:	4607      	mov	r7, r0
 8010c86:	a901      	add	r1, sp, #4
 8010c88:	f000 fbcc 	bl	8011424 <ucdr_deserialize_uint32_t>
 8010c8c:	9b01      	ldr	r3, [sp, #4]
 8010c8e:	68b2      	ldr	r2, [r6, #8]
 8010c90:	429a      	cmp	r2, r3
 8010c92:	d31b      	bcc.n	8010ccc <_MultiArrayLayout__cdr_deserialize+0x50>
 8010c94:	6073      	str	r3, [r6, #4]
 8010c96:	b18b      	cbz	r3, 8010cbc <_MultiArrayLayout__cdr_deserialize+0x40>
 8010c98:	2400      	movs	r4, #0
 8010c9a:	4625      	mov	r5, r4
 8010c9c:	e002      	b.n	8010ca4 <_MultiArrayLayout__cdr_deserialize+0x28>
 8010c9e:	9b01      	ldr	r3, [sp, #4]
 8010ca0:	429d      	cmp	r5, r3
 8010ca2:	d20b      	bcs.n	8010cbc <_MultiArrayLayout__cdr_deserialize+0x40>
 8010ca4:	f009 f82e 	bl	8019d04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010ca8:	6831      	ldr	r1, [r6, #0]
 8010caa:	6843      	ldr	r3, [r0, #4]
 8010cac:	4638      	mov	r0, r7
 8010cae:	4421      	add	r1, r4
 8010cb0:	3501      	adds	r5, #1
 8010cb2:	68db      	ldr	r3, [r3, #12]
 8010cb4:	3414      	adds	r4, #20
 8010cb6:	4798      	blx	r3
 8010cb8:	2800      	cmp	r0, #0
 8010cba:	d1f0      	bne.n	8010c9e <_MultiArrayLayout__cdr_deserialize+0x22>
 8010cbc:	f106 010c 	add.w	r1, r6, #12
 8010cc0:	4638      	mov	r0, r7
 8010cc2:	b003      	add	sp, #12
 8010cc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010cc8:	f000 bbac 	b.w	8011424 <ucdr_deserialize_uint32_t>
 8010ccc:	2000      	movs	r0, #0
 8010cce:	b003      	add	sp, #12
 8010cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010cd2:	2000      	movs	r0, #0
 8010cd4:	4770      	bx	lr
 8010cd6:	bf00      	nop

08010cd8 <_MultiArrayLayout__cdr_serialize>:
 8010cd8:	b308      	cbz	r0, 8010d1e <_MultiArrayLayout__cdr_serialize+0x46>
 8010cda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cdc:	6847      	ldr	r7, [r0, #4]
 8010cde:	4605      	mov	r5, r0
 8010ce0:	460e      	mov	r6, r1
 8010ce2:	4608      	mov	r0, r1
 8010ce4:	4639      	mov	r1, r7
 8010ce6:	f000 fa6d 	bl	80111c4 <ucdr_serialize_uint32_t>
 8010cea:	b190      	cbz	r0, 8010d12 <_MultiArrayLayout__cdr_serialize+0x3a>
 8010cec:	b18f      	cbz	r7, 8010d12 <_MultiArrayLayout__cdr_serialize+0x3a>
 8010cee:	2400      	movs	r4, #0
 8010cf0:	e001      	b.n	8010cf6 <_MultiArrayLayout__cdr_serialize+0x1e>
 8010cf2:	42a7      	cmp	r7, r4
 8010cf4:	d00d      	beq.n	8010d12 <_MultiArrayLayout__cdr_serialize+0x3a>
 8010cf6:	f009 f805 	bl	8019d04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>
 8010cfa:	682a      	ldr	r2, [r5, #0]
 8010cfc:	eb04 0c84 	add.w	ip, r4, r4, lsl #2
 8010d00:	6843      	ldr	r3, [r0, #4]
 8010d02:	4631      	mov	r1, r6
 8010d04:	3401      	adds	r4, #1
 8010d06:	eb02 008c 	add.w	r0, r2, ip, lsl #2
 8010d0a:	689b      	ldr	r3, [r3, #8]
 8010d0c:	4798      	blx	r3
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	d1ef      	bne.n	8010cf2 <_MultiArrayLayout__cdr_serialize+0x1a>
 8010d12:	68e9      	ldr	r1, [r5, #12]
 8010d14:	4630      	mov	r0, r6
 8010d16:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010d1a:	f000 ba53 	b.w	80111c4 <ucdr_serialize_uint32_t>
 8010d1e:	4770      	bx	lr

08010d20 <max_serialized_size_std_msgs__msg__MultiArrayLayout>:
 8010d20:	b508      	push	{r3, lr}
 8010d22:	2200      	movs	r2, #0
 8010d24:	4603      	mov	r3, r0
 8010d26:	4608      	mov	r0, r1
 8010d28:	2104      	movs	r1, #4
 8010d2a:	701a      	strb	r2, [r3, #0]
 8010d2c:	f001 f914 	bl	8011f58 <ucdr_alignment>
 8010d30:	3004      	adds	r0, #4
 8010d32:	bd08      	pop	{r3, pc}

08010d34 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout>:
 8010d34:	4800      	ldr	r0, [pc, #0]	@ (8010d38 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayLayout+0x4>)
 8010d36:	4770      	bx	lr
 8010d38:	2400018c 	.word	0x2400018c

08010d3c <ucdr_serialize_bool>:
 8010d3c:	b538      	push	{r3, r4, r5, lr}
 8010d3e:	460d      	mov	r5, r1
 8010d40:	2101      	movs	r1, #1
 8010d42:	4604      	mov	r4, r0
 8010d44:	f001 f8bc 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8010d48:	b148      	cbz	r0, 8010d5e <ucdr_serialize_bool+0x22>
 8010d4a:	68a3      	ldr	r3, [r4, #8]
 8010d4c:	2101      	movs	r1, #1
 8010d4e:	701d      	strb	r5, [r3, #0]
 8010d50:	68a2      	ldr	r2, [r4, #8]
 8010d52:	6923      	ldr	r3, [r4, #16]
 8010d54:	440a      	add	r2, r1
 8010d56:	7561      	strb	r1, [r4, #21]
 8010d58:	440b      	add	r3, r1
 8010d5a:	60a2      	str	r2, [r4, #8]
 8010d5c:	6123      	str	r3, [r4, #16]
 8010d5e:	7da0      	ldrb	r0, [r4, #22]
 8010d60:	f080 0001 	eor.w	r0, r0, #1
 8010d64:	bd38      	pop	{r3, r4, r5, pc}
 8010d66:	bf00      	nop

08010d68 <ucdr_deserialize_bool>:
 8010d68:	b538      	push	{r3, r4, r5, lr}
 8010d6a:	460d      	mov	r5, r1
 8010d6c:	2101      	movs	r1, #1
 8010d6e:	4604      	mov	r4, r0
 8010d70:	f001 f8a6 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8010d74:	b160      	cbz	r0, 8010d90 <ucdr_deserialize_bool+0x28>
 8010d76:	68a2      	ldr	r2, [r4, #8]
 8010d78:	2101      	movs	r1, #1
 8010d7a:	6923      	ldr	r3, [r4, #16]
 8010d7c:	f812 0b01 	ldrb.w	r0, [r2], #1
 8010d80:	440b      	add	r3, r1
 8010d82:	3800      	subs	r0, #0
 8010d84:	bf18      	it	ne
 8010d86:	2001      	movne	r0, #1
 8010d88:	7028      	strb	r0, [r5, #0]
 8010d8a:	60a2      	str	r2, [r4, #8]
 8010d8c:	6123      	str	r3, [r4, #16]
 8010d8e:	7561      	strb	r1, [r4, #21]
 8010d90:	7da0      	ldrb	r0, [r4, #22]
 8010d92:	f080 0001 	eor.w	r0, r0, #1
 8010d96:	bd38      	pop	{r3, r4, r5, pc}

08010d98 <ucdr_serialize_uint8_t>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	460d      	mov	r5, r1
 8010d9c:	2101      	movs	r1, #1
 8010d9e:	4604      	mov	r4, r0
 8010da0:	f001 f88e 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8010da4:	b148      	cbz	r0, 8010dba <ucdr_serialize_uint8_t+0x22>
 8010da6:	68a3      	ldr	r3, [r4, #8]
 8010da8:	2101      	movs	r1, #1
 8010daa:	701d      	strb	r5, [r3, #0]
 8010dac:	68a2      	ldr	r2, [r4, #8]
 8010dae:	6923      	ldr	r3, [r4, #16]
 8010db0:	440a      	add	r2, r1
 8010db2:	7561      	strb	r1, [r4, #21]
 8010db4:	440b      	add	r3, r1
 8010db6:	60a2      	str	r2, [r4, #8]
 8010db8:	6123      	str	r3, [r4, #16]
 8010dba:	7da0      	ldrb	r0, [r4, #22]
 8010dbc:	f080 0001 	eor.w	r0, r0, #1
 8010dc0:	bd38      	pop	{r3, r4, r5, pc}
 8010dc2:	bf00      	nop

08010dc4 <ucdr_deserialize_uint8_t>:
 8010dc4:	b538      	push	{r3, r4, r5, lr}
 8010dc6:	460d      	mov	r5, r1
 8010dc8:	2101      	movs	r1, #1
 8010dca:	4604      	mov	r4, r0
 8010dcc:	f001 f878 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8010dd0:	b150      	cbz	r0, 8010de8 <ucdr_deserialize_uint8_t+0x24>
 8010dd2:	68a3      	ldr	r3, [r4, #8]
 8010dd4:	2101      	movs	r1, #1
 8010dd6:	781b      	ldrb	r3, [r3, #0]
 8010dd8:	702b      	strb	r3, [r5, #0]
 8010dda:	68a2      	ldr	r2, [r4, #8]
 8010ddc:	6923      	ldr	r3, [r4, #16]
 8010dde:	440a      	add	r2, r1
 8010de0:	7561      	strb	r1, [r4, #21]
 8010de2:	440b      	add	r3, r1
 8010de4:	60a2      	str	r2, [r4, #8]
 8010de6:	6123      	str	r3, [r4, #16]
 8010de8:	7da0      	ldrb	r0, [r4, #22]
 8010dea:	f080 0001 	eor.w	r0, r0, #1
 8010dee:	bd38      	pop	{r3, r4, r5, pc}

08010df0 <ucdr_serialize_uint16_t>:
 8010df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010df4:	460b      	mov	r3, r1
 8010df6:	b082      	sub	sp, #8
 8010df8:	4604      	mov	r4, r0
 8010dfa:	2102      	movs	r1, #2
 8010dfc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8010e00:	f001 f8b2 	bl	8011f68 <ucdr_buffer_alignment>
 8010e04:	4601      	mov	r1, r0
 8010e06:	4620      	mov	r0, r4
 8010e08:	7d67      	ldrb	r7, [r4, #21]
 8010e0a:	f001 f8f5 	bl	8011ff8 <ucdr_advance_buffer>
 8010e0e:	2102      	movs	r1, #2
 8010e10:	4620      	mov	r0, r4
 8010e12:	f001 f849 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8010e16:	bb78      	cbnz	r0, 8010e78 <ucdr_serialize_uint16_t+0x88>
 8010e18:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8010e1c:	42ab      	cmp	r3, r5
 8010e1e:	d926      	bls.n	8010e6e <ucdr_serialize_uint16_t+0x7e>
 8010e20:	1b5e      	subs	r6, r3, r5
 8010e22:	60a3      	str	r3, [r4, #8]
 8010e24:	6923      	ldr	r3, [r4, #16]
 8010e26:	4620      	mov	r0, r4
 8010e28:	f1c6 0802 	rsb	r8, r6, #2
 8010e2c:	4433      	add	r3, r6
 8010e2e:	4641      	mov	r1, r8
 8010e30:	6123      	str	r3, [r4, #16]
 8010e32:	f001 f845 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8010e36:	2800      	cmp	r0, #0
 8010e38:	d03b      	beq.n	8010eb2 <ucdr_serialize_uint16_t+0xc2>
 8010e3a:	7d23      	ldrb	r3, [r4, #20]
 8010e3c:	2b01      	cmp	r3, #1
 8010e3e:	d04a      	beq.n	8010ed6 <ucdr_serialize_uint16_t+0xe6>
 8010e40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010e44:	702b      	strb	r3, [r5, #0]
 8010e46:	2e00      	cmp	r6, #0
 8010e48:	d040      	beq.n	8010ecc <ucdr_serialize_uint16_t+0xdc>
 8010e4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010e4e:	706b      	strb	r3, [r5, #1]
 8010e50:	6923      	ldr	r3, [r4, #16]
 8010e52:	2102      	movs	r1, #2
 8010e54:	68a2      	ldr	r2, [r4, #8]
 8010e56:	3302      	adds	r3, #2
 8010e58:	7da0      	ldrb	r0, [r4, #22]
 8010e5a:	4442      	add	r2, r8
 8010e5c:	7561      	strb	r1, [r4, #21]
 8010e5e:	1b9e      	subs	r6, r3, r6
 8010e60:	f080 0001 	eor.w	r0, r0, #1
 8010e64:	60a2      	str	r2, [r4, #8]
 8010e66:	6126      	str	r6, [r4, #16]
 8010e68:	b002      	add	sp, #8
 8010e6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010e6e:	2102      	movs	r1, #2
 8010e70:	4620      	mov	r0, r4
 8010e72:	f001 f825 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8010e76:	b190      	cbz	r0, 8010e9e <ucdr_serialize_uint16_t+0xae>
 8010e78:	7d23      	ldrb	r3, [r4, #20]
 8010e7a:	2b01      	cmp	r3, #1
 8010e7c:	68a3      	ldr	r3, [r4, #8]
 8010e7e:	d014      	beq.n	8010eaa <ucdr_serialize_uint16_t+0xba>
 8010e80:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010e84:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010e88:	7019      	strb	r1, [r3, #0]
 8010e8a:	68a3      	ldr	r3, [r4, #8]
 8010e8c:	705a      	strb	r2, [r3, #1]
 8010e8e:	2102      	movs	r1, #2
 8010e90:	68a2      	ldr	r2, [r4, #8]
 8010e92:	6923      	ldr	r3, [r4, #16]
 8010e94:	440a      	add	r2, r1
 8010e96:	7561      	strb	r1, [r4, #21]
 8010e98:	440b      	add	r3, r1
 8010e9a:	60a2      	str	r2, [r4, #8]
 8010e9c:	6123      	str	r3, [r4, #16]
 8010e9e:	7da0      	ldrb	r0, [r4, #22]
 8010ea0:	f080 0001 	eor.w	r0, r0, #1
 8010ea4:	b002      	add	sp, #8
 8010ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010eaa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010eae:	801a      	strh	r2, [r3, #0]
 8010eb0:	e7ed      	b.n	8010e8e <ucdr_serialize_uint16_t+0x9e>
 8010eb2:	68a2      	ldr	r2, [r4, #8]
 8010eb4:	6923      	ldr	r3, [r4, #16]
 8010eb6:	7da0      	ldrb	r0, [r4, #22]
 8010eb8:	1b92      	subs	r2, r2, r6
 8010eba:	1b9b      	subs	r3, r3, r6
 8010ebc:	7567      	strb	r7, [r4, #21]
 8010ebe:	f080 0001 	eor.w	r0, r0, #1
 8010ec2:	60a2      	str	r2, [r4, #8]
 8010ec4:	6123      	str	r3, [r4, #16]
 8010ec6:	b002      	add	sp, #8
 8010ec8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ecc:	68a3      	ldr	r3, [r4, #8]
 8010ece:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010ed2:	701a      	strb	r2, [r3, #0]
 8010ed4:	e7bc      	b.n	8010e50 <ucdr_serialize_uint16_t+0x60>
 8010ed6:	4628      	mov	r0, r5
 8010ed8:	f10d 0506 	add.w	r5, sp, #6
 8010edc:	4632      	mov	r2, r6
 8010ede:	4629      	mov	r1, r5
 8010ee0:	f00b f827 	bl	801bf32 <memcpy>
 8010ee4:	4642      	mov	r2, r8
 8010ee6:	19a9      	adds	r1, r5, r6
 8010ee8:	68a0      	ldr	r0, [r4, #8]
 8010eea:	f00b f822 	bl	801bf32 <memcpy>
 8010eee:	e7af      	b.n	8010e50 <ucdr_serialize_uint16_t+0x60>

08010ef0 <ucdr_serialize_endian_uint16_t>:
 8010ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010ef4:	4604      	mov	r4, r0
 8010ef6:	b083      	sub	sp, #12
 8010ef8:	460d      	mov	r5, r1
 8010efa:	2102      	movs	r1, #2
 8010efc:	f8ad 2006 	strh.w	r2, [sp, #6]
 8010f00:	f001 f832 	bl	8011f68 <ucdr_buffer_alignment>
 8010f04:	4601      	mov	r1, r0
 8010f06:	4620      	mov	r0, r4
 8010f08:	f894 8015 	ldrb.w	r8, [r4, #21]
 8010f0c:	f001 f874 	bl	8011ff8 <ucdr_advance_buffer>
 8010f10:	2102      	movs	r1, #2
 8010f12:	4620      	mov	r0, r4
 8010f14:	f000 ffc8 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8010f18:	bb70      	cbnz	r0, 8010f78 <ucdr_serialize_endian_uint16_t+0x88>
 8010f1a:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8010f1e:	42be      	cmp	r6, r7
 8010f20:	d925      	bls.n	8010f6e <ucdr_serialize_endian_uint16_t+0x7e>
 8010f22:	6923      	ldr	r3, [r4, #16]
 8010f24:	4620      	mov	r0, r4
 8010f26:	60a6      	str	r6, [r4, #8]
 8010f28:	1bf6      	subs	r6, r6, r7
 8010f2a:	4433      	add	r3, r6
 8010f2c:	f1c6 0902 	rsb	r9, r6, #2
 8010f30:	6123      	str	r3, [r4, #16]
 8010f32:	4649      	mov	r1, r9
 8010f34:	f000 ffc4 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8010f38:	2800      	cmp	r0, #0
 8010f3a:	d039      	beq.n	8010fb0 <ucdr_serialize_endian_uint16_t+0xc0>
 8010f3c:	2d01      	cmp	r5, #1
 8010f3e:	d04a      	beq.n	8010fd6 <ucdr_serialize_endian_uint16_t+0xe6>
 8010f40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8010f44:	703b      	strb	r3, [r7, #0]
 8010f46:	2e00      	cmp	r6, #0
 8010f48:	d040      	beq.n	8010fcc <ucdr_serialize_endian_uint16_t+0xdc>
 8010f4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8010f4e:	707b      	strb	r3, [r7, #1]
 8010f50:	6923      	ldr	r3, [r4, #16]
 8010f52:	2102      	movs	r1, #2
 8010f54:	68a2      	ldr	r2, [r4, #8]
 8010f56:	7da0      	ldrb	r0, [r4, #22]
 8010f58:	3302      	adds	r3, #2
 8010f5a:	444a      	add	r2, r9
 8010f5c:	7561      	strb	r1, [r4, #21]
 8010f5e:	1b9b      	subs	r3, r3, r6
 8010f60:	f080 0001 	eor.w	r0, r0, #1
 8010f64:	60a2      	str	r2, [r4, #8]
 8010f66:	6123      	str	r3, [r4, #16]
 8010f68:	b003      	add	sp, #12
 8010f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010f6e:	2102      	movs	r1, #2
 8010f70:	4620      	mov	r0, r4
 8010f72:	f000 ffa5 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8010f76:	b188      	cbz	r0, 8010f9c <ucdr_serialize_endian_uint16_t+0xac>
 8010f78:	2d01      	cmp	r5, #1
 8010f7a:	68a3      	ldr	r3, [r4, #8]
 8010f7c:	d014      	beq.n	8010fa8 <ucdr_serialize_endian_uint16_t+0xb8>
 8010f7e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8010f82:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010f86:	7019      	strb	r1, [r3, #0]
 8010f88:	68a3      	ldr	r3, [r4, #8]
 8010f8a:	705a      	strb	r2, [r3, #1]
 8010f8c:	2102      	movs	r1, #2
 8010f8e:	68a2      	ldr	r2, [r4, #8]
 8010f90:	6923      	ldr	r3, [r4, #16]
 8010f92:	440a      	add	r2, r1
 8010f94:	7561      	strb	r1, [r4, #21]
 8010f96:	440b      	add	r3, r1
 8010f98:	60a2      	str	r2, [r4, #8]
 8010f9a:	6123      	str	r3, [r4, #16]
 8010f9c:	7da0      	ldrb	r0, [r4, #22]
 8010f9e:	f080 0001 	eor.w	r0, r0, #1
 8010fa2:	b003      	add	sp, #12
 8010fa4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fa8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010fac:	801a      	strh	r2, [r3, #0]
 8010fae:	e7ed      	b.n	8010f8c <ucdr_serialize_endian_uint16_t+0x9c>
 8010fb0:	68a2      	ldr	r2, [r4, #8]
 8010fb2:	6923      	ldr	r3, [r4, #16]
 8010fb4:	7da0      	ldrb	r0, [r4, #22]
 8010fb6:	1b92      	subs	r2, r2, r6
 8010fb8:	1b9b      	subs	r3, r3, r6
 8010fba:	f884 8015 	strb.w	r8, [r4, #21]
 8010fbe:	f080 0001 	eor.w	r0, r0, #1
 8010fc2:	60a2      	str	r2, [r4, #8]
 8010fc4:	6123      	str	r3, [r4, #16]
 8010fc6:	b003      	add	sp, #12
 8010fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010fcc:	68a3      	ldr	r3, [r4, #8]
 8010fce:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8010fd2:	701a      	strb	r2, [r3, #0]
 8010fd4:	e7bc      	b.n	8010f50 <ucdr_serialize_endian_uint16_t+0x60>
 8010fd6:	f10d 0506 	add.w	r5, sp, #6
 8010fda:	4632      	mov	r2, r6
 8010fdc:	4638      	mov	r0, r7
 8010fde:	4629      	mov	r1, r5
 8010fe0:	f00a ffa7 	bl	801bf32 <memcpy>
 8010fe4:	464a      	mov	r2, r9
 8010fe6:	19a9      	adds	r1, r5, r6
 8010fe8:	68a0      	ldr	r0, [r4, #8]
 8010fea:	f00a ffa2 	bl	801bf32 <memcpy>
 8010fee:	e7af      	b.n	8010f50 <ucdr_serialize_endian_uint16_t+0x60>

08010ff0 <ucdr_deserialize_uint16_t>:
 8010ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ff4:	4604      	mov	r4, r0
 8010ff6:	460d      	mov	r5, r1
 8010ff8:	2102      	movs	r1, #2
 8010ffa:	f000 ffb5 	bl	8011f68 <ucdr_buffer_alignment>
 8010ffe:	4601      	mov	r1, r0
 8011000:	4620      	mov	r0, r4
 8011002:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011006:	f000 fff7 	bl	8011ff8 <ucdr_advance_buffer>
 801100a:	2102      	movs	r1, #2
 801100c:	4620      	mov	r0, r4
 801100e:	f000 ff4b 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8011012:	bb60      	cbnz	r0, 801106e <ucdr_deserialize_uint16_t+0x7e>
 8011014:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011018:	42be      	cmp	r6, r7
 801101a:	d923      	bls.n	8011064 <ucdr_deserialize_uint16_t+0x74>
 801101c:	6923      	ldr	r3, [r4, #16]
 801101e:	4620      	mov	r0, r4
 8011020:	60a6      	str	r6, [r4, #8]
 8011022:	1bf6      	subs	r6, r6, r7
 8011024:	4433      	add	r3, r6
 8011026:	f1c6 0902 	rsb	r9, r6, #2
 801102a:	6123      	str	r3, [r4, #16]
 801102c:	4649      	mov	r1, r9
 801102e:	f000 ff47 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011032:	2800      	cmp	r0, #0
 8011034:	d034      	beq.n	80110a0 <ucdr_deserialize_uint16_t+0xb0>
 8011036:	7d23      	ldrb	r3, [r4, #20]
 8011038:	2b01      	cmp	r3, #1
 801103a:	d042      	beq.n	80110c2 <ucdr_deserialize_uint16_t+0xd2>
 801103c:	787b      	ldrb	r3, [r7, #1]
 801103e:	702b      	strb	r3, [r5, #0]
 8011040:	2e00      	cmp	r6, #0
 8011042:	d03a      	beq.n	80110ba <ucdr_deserialize_uint16_t+0xca>
 8011044:	783b      	ldrb	r3, [r7, #0]
 8011046:	706b      	strb	r3, [r5, #1]
 8011048:	6923      	ldr	r3, [r4, #16]
 801104a:	2102      	movs	r1, #2
 801104c:	68a2      	ldr	r2, [r4, #8]
 801104e:	3302      	adds	r3, #2
 8011050:	7da0      	ldrb	r0, [r4, #22]
 8011052:	444a      	add	r2, r9
 8011054:	7561      	strb	r1, [r4, #21]
 8011056:	1b9b      	subs	r3, r3, r6
 8011058:	f080 0001 	eor.w	r0, r0, #1
 801105c:	60a2      	str	r2, [r4, #8]
 801105e:	6123      	str	r3, [r4, #16]
 8011060:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011064:	2102      	movs	r1, #2
 8011066:	4620      	mov	r0, r4
 8011068:	f000 ff2a 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 801106c:	b180      	cbz	r0, 8011090 <ucdr_deserialize_uint16_t+0xa0>
 801106e:	7d23      	ldrb	r3, [r4, #20]
 8011070:	2b01      	cmp	r3, #1
 8011072:	68a3      	ldr	r3, [r4, #8]
 8011074:	d011      	beq.n	801109a <ucdr_deserialize_uint16_t+0xaa>
 8011076:	785b      	ldrb	r3, [r3, #1]
 8011078:	702b      	strb	r3, [r5, #0]
 801107a:	68a3      	ldr	r3, [r4, #8]
 801107c:	781b      	ldrb	r3, [r3, #0]
 801107e:	706b      	strb	r3, [r5, #1]
 8011080:	2102      	movs	r1, #2
 8011082:	68a2      	ldr	r2, [r4, #8]
 8011084:	6923      	ldr	r3, [r4, #16]
 8011086:	440a      	add	r2, r1
 8011088:	7561      	strb	r1, [r4, #21]
 801108a:	440b      	add	r3, r1
 801108c:	60a2      	str	r2, [r4, #8]
 801108e:	6123      	str	r3, [r4, #16]
 8011090:	7da0      	ldrb	r0, [r4, #22]
 8011092:	f080 0001 	eor.w	r0, r0, #1
 8011096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801109a:	881b      	ldrh	r3, [r3, #0]
 801109c:	802b      	strh	r3, [r5, #0]
 801109e:	e7ef      	b.n	8011080 <ucdr_deserialize_uint16_t+0x90>
 80110a0:	68a2      	ldr	r2, [r4, #8]
 80110a2:	6923      	ldr	r3, [r4, #16]
 80110a4:	1b92      	subs	r2, r2, r6
 80110a6:	7da0      	ldrb	r0, [r4, #22]
 80110a8:	1b9b      	subs	r3, r3, r6
 80110aa:	f884 8015 	strb.w	r8, [r4, #21]
 80110ae:	f080 0001 	eor.w	r0, r0, #1
 80110b2:	60a2      	str	r2, [r4, #8]
 80110b4:	6123      	str	r3, [r4, #16]
 80110b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110ba:	68a3      	ldr	r3, [r4, #8]
 80110bc:	781b      	ldrb	r3, [r3, #0]
 80110be:	706b      	strb	r3, [r5, #1]
 80110c0:	e7c2      	b.n	8011048 <ucdr_deserialize_uint16_t+0x58>
 80110c2:	4639      	mov	r1, r7
 80110c4:	4632      	mov	r2, r6
 80110c6:	4628      	mov	r0, r5
 80110c8:	f00a ff33 	bl	801bf32 <memcpy>
 80110cc:	464a      	mov	r2, r9
 80110ce:	19a8      	adds	r0, r5, r6
 80110d0:	68a1      	ldr	r1, [r4, #8]
 80110d2:	f00a ff2e 	bl	801bf32 <memcpy>
 80110d6:	e7b7      	b.n	8011048 <ucdr_deserialize_uint16_t+0x58>

080110d8 <ucdr_deserialize_endian_uint16_t>:
 80110d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110dc:	4604      	mov	r4, r0
 80110de:	460e      	mov	r6, r1
 80110e0:	2102      	movs	r1, #2
 80110e2:	4615      	mov	r5, r2
 80110e4:	f000 ff40 	bl	8011f68 <ucdr_buffer_alignment>
 80110e8:	4601      	mov	r1, r0
 80110ea:	4620      	mov	r0, r4
 80110ec:	f894 8015 	ldrb.w	r8, [r4, #21]
 80110f0:	f000 ff82 	bl	8011ff8 <ucdr_advance_buffer>
 80110f4:	2102      	movs	r1, #2
 80110f6:	4620      	mov	r0, r4
 80110f8:	f000 fed6 	bl	8011ea8 <ucdr_check_buffer_available_for>
 80110fc:	bb70      	cbnz	r0, 801115c <ucdr_deserialize_endian_uint16_t+0x84>
 80110fe:	e9d4 7901 	ldrd	r7, r9, [r4, #4]
 8011102:	454f      	cmp	r7, r9
 8011104:	d925      	bls.n	8011152 <ucdr_deserialize_endian_uint16_t+0x7a>
 8011106:	6923      	ldr	r3, [r4, #16]
 8011108:	4620      	mov	r0, r4
 801110a:	60a7      	str	r7, [r4, #8]
 801110c:	eba7 0709 	sub.w	r7, r7, r9
 8011110:	443b      	add	r3, r7
 8011112:	f1c7 0a02 	rsb	sl, r7, #2
 8011116:	6123      	str	r3, [r4, #16]
 8011118:	4651      	mov	r1, sl
 801111a:	f000 fed1 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 801111e:	2800      	cmp	r0, #0
 8011120:	d034      	beq.n	801118c <ucdr_deserialize_endian_uint16_t+0xb4>
 8011122:	2e01      	cmp	r6, #1
 8011124:	d043      	beq.n	80111ae <ucdr_deserialize_endian_uint16_t+0xd6>
 8011126:	f899 3001 	ldrb.w	r3, [r9, #1]
 801112a:	702b      	strb	r3, [r5, #0]
 801112c:	2f00      	cmp	r7, #0
 801112e:	d03a      	beq.n	80111a6 <ucdr_deserialize_endian_uint16_t+0xce>
 8011130:	f899 3000 	ldrb.w	r3, [r9]
 8011134:	706b      	strb	r3, [r5, #1]
 8011136:	6923      	ldr	r3, [r4, #16]
 8011138:	2102      	movs	r1, #2
 801113a:	68a2      	ldr	r2, [r4, #8]
 801113c:	3302      	adds	r3, #2
 801113e:	7da0      	ldrb	r0, [r4, #22]
 8011140:	4452      	add	r2, sl
 8011142:	7561      	strb	r1, [r4, #21]
 8011144:	1bdb      	subs	r3, r3, r7
 8011146:	f080 0001 	eor.w	r0, r0, #1
 801114a:	60a2      	str	r2, [r4, #8]
 801114c:	6123      	str	r3, [r4, #16]
 801114e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011152:	2102      	movs	r1, #2
 8011154:	4620      	mov	r0, r4
 8011156:	f000 feb3 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 801115a:	b178      	cbz	r0, 801117c <ucdr_deserialize_endian_uint16_t+0xa4>
 801115c:	2e01      	cmp	r6, #1
 801115e:	68a3      	ldr	r3, [r4, #8]
 8011160:	d011      	beq.n	8011186 <ucdr_deserialize_endian_uint16_t+0xae>
 8011162:	785b      	ldrb	r3, [r3, #1]
 8011164:	702b      	strb	r3, [r5, #0]
 8011166:	68a3      	ldr	r3, [r4, #8]
 8011168:	781b      	ldrb	r3, [r3, #0]
 801116a:	706b      	strb	r3, [r5, #1]
 801116c:	2102      	movs	r1, #2
 801116e:	68a2      	ldr	r2, [r4, #8]
 8011170:	6923      	ldr	r3, [r4, #16]
 8011172:	440a      	add	r2, r1
 8011174:	7561      	strb	r1, [r4, #21]
 8011176:	440b      	add	r3, r1
 8011178:	60a2      	str	r2, [r4, #8]
 801117a:	6123      	str	r3, [r4, #16]
 801117c:	7da0      	ldrb	r0, [r4, #22]
 801117e:	f080 0001 	eor.w	r0, r0, #1
 8011182:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011186:	881b      	ldrh	r3, [r3, #0]
 8011188:	802b      	strh	r3, [r5, #0]
 801118a:	e7ef      	b.n	801116c <ucdr_deserialize_endian_uint16_t+0x94>
 801118c:	68a2      	ldr	r2, [r4, #8]
 801118e:	6923      	ldr	r3, [r4, #16]
 8011190:	1bd2      	subs	r2, r2, r7
 8011192:	7da0      	ldrb	r0, [r4, #22]
 8011194:	1bdb      	subs	r3, r3, r7
 8011196:	f884 8015 	strb.w	r8, [r4, #21]
 801119a:	f080 0001 	eor.w	r0, r0, #1
 801119e:	60a2      	str	r2, [r4, #8]
 80111a0:	6123      	str	r3, [r4, #16]
 80111a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80111a6:	68a3      	ldr	r3, [r4, #8]
 80111a8:	781b      	ldrb	r3, [r3, #0]
 80111aa:	706b      	strb	r3, [r5, #1]
 80111ac:	e7c3      	b.n	8011136 <ucdr_deserialize_endian_uint16_t+0x5e>
 80111ae:	4649      	mov	r1, r9
 80111b0:	463a      	mov	r2, r7
 80111b2:	4628      	mov	r0, r5
 80111b4:	f00a febd 	bl	801bf32 <memcpy>
 80111b8:	4652      	mov	r2, sl
 80111ba:	19e8      	adds	r0, r5, r7
 80111bc:	68a1      	ldr	r1, [r4, #8]
 80111be:	f00a feb8 	bl	801bf32 <memcpy>
 80111c2:	e7b8      	b.n	8011136 <ucdr_deserialize_endian_uint16_t+0x5e>

080111c4 <ucdr_serialize_uint32_t>:
 80111c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111c8:	b082      	sub	sp, #8
 80111ca:	4604      	mov	r4, r0
 80111cc:	9101      	str	r1, [sp, #4]
 80111ce:	2104      	movs	r1, #4
 80111d0:	f000 feca 	bl	8011f68 <ucdr_buffer_alignment>
 80111d4:	4601      	mov	r1, r0
 80111d6:	4620      	mov	r0, r4
 80111d8:	7d67      	ldrb	r7, [r4, #21]
 80111da:	f000 ff0d 	bl	8011ff8 <ucdr_advance_buffer>
 80111de:	2104      	movs	r1, #4
 80111e0:	4620      	mov	r0, r4
 80111e2:	f000 fe61 	bl	8011ea8 <ucdr_check_buffer_available_for>
 80111e6:	2800      	cmp	r0, #0
 80111e8:	d139      	bne.n	801125e <ucdr_serialize_uint32_t+0x9a>
 80111ea:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 80111ee:	42ab      	cmp	r3, r5
 80111f0:	d930      	bls.n	8011254 <ucdr_serialize_uint32_t+0x90>
 80111f2:	1b5e      	subs	r6, r3, r5
 80111f4:	60a3      	str	r3, [r4, #8]
 80111f6:	6923      	ldr	r3, [r4, #16]
 80111f8:	4620      	mov	r0, r4
 80111fa:	f1c6 0804 	rsb	r8, r6, #4
 80111fe:	4433      	add	r3, r6
 8011200:	4641      	mov	r1, r8
 8011202:	6123      	str	r3, [r4, #16]
 8011204:	f000 fe5c 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011208:	2800      	cmp	r0, #0
 801120a:	d04c      	beq.n	80112a6 <ucdr_serialize_uint32_t+0xe2>
 801120c:	7d23      	ldrb	r3, [r4, #20]
 801120e:	2b01      	cmp	r3, #1
 8011210:	d063      	beq.n	80112da <ucdr_serialize_uint32_t+0x116>
 8011212:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011216:	702b      	strb	r3, [r5, #0]
 8011218:	2e00      	cmp	r6, #0
 801121a:	d051      	beq.n	80112c0 <ucdr_serialize_uint32_t+0xfc>
 801121c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011220:	2e01      	cmp	r6, #1
 8011222:	706b      	strb	r3, [r5, #1]
 8011224:	d050      	beq.n	80112c8 <ucdr_serialize_uint32_t+0x104>
 8011226:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801122a:	2e02      	cmp	r6, #2
 801122c:	70ab      	strb	r3, [r5, #2]
 801122e:	d04f      	beq.n	80112d0 <ucdr_serialize_uint32_t+0x10c>
 8011230:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011234:	70eb      	strb	r3, [r5, #3]
 8011236:	6923      	ldr	r3, [r4, #16]
 8011238:	2104      	movs	r1, #4
 801123a:	68a2      	ldr	r2, [r4, #8]
 801123c:	3304      	adds	r3, #4
 801123e:	7da0      	ldrb	r0, [r4, #22]
 8011240:	4442      	add	r2, r8
 8011242:	7561      	strb	r1, [r4, #21]
 8011244:	1b9e      	subs	r6, r3, r6
 8011246:	f080 0001 	eor.w	r0, r0, #1
 801124a:	60a2      	str	r2, [r4, #8]
 801124c:	6126      	str	r6, [r4, #16]
 801124e:	b002      	add	sp, #8
 8011250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011254:	2104      	movs	r1, #4
 8011256:	4620      	mov	r0, r4
 8011258:	f000 fe32 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 801125c:	b1d0      	cbz	r0, 8011294 <ucdr_serialize_uint32_t+0xd0>
 801125e:	7d23      	ldrb	r3, [r4, #20]
 8011260:	2b01      	cmp	r3, #1
 8011262:	68a3      	ldr	r3, [r4, #8]
 8011264:	d01c      	beq.n	80112a0 <ucdr_serialize_uint32_t+0xdc>
 8011266:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801126a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801126e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011272:	7018      	strb	r0, [r3, #0]
 8011274:	68a3      	ldr	r3, [r4, #8]
 8011276:	705a      	strb	r2, [r3, #1]
 8011278:	68a3      	ldr	r3, [r4, #8]
 801127a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 801127e:	7099      	strb	r1, [r3, #2]
 8011280:	68a3      	ldr	r3, [r4, #8]
 8011282:	70da      	strb	r2, [r3, #3]
 8011284:	2104      	movs	r1, #4
 8011286:	68a2      	ldr	r2, [r4, #8]
 8011288:	6923      	ldr	r3, [r4, #16]
 801128a:	440a      	add	r2, r1
 801128c:	7561      	strb	r1, [r4, #21]
 801128e:	440b      	add	r3, r1
 8011290:	60a2      	str	r2, [r4, #8]
 8011292:	6123      	str	r3, [r4, #16]
 8011294:	7da0      	ldrb	r0, [r4, #22]
 8011296:	f080 0001 	eor.w	r0, r0, #1
 801129a:	b002      	add	sp, #8
 801129c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112a0:	9a01      	ldr	r2, [sp, #4]
 80112a2:	601a      	str	r2, [r3, #0]
 80112a4:	e7ee      	b.n	8011284 <ucdr_serialize_uint32_t+0xc0>
 80112a6:	68a2      	ldr	r2, [r4, #8]
 80112a8:	6923      	ldr	r3, [r4, #16]
 80112aa:	7da0      	ldrb	r0, [r4, #22]
 80112ac:	1b92      	subs	r2, r2, r6
 80112ae:	1b9b      	subs	r3, r3, r6
 80112b0:	7567      	strb	r7, [r4, #21]
 80112b2:	f080 0001 	eor.w	r0, r0, #1
 80112b6:	60a2      	str	r2, [r4, #8]
 80112b8:	6123      	str	r3, [r4, #16]
 80112ba:	b002      	add	sp, #8
 80112bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80112c0:	68a3      	ldr	r3, [r4, #8]
 80112c2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80112c6:	701a      	strb	r2, [r3, #0]
 80112c8:	68a3      	ldr	r3, [r4, #8]
 80112ca:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80112ce:	701a      	strb	r2, [r3, #0]
 80112d0:	68a3      	ldr	r3, [r4, #8]
 80112d2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80112d6:	701a      	strb	r2, [r3, #0]
 80112d8:	e7ad      	b.n	8011236 <ucdr_serialize_uint32_t+0x72>
 80112da:	4628      	mov	r0, r5
 80112dc:	ad01      	add	r5, sp, #4
 80112de:	4632      	mov	r2, r6
 80112e0:	4629      	mov	r1, r5
 80112e2:	f00a fe26 	bl	801bf32 <memcpy>
 80112e6:	4642      	mov	r2, r8
 80112e8:	19a9      	adds	r1, r5, r6
 80112ea:	68a0      	ldr	r0, [r4, #8]
 80112ec:	f00a fe21 	bl	801bf32 <memcpy>
 80112f0:	e7a1      	b.n	8011236 <ucdr_serialize_uint32_t+0x72>
 80112f2:	bf00      	nop

080112f4 <ucdr_serialize_endian_uint32_t>:
 80112f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80112f8:	4604      	mov	r4, r0
 80112fa:	b083      	sub	sp, #12
 80112fc:	460d      	mov	r5, r1
 80112fe:	2104      	movs	r1, #4
 8011300:	9201      	str	r2, [sp, #4]
 8011302:	f000 fe31 	bl	8011f68 <ucdr_buffer_alignment>
 8011306:	4601      	mov	r1, r0
 8011308:	4620      	mov	r0, r4
 801130a:	f894 8015 	ldrb.w	r8, [r4, #21]
 801130e:	f000 fe73 	bl	8011ff8 <ucdr_advance_buffer>
 8011312:	2104      	movs	r1, #4
 8011314:	4620      	mov	r0, r4
 8011316:	f000 fdc7 	bl	8011ea8 <ucdr_check_buffer_available_for>
 801131a:	2800      	cmp	r0, #0
 801131c:	d138      	bne.n	8011390 <ucdr_serialize_endian_uint32_t+0x9c>
 801131e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011322:	42b7      	cmp	r7, r6
 8011324:	d92f      	bls.n	8011386 <ucdr_serialize_endian_uint32_t+0x92>
 8011326:	6923      	ldr	r3, [r4, #16]
 8011328:	4620      	mov	r0, r4
 801132a:	60a7      	str	r7, [r4, #8]
 801132c:	1bbf      	subs	r7, r7, r6
 801132e:	443b      	add	r3, r7
 8011330:	f1c7 0904 	rsb	r9, r7, #4
 8011334:	6123      	str	r3, [r4, #16]
 8011336:	4649      	mov	r1, r9
 8011338:	f000 fdc2 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 801133c:	2800      	cmp	r0, #0
 801133e:	d04a      	beq.n	80113d6 <ucdr_serialize_endian_uint32_t+0xe2>
 8011340:	2d01      	cmp	r5, #1
 8011342:	d063      	beq.n	801140c <ucdr_serialize_endian_uint32_t+0x118>
 8011344:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011348:	7033      	strb	r3, [r6, #0]
 801134a:	2f00      	cmp	r7, #0
 801134c:	d051      	beq.n	80113f2 <ucdr_serialize_endian_uint32_t+0xfe>
 801134e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011352:	2f01      	cmp	r7, #1
 8011354:	7073      	strb	r3, [r6, #1]
 8011356:	d050      	beq.n	80113fa <ucdr_serialize_endian_uint32_t+0x106>
 8011358:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801135c:	2f02      	cmp	r7, #2
 801135e:	70b3      	strb	r3, [r6, #2]
 8011360:	d04f      	beq.n	8011402 <ucdr_serialize_endian_uint32_t+0x10e>
 8011362:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011366:	70f3      	strb	r3, [r6, #3]
 8011368:	6923      	ldr	r3, [r4, #16]
 801136a:	2104      	movs	r1, #4
 801136c:	68a2      	ldr	r2, [r4, #8]
 801136e:	7da0      	ldrb	r0, [r4, #22]
 8011370:	3304      	adds	r3, #4
 8011372:	444a      	add	r2, r9
 8011374:	7561      	strb	r1, [r4, #21]
 8011376:	1bdb      	subs	r3, r3, r7
 8011378:	f080 0001 	eor.w	r0, r0, #1
 801137c:	60a2      	str	r2, [r4, #8]
 801137e:	6123      	str	r3, [r4, #16]
 8011380:	b003      	add	sp, #12
 8011382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011386:	2104      	movs	r1, #4
 8011388:	4620      	mov	r0, r4
 801138a:	f000 fd99 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 801138e:	b1c8      	cbz	r0, 80113c4 <ucdr_serialize_endian_uint32_t+0xd0>
 8011390:	2d01      	cmp	r5, #1
 8011392:	68a3      	ldr	r3, [r4, #8]
 8011394:	d01c      	beq.n	80113d0 <ucdr_serialize_endian_uint32_t+0xdc>
 8011396:	f89d 0007 	ldrb.w	r0, [sp, #7]
 801139a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801139e:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80113a2:	7018      	strb	r0, [r3, #0]
 80113a4:	68a3      	ldr	r3, [r4, #8]
 80113a6:	705a      	strb	r2, [r3, #1]
 80113a8:	68a3      	ldr	r3, [r4, #8]
 80113aa:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80113ae:	7099      	strb	r1, [r3, #2]
 80113b0:	68a3      	ldr	r3, [r4, #8]
 80113b2:	70da      	strb	r2, [r3, #3]
 80113b4:	2104      	movs	r1, #4
 80113b6:	68a2      	ldr	r2, [r4, #8]
 80113b8:	6923      	ldr	r3, [r4, #16]
 80113ba:	440a      	add	r2, r1
 80113bc:	7561      	strb	r1, [r4, #21]
 80113be:	440b      	add	r3, r1
 80113c0:	60a2      	str	r2, [r4, #8]
 80113c2:	6123      	str	r3, [r4, #16]
 80113c4:	7da0      	ldrb	r0, [r4, #22]
 80113c6:	f080 0001 	eor.w	r0, r0, #1
 80113ca:	b003      	add	sp, #12
 80113cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113d0:	9a01      	ldr	r2, [sp, #4]
 80113d2:	601a      	str	r2, [r3, #0]
 80113d4:	e7ee      	b.n	80113b4 <ucdr_serialize_endian_uint32_t+0xc0>
 80113d6:	68a2      	ldr	r2, [r4, #8]
 80113d8:	6923      	ldr	r3, [r4, #16]
 80113da:	7da0      	ldrb	r0, [r4, #22]
 80113dc:	1bd2      	subs	r2, r2, r7
 80113de:	1bdb      	subs	r3, r3, r7
 80113e0:	f884 8015 	strb.w	r8, [r4, #21]
 80113e4:	f080 0001 	eor.w	r0, r0, #1
 80113e8:	60a2      	str	r2, [r4, #8]
 80113ea:	6123      	str	r3, [r4, #16]
 80113ec:	b003      	add	sp, #12
 80113ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113f2:	68a3      	ldr	r3, [r4, #8]
 80113f4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80113f8:	701a      	strb	r2, [r3, #0]
 80113fa:	68a3      	ldr	r3, [r4, #8]
 80113fc:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011400:	701a      	strb	r2, [r3, #0]
 8011402:	68a3      	ldr	r3, [r4, #8]
 8011404:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011408:	701a      	strb	r2, [r3, #0]
 801140a:	e7ad      	b.n	8011368 <ucdr_serialize_endian_uint32_t+0x74>
 801140c:	ad01      	add	r5, sp, #4
 801140e:	463a      	mov	r2, r7
 8011410:	4630      	mov	r0, r6
 8011412:	4629      	mov	r1, r5
 8011414:	f00a fd8d 	bl	801bf32 <memcpy>
 8011418:	464a      	mov	r2, r9
 801141a:	19e9      	adds	r1, r5, r7
 801141c:	68a0      	ldr	r0, [r4, #8]
 801141e:	f00a fd88 	bl	801bf32 <memcpy>
 8011422:	e7a1      	b.n	8011368 <ucdr_serialize_endian_uint32_t+0x74>

08011424 <ucdr_deserialize_uint32_t>:
 8011424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011428:	4604      	mov	r4, r0
 801142a:	460d      	mov	r5, r1
 801142c:	2104      	movs	r1, #4
 801142e:	f000 fd9b 	bl	8011f68 <ucdr_buffer_alignment>
 8011432:	4601      	mov	r1, r0
 8011434:	4620      	mov	r0, r4
 8011436:	f894 8015 	ldrb.w	r8, [r4, #21]
 801143a:	f000 fddd 	bl	8011ff8 <ucdr_advance_buffer>
 801143e:	2104      	movs	r1, #4
 8011440:	4620      	mov	r0, r4
 8011442:	f000 fd31 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8011446:	2800      	cmp	r0, #0
 8011448:	d138      	bne.n	80114bc <ucdr_deserialize_uint32_t+0x98>
 801144a:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 801144e:	42b7      	cmp	r7, r6
 8011450:	d92f      	bls.n	80114b2 <ucdr_deserialize_uint32_t+0x8e>
 8011452:	6923      	ldr	r3, [r4, #16]
 8011454:	4620      	mov	r0, r4
 8011456:	60a7      	str	r7, [r4, #8]
 8011458:	1bbf      	subs	r7, r7, r6
 801145a:	443b      	add	r3, r7
 801145c:	f1c7 0904 	rsb	r9, r7, #4
 8011460:	6123      	str	r3, [r4, #16]
 8011462:	4649      	mov	r1, r9
 8011464:	f000 fd2c 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011468:	2800      	cmp	r0, #0
 801146a:	d046      	beq.n	80114fa <ucdr_deserialize_uint32_t+0xd6>
 801146c:	7d23      	ldrb	r3, [r4, #20]
 801146e:	2b01      	cmp	r3, #1
 8011470:	d05c      	beq.n	801152c <ucdr_deserialize_uint32_t+0x108>
 8011472:	78f3      	ldrb	r3, [r6, #3]
 8011474:	702b      	strb	r3, [r5, #0]
 8011476:	2f00      	cmp	r7, #0
 8011478:	d04c      	beq.n	8011514 <ucdr_deserialize_uint32_t+0xf0>
 801147a:	78b3      	ldrb	r3, [r6, #2]
 801147c:	2f01      	cmp	r7, #1
 801147e:	706b      	strb	r3, [r5, #1]
 8011480:	f105 0302 	add.w	r3, r5, #2
 8011484:	d04a      	beq.n	801151c <ucdr_deserialize_uint32_t+0xf8>
 8011486:	7873      	ldrb	r3, [r6, #1]
 8011488:	2f02      	cmp	r7, #2
 801148a:	70ab      	strb	r3, [r5, #2]
 801148c:	f105 0303 	add.w	r3, r5, #3
 8011490:	d048      	beq.n	8011524 <ucdr_deserialize_uint32_t+0x100>
 8011492:	7833      	ldrb	r3, [r6, #0]
 8011494:	70eb      	strb	r3, [r5, #3]
 8011496:	6923      	ldr	r3, [r4, #16]
 8011498:	2104      	movs	r1, #4
 801149a:	68a2      	ldr	r2, [r4, #8]
 801149c:	3304      	adds	r3, #4
 801149e:	7da0      	ldrb	r0, [r4, #22]
 80114a0:	444a      	add	r2, r9
 80114a2:	7561      	strb	r1, [r4, #21]
 80114a4:	1bdb      	subs	r3, r3, r7
 80114a6:	f080 0001 	eor.w	r0, r0, #1
 80114aa:	60a2      	str	r2, [r4, #8]
 80114ac:	6123      	str	r3, [r4, #16]
 80114ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114b2:	2104      	movs	r1, #4
 80114b4:	4620      	mov	r0, r4
 80114b6:	f000 fd03 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 80114ba:	b1b0      	cbz	r0, 80114ea <ucdr_deserialize_uint32_t+0xc6>
 80114bc:	7d23      	ldrb	r3, [r4, #20]
 80114be:	2b01      	cmp	r3, #1
 80114c0:	68a3      	ldr	r3, [r4, #8]
 80114c2:	d017      	beq.n	80114f4 <ucdr_deserialize_uint32_t+0xd0>
 80114c4:	78db      	ldrb	r3, [r3, #3]
 80114c6:	702b      	strb	r3, [r5, #0]
 80114c8:	68a3      	ldr	r3, [r4, #8]
 80114ca:	789b      	ldrb	r3, [r3, #2]
 80114cc:	706b      	strb	r3, [r5, #1]
 80114ce:	68a3      	ldr	r3, [r4, #8]
 80114d0:	785b      	ldrb	r3, [r3, #1]
 80114d2:	70ab      	strb	r3, [r5, #2]
 80114d4:	68a3      	ldr	r3, [r4, #8]
 80114d6:	781b      	ldrb	r3, [r3, #0]
 80114d8:	70eb      	strb	r3, [r5, #3]
 80114da:	2104      	movs	r1, #4
 80114dc:	68a2      	ldr	r2, [r4, #8]
 80114de:	6923      	ldr	r3, [r4, #16]
 80114e0:	440a      	add	r2, r1
 80114e2:	7561      	strb	r1, [r4, #21]
 80114e4:	440b      	add	r3, r1
 80114e6:	60a2      	str	r2, [r4, #8]
 80114e8:	6123      	str	r3, [r4, #16]
 80114ea:	7da0      	ldrb	r0, [r4, #22]
 80114ec:	f080 0001 	eor.w	r0, r0, #1
 80114f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	602b      	str	r3, [r5, #0]
 80114f8:	e7ef      	b.n	80114da <ucdr_deserialize_uint32_t+0xb6>
 80114fa:	68a2      	ldr	r2, [r4, #8]
 80114fc:	6923      	ldr	r3, [r4, #16]
 80114fe:	1bd2      	subs	r2, r2, r7
 8011500:	7da0      	ldrb	r0, [r4, #22]
 8011502:	1bdb      	subs	r3, r3, r7
 8011504:	f884 8015 	strb.w	r8, [r4, #21]
 8011508:	f080 0001 	eor.w	r0, r0, #1
 801150c:	60a2      	str	r2, [r4, #8]
 801150e:	6123      	str	r3, [r4, #16]
 8011510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011514:	68a3      	ldr	r3, [r4, #8]
 8011516:	789b      	ldrb	r3, [r3, #2]
 8011518:	706b      	strb	r3, [r5, #1]
 801151a:	1cab      	adds	r3, r5, #2
 801151c:	68a2      	ldr	r2, [r4, #8]
 801151e:	7852      	ldrb	r2, [r2, #1]
 8011520:	f803 2b01 	strb.w	r2, [r3], #1
 8011524:	68a2      	ldr	r2, [r4, #8]
 8011526:	7812      	ldrb	r2, [r2, #0]
 8011528:	701a      	strb	r2, [r3, #0]
 801152a:	e7b4      	b.n	8011496 <ucdr_deserialize_uint32_t+0x72>
 801152c:	4631      	mov	r1, r6
 801152e:	463a      	mov	r2, r7
 8011530:	4628      	mov	r0, r5
 8011532:	f00a fcfe 	bl	801bf32 <memcpy>
 8011536:	464a      	mov	r2, r9
 8011538:	19e8      	adds	r0, r5, r7
 801153a:	68a1      	ldr	r1, [r4, #8]
 801153c:	f00a fcf9 	bl	801bf32 <memcpy>
 8011540:	e7a9      	b.n	8011496 <ucdr_deserialize_uint32_t+0x72>
 8011542:	bf00      	nop

08011544 <ucdr_deserialize_endian_uint32_t>:
 8011544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011548:	4604      	mov	r4, r0
 801154a:	460e      	mov	r6, r1
 801154c:	2104      	movs	r1, #4
 801154e:	4615      	mov	r5, r2
 8011550:	f000 fd0a 	bl	8011f68 <ucdr_buffer_alignment>
 8011554:	4601      	mov	r1, r0
 8011556:	4620      	mov	r0, r4
 8011558:	f894 8015 	ldrb.w	r8, [r4, #21]
 801155c:	f000 fd4c 	bl	8011ff8 <ucdr_advance_buffer>
 8011560:	2104      	movs	r1, #4
 8011562:	4620      	mov	r0, r4
 8011564:	f000 fca0 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8011568:	2800      	cmp	r0, #0
 801156a:	d13c      	bne.n	80115e6 <ucdr_deserialize_endian_uint32_t+0xa2>
 801156c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011570:	42bb      	cmp	r3, r7
 8011572:	d933      	bls.n	80115dc <ucdr_deserialize_endian_uint32_t+0x98>
 8011574:	eba3 0907 	sub.w	r9, r3, r7
 8011578:	60a3      	str	r3, [r4, #8]
 801157a:	6923      	ldr	r3, [r4, #16]
 801157c:	4620      	mov	r0, r4
 801157e:	f1c9 0a04 	rsb	sl, r9, #4
 8011582:	444b      	add	r3, r9
 8011584:	4651      	mov	r1, sl
 8011586:	6123      	str	r3, [r4, #16]
 8011588:	f000 fc9a 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 801158c:	2800      	cmp	r0, #0
 801158e:	d048      	beq.n	8011622 <ucdr_deserialize_endian_uint32_t+0xde>
 8011590:	2e01      	cmp	r6, #1
 8011592:	d061      	beq.n	8011658 <ucdr_deserialize_endian_uint32_t+0x114>
 8011594:	78fb      	ldrb	r3, [r7, #3]
 8011596:	702b      	strb	r3, [r5, #0]
 8011598:	f1b9 0f00 	cmp.w	r9, #0
 801159c:	d050      	beq.n	8011640 <ucdr_deserialize_endian_uint32_t+0xfc>
 801159e:	78bb      	ldrb	r3, [r7, #2]
 80115a0:	f1b9 0f01 	cmp.w	r9, #1
 80115a4:	706b      	strb	r3, [r5, #1]
 80115a6:	f105 0302 	add.w	r3, r5, #2
 80115aa:	d04d      	beq.n	8011648 <ucdr_deserialize_endian_uint32_t+0x104>
 80115ac:	787b      	ldrb	r3, [r7, #1]
 80115ae:	f1b9 0f02 	cmp.w	r9, #2
 80115b2:	70ab      	strb	r3, [r5, #2]
 80115b4:	f105 0303 	add.w	r3, r5, #3
 80115b8:	d04a      	beq.n	8011650 <ucdr_deserialize_endian_uint32_t+0x10c>
 80115ba:	783b      	ldrb	r3, [r7, #0]
 80115bc:	70eb      	strb	r3, [r5, #3]
 80115be:	6923      	ldr	r3, [r4, #16]
 80115c0:	2104      	movs	r1, #4
 80115c2:	68a2      	ldr	r2, [r4, #8]
 80115c4:	3304      	adds	r3, #4
 80115c6:	7da0      	ldrb	r0, [r4, #22]
 80115c8:	4452      	add	r2, sl
 80115ca:	7561      	strb	r1, [r4, #21]
 80115cc:	eba3 0309 	sub.w	r3, r3, r9
 80115d0:	f080 0001 	eor.w	r0, r0, #1
 80115d4:	60a2      	str	r2, [r4, #8]
 80115d6:	6123      	str	r3, [r4, #16]
 80115d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80115dc:	2104      	movs	r1, #4
 80115de:	4620      	mov	r0, r4
 80115e0:	f000 fc6e 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 80115e4:	b1a8      	cbz	r0, 8011612 <ucdr_deserialize_endian_uint32_t+0xce>
 80115e6:	2e01      	cmp	r6, #1
 80115e8:	68a3      	ldr	r3, [r4, #8]
 80115ea:	d017      	beq.n	801161c <ucdr_deserialize_endian_uint32_t+0xd8>
 80115ec:	78db      	ldrb	r3, [r3, #3]
 80115ee:	702b      	strb	r3, [r5, #0]
 80115f0:	68a3      	ldr	r3, [r4, #8]
 80115f2:	789b      	ldrb	r3, [r3, #2]
 80115f4:	706b      	strb	r3, [r5, #1]
 80115f6:	68a3      	ldr	r3, [r4, #8]
 80115f8:	785b      	ldrb	r3, [r3, #1]
 80115fa:	70ab      	strb	r3, [r5, #2]
 80115fc:	68a3      	ldr	r3, [r4, #8]
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	70eb      	strb	r3, [r5, #3]
 8011602:	2104      	movs	r1, #4
 8011604:	68a2      	ldr	r2, [r4, #8]
 8011606:	6923      	ldr	r3, [r4, #16]
 8011608:	440a      	add	r2, r1
 801160a:	7561      	strb	r1, [r4, #21]
 801160c:	440b      	add	r3, r1
 801160e:	60a2      	str	r2, [r4, #8]
 8011610:	6123      	str	r3, [r4, #16]
 8011612:	7da0      	ldrb	r0, [r4, #22]
 8011614:	f080 0001 	eor.w	r0, r0, #1
 8011618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801161c:	681b      	ldr	r3, [r3, #0]
 801161e:	602b      	str	r3, [r5, #0]
 8011620:	e7ef      	b.n	8011602 <ucdr_deserialize_endian_uint32_t+0xbe>
 8011622:	68a2      	ldr	r2, [r4, #8]
 8011624:	6923      	ldr	r3, [r4, #16]
 8011626:	eba2 0209 	sub.w	r2, r2, r9
 801162a:	7da0      	ldrb	r0, [r4, #22]
 801162c:	eba3 0309 	sub.w	r3, r3, r9
 8011630:	f884 8015 	strb.w	r8, [r4, #21]
 8011634:	f080 0001 	eor.w	r0, r0, #1
 8011638:	60a2      	str	r2, [r4, #8]
 801163a:	6123      	str	r3, [r4, #16]
 801163c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011640:	68a3      	ldr	r3, [r4, #8]
 8011642:	789b      	ldrb	r3, [r3, #2]
 8011644:	706b      	strb	r3, [r5, #1]
 8011646:	1cab      	adds	r3, r5, #2
 8011648:	68a2      	ldr	r2, [r4, #8]
 801164a:	7852      	ldrb	r2, [r2, #1]
 801164c:	f803 2b01 	strb.w	r2, [r3], #1
 8011650:	68a2      	ldr	r2, [r4, #8]
 8011652:	7812      	ldrb	r2, [r2, #0]
 8011654:	701a      	strb	r2, [r3, #0]
 8011656:	e7b2      	b.n	80115be <ucdr_deserialize_endian_uint32_t+0x7a>
 8011658:	4639      	mov	r1, r7
 801165a:	464a      	mov	r2, r9
 801165c:	4628      	mov	r0, r5
 801165e:	f00a fc68 	bl	801bf32 <memcpy>
 8011662:	4652      	mov	r2, sl
 8011664:	eb05 0009 	add.w	r0, r5, r9
 8011668:	68a1      	ldr	r1, [r4, #8]
 801166a:	f00a fc62 	bl	801bf32 <memcpy>
 801166e:	e7a6      	b.n	80115be <ucdr_deserialize_endian_uint32_t+0x7a>

08011670 <ucdr_serialize_uint64_t>:
 8011670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011674:	4604      	mov	r4, r0
 8011676:	b082      	sub	sp, #8
 8011678:	2108      	movs	r1, #8
 801167a:	e9cd 2300 	strd	r2, r3, [sp]
 801167e:	f000 fc73 	bl	8011f68 <ucdr_buffer_alignment>
 8011682:	4601      	mov	r1, r0
 8011684:	4620      	mov	r0, r4
 8011686:	7d67      	ldrb	r7, [r4, #21]
 8011688:	f000 fcb6 	bl	8011ff8 <ucdr_advance_buffer>
 801168c:	2108      	movs	r1, #8
 801168e:	4620      	mov	r0, r4
 8011690:	f000 fc0a 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8011694:	2800      	cmp	r0, #0
 8011696:	d14e      	bne.n	8011736 <ucdr_serialize_uint64_t+0xc6>
 8011698:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801169c:	42ab      	cmp	r3, r5
 801169e:	d945      	bls.n	801172c <ucdr_serialize_uint64_t+0xbc>
 80116a0:	1b5e      	subs	r6, r3, r5
 80116a2:	60a3      	str	r3, [r4, #8]
 80116a4:	6923      	ldr	r3, [r4, #16]
 80116a6:	4620      	mov	r0, r4
 80116a8:	f1c6 0808 	rsb	r8, r6, #8
 80116ac:	4433      	add	r3, r6
 80116ae:	4641      	mov	r1, r8
 80116b0:	6123      	str	r3, [r4, #16]
 80116b2:	f000 fc05 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 80116b6:	2800      	cmp	r0, #0
 80116b8:	d074      	beq.n	80117a4 <ucdr_serialize_uint64_t+0x134>
 80116ba:	7d23      	ldrb	r3, [r4, #20]
 80116bc:	2b01      	cmp	r3, #1
 80116be:	f000 809b 	beq.w	80117f8 <ucdr_serialize_uint64_t+0x188>
 80116c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80116c6:	702b      	strb	r3, [r5, #0]
 80116c8:	2e00      	cmp	r6, #0
 80116ca:	d078      	beq.n	80117be <ucdr_serialize_uint64_t+0x14e>
 80116cc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80116d0:	2e01      	cmp	r6, #1
 80116d2:	706b      	strb	r3, [r5, #1]
 80116d4:	d077      	beq.n	80117c6 <ucdr_serialize_uint64_t+0x156>
 80116d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80116da:	2e02      	cmp	r6, #2
 80116dc:	70ab      	strb	r3, [r5, #2]
 80116de:	d076      	beq.n	80117ce <ucdr_serialize_uint64_t+0x15e>
 80116e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80116e4:	2e03      	cmp	r6, #3
 80116e6:	70eb      	strb	r3, [r5, #3]
 80116e8:	d075      	beq.n	80117d6 <ucdr_serialize_uint64_t+0x166>
 80116ea:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80116ee:	2e04      	cmp	r6, #4
 80116f0:	712b      	strb	r3, [r5, #4]
 80116f2:	d074      	beq.n	80117de <ucdr_serialize_uint64_t+0x16e>
 80116f4:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80116f8:	2e05      	cmp	r6, #5
 80116fa:	716b      	strb	r3, [r5, #5]
 80116fc:	d073      	beq.n	80117e6 <ucdr_serialize_uint64_t+0x176>
 80116fe:	f89d 3001 	ldrb.w	r3, [sp, #1]
 8011702:	2e06      	cmp	r6, #6
 8011704:	71ab      	strb	r3, [r5, #6]
 8011706:	d072      	beq.n	80117ee <ucdr_serialize_uint64_t+0x17e>
 8011708:	f89d 3000 	ldrb.w	r3, [sp]
 801170c:	71eb      	strb	r3, [r5, #7]
 801170e:	6923      	ldr	r3, [r4, #16]
 8011710:	2108      	movs	r1, #8
 8011712:	68a2      	ldr	r2, [r4, #8]
 8011714:	3308      	adds	r3, #8
 8011716:	7da0      	ldrb	r0, [r4, #22]
 8011718:	4442      	add	r2, r8
 801171a:	7561      	strb	r1, [r4, #21]
 801171c:	1b9e      	subs	r6, r3, r6
 801171e:	f080 0001 	eor.w	r0, r0, #1
 8011722:	60a2      	str	r2, [r4, #8]
 8011724:	6126      	str	r6, [r4, #16]
 8011726:	b002      	add	sp, #8
 8011728:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801172c:	2108      	movs	r1, #8
 801172e:	4620      	mov	r0, r4
 8011730:	f000 fbc6 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011734:	b350      	cbz	r0, 801178c <ucdr_serialize_uint64_t+0x11c>
 8011736:	7d23      	ldrb	r3, [r4, #20]
 8011738:	2b01      	cmp	r3, #1
 801173a:	d02d      	beq.n	8011798 <ucdr_serialize_uint64_t+0x128>
 801173c:	68a3      	ldr	r3, [r4, #8]
 801173e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011742:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011746:	f89d 1005 	ldrb.w	r1, [sp, #5]
 801174a:	7018      	strb	r0, [r3, #0]
 801174c:	68a3      	ldr	r3, [r4, #8]
 801174e:	705a      	strb	r2, [r3, #1]
 8011750:	68a3      	ldr	r3, [r4, #8]
 8011752:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011756:	f89d 0003 	ldrb.w	r0, [sp, #3]
 801175a:	7099      	strb	r1, [r3, #2]
 801175c:	68a3      	ldr	r3, [r4, #8]
 801175e:	70da      	strb	r2, [r3, #3]
 8011760:	68a3      	ldr	r3, [r4, #8]
 8011762:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8011766:	f89d 1001 	ldrb.w	r1, [sp, #1]
 801176a:	7118      	strb	r0, [r3, #4]
 801176c:	68a3      	ldr	r3, [r4, #8]
 801176e:	715a      	strb	r2, [r3, #5]
 8011770:	68a3      	ldr	r3, [r4, #8]
 8011772:	f89d 2000 	ldrb.w	r2, [sp]
 8011776:	7199      	strb	r1, [r3, #6]
 8011778:	68a3      	ldr	r3, [r4, #8]
 801177a:	71da      	strb	r2, [r3, #7]
 801177c:	2108      	movs	r1, #8
 801177e:	68a2      	ldr	r2, [r4, #8]
 8011780:	6923      	ldr	r3, [r4, #16]
 8011782:	440a      	add	r2, r1
 8011784:	7561      	strb	r1, [r4, #21]
 8011786:	440b      	add	r3, r1
 8011788:	60a2      	str	r2, [r4, #8]
 801178a:	6123      	str	r3, [r4, #16]
 801178c:	7da0      	ldrb	r0, [r4, #22]
 801178e:	f080 0001 	eor.w	r0, r0, #1
 8011792:	b002      	add	sp, #8
 8011794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011798:	466b      	mov	r3, sp
 801179a:	68a2      	ldr	r2, [r4, #8]
 801179c:	cb03      	ldmia	r3!, {r0, r1}
 801179e:	6010      	str	r0, [r2, #0]
 80117a0:	6051      	str	r1, [r2, #4]
 80117a2:	e7eb      	b.n	801177c <ucdr_serialize_uint64_t+0x10c>
 80117a4:	68a2      	ldr	r2, [r4, #8]
 80117a6:	6923      	ldr	r3, [r4, #16]
 80117a8:	7da0      	ldrb	r0, [r4, #22]
 80117aa:	1b92      	subs	r2, r2, r6
 80117ac:	1b9b      	subs	r3, r3, r6
 80117ae:	7567      	strb	r7, [r4, #21]
 80117b0:	f080 0001 	eor.w	r0, r0, #1
 80117b4:	60a2      	str	r2, [r4, #8]
 80117b6:	6123      	str	r3, [r4, #16]
 80117b8:	b002      	add	sp, #8
 80117ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117be:	68a3      	ldr	r3, [r4, #8]
 80117c0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80117c4:	701a      	strb	r2, [r3, #0]
 80117c6:	68a3      	ldr	r3, [r4, #8]
 80117c8:	f89d 2005 	ldrb.w	r2, [sp, #5]
 80117cc:	701a      	strb	r2, [r3, #0]
 80117ce:	68a3      	ldr	r3, [r4, #8]
 80117d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80117d4:	701a      	strb	r2, [r3, #0]
 80117d6:	68a3      	ldr	r3, [r4, #8]
 80117d8:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80117dc:	701a      	strb	r2, [r3, #0]
 80117de:	68a3      	ldr	r3, [r4, #8]
 80117e0:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80117e4:	701a      	strb	r2, [r3, #0]
 80117e6:	68a3      	ldr	r3, [r4, #8]
 80117e8:	f89d 2001 	ldrb.w	r2, [sp, #1]
 80117ec:	701a      	strb	r2, [r3, #0]
 80117ee:	68a3      	ldr	r3, [r4, #8]
 80117f0:	f89d 2000 	ldrb.w	r2, [sp]
 80117f4:	701a      	strb	r2, [r3, #0]
 80117f6:	e78a      	b.n	801170e <ucdr_serialize_uint64_t+0x9e>
 80117f8:	4628      	mov	r0, r5
 80117fa:	466d      	mov	r5, sp
 80117fc:	4632      	mov	r2, r6
 80117fe:	4629      	mov	r1, r5
 8011800:	f00a fb97 	bl	801bf32 <memcpy>
 8011804:	4642      	mov	r2, r8
 8011806:	19a9      	adds	r1, r5, r6
 8011808:	68a0      	ldr	r0, [r4, #8]
 801180a:	f00a fb92 	bl	801bf32 <memcpy>
 801180e:	e77e      	b.n	801170e <ucdr_serialize_uint64_t+0x9e>

08011810 <ucdr_serialize_int16_t>:
 8011810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011814:	460b      	mov	r3, r1
 8011816:	b082      	sub	sp, #8
 8011818:	4604      	mov	r4, r0
 801181a:	2102      	movs	r1, #2
 801181c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011820:	f000 fba2 	bl	8011f68 <ucdr_buffer_alignment>
 8011824:	4601      	mov	r1, r0
 8011826:	4620      	mov	r0, r4
 8011828:	7d67      	ldrb	r7, [r4, #21]
 801182a:	f000 fbe5 	bl	8011ff8 <ucdr_advance_buffer>
 801182e:	2102      	movs	r1, #2
 8011830:	4620      	mov	r0, r4
 8011832:	f000 fb39 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8011836:	bb78      	cbnz	r0, 8011898 <ucdr_serialize_int16_t+0x88>
 8011838:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 801183c:	42ab      	cmp	r3, r5
 801183e:	d926      	bls.n	801188e <ucdr_serialize_int16_t+0x7e>
 8011840:	1b5e      	subs	r6, r3, r5
 8011842:	60a3      	str	r3, [r4, #8]
 8011844:	6923      	ldr	r3, [r4, #16]
 8011846:	4620      	mov	r0, r4
 8011848:	f1c6 0802 	rsb	r8, r6, #2
 801184c:	4433      	add	r3, r6
 801184e:	4641      	mov	r1, r8
 8011850:	6123      	str	r3, [r4, #16]
 8011852:	f000 fb35 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011856:	2800      	cmp	r0, #0
 8011858:	d03b      	beq.n	80118d2 <ucdr_serialize_int16_t+0xc2>
 801185a:	7d23      	ldrb	r3, [r4, #20]
 801185c:	2b01      	cmp	r3, #1
 801185e:	d04a      	beq.n	80118f6 <ucdr_serialize_int16_t+0xe6>
 8011860:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011864:	702b      	strb	r3, [r5, #0]
 8011866:	2e00      	cmp	r6, #0
 8011868:	d040      	beq.n	80118ec <ucdr_serialize_int16_t+0xdc>
 801186a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 801186e:	706b      	strb	r3, [r5, #1]
 8011870:	6923      	ldr	r3, [r4, #16]
 8011872:	2102      	movs	r1, #2
 8011874:	68a2      	ldr	r2, [r4, #8]
 8011876:	3302      	adds	r3, #2
 8011878:	7da0      	ldrb	r0, [r4, #22]
 801187a:	4442      	add	r2, r8
 801187c:	7561      	strb	r1, [r4, #21]
 801187e:	1b9e      	subs	r6, r3, r6
 8011880:	f080 0001 	eor.w	r0, r0, #1
 8011884:	60a2      	str	r2, [r4, #8]
 8011886:	6126      	str	r6, [r4, #16]
 8011888:	b002      	add	sp, #8
 801188a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801188e:	2102      	movs	r1, #2
 8011890:	4620      	mov	r0, r4
 8011892:	f000 fb15 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011896:	b190      	cbz	r0, 80118be <ucdr_serialize_int16_t+0xae>
 8011898:	7d23      	ldrb	r3, [r4, #20]
 801189a:	2b01      	cmp	r3, #1
 801189c:	68a3      	ldr	r3, [r4, #8]
 801189e:	d014      	beq.n	80118ca <ucdr_serialize_int16_t+0xba>
 80118a0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80118a4:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80118a8:	7019      	strb	r1, [r3, #0]
 80118aa:	68a3      	ldr	r3, [r4, #8]
 80118ac:	705a      	strb	r2, [r3, #1]
 80118ae:	2102      	movs	r1, #2
 80118b0:	68a2      	ldr	r2, [r4, #8]
 80118b2:	6923      	ldr	r3, [r4, #16]
 80118b4:	440a      	add	r2, r1
 80118b6:	7561      	strb	r1, [r4, #21]
 80118b8:	440b      	add	r3, r1
 80118ba:	60a2      	str	r2, [r4, #8]
 80118bc:	6123      	str	r3, [r4, #16]
 80118be:	7da0      	ldrb	r0, [r4, #22]
 80118c0:	f080 0001 	eor.w	r0, r0, #1
 80118c4:	b002      	add	sp, #8
 80118c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80118ce:	801a      	strh	r2, [r3, #0]
 80118d0:	e7ed      	b.n	80118ae <ucdr_serialize_int16_t+0x9e>
 80118d2:	68a2      	ldr	r2, [r4, #8]
 80118d4:	6923      	ldr	r3, [r4, #16]
 80118d6:	7da0      	ldrb	r0, [r4, #22]
 80118d8:	1b92      	subs	r2, r2, r6
 80118da:	1b9b      	subs	r3, r3, r6
 80118dc:	7567      	strb	r7, [r4, #21]
 80118de:	f080 0001 	eor.w	r0, r0, #1
 80118e2:	60a2      	str	r2, [r4, #8]
 80118e4:	6123      	str	r3, [r4, #16]
 80118e6:	b002      	add	sp, #8
 80118e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80118ec:	68a3      	ldr	r3, [r4, #8]
 80118ee:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80118f2:	701a      	strb	r2, [r3, #0]
 80118f4:	e7bc      	b.n	8011870 <ucdr_serialize_int16_t+0x60>
 80118f6:	4628      	mov	r0, r5
 80118f8:	f10d 0506 	add.w	r5, sp, #6
 80118fc:	4632      	mov	r2, r6
 80118fe:	4629      	mov	r1, r5
 8011900:	f00a fb17 	bl	801bf32 <memcpy>
 8011904:	4642      	mov	r2, r8
 8011906:	19a9      	adds	r1, r5, r6
 8011908:	68a0      	ldr	r0, [r4, #8]
 801190a:	f00a fb12 	bl	801bf32 <memcpy>
 801190e:	e7af      	b.n	8011870 <ucdr_serialize_int16_t+0x60>

08011910 <ucdr_deserialize_int16_t>:
 8011910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011914:	4604      	mov	r4, r0
 8011916:	460d      	mov	r5, r1
 8011918:	2102      	movs	r1, #2
 801191a:	f000 fb25 	bl	8011f68 <ucdr_buffer_alignment>
 801191e:	4601      	mov	r1, r0
 8011920:	4620      	mov	r0, r4
 8011922:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011926:	f000 fb67 	bl	8011ff8 <ucdr_advance_buffer>
 801192a:	2102      	movs	r1, #2
 801192c:	4620      	mov	r0, r4
 801192e:	f000 fabb 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8011932:	bb60      	cbnz	r0, 801198e <ucdr_deserialize_int16_t+0x7e>
 8011934:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 8011938:	42be      	cmp	r6, r7
 801193a:	d923      	bls.n	8011984 <ucdr_deserialize_int16_t+0x74>
 801193c:	6923      	ldr	r3, [r4, #16]
 801193e:	4620      	mov	r0, r4
 8011940:	60a6      	str	r6, [r4, #8]
 8011942:	1bf6      	subs	r6, r6, r7
 8011944:	4433      	add	r3, r6
 8011946:	f1c6 0902 	rsb	r9, r6, #2
 801194a:	6123      	str	r3, [r4, #16]
 801194c:	4649      	mov	r1, r9
 801194e:	f000 fab7 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011952:	2800      	cmp	r0, #0
 8011954:	d034      	beq.n	80119c0 <ucdr_deserialize_int16_t+0xb0>
 8011956:	7d23      	ldrb	r3, [r4, #20]
 8011958:	2b01      	cmp	r3, #1
 801195a:	d042      	beq.n	80119e2 <ucdr_deserialize_int16_t+0xd2>
 801195c:	787b      	ldrb	r3, [r7, #1]
 801195e:	702b      	strb	r3, [r5, #0]
 8011960:	2e00      	cmp	r6, #0
 8011962:	d03a      	beq.n	80119da <ucdr_deserialize_int16_t+0xca>
 8011964:	783b      	ldrb	r3, [r7, #0]
 8011966:	706b      	strb	r3, [r5, #1]
 8011968:	6923      	ldr	r3, [r4, #16]
 801196a:	2102      	movs	r1, #2
 801196c:	68a2      	ldr	r2, [r4, #8]
 801196e:	3302      	adds	r3, #2
 8011970:	7da0      	ldrb	r0, [r4, #22]
 8011972:	444a      	add	r2, r9
 8011974:	7561      	strb	r1, [r4, #21]
 8011976:	1b9b      	subs	r3, r3, r6
 8011978:	f080 0001 	eor.w	r0, r0, #1
 801197c:	60a2      	str	r2, [r4, #8]
 801197e:	6123      	str	r3, [r4, #16]
 8011980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011984:	2102      	movs	r1, #2
 8011986:	4620      	mov	r0, r4
 8011988:	f000 fa9a 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 801198c:	b180      	cbz	r0, 80119b0 <ucdr_deserialize_int16_t+0xa0>
 801198e:	7d23      	ldrb	r3, [r4, #20]
 8011990:	2b01      	cmp	r3, #1
 8011992:	68a3      	ldr	r3, [r4, #8]
 8011994:	d011      	beq.n	80119ba <ucdr_deserialize_int16_t+0xaa>
 8011996:	785b      	ldrb	r3, [r3, #1]
 8011998:	702b      	strb	r3, [r5, #0]
 801199a:	68a3      	ldr	r3, [r4, #8]
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	706b      	strb	r3, [r5, #1]
 80119a0:	2102      	movs	r1, #2
 80119a2:	68a2      	ldr	r2, [r4, #8]
 80119a4:	6923      	ldr	r3, [r4, #16]
 80119a6:	440a      	add	r2, r1
 80119a8:	7561      	strb	r1, [r4, #21]
 80119aa:	440b      	add	r3, r1
 80119ac:	60a2      	str	r2, [r4, #8]
 80119ae:	6123      	str	r3, [r4, #16]
 80119b0:	7da0      	ldrb	r0, [r4, #22]
 80119b2:	f080 0001 	eor.w	r0, r0, #1
 80119b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119ba:	881b      	ldrh	r3, [r3, #0]
 80119bc:	802b      	strh	r3, [r5, #0]
 80119be:	e7ef      	b.n	80119a0 <ucdr_deserialize_int16_t+0x90>
 80119c0:	68a2      	ldr	r2, [r4, #8]
 80119c2:	6923      	ldr	r3, [r4, #16]
 80119c4:	1b92      	subs	r2, r2, r6
 80119c6:	7da0      	ldrb	r0, [r4, #22]
 80119c8:	1b9b      	subs	r3, r3, r6
 80119ca:	f884 8015 	strb.w	r8, [r4, #21]
 80119ce:	f080 0001 	eor.w	r0, r0, #1
 80119d2:	60a2      	str	r2, [r4, #8]
 80119d4:	6123      	str	r3, [r4, #16]
 80119d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80119da:	68a3      	ldr	r3, [r4, #8]
 80119dc:	781b      	ldrb	r3, [r3, #0]
 80119de:	706b      	strb	r3, [r5, #1]
 80119e0:	e7c2      	b.n	8011968 <ucdr_deserialize_int16_t+0x58>
 80119e2:	4639      	mov	r1, r7
 80119e4:	4632      	mov	r2, r6
 80119e6:	4628      	mov	r0, r5
 80119e8:	f00a faa3 	bl	801bf32 <memcpy>
 80119ec:	464a      	mov	r2, r9
 80119ee:	19a8      	adds	r0, r5, r6
 80119f0:	68a1      	ldr	r1, [r4, #8]
 80119f2:	f00a fa9e 	bl	801bf32 <memcpy>
 80119f6:	e7b7      	b.n	8011968 <ucdr_deserialize_int16_t+0x58>

080119f8 <ucdr_serialize_int32_t>:
 80119f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119fc:	b082      	sub	sp, #8
 80119fe:	4604      	mov	r4, r0
 8011a00:	9101      	str	r1, [sp, #4]
 8011a02:	2104      	movs	r1, #4
 8011a04:	f000 fab0 	bl	8011f68 <ucdr_buffer_alignment>
 8011a08:	4601      	mov	r1, r0
 8011a0a:	4620      	mov	r0, r4
 8011a0c:	7d67      	ldrb	r7, [r4, #21]
 8011a0e:	f000 faf3 	bl	8011ff8 <ucdr_advance_buffer>
 8011a12:	2104      	movs	r1, #4
 8011a14:	4620      	mov	r0, r4
 8011a16:	f000 fa47 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8011a1a:	2800      	cmp	r0, #0
 8011a1c:	d139      	bne.n	8011a92 <ucdr_serialize_int32_t+0x9a>
 8011a1e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 8011a22:	42ab      	cmp	r3, r5
 8011a24:	d930      	bls.n	8011a88 <ucdr_serialize_int32_t+0x90>
 8011a26:	1b5e      	subs	r6, r3, r5
 8011a28:	60a3      	str	r3, [r4, #8]
 8011a2a:	6923      	ldr	r3, [r4, #16]
 8011a2c:	4620      	mov	r0, r4
 8011a2e:	f1c6 0804 	rsb	r8, r6, #4
 8011a32:	4433      	add	r3, r6
 8011a34:	4641      	mov	r1, r8
 8011a36:	6123      	str	r3, [r4, #16]
 8011a38:	f000 fa42 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011a3c:	2800      	cmp	r0, #0
 8011a3e:	d04c      	beq.n	8011ada <ucdr_serialize_int32_t+0xe2>
 8011a40:	7d23      	ldrb	r3, [r4, #20]
 8011a42:	2b01      	cmp	r3, #1
 8011a44:	d063      	beq.n	8011b0e <ucdr_serialize_int32_t+0x116>
 8011a46:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011a4a:	702b      	strb	r3, [r5, #0]
 8011a4c:	2e00      	cmp	r6, #0
 8011a4e:	d051      	beq.n	8011af4 <ucdr_serialize_int32_t+0xfc>
 8011a50:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011a54:	2e01      	cmp	r6, #1
 8011a56:	706b      	strb	r3, [r5, #1]
 8011a58:	d050      	beq.n	8011afc <ucdr_serialize_int32_t+0x104>
 8011a5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011a5e:	2e02      	cmp	r6, #2
 8011a60:	70ab      	strb	r3, [r5, #2]
 8011a62:	d04f      	beq.n	8011b04 <ucdr_serialize_int32_t+0x10c>
 8011a64:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011a68:	70eb      	strb	r3, [r5, #3]
 8011a6a:	6923      	ldr	r3, [r4, #16]
 8011a6c:	2104      	movs	r1, #4
 8011a6e:	68a2      	ldr	r2, [r4, #8]
 8011a70:	3304      	adds	r3, #4
 8011a72:	7da0      	ldrb	r0, [r4, #22]
 8011a74:	4442      	add	r2, r8
 8011a76:	7561      	strb	r1, [r4, #21]
 8011a78:	1b9e      	subs	r6, r3, r6
 8011a7a:	f080 0001 	eor.w	r0, r0, #1
 8011a7e:	60a2      	str	r2, [r4, #8]
 8011a80:	6126      	str	r6, [r4, #16]
 8011a82:	b002      	add	sp, #8
 8011a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a88:	2104      	movs	r1, #4
 8011a8a:	4620      	mov	r0, r4
 8011a8c:	f000 fa18 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011a90:	b1d0      	cbz	r0, 8011ac8 <ucdr_serialize_int32_t+0xd0>
 8011a92:	7d23      	ldrb	r3, [r4, #20]
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	68a3      	ldr	r3, [r4, #8]
 8011a98:	d01c      	beq.n	8011ad4 <ucdr_serialize_int32_t+0xdc>
 8011a9a:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011a9e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011aa2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011aa6:	7018      	strb	r0, [r3, #0]
 8011aa8:	68a3      	ldr	r3, [r4, #8]
 8011aaa:	705a      	strb	r2, [r3, #1]
 8011aac:	68a3      	ldr	r3, [r4, #8]
 8011aae:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011ab2:	7099      	strb	r1, [r3, #2]
 8011ab4:	68a3      	ldr	r3, [r4, #8]
 8011ab6:	70da      	strb	r2, [r3, #3]
 8011ab8:	2104      	movs	r1, #4
 8011aba:	68a2      	ldr	r2, [r4, #8]
 8011abc:	6923      	ldr	r3, [r4, #16]
 8011abe:	440a      	add	r2, r1
 8011ac0:	7561      	strb	r1, [r4, #21]
 8011ac2:	440b      	add	r3, r1
 8011ac4:	60a2      	str	r2, [r4, #8]
 8011ac6:	6123      	str	r3, [r4, #16]
 8011ac8:	7da0      	ldrb	r0, [r4, #22]
 8011aca:	f080 0001 	eor.w	r0, r0, #1
 8011ace:	b002      	add	sp, #8
 8011ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ad4:	9a01      	ldr	r2, [sp, #4]
 8011ad6:	601a      	str	r2, [r3, #0]
 8011ad8:	e7ee      	b.n	8011ab8 <ucdr_serialize_int32_t+0xc0>
 8011ada:	68a2      	ldr	r2, [r4, #8]
 8011adc:	6923      	ldr	r3, [r4, #16]
 8011ade:	7da0      	ldrb	r0, [r4, #22]
 8011ae0:	1b92      	subs	r2, r2, r6
 8011ae2:	1b9b      	subs	r3, r3, r6
 8011ae4:	7567      	strb	r7, [r4, #21]
 8011ae6:	f080 0001 	eor.w	r0, r0, #1
 8011aea:	60a2      	str	r2, [r4, #8]
 8011aec:	6123      	str	r3, [r4, #16]
 8011aee:	b002      	add	sp, #8
 8011af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011af4:	68a3      	ldr	r3, [r4, #8]
 8011af6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011afa:	701a      	strb	r2, [r3, #0]
 8011afc:	68a3      	ldr	r3, [r4, #8]
 8011afe:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011b02:	701a      	strb	r2, [r3, #0]
 8011b04:	68a3      	ldr	r3, [r4, #8]
 8011b06:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011b0a:	701a      	strb	r2, [r3, #0]
 8011b0c:	e7ad      	b.n	8011a6a <ucdr_serialize_int32_t+0x72>
 8011b0e:	4628      	mov	r0, r5
 8011b10:	ad01      	add	r5, sp, #4
 8011b12:	4632      	mov	r2, r6
 8011b14:	4629      	mov	r1, r5
 8011b16:	f00a fa0c 	bl	801bf32 <memcpy>
 8011b1a:	4642      	mov	r2, r8
 8011b1c:	19a9      	adds	r1, r5, r6
 8011b1e:	68a0      	ldr	r0, [r4, #8]
 8011b20:	f00a fa07 	bl	801bf32 <memcpy>
 8011b24:	e7a1      	b.n	8011a6a <ucdr_serialize_int32_t+0x72>
 8011b26:	bf00      	nop

08011b28 <ucdr_deserialize_int32_t>:
 8011b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011b2c:	4604      	mov	r4, r0
 8011b2e:	460d      	mov	r5, r1
 8011b30:	2104      	movs	r1, #4
 8011b32:	f000 fa19 	bl	8011f68 <ucdr_buffer_alignment>
 8011b36:	4601      	mov	r1, r0
 8011b38:	4620      	mov	r0, r4
 8011b3a:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011b3e:	f000 fa5b 	bl	8011ff8 <ucdr_advance_buffer>
 8011b42:	2104      	movs	r1, #4
 8011b44:	4620      	mov	r0, r4
 8011b46:	f000 f9af 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8011b4a:	2800      	cmp	r0, #0
 8011b4c:	d138      	bne.n	8011bc0 <ucdr_deserialize_int32_t+0x98>
 8011b4e:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011b52:	42b7      	cmp	r7, r6
 8011b54:	d92f      	bls.n	8011bb6 <ucdr_deserialize_int32_t+0x8e>
 8011b56:	6923      	ldr	r3, [r4, #16]
 8011b58:	4620      	mov	r0, r4
 8011b5a:	60a7      	str	r7, [r4, #8]
 8011b5c:	1bbf      	subs	r7, r7, r6
 8011b5e:	443b      	add	r3, r7
 8011b60:	f1c7 0904 	rsb	r9, r7, #4
 8011b64:	6123      	str	r3, [r4, #16]
 8011b66:	4649      	mov	r1, r9
 8011b68:	f000 f9aa 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011b6c:	2800      	cmp	r0, #0
 8011b6e:	d046      	beq.n	8011bfe <ucdr_deserialize_int32_t+0xd6>
 8011b70:	7d23      	ldrb	r3, [r4, #20]
 8011b72:	2b01      	cmp	r3, #1
 8011b74:	d05c      	beq.n	8011c30 <ucdr_deserialize_int32_t+0x108>
 8011b76:	78f3      	ldrb	r3, [r6, #3]
 8011b78:	702b      	strb	r3, [r5, #0]
 8011b7a:	2f00      	cmp	r7, #0
 8011b7c:	d04c      	beq.n	8011c18 <ucdr_deserialize_int32_t+0xf0>
 8011b7e:	78b3      	ldrb	r3, [r6, #2]
 8011b80:	2f01      	cmp	r7, #1
 8011b82:	706b      	strb	r3, [r5, #1]
 8011b84:	f105 0302 	add.w	r3, r5, #2
 8011b88:	d04a      	beq.n	8011c20 <ucdr_deserialize_int32_t+0xf8>
 8011b8a:	7873      	ldrb	r3, [r6, #1]
 8011b8c:	2f02      	cmp	r7, #2
 8011b8e:	70ab      	strb	r3, [r5, #2]
 8011b90:	f105 0303 	add.w	r3, r5, #3
 8011b94:	d048      	beq.n	8011c28 <ucdr_deserialize_int32_t+0x100>
 8011b96:	7833      	ldrb	r3, [r6, #0]
 8011b98:	70eb      	strb	r3, [r5, #3]
 8011b9a:	6923      	ldr	r3, [r4, #16]
 8011b9c:	2104      	movs	r1, #4
 8011b9e:	68a2      	ldr	r2, [r4, #8]
 8011ba0:	3304      	adds	r3, #4
 8011ba2:	7da0      	ldrb	r0, [r4, #22]
 8011ba4:	444a      	add	r2, r9
 8011ba6:	7561      	strb	r1, [r4, #21]
 8011ba8:	1bdb      	subs	r3, r3, r7
 8011baa:	f080 0001 	eor.w	r0, r0, #1
 8011bae:	60a2      	str	r2, [r4, #8]
 8011bb0:	6123      	str	r3, [r4, #16]
 8011bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bb6:	2104      	movs	r1, #4
 8011bb8:	4620      	mov	r0, r4
 8011bba:	f000 f981 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011bbe:	b1b0      	cbz	r0, 8011bee <ucdr_deserialize_int32_t+0xc6>
 8011bc0:	7d23      	ldrb	r3, [r4, #20]
 8011bc2:	2b01      	cmp	r3, #1
 8011bc4:	68a3      	ldr	r3, [r4, #8]
 8011bc6:	d017      	beq.n	8011bf8 <ucdr_deserialize_int32_t+0xd0>
 8011bc8:	78db      	ldrb	r3, [r3, #3]
 8011bca:	702b      	strb	r3, [r5, #0]
 8011bcc:	68a3      	ldr	r3, [r4, #8]
 8011bce:	789b      	ldrb	r3, [r3, #2]
 8011bd0:	706b      	strb	r3, [r5, #1]
 8011bd2:	68a3      	ldr	r3, [r4, #8]
 8011bd4:	785b      	ldrb	r3, [r3, #1]
 8011bd6:	70ab      	strb	r3, [r5, #2]
 8011bd8:	68a3      	ldr	r3, [r4, #8]
 8011bda:	781b      	ldrb	r3, [r3, #0]
 8011bdc:	70eb      	strb	r3, [r5, #3]
 8011bde:	2104      	movs	r1, #4
 8011be0:	68a2      	ldr	r2, [r4, #8]
 8011be2:	6923      	ldr	r3, [r4, #16]
 8011be4:	440a      	add	r2, r1
 8011be6:	7561      	strb	r1, [r4, #21]
 8011be8:	440b      	add	r3, r1
 8011bea:	60a2      	str	r2, [r4, #8]
 8011bec:	6123      	str	r3, [r4, #16]
 8011bee:	7da0      	ldrb	r0, [r4, #22]
 8011bf0:	f080 0001 	eor.w	r0, r0, #1
 8011bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	602b      	str	r3, [r5, #0]
 8011bfc:	e7ef      	b.n	8011bde <ucdr_deserialize_int32_t+0xb6>
 8011bfe:	68a2      	ldr	r2, [r4, #8]
 8011c00:	6923      	ldr	r3, [r4, #16]
 8011c02:	1bd2      	subs	r2, r2, r7
 8011c04:	7da0      	ldrb	r0, [r4, #22]
 8011c06:	1bdb      	subs	r3, r3, r7
 8011c08:	f884 8015 	strb.w	r8, [r4, #21]
 8011c0c:	f080 0001 	eor.w	r0, r0, #1
 8011c10:	60a2      	str	r2, [r4, #8]
 8011c12:	6123      	str	r3, [r4, #16]
 8011c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c18:	68a3      	ldr	r3, [r4, #8]
 8011c1a:	789b      	ldrb	r3, [r3, #2]
 8011c1c:	706b      	strb	r3, [r5, #1]
 8011c1e:	1cab      	adds	r3, r5, #2
 8011c20:	68a2      	ldr	r2, [r4, #8]
 8011c22:	7852      	ldrb	r2, [r2, #1]
 8011c24:	f803 2b01 	strb.w	r2, [r3], #1
 8011c28:	68a2      	ldr	r2, [r4, #8]
 8011c2a:	7812      	ldrb	r2, [r2, #0]
 8011c2c:	701a      	strb	r2, [r3, #0]
 8011c2e:	e7b4      	b.n	8011b9a <ucdr_deserialize_int32_t+0x72>
 8011c30:	4631      	mov	r1, r6
 8011c32:	463a      	mov	r2, r7
 8011c34:	4628      	mov	r0, r5
 8011c36:	f00a f97c 	bl	801bf32 <memcpy>
 8011c3a:	464a      	mov	r2, r9
 8011c3c:	19e8      	adds	r0, r5, r7
 8011c3e:	68a1      	ldr	r1, [r4, #8]
 8011c40:	f00a f977 	bl	801bf32 <memcpy>
 8011c44:	e7a9      	b.n	8011b9a <ucdr_deserialize_int32_t+0x72>
 8011c46:	bf00      	nop

08011c48 <ucdr_serialize_endian_float>:
 8011c48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011c4c:	4604      	mov	r4, r0
 8011c4e:	b083      	sub	sp, #12
 8011c50:	460d      	mov	r5, r1
 8011c52:	2104      	movs	r1, #4
 8011c54:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011c58:	f000 f986 	bl	8011f68 <ucdr_buffer_alignment>
 8011c5c:	4601      	mov	r1, r0
 8011c5e:	4620      	mov	r0, r4
 8011c60:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011c64:	f000 f9c8 	bl	8011ff8 <ucdr_advance_buffer>
 8011c68:	2104      	movs	r1, #4
 8011c6a:	4620      	mov	r0, r4
 8011c6c:	f000 f91c 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8011c70:	2800      	cmp	r0, #0
 8011c72:	d138      	bne.n	8011ce6 <ucdr_serialize_endian_float+0x9e>
 8011c74:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 8011c78:	42b7      	cmp	r7, r6
 8011c7a:	d92f      	bls.n	8011cdc <ucdr_serialize_endian_float+0x94>
 8011c7c:	6923      	ldr	r3, [r4, #16]
 8011c7e:	4620      	mov	r0, r4
 8011c80:	60a7      	str	r7, [r4, #8]
 8011c82:	1bbf      	subs	r7, r7, r6
 8011c84:	443b      	add	r3, r7
 8011c86:	f1c7 0904 	rsb	r9, r7, #4
 8011c8a:	6123      	str	r3, [r4, #16]
 8011c8c:	4649      	mov	r1, r9
 8011c8e:	f000 f917 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011c92:	2800      	cmp	r0, #0
 8011c94:	d04a      	beq.n	8011d2c <ucdr_serialize_endian_float+0xe4>
 8011c96:	2d01      	cmp	r5, #1
 8011c98:	d063      	beq.n	8011d62 <ucdr_serialize_endian_float+0x11a>
 8011c9a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011c9e:	7033      	strb	r3, [r6, #0]
 8011ca0:	2f00      	cmp	r7, #0
 8011ca2:	d051      	beq.n	8011d48 <ucdr_serialize_endian_float+0x100>
 8011ca4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8011ca8:	2f01      	cmp	r7, #1
 8011caa:	7073      	strb	r3, [r6, #1]
 8011cac:	d050      	beq.n	8011d50 <ucdr_serialize_endian_float+0x108>
 8011cae:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8011cb2:	2f02      	cmp	r7, #2
 8011cb4:	70b3      	strb	r3, [r6, #2]
 8011cb6:	d04f      	beq.n	8011d58 <ucdr_serialize_endian_float+0x110>
 8011cb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8011cbc:	70f3      	strb	r3, [r6, #3]
 8011cbe:	6923      	ldr	r3, [r4, #16]
 8011cc0:	2104      	movs	r1, #4
 8011cc2:	68a2      	ldr	r2, [r4, #8]
 8011cc4:	7da0      	ldrb	r0, [r4, #22]
 8011cc6:	3304      	adds	r3, #4
 8011cc8:	444a      	add	r2, r9
 8011cca:	7561      	strb	r1, [r4, #21]
 8011ccc:	1bdb      	subs	r3, r3, r7
 8011cce:	f080 0001 	eor.w	r0, r0, #1
 8011cd2:	60a2      	str	r2, [r4, #8]
 8011cd4:	6123      	str	r3, [r4, #16]
 8011cd6:	b003      	add	sp, #12
 8011cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cdc:	2104      	movs	r1, #4
 8011cde:	4620      	mov	r0, r4
 8011ce0:	f000 f8ee 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011ce4:	b1c8      	cbz	r0, 8011d1a <ucdr_serialize_endian_float+0xd2>
 8011ce6:	2d01      	cmp	r5, #1
 8011ce8:	68a3      	ldr	r3, [r4, #8]
 8011cea:	d01c      	beq.n	8011d26 <ucdr_serialize_endian_float+0xde>
 8011cec:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8011cf0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011cf4:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8011cf8:	7018      	strb	r0, [r3, #0]
 8011cfa:	68a3      	ldr	r3, [r4, #8]
 8011cfc:	705a      	strb	r2, [r3, #1]
 8011cfe:	68a3      	ldr	r3, [r4, #8]
 8011d00:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011d04:	7099      	strb	r1, [r3, #2]
 8011d06:	68a3      	ldr	r3, [r4, #8]
 8011d08:	70da      	strb	r2, [r3, #3]
 8011d0a:	2104      	movs	r1, #4
 8011d0c:	68a2      	ldr	r2, [r4, #8]
 8011d0e:	6923      	ldr	r3, [r4, #16]
 8011d10:	440a      	add	r2, r1
 8011d12:	7561      	strb	r1, [r4, #21]
 8011d14:	440b      	add	r3, r1
 8011d16:	60a2      	str	r2, [r4, #8]
 8011d18:	6123      	str	r3, [r4, #16]
 8011d1a:	7da0      	ldrb	r0, [r4, #22]
 8011d1c:	f080 0001 	eor.w	r0, r0, #1
 8011d20:	b003      	add	sp, #12
 8011d22:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d26:	9a01      	ldr	r2, [sp, #4]
 8011d28:	601a      	str	r2, [r3, #0]
 8011d2a:	e7ee      	b.n	8011d0a <ucdr_serialize_endian_float+0xc2>
 8011d2c:	68a2      	ldr	r2, [r4, #8]
 8011d2e:	6923      	ldr	r3, [r4, #16]
 8011d30:	7da0      	ldrb	r0, [r4, #22]
 8011d32:	1bd2      	subs	r2, r2, r7
 8011d34:	1bdb      	subs	r3, r3, r7
 8011d36:	f884 8015 	strb.w	r8, [r4, #21]
 8011d3a:	f080 0001 	eor.w	r0, r0, #1
 8011d3e:	60a2      	str	r2, [r4, #8]
 8011d40:	6123      	str	r3, [r4, #16]
 8011d42:	b003      	add	sp, #12
 8011d44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d48:	68a3      	ldr	r3, [r4, #8]
 8011d4a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8011d4e:	701a      	strb	r2, [r3, #0]
 8011d50:	68a3      	ldr	r3, [r4, #8]
 8011d52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8011d56:	701a      	strb	r2, [r3, #0]
 8011d58:	68a3      	ldr	r3, [r4, #8]
 8011d5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8011d5e:	701a      	strb	r2, [r3, #0]
 8011d60:	e7ad      	b.n	8011cbe <ucdr_serialize_endian_float+0x76>
 8011d62:	ad01      	add	r5, sp, #4
 8011d64:	463a      	mov	r2, r7
 8011d66:	4630      	mov	r0, r6
 8011d68:	4629      	mov	r1, r5
 8011d6a:	f00a f8e2 	bl	801bf32 <memcpy>
 8011d6e:	464a      	mov	r2, r9
 8011d70:	19e9      	adds	r1, r5, r7
 8011d72:	68a0      	ldr	r0, [r4, #8]
 8011d74:	f00a f8dd 	bl	801bf32 <memcpy>
 8011d78:	e7a1      	b.n	8011cbe <ucdr_serialize_endian_float+0x76>
 8011d7a:	bf00      	nop

08011d7c <ucdr_deserialize_endian_float>:
 8011d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d80:	4604      	mov	r4, r0
 8011d82:	460e      	mov	r6, r1
 8011d84:	2104      	movs	r1, #4
 8011d86:	4615      	mov	r5, r2
 8011d88:	f000 f8ee 	bl	8011f68 <ucdr_buffer_alignment>
 8011d8c:	4601      	mov	r1, r0
 8011d8e:	4620      	mov	r0, r4
 8011d90:	f894 8015 	ldrb.w	r8, [r4, #21]
 8011d94:	f000 f930 	bl	8011ff8 <ucdr_advance_buffer>
 8011d98:	2104      	movs	r1, #4
 8011d9a:	4620      	mov	r0, r4
 8011d9c:	f000 f884 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8011da0:	2800      	cmp	r0, #0
 8011da2:	d13c      	bne.n	8011e1e <ucdr_deserialize_endian_float+0xa2>
 8011da4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 8011da8:	42bb      	cmp	r3, r7
 8011daa:	d933      	bls.n	8011e14 <ucdr_deserialize_endian_float+0x98>
 8011dac:	eba3 0907 	sub.w	r9, r3, r7
 8011db0:	60a3      	str	r3, [r4, #8]
 8011db2:	6923      	ldr	r3, [r4, #16]
 8011db4:	4620      	mov	r0, r4
 8011db6:	f1c9 0a04 	rsb	sl, r9, #4
 8011dba:	444b      	add	r3, r9
 8011dbc:	4651      	mov	r1, sl
 8011dbe:	6123      	str	r3, [r4, #16]
 8011dc0:	f000 f87e 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011dc4:	2800      	cmp	r0, #0
 8011dc6:	d048      	beq.n	8011e5a <ucdr_deserialize_endian_float+0xde>
 8011dc8:	2e01      	cmp	r6, #1
 8011dca:	d061      	beq.n	8011e90 <ucdr_deserialize_endian_float+0x114>
 8011dcc:	78fb      	ldrb	r3, [r7, #3]
 8011dce:	702b      	strb	r3, [r5, #0]
 8011dd0:	f1b9 0f00 	cmp.w	r9, #0
 8011dd4:	d050      	beq.n	8011e78 <ucdr_deserialize_endian_float+0xfc>
 8011dd6:	78bb      	ldrb	r3, [r7, #2]
 8011dd8:	f1b9 0f01 	cmp.w	r9, #1
 8011ddc:	706b      	strb	r3, [r5, #1]
 8011dde:	f105 0302 	add.w	r3, r5, #2
 8011de2:	d04d      	beq.n	8011e80 <ucdr_deserialize_endian_float+0x104>
 8011de4:	787b      	ldrb	r3, [r7, #1]
 8011de6:	f1b9 0f02 	cmp.w	r9, #2
 8011dea:	70ab      	strb	r3, [r5, #2]
 8011dec:	f105 0303 	add.w	r3, r5, #3
 8011df0:	d04a      	beq.n	8011e88 <ucdr_deserialize_endian_float+0x10c>
 8011df2:	783b      	ldrb	r3, [r7, #0]
 8011df4:	70eb      	strb	r3, [r5, #3]
 8011df6:	6923      	ldr	r3, [r4, #16]
 8011df8:	2104      	movs	r1, #4
 8011dfa:	68a2      	ldr	r2, [r4, #8]
 8011dfc:	3304      	adds	r3, #4
 8011dfe:	7da0      	ldrb	r0, [r4, #22]
 8011e00:	4452      	add	r2, sl
 8011e02:	7561      	strb	r1, [r4, #21]
 8011e04:	eba3 0309 	sub.w	r3, r3, r9
 8011e08:	f080 0001 	eor.w	r0, r0, #1
 8011e0c:	60a2      	str	r2, [r4, #8]
 8011e0e:	6123      	str	r3, [r4, #16]
 8011e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e14:	2104      	movs	r1, #4
 8011e16:	4620      	mov	r0, r4
 8011e18:	f000 f852 	bl	8011ec0 <ucdr_check_final_buffer_behavior>
 8011e1c:	b1a8      	cbz	r0, 8011e4a <ucdr_deserialize_endian_float+0xce>
 8011e1e:	2e01      	cmp	r6, #1
 8011e20:	68a3      	ldr	r3, [r4, #8]
 8011e22:	d017      	beq.n	8011e54 <ucdr_deserialize_endian_float+0xd8>
 8011e24:	78db      	ldrb	r3, [r3, #3]
 8011e26:	702b      	strb	r3, [r5, #0]
 8011e28:	68a3      	ldr	r3, [r4, #8]
 8011e2a:	789b      	ldrb	r3, [r3, #2]
 8011e2c:	706b      	strb	r3, [r5, #1]
 8011e2e:	68a3      	ldr	r3, [r4, #8]
 8011e30:	785b      	ldrb	r3, [r3, #1]
 8011e32:	70ab      	strb	r3, [r5, #2]
 8011e34:	68a3      	ldr	r3, [r4, #8]
 8011e36:	781b      	ldrb	r3, [r3, #0]
 8011e38:	70eb      	strb	r3, [r5, #3]
 8011e3a:	2104      	movs	r1, #4
 8011e3c:	68a2      	ldr	r2, [r4, #8]
 8011e3e:	6923      	ldr	r3, [r4, #16]
 8011e40:	440a      	add	r2, r1
 8011e42:	7561      	strb	r1, [r4, #21]
 8011e44:	440b      	add	r3, r1
 8011e46:	60a2      	str	r2, [r4, #8]
 8011e48:	6123      	str	r3, [r4, #16]
 8011e4a:	7da0      	ldrb	r0, [r4, #22]
 8011e4c:	f080 0001 	eor.w	r0, r0, #1
 8011e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	602b      	str	r3, [r5, #0]
 8011e58:	e7ef      	b.n	8011e3a <ucdr_deserialize_endian_float+0xbe>
 8011e5a:	68a2      	ldr	r2, [r4, #8]
 8011e5c:	6923      	ldr	r3, [r4, #16]
 8011e5e:	eba2 0209 	sub.w	r2, r2, r9
 8011e62:	7da0      	ldrb	r0, [r4, #22]
 8011e64:	eba3 0309 	sub.w	r3, r3, r9
 8011e68:	f884 8015 	strb.w	r8, [r4, #21]
 8011e6c:	f080 0001 	eor.w	r0, r0, #1
 8011e70:	60a2      	str	r2, [r4, #8]
 8011e72:	6123      	str	r3, [r4, #16]
 8011e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e78:	68a3      	ldr	r3, [r4, #8]
 8011e7a:	789b      	ldrb	r3, [r3, #2]
 8011e7c:	706b      	strb	r3, [r5, #1]
 8011e7e:	1cab      	adds	r3, r5, #2
 8011e80:	68a2      	ldr	r2, [r4, #8]
 8011e82:	7852      	ldrb	r2, [r2, #1]
 8011e84:	f803 2b01 	strb.w	r2, [r3], #1
 8011e88:	68a2      	ldr	r2, [r4, #8]
 8011e8a:	7812      	ldrb	r2, [r2, #0]
 8011e8c:	701a      	strb	r2, [r3, #0]
 8011e8e:	e7b2      	b.n	8011df6 <ucdr_deserialize_endian_float+0x7a>
 8011e90:	4639      	mov	r1, r7
 8011e92:	464a      	mov	r2, r9
 8011e94:	4628      	mov	r0, r5
 8011e96:	f00a f84c 	bl	801bf32 <memcpy>
 8011e9a:	4652      	mov	r2, sl
 8011e9c:	eb05 0009 	add.w	r0, r5, r9
 8011ea0:	68a1      	ldr	r1, [r4, #8]
 8011ea2:	f00a f846 	bl	801bf32 <memcpy>
 8011ea6:	e7a6      	b.n	8011df6 <ucdr_deserialize_endian_float+0x7a>

08011ea8 <ucdr_check_buffer_available_for>:
 8011ea8:	7d83      	ldrb	r3, [r0, #22]
 8011eaa:	b93b      	cbnz	r3, 8011ebc <ucdr_check_buffer_available_for+0x14>
 8011eac:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 8011eb0:	4419      	add	r1, r3
 8011eb2:	4288      	cmp	r0, r1
 8011eb4:	bf34      	ite	cc
 8011eb6:	2000      	movcc	r0, #0
 8011eb8:	2001      	movcs	r0, #1
 8011eba:	4770      	bx	lr
 8011ebc:	2000      	movs	r0, #0
 8011ebe:	4770      	bx	lr

08011ec0 <ucdr_check_final_buffer_behavior>:
 8011ec0:	7d83      	ldrb	r3, [r0, #22]
 8011ec2:	b943      	cbnz	r3, 8011ed6 <ucdr_check_final_buffer_behavior+0x16>
 8011ec4:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 8011ec8:	b510      	push	{r4, lr}
 8011eca:	4291      	cmp	r1, r2
 8011ecc:	4604      	mov	r4, r0
 8011ece:	d205      	bcs.n	8011edc <ucdr_check_final_buffer_behavior+0x1c>
 8011ed0:	2301      	movs	r3, #1
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	bd10      	pop	{r4, pc}
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	4618      	mov	r0, r3
 8011eda:	4770      	bx	lr
 8011edc:	6982      	ldr	r2, [r0, #24]
 8011ede:	b13a      	cbz	r2, 8011ef0 <ucdr_check_final_buffer_behavior+0x30>
 8011ee0:	69c1      	ldr	r1, [r0, #28]
 8011ee2:	4790      	blx	r2
 8011ee4:	f080 0301 	eor.w	r3, r0, #1
 8011ee8:	75a0      	strb	r0, [r4, #22]
 8011eea:	b2db      	uxtb	r3, r3
 8011eec:	4618      	mov	r0, r3
 8011eee:	bd10      	pop	{r4, pc}
 8011ef0:	2001      	movs	r0, #1
 8011ef2:	75a0      	strb	r0, [r4, #22]
 8011ef4:	e7fa      	b.n	8011eec <ucdr_check_final_buffer_behavior+0x2c>
 8011ef6:	bf00      	nop

08011ef8 <ucdr_set_on_full_buffer_callback>:
 8011ef8:	e9c0 1206 	strd	r1, r2, [r0, #24]
 8011efc:	4770      	bx	lr
 8011efe:	bf00      	nop

08011f00 <ucdr_init_buffer_origin_offset_endian>:
 8011f00:	b410      	push	{r4}
 8011f02:	9c01      	ldr	r4, [sp, #4]
 8011f04:	440a      	add	r2, r1
 8011f06:	6001      	str	r1, [r0, #0]
 8011f08:	6042      	str	r2, [r0, #4]
 8011f0a:	190a      	adds	r2, r1, r4
 8011f0c:	441c      	add	r4, r3
 8011f0e:	6082      	str	r2, [r0, #8]
 8011f10:	2200      	movs	r2, #0
 8011f12:	e9c0 3403 	strd	r3, r4, [r0, #12]
 8011f16:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8011f1a:	7542      	strb	r2, [r0, #21]
 8011f1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f20:	7582      	strb	r2, [r0, #22]
 8011f22:	7503      	strb	r3, [r0, #20]
 8011f24:	e9c0 2206 	strd	r2, r2, [r0, #24]
 8011f28:	4770      	bx	lr
 8011f2a:	bf00      	nop

08011f2c <ucdr_init_buffer_origin_offset>:
 8011f2c:	b510      	push	{r4, lr}
 8011f2e:	b082      	sub	sp, #8
 8011f30:	9c04      	ldr	r4, [sp, #16]
 8011f32:	9400      	str	r4, [sp, #0]
 8011f34:	2401      	movs	r4, #1
 8011f36:	9401      	str	r4, [sp, #4]
 8011f38:	f7ff ffe2 	bl	8011f00 <ucdr_init_buffer_origin_offset_endian>
 8011f3c:	b002      	add	sp, #8
 8011f3e:	bd10      	pop	{r4, pc}

08011f40 <ucdr_init_buffer_origin>:
 8011f40:	b510      	push	{r4, lr}
 8011f42:	2400      	movs	r4, #0
 8011f44:	b082      	sub	sp, #8
 8011f46:	9400      	str	r4, [sp, #0]
 8011f48:	f7ff fff0 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 8011f4c:	b002      	add	sp, #8
 8011f4e:	bd10      	pop	{r4, pc}

08011f50 <ucdr_init_buffer>:
 8011f50:	2300      	movs	r3, #0
 8011f52:	f7ff bff5 	b.w	8011f40 <ucdr_init_buffer_origin>
 8011f56:	bf00      	nop

08011f58 <ucdr_alignment>:
 8011f58:	fbb0 f2f1 	udiv	r2, r0, r1
 8011f5c:	fb02 0011 	mls	r0, r2, r1, r0
 8011f60:	1e4b      	subs	r3, r1, #1
 8011f62:	1a08      	subs	r0, r1, r0
 8011f64:	4018      	ands	r0, r3
 8011f66:	4770      	bx	lr

08011f68 <ucdr_buffer_alignment>:
 8011f68:	7d43      	ldrb	r3, [r0, #21]
 8011f6a:	428b      	cmp	r3, r1
 8011f6c:	d209      	bcs.n	8011f82 <ucdr_buffer_alignment+0x1a>
 8011f6e:	6903      	ldr	r3, [r0, #16]
 8011f70:	1e4a      	subs	r2, r1, #1
 8011f72:	fbb3 f0f1 	udiv	r0, r3, r1
 8011f76:	fb01 3010 	mls	r0, r1, r0, r3
 8011f7a:	1a09      	subs	r1, r1, r0
 8011f7c:	ea01 0002 	and.w	r0, r1, r2
 8011f80:	4770      	bx	lr
 8011f82:	2000      	movs	r0, #0
 8011f84:	4770      	bx	lr
 8011f86:	bf00      	nop

08011f88 <ucdr_align_to>:
 8011f88:	b538      	push	{r3, r4, r5, lr}
 8011f8a:	4604      	mov	r4, r0
 8011f8c:	460d      	mov	r5, r1
 8011f8e:	f7ff ffeb 	bl	8011f68 <ucdr_buffer_alignment>
 8011f92:	68a3      	ldr	r3, [r4, #8]
 8011f94:	7565      	strb	r5, [r4, #21]
 8011f96:	181a      	adds	r2, r3, r0
 8011f98:	6923      	ldr	r3, [r4, #16]
 8011f9a:	4418      	add	r0, r3
 8011f9c:	6863      	ldr	r3, [r4, #4]
 8011f9e:	4293      	cmp	r3, r2
 8011fa0:	6120      	str	r0, [r4, #16]
 8011fa2:	bf28      	it	cs
 8011fa4:	4613      	movcs	r3, r2
 8011fa6:	60a3      	str	r3, [r4, #8]
 8011fa8:	bd38      	pop	{r3, r4, r5, pc}
 8011faa:	bf00      	nop

08011fac <ucdr_buffer_length>:
 8011fac:	6882      	ldr	r2, [r0, #8]
 8011fae:	6800      	ldr	r0, [r0, #0]
 8011fb0:	1a10      	subs	r0, r2, r0
 8011fb2:	4770      	bx	lr

08011fb4 <ucdr_buffer_remaining>:
 8011fb4:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 8011fb8:	1a10      	subs	r0, r2, r0
 8011fba:	4770      	bx	lr

08011fbc <ucdr_check_final_buffer_behavior_array>:
 8011fbc:	b538      	push	{r3, r4, r5, lr}
 8011fbe:	7d83      	ldrb	r3, [r0, #22]
 8011fc0:	b9a3      	cbnz	r3, 8011fec <ucdr_check_final_buffer_behavior_array+0x30>
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	460d      	mov	r5, r1
 8011fc6:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011fca:	429a      	cmp	r2, r3
 8011fcc:	d300      	bcc.n	8011fd0 <ucdr_check_final_buffer_behavior_array+0x14>
 8011fce:	b931      	cbnz	r1, 8011fde <ucdr_check_final_buffer_behavior_array+0x22>
 8011fd0:	4620      	mov	r0, r4
 8011fd2:	f7ff ffef 	bl	8011fb4 <ucdr_buffer_remaining>
 8011fd6:	42a8      	cmp	r0, r5
 8011fd8:	bf28      	it	cs
 8011fda:	4628      	movcs	r0, r5
 8011fdc:	bd38      	pop	{r3, r4, r5, pc}
 8011fde:	6983      	ldr	r3, [r0, #24]
 8011fe0:	b133      	cbz	r3, 8011ff0 <ucdr_check_final_buffer_behavior_array+0x34>
 8011fe2:	69c1      	ldr	r1, [r0, #28]
 8011fe4:	4798      	blx	r3
 8011fe6:	75a0      	strb	r0, [r4, #22]
 8011fe8:	2800      	cmp	r0, #0
 8011fea:	d0f1      	beq.n	8011fd0 <ucdr_check_final_buffer_behavior_array+0x14>
 8011fec:	2000      	movs	r0, #0
 8011fee:	bd38      	pop	{r3, r4, r5, pc}
 8011ff0:	2301      	movs	r3, #1
 8011ff2:	7583      	strb	r3, [r0, #22]
 8011ff4:	e7fa      	b.n	8011fec <ucdr_check_final_buffer_behavior_array+0x30>
 8011ff6:	bf00      	nop

08011ff8 <ucdr_advance_buffer>:
 8011ff8:	b538      	push	{r3, r4, r5, lr}
 8011ffa:	4604      	mov	r4, r0
 8011ffc:	460d      	mov	r5, r1
 8011ffe:	f7ff ff53 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8012002:	b178      	cbz	r0, 8012024 <ucdr_advance_buffer+0x2c>
 8012004:	6923      	ldr	r3, [r4, #16]
 8012006:	68a2      	ldr	r2, [r4, #8]
 8012008:	442b      	add	r3, r5
 801200a:	442a      	add	r2, r5
 801200c:	6123      	str	r3, [r4, #16]
 801200e:	2301      	movs	r3, #1
 8012010:	60a2      	str	r2, [r4, #8]
 8012012:	7563      	strb	r3, [r4, #21]
 8012014:	bd38      	pop	{r3, r4, r5, pc}
 8012016:	68a2      	ldr	r2, [r4, #8]
 8012018:	1a2d      	subs	r5, r5, r0
 801201a:	6923      	ldr	r3, [r4, #16]
 801201c:	4402      	add	r2, r0
 801201e:	4418      	add	r0, r3
 8012020:	60a2      	str	r2, [r4, #8]
 8012022:	6120      	str	r0, [r4, #16]
 8012024:	4629      	mov	r1, r5
 8012026:	2201      	movs	r2, #1
 8012028:	4620      	mov	r0, r4
 801202a:	f7ff ffc7 	bl	8011fbc <ucdr_check_final_buffer_behavior_array>
 801202e:	2800      	cmp	r0, #0
 8012030:	d1f1      	bne.n	8012016 <ucdr_advance_buffer+0x1e>
 8012032:	2301      	movs	r3, #1
 8012034:	7563      	strb	r3, [r4, #21]
 8012036:	bd38      	pop	{r3, r4, r5, pc}

08012038 <ucdr_serialize_sequence_char>:
 8012038:	b570      	push	{r4, r5, r6, lr}
 801203a:	4615      	mov	r5, r2
 801203c:	460e      	mov	r6, r1
 801203e:	7d01      	ldrb	r1, [r0, #20]
 8012040:	4604      	mov	r4, r0
 8012042:	f7ff f957 	bl	80112f4 <ucdr_serialize_endian_uint32_t>
 8012046:	b90d      	cbnz	r5, 801204c <ucdr_serialize_sequence_char+0x14>
 8012048:	2001      	movs	r0, #1
 801204a:	bd70      	pop	{r4, r5, r6, pc}
 801204c:	462b      	mov	r3, r5
 801204e:	4632      	mov	r2, r6
 8012050:	7d21      	ldrb	r1, [r4, #20]
 8012052:	4620      	mov	r0, r4
 8012054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012058:	f007 be58 	b.w	8019d0c <ucdr_serialize_endian_array_char>

0801205c <ucdr_deserialize_sequence_char>:
 801205c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012060:	461d      	mov	r5, r3
 8012062:	4616      	mov	r6, r2
 8012064:	460f      	mov	r7, r1
 8012066:	461a      	mov	r2, r3
 8012068:	7d01      	ldrb	r1, [r0, #20]
 801206a:	4604      	mov	r4, r0
 801206c:	f7ff fa6a 	bl	8011544 <ucdr_deserialize_endian_uint32_t>
 8012070:	682b      	ldr	r3, [r5, #0]
 8012072:	429e      	cmp	r6, r3
 8012074:	d201      	bcs.n	801207a <ucdr_deserialize_sequence_char+0x1e>
 8012076:	2201      	movs	r2, #1
 8012078:	75a2      	strb	r2, [r4, #22]
 801207a:	b913      	cbnz	r3, 8012082 <ucdr_deserialize_sequence_char+0x26>
 801207c:	2001      	movs	r0, #1
 801207e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012082:	463a      	mov	r2, r7
 8012084:	7d21      	ldrb	r1, [r4, #20]
 8012086:	4620      	mov	r0, r4
 8012088:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801208c:	f007 be70 	b.w	8019d70 <ucdr_deserialize_endian_array_char>

08012090 <ucdr_serialize_sequence_uint8_t>:
 8012090:	b570      	push	{r4, r5, r6, lr}
 8012092:	4615      	mov	r5, r2
 8012094:	460e      	mov	r6, r1
 8012096:	7d01      	ldrb	r1, [r0, #20]
 8012098:	4604      	mov	r4, r0
 801209a:	f7ff f92b 	bl	80112f4 <ucdr_serialize_endian_uint32_t>
 801209e:	b90d      	cbnz	r5, 80120a4 <ucdr_serialize_sequence_uint8_t+0x14>
 80120a0:	2001      	movs	r0, #1
 80120a2:	bd70      	pop	{r4, r5, r6, pc}
 80120a4:	462b      	mov	r3, r5
 80120a6:	4632      	mov	r2, r6
 80120a8:	7d21      	ldrb	r1, [r4, #20]
 80120aa:	4620      	mov	r0, r4
 80120ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80120b0:	f007 bec4 	b.w	8019e3c <ucdr_serialize_endian_array_uint8_t>

080120b4 <ucdr_deserialize_sequence_uint8_t>:
 80120b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80120b8:	461d      	mov	r5, r3
 80120ba:	4616      	mov	r6, r2
 80120bc:	460f      	mov	r7, r1
 80120be:	461a      	mov	r2, r3
 80120c0:	7d01      	ldrb	r1, [r0, #20]
 80120c2:	4604      	mov	r4, r0
 80120c4:	f7ff fa3e 	bl	8011544 <ucdr_deserialize_endian_uint32_t>
 80120c8:	682b      	ldr	r3, [r5, #0]
 80120ca:	429e      	cmp	r6, r3
 80120cc:	d201      	bcs.n	80120d2 <ucdr_deserialize_sequence_uint8_t+0x1e>
 80120ce:	2201      	movs	r2, #1
 80120d0:	75a2      	strb	r2, [r4, #22]
 80120d2:	b913      	cbnz	r3, 80120da <ucdr_deserialize_sequence_uint8_t+0x26>
 80120d4:	2001      	movs	r0, #1
 80120d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120da:	463a      	mov	r2, r7
 80120dc:	7d21      	ldrb	r1, [r4, #20]
 80120de:	4620      	mov	r0, r4
 80120e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120e4:	f007 bf10 	b.w	8019f08 <ucdr_deserialize_endian_array_uint8_t>

080120e8 <ucdr_serialize_sequence_float>:
 80120e8:	b570      	push	{r4, r5, r6, lr}
 80120ea:	4615      	mov	r5, r2
 80120ec:	460e      	mov	r6, r1
 80120ee:	7d01      	ldrb	r1, [r0, #20]
 80120f0:	4604      	mov	r4, r0
 80120f2:	f7ff f8ff 	bl	80112f4 <ucdr_serialize_endian_uint32_t>
 80120f6:	b90d      	cbnz	r5, 80120fc <ucdr_serialize_sequence_float+0x14>
 80120f8:	2001      	movs	r0, #1
 80120fa:	bd70      	pop	{r4, r5, r6, pc}
 80120fc:	462b      	mov	r3, r5
 80120fe:	4632      	mov	r2, r6
 8012100:	7d21      	ldrb	r1, [r4, #20]
 8012102:	4620      	mov	r0, r4
 8012104:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012108:	f007 bf32 	b.w	8019f70 <ucdr_serialize_endian_array_float>

0801210c <ucdr_deserialize_sequence_float>:
 801210c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012110:	461d      	mov	r5, r3
 8012112:	4616      	mov	r6, r2
 8012114:	460f      	mov	r7, r1
 8012116:	461a      	mov	r2, r3
 8012118:	7d01      	ldrb	r1, [r0, #20]
 801211a:	4604      	mov	r4, r0
 801211c:	f7ff fa12 	bl	8011544 <ucdr_deserialize_endian_uint32_t>
 8012120:	682b      	ldr	r3, [r5, #0]
 8012122:	429e      	cmp	r6, r3
 8012124:	d201      	bcs.n	801212a <ucdr_deserialize_sequence_float+0x1e>
 8012126:	2201      	movs	r2, #1
 8012128:	75a2      	strb	r2, [r4, #22]
 801212a:	b913      	cbnz	r3, 8012132 <ucdr_deserialize_sequence_float+0x26>
 801212c:	2001      	movs	r0, #1
 801212e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012132:	463a      	mov	r2, r7
 8012134:	7d21      	ldrb	r1, [r4, #20]
 8012136:	4620      	mov	r0, r4
 8012138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801213c:	f007 bf6c 	b.w	801a018 <ucdr_deserialize_endian_array_float>

08012140 <uxr_buffer_delete_entity>:
 8012140:	b510      	push	{r4, lr}
 8012142:	2300      	movs	r3, #0
 8012144:	b08e      	sub	sp, #56	@ 0x38
 8012146:	4604      	mov	r4, r0
 8012148:	9103      	str	r1, [sp, #12]
 801214a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801214e:	2303      	movs	r3, #3
 8012150:	2204      	movs	r2, #4
 8012152:	9300      	str	r3, [sp, #0]
 8012154:	ab06      	add	r3, sp, #24
 8012156:	f001 fab1 	bl	80136bc <uxr_prepare_stream_to_write_submessage>
 801215a:	b918      	cbnz	r0, 8012164 <uxr_buffer_delete_entity+0x24>
 801215c:	4604      	mov	r4, r0
 801215e:	4620      	mov	r0, r4
 8012160:	b00e      	add	sp, #56	@ 0x38
 8012162:	bd10      	pop	{r4, pc}
 8012164:	9902      	ldr	r1, [sp, #8]
 8012166:	aa05      	add	r2, sp, #20
 8012168:	4620      	mov	r0, r4
 801216a:	f001 fbe3 	bl	8013934 <uxr_init_base_object_request>
 801216e:	4604      	mov	r4, r0
 8012170:	a905      	add	r1, sp, #20
 8012172:	a806      	add	r0, sp, #24
 8012174:	f003 f9c8 	bl	8015508 <uxr_serialize_DELETE_Payload>
 8012178:	4620      	mov	r0, r4
 801217a:	b00e      	add	sp, #56	@ 0x38
 801217c:	bd10      	pop	{r4, pc}
 801217e:	bf00      	nop

08012180 <uxr_common_create_entity>:
 8012180:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8012184:	b510      	push	{r4, lr}
 8012186:	f1bc 0f01 	cmp.w	ip, #1
 801218a:	b08c      	sub	sp, #48	@ 0x30
 801218c:	4604      	mov	r4, r0
 801218e:	9202      	str	r2, [sp, #8]
 8012190:	bf0c      	ite	eq
 8012192:	f003 0201 	andeq.w	r2, r3, #1
 8012196:	2200      	movne	r2, #0
 8012198:	330e      	adds	r3, #14
 801219a:	9103      	str	r1, [sp, #12]
 801219c:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 80121a0:	441a      	add	r2, r3
 80121a2:	ab04      	add	r3, sp, #16
 80121a4:	9101      	str	r1, [sp, #4]
 80121a6:	2101      	movs	r1, #1
 80121a8:	b292      	uxth	r2, r2
 80121aa:	9100      	str	r1, [sp, #0]
 80121ac:	9903      	ldr	r1, [sp, #12]
 80121ae:	f001 fa85 	bl	80136bc <uxr_prepare_stream_to_write_submessage>
 80121b2:	b918      	cbnz	r0, 80121bc <uxr_common_create_entity+0x3c>
 80121b4:	4604      	mov	r4, r0
 80121b6:	4620      	mov	r0, r4
 80121b8:	b00c      	add	sp, #48	@ 0x30
 80121ba:	bd10      	pop	{r4, pc}
 80121bc:	9902      	ldr	r1, [sp, #8]
 80121be:	4620      	mov	r0, r4
 80121c0:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80121c2:	f001 fbb7 	bl	8013934 <uxr_init_base_object_request>
 80121c6:	4604      	mov	r4, r0
 80121c8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80121ca:	a804      	add	r0, sp, #16
 80121cc:	f003 f8f6 	bl	80153bc <uxr_serialize_CREATE_Payload>
 80121d0:	4620      	mov	r0, r4
 80121d2:	b00c      	add	sp, #48	@ 0x30
 80121d4:	bd10      	pop	{r4, pc}
 80121d6:	bf00      	nop

080121d8 <uxr_buffer_create_participant_bin>:
 80121d8:	b570      	push	{r4, r5, r6, lr}
 80121da:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 80121de:	4605      	mov	r5, r0
 80121e0:	ac11      	add	r4, sp, #68	@ 0x44
 80121e2:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 80121e6:	2303      	movs	r3, #3
 80121e8:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 80121ec:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80121f0:	7223      	strb	r3, [r4, #8]
 80121f2:	2300      	movs	r3, #0
 80121f4:	2201      	movs	r2, #1
 80121f6:	f88d 3014 	strb.w	r3, [sp, #20]
 80121fa:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 80121fc:	7122      	strb	r2, [r4, #4]
 80121fe:	b1cb      	cbz	r3, 8012234 <uxr_buffer_create_participant_bin+0x5c>
 8012200:	f88d 201c 	strb.w	r2, [sp, #28]
 8012204:	9308      	str	r3, [sp, #32]
 8012206:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801220a:	a915      	add	r1, sp, #84	@ 0x54
 801220c:	a809      	add	r0, sp, #36	@ 0x24
 801220e:	f7ff fe9f 	bl	8011f50 <ucdr_init_buffer>
 8012212:	a905      	add	r1, sp, #20
 8012214:	a809      	add	r0, sp, #36	@ 0x24
 8012216:	f002 fda7 	bl	8014d68 <uxr_serialize_OBJK_DomainParticipant_Binary>
 801221a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801221c:	9600      	str	r6, [sp, #0]
 801221e:	4628      	mov	r0, r5
 8012220:	9401      	str	r4, [sp, #4]
 8012222:	60e3      	str	r3, [r4, #12]
 8012224:	b29b      	uxth	r3, r3
 8012226:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801222a:	f7ff ffa9 	bl	8012180 <uxr_common_create_entity>
 801222e:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 8012232:	bd70      	pop	{r4, r5, r6, pc}
 8012234:	f88d 301c 	strb.w	r3, [sp, #28]
 8012238:	e7e5      	b.n	8012206 <uxr_buffer_create_participant_bin+0x2e>
 801223a:	bf00      	nop

0801223c <uxr_buffer_create_topic_bin>:
 801223c:	b570      	push	{r4, r5, r6, lr}
 801223e:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 8012242:	4605      	mov	r5, r0
 8012244:	4618      	mov	r0, r3
 8012246:	9105      	str	r1, [sp, #20]
 8012248:	a997      	add	r1, sp, #604	@ 0x25c
 801224a:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 801224e:	ac13      	add	r4, sp, #76	@ 0x4c
 8012250:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012254:	2302      	movs	r3, #2
 8012256:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 801225a:	f000 f9ab 	bl	80125b4 <uxr_object_id_to_raw>
 801225e:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 8012260:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012264:	a917      	add	r1, sp, #92	@ 0x5c
 8012266:	a80b      	add	r0, sp, #44	@ 0x2c
 8012268:	9306      	str	r3, [sp, #24]
 801226a:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 801226c:	930a      	str	r3, [sp, #40]	@ 0x28
 801226e:	2303      	movs	r3, #3
 8012270:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 8012274:	2301      	movs	r3, #1
 8012276:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 801227a:	2300      	movs	r3, #0
 801227c:	f88d 301c 	strb.w	r3, [sp, #28]
 8012280:	f7ff fe66 	bl	8011f50 <ucdr_init_buffer>
 8012284:	a906      	add	r1, sp, #24
 8012286:	a80b      	add	r0, sp, #44	@ 0x2c
 8012288:	f002 fd90 	bl	8014dac <uxr_serialize_OBJK_Topic_Binary>
 801228c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801228e:	4628      	mov	r0, r5
 8012290:	9600      	str	r6, [sp, #0]
 8012292:	9316      	str	r3, [sp, #88]	@ 0x58
 8012294:	b29b      	uxth	r3, r3
 8012296:	9401      	str	r4, [sp, #4]
 8012298:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 801229c:	f7ff ff70 	bl	8012180 <uxr_common_create_entity>
 80122a0:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 80122a4:	bd70      	pop	{r4, r5, r6, pc}
 80122a6:	bf00      	nop

080122a8 <uxr_buffer_create_publisher_bin>:
 80122a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122aa:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 80122ae:	2603      	movs	r6, #3
 80122b0:	4605      	mov	r5, r0
 80122b2:	4618      	mov	r0, r3
 80122b4:	9105      	str	r1, [sp, #20]
 80122b6:	a992      	add	r1, sp, #584	@ 0x248
 80122b8:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 80122bc:	ac0e      	add	r4, sp, #56	@ 0x38
 80122be:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 80122c2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80122c6:	f000 f975 	bl	80125b4 <uxr_object_id_to_raw>
 80122ca:	2300      	movs	r3, #0
 80122cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80122d0:	a912      	add	r1, sp, #72	@ 0x48
 80122d2:	a806      	add	r0, sp, #24
 80122d4:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 80122d8:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 80122dc:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 80122e0:	f7ff fe36 	bl	8011f50 <ucdr_init_buffer>
 80122e4:	a993      	add	r1, sp, #588	@ 0x24c
 80122e6:	a806      	add	r0, sp, #24
 80122e8:	f002 fe14 	bl	8014f14 <uxr_serialize_OBJK_Publisher_Binary>
 80122ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80122ee:	4628      	mov	r0, r5
 80122f0:	9700      	str	r7, [sp, #0]
 80122f2:	9311      	str	r3, [sp, #68]	@ 0x44
 80122f4:	b29b      	uxth	r3, r3
 80122f6:	9401      	str	r4, [sp, #4]
 80122f8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80122fc:	f7ff ff40 	bl	8012180 <uxr_common_create_entity>
 8012300:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 8012304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012306:	bf00      	nop

08012308 <uxr_buffer_create_datawriter_bin>:
 8012308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801230c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8012310:	4606      	mov	r6, r0
 8012312:	4618      	mov	r0, r3
 8012314:	2703      	movs	r7, #3
 8012316:	ac1d      	add	r4, sp, #116	@ 0x74
 8012318:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 801231c:	9105      	str	r1, [sp, #20]
 801231e:	a9a1      	add	r1, sp, #644	@ 0x284
 8012320:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 8012324:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8012328:	2305      	movs	r3, #5
 801232a:	7123      	strb	r3, [r4, #4]
 801232c:	f000 f942 	bl	80125b4 <uxr_object_id_to_raw>
 8012330:	a90e      	add	r1, sp, #56	@ 0x38
 8012332:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 8012334:	7227      	strb	r7, [r4, #8]
 8012336:	f000 f93d 	bl	80125b4 <uxr_object_id_to_raw>
 801233a:	2300      	movs	r3, #0
 801233c:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 8012340:	3d00      	subs	r5, #0
 8012342:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 8012346:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 801234a:	bf18      	it	ne
 801234c:	2501      	movne	r5, #1
 801234e:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 8012352:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 8012356:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 801235a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801235e:	2301      	movs	r3, #1
 8012360:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 8012364:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012368:	bb8a      	cbnz	r2, 80123ce <uxr_buffer_create_datawriter_bin+0xc6>
 801236a:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 801236e:	f04f 0c13 	mov.w	ip, #19
 8012372:	250b      	movs	r5, #11
 8012374:	2221      	movs	r2, #33	@ 0x21
 8012376:	2111      	movs	r1, #17
 8012378:	2009      	movs	r0, #9
 801237a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801237e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 8012382:	b923      	cbnz	r3, 801238e <uxr_buffer_create_datawriter_bin+0x86>
 8012384:	4672      	mov	r2, lr
 8012386:	4661      	mov	r1, ip
 8012388:	4628      	mov	r0, r5
 801238a:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 801238e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 8012392:	2b01      	cmp	r3, #1
 8012394:	d025      	beq.n	80123e2 <uxr_buffer_create_datawriter_bin+0xda>
 8012396:	2b03      	cmp	r3, #3
 8012398:	d029      	beq.n	80123ee <uxr_buffer_create_datawriter_bin+0xe6>
 801239a:	b32b      	cbz	r3, 80123e8 <uxr_buffer_create_datawriter_bin+0xe0>
 801239c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80123a0:	a921      	add	r1, sp, #132	@ 0x84
 80123a2:	a806      	add	r0, sp, #24
 80123a4:	f7ff fdd4 	bl	8011f50 <ucdr_init_buffer>
 80123a8:	a90e      	add	r1, sp, #56	@ 0x38
 80123aa:	a806      	add	r0, sp, #24
 80123ac:	f002 fe28 	bl	8015000 <uxr_serialize_OBJK_DataWriter_Binary>
 80123b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80123b2:	f8cd 8000 	str.w	r8, [sp]
 80123b6:	4630      	mov	r0, r6
 80123b8:	9401      	str	r4, [sp, #4]
 80123ba:	60e3      	str	r3, [r4, #12]
 80123bc:	b29b      	uxth	r3, r3
 80123be:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 80123c2:	f7ff fedd 	bl	8012180 <uxr_common_create_entity>
 80123c6:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 80123ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123ce:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 80123d2:	f04f 0c12 	mov.w	ip, #18
 80123d6:	250a      	movs	r5, #10
 80123d8:	2220      	movs	r2, #32
 80123da:	2110      	movs	r1, #16
 80123dc:	2008      	movs	r0, #8
 80123de:	2702      	movs	r7, #2
 80123e0:	e7cd      	b.n	801237e <uxr_buffer_create_datawriter_bin+0x76>
 80123e2:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 80123e6:	e7d9      	b.n	801239c <uxr_buffer_create_datawriter_bin+0x94>
 80123e8:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 80123ec:	e7d6      	b.n	801239c <uxr_buffer_create_datawriter_bin+0x94>
 80123ee:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 80123f2:	e7d3      	b.n	801239c <uxr_buffer_create_datawriter_bin+0x94>

080123f4 <get_custom_error>:
 80123f4:	4b01      	ldr	r3, [pc, #4]	@ (80123fc <get_custom_error+0x8>)
 80123f6:	7818      	ldrb	r0, [r3, #0]
 80123f8:	4770      	bx	lr
 80123fa:	bf00      	nop
 80123fc:	24012f74 	.word	0x24012f74

08012400 <recv_custom_msg>:
 8012400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012404:	4693      	mov	fp, r2
 8012406:	b089      	sub	sp, #36	@ 0x24
 8012408:	2200      	movs	r2, #0
 801240a:	4604      	mov	r4, r0
 801240c:	468a      	mov	sl, r1
 801240e:	9305      	str	r3, [sp, #20]
 8012410:	f88d 201e 	strb.w	r2, [sp, #30]
 8012414:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 8012418:	b322      	cbz	r2, 8012464 <recv_custom_msg+0x64>
 801241a:	f200 2902 	addw	r9, r0, #514	@ 0x202
 801241e:	f10d 081f 	add.w	r8, sp, #31
 8012422:	af05      	add	r7, sp, #20
 8012424:	f10d 061e 	add.w	r6, sp, #30
 8012428:	f44f 7500 	mov.w	r5, #512	@ 0x200
 801242c:	e002      	b.n	8012434 <recv_custom_msg+0x34>
 801242e:	9b05      	ldr	r3, [sp, #20]
 8012430:	2b00      	cmp	r3, #0
 8012432:	dd0f      	ble.n	8012454 <recv_custom_msg+0x54>
 8012434:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 8012438:	4623      	mov	r3, r4
 801243a:	4622      	mov	r2, r4
 801243c:	4648      	mov	r0, r9
 801243e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8012442:	e9cd 5600 	strd	r5, r6, [sp]
 8012446:	f001 fc8b 	bl	8013d60 <uxr_read_framed_msg>
 801244a:	2800      	cmp	r0, #0
 801244c:	d0ef      	beq.n	801242e <recv_custom_msg+0x2e>
 801244e:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8012452:	b1b3      	cbz	r3, 8012482 <recv_custom_msg+0x82>
 8012454:	4b0f      	ldr	r3, [pc, #60]	@ (8012494 <recv_custom_msg+0x94>)
 8012456:	2000      	movs	r0, #0
 8012458:	f89d 201f 	ldrb.w	r2, [sp, #31]
 801245c:	701a      	strb	r2, [r3, #0]
 801245e:	b009      	add	sp, #36	@ 0x24
 8012460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012464:	f10d 021f 	add.w	r2, sp, #31
 8012468:	4601      	mov	r1, r0
 801246a:	9200      	str	r2, [sp, #0]
 801246c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012470:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 8012474:	47a8      	blx	r5
 8012476:	2800      	cmp	r0, #0
 8012478:	d0ec      	beq.n	8012454 <recv_custom_msg+0x54>
 801247a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 801247e:	2b00      	cmp	r3, #0
 8012480:	d1e8      	bne.n	8012454 <recv_custom_msg+0x54>
 8012482:	f8cb 0000 	str.w	r0, [fp]
 8012486:	2001      	movs	r0, #1
 8012488:	f8ca 4000 	str.w	r4, [sl]
 801248c:	b009      	add	sp, #36	@ 0x24
 801248e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012492:	bf00      	nop
 8012494:	24012f74 	.word	0x24012f74

08012498 <send_custom_msg>:
 8012498:	b530      	push	{r4, r5, lr}
 801249a:	f890 5200 	ldrb.w	r5, [r0, #512]	@ 0x200
 801249e:	b087      	sub	sp, #28
 80124a0:	4614      	mov	r4, r2
 80124a2:	b995      	cbnz	r5, 80124ca <send_custom_msg+0x32>
 80124a4:	f8d0 5270 	ldr.w	r5, [r0, #624]	@ 0x270
 80124a8:	f10d 0317 	add.w	r3, sp, #23
 80124ac:	47a8      	blx	r5
 80124ae:	1e03      	subs	r3, r0, #0
 80124b0:	bf18      	it	ne
 80124b2:	2301      	movne	r3, #1
 80124b4:	42a0      	cmp	r0, r4
 80124b6:	bf18      	it	ne
 80124b8:	2300      	movne	r3, #0
 80124ba:	b91b      	cbnz	r3, 80124c4 <send_custom_msg+0x2c>
 80124bc:	4a0a      	ldr	r2, [pc, #40]	@ (80124e8 <send_custom_msg+0x50>)
 80124be:	f89d 1017 	ldrb.w	r1, [sp, #23]
 80124c2:	7011      	strb	r1, [r2, #0]
 80124c4:	4618      	mov	r0, r3
 80124c6:	b007      	add	sp, #28
 80124c8:	bd30      	pop	{r4, r5, pc}
 80124ca:	460b      	mov	r3, r1
 80124cc:	2200      	movs	r2, #0
 80124ce:	f10d 0117 	add.w	r1, sp, #23
 80124d2:	9400      	str	r4, [sp, #0]
 80124d4:	e9cd 2101 	strd	r2, r1, [sp, #4]
 80124d8:	4602      	mov	r2, r0
 80124da:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 80124de:	f200 2002 	addw	r0, r0, #514	@ 0x202
 80124e2:	f001 fa5f 	bl	80139a4 <uxr_write_framed_msg>
 80124e6:	e7e2      	b.n	80124ae <send_custom_msg+0x16>
 80124e8:	24012f74 	.word	0x24012f74

080124ec <uxr_set_custom_transport_callbacks>:
 80124ec:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 80124f0:	9901      	ldr	r1, [sp, #4]
 80124f2:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 80124f6:	9b00      	ldr	r3, [sp, #0]
 80124f8:	e9c0 319c 	strd	r3, r1, [r0, #624]	@ 0x270
 80124fc:	4770      	bx	lr
 80124fe:	bf00      	nop

08012500 <uxr_init_custom_transport>:
 8012500:	b538      	push	{r3, r4, r5, lr}
 8012502:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 8012506:	b303      	cbz	r3, 801254a <uxr_init_custom_transport+0x4a>
 8012508:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 801250c:	4604      	mov	r4, r0
 801250e:	b1e2      	cbz	r2, 801254a <uxr_init_custom_transport+0x4a>
 8012510:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 8012514:	b1ca      	cbz	r2, 801254a <uxr_init_custom_transport+0x4a>
 8012516:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 801251a:	b1b2      	cbz	r2, 801254a <uxr_init_custom_transport+0x4a>
 801251c:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 8012520:	4798      	blx	r3
 8012522:	4605      	mov	r5, r0
 8012524:	b188      	cbz	r0, 801254a <uxr_init_custom_transport+0x4a>
 8012526:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 801252a:	b98b      	cbnz	r3, 8012550 <uxr_init_custom_transport+0x50>
 801252c:	4b0b      	ldr	r3, [pc, #44]	@ (801255c <uxr_init_custom_transport+0x5c>)
 801252e:	4628      	mov	r0, r5
 8012530:	490b      	ldr	r1, [pc, #44]	@ (8012560 <uxr_init_custom_transport+0x60>)
 8012532:	4a0c      	ldr	r2, [pc, #48]	@ (8012564 <uxr_init_custom_transport+0x64>)
 8012534:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 8012538:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801253c:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 8012540:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 8012544:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 8012548:	bd38      	pop	{r3, r4, r5, pc}
 801254a:	2500      	movs	r5, #0
 801254c:	4628      	mov	r0, r5
 801254e:	bd38      	pop	{r3, r4, r5, pc}
 8012550:	2100      	movs	r1, #0
 8012552:	f204 2002 	addw	r0, r4, #514	@ 0x202
 8012556:	f001 fa1f 	bl	8013998 <uxr_init_framing_io>
 801255a:	e7e7      	b.n	801252c <uxr_init_custom_transport+0x2c>
 801255c:	08012401 	.word	0x08012401
 8012560:	08012499 	.word	0x08012499
 8012564:	080123f5 	.word	0x080123f5

08012568 <uxr_close_custom_transport>:
 8012568:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 801256c:	4718      	bx	r3
 801256e:	bf00      	nop

08012570 <uxr_object_id>:
 8012570:	b082      	sub	sp, #8
 8012572:	2300      	movs	r3, #0
 8012574:	f88d 1006 	strb.w	r1, [sp, #6]
 8012578:	f360 030f 	bfi	r3, r0, #0, #16
 801257c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8012580:	f362 431f 	bfi	r3, r2, #16, #16
 8012584:	4618      	mov	r0, r3
 8012586:	b002      	add	sp, #8
 8012588:	4770      	bx	lr
 801258a:	bf00      	nop

0801258c <uxr_object_id_from_raw>:
 801258c:	7843      	ldrb	r3, [r0, #1]
 801258e:	b082      	sub	sp, #8
 8012590:	7801      	ldrb	r1, [r0, #0]
 8012592:	2000      	movs	r0, #0
 8012594:	091a      	lsrs	r2, r3, #4
 8012596:	f003 030f 	and.w	r3, r3, #15
 801259a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 801259e:	f88d 3006 	strb.w	r3, [sp, #6]
 80125a2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80125a6:	f362 000f 	bfi	r0, r2, #0, #16
 80125aa:	f363 401f 	bfi	r0, r3, #16, #16
 80125ae:	b002      	add	sp, #8
 80125b0:	4770      	bx	lr
 80125b2:	bf00      	nop

080125b4 <uxr_object_id_to_raw>:
 80125b4:	4602      	mov	r2, r0
 80125b6:	f3c0 4303 	ubfx	r3, r0, #16, #4
 80125ba:	b082      	sub	sp, #8
 80125bc:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 80125c0:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80125c4:	f881 c000 	strb.w	ip, [r1]
 80125c8:	7048      	strb	r0, [r1, #1]
 80125ca:	b002      	add	sp, #8
 80125cc:	4770      	bx	lr
 80125ce:	bf00      	nop

080125d0 <uxr_buffer_cancel_data>:
 80125d0:	b510      	push	{r4, lr}
 80125d2:	2300      	movs	r3, #0
 80125d4:	b094      	sub	sp, #80	@ 0x50
 80125d6:	4604      	mov	r4, r0
 80125d8:	9205      	str	r2, [sp, #20]
 80125da:	9301      	str	r3, [sp, #4]
 80125dc:	f8ad 301c 	strh.w	r3, [sp, #28]
 80125e0:	f88d 301e 	strb.w	r3, [sp, #30]
 80125e4:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 80125e8:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 80125ec:	2308      	movs	r3, #8
 80125ee:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80125f2:	2201      	movs	r2, #1
 80125f4:	9300      	str	r3, [sp, #0]
 80125f6:	ab0c      	add	r3, sp, #48	@ 0x30
 80125f8:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 80125fc:	2210      	movs	r2, #16
 80125fe:	f001 f85d 	bl	80136bc <uxr_prepare_stream_to_write_submessage>
 8012602:	b918      	cbnz	r0, 801260c <uxr_buffer_cancel_data+0x3c>
 8012604:	4604      	mov	r4, r0
 8012606:	4620      	mov	r0, r4
 8012608:	b014      	add	sp, #80	@ 0x50
 801260a:	bd10      	pop	{r4, pc}
 801260c:	9905      	ldr	r1, [sp, #20]
 801260e:	aa06      	add	r2, sp, #24
 8012610:	4620      	mov	r0, r4
 8012612:	f001 f98f 	bl	8013934 <uxr_init_base_object_request>
 8012616:	4604      	mov	r4, r0
 8012618:	a906      	add	r1, sp, #24
 801261a:	a80c      	add	r0, sp, #48	@ 0x30
 801261c:	f003 f81e 	bl	801565c <uxr_serialize_READ_DATA_Payload>
 8012620:	4620      	mov	r0, r4
 8012622:	b014      	add	sp, #80	@ 0x50
 8012624:	bd10      	pop	{r4, pc}
 8012626:	bf00      	nop

08012628 <read_submessage_format>:
 8012628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801262c:	b095      	sub	sp, #84	@ 0x54
 801262e:	f8bd 7078 	ldrh.w	r7, [sp, #120]	@ 0x78
 8012632:	b113      	cbz	r3, 801263a <read_submessage_format+0x12>
 8012634:	b015      	add	sp, #84	@ 0x54
 8012636:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801263a:	4606      	mov	r6, r0
 801263c:	981c      	ldr	r0, [sp, #112]	@ 0x70
 801263e:	460c      	mov	r4, r1
 8012640:	4615      	mov	r5, r2
 8012642:	9004      	str	r0, [sp, #16]
 8012644:	4699      	mov	r9, r3
 8012646:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8012648:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 801264c:	9005      	str	r0, [sp, #20]
 801264e:	a80c      	add	r0, sp, #48	@ 0x30
 8012650:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8012654:	1a52      	subs	r2, r2, r1
 8012656:	f7ff fc7b 	bl	8011f50 <ucdr_init_buffer>
 801265a:	a80c      	add	r0, sp, #48	@ 0x30
 801265c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012660:	f7ff fc4a 	bl	8011ef8 <ucdr_set_on_full_buffer_callback>
 8012664:	69e2      	ldr	r2, [r4, #28]
 8012666:	b19a      	cbz	r2, 8012690 <read_submessage_format+0x68>
 8012668:	f1b8 0f07 	cmp.w	r8, #7
 801266c:	f882 9014 	strb.w	r9, [r2, #20]
 8012670:	d040      	beq.n	80126f4 <read_submessage_format+0xcc>
 8012672:	f1b8 0f08 	cmp.w	r8, #8
 8012676:	d02e      	beq.n	80126d6 <read_submessage_format+0xae>
 8012678:	f1b8 0f06 	cmp.w	r8, #6
 801267c:	d011      	beq.n	80126a2 <read_submessage_format+0x7a>
 801267e:	2301      	movs	r3, #1
 8012680:	7513      	strb	r3, [r2, #20]
 8012682:	4629      	mov	r1, r5
 8012684:	4620      	mov	r0, r4
 8012686:	f7ff fcb7 	bl	8011ff8 <ucdr_advance_buffer>
 801268a:	b015      	add	sp, #84	@ 0x54
 801268c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012690:	f1b8 0f07 	cmp.w	r8, #7
 8012694:	d02e      	beq.n	80126f4 <read_submessage_format+0xcc>
 8012696:	f1b8 0f08 	cmp.w	r8, #8
 801269a:	d01c      	beq.n	80126d6 <read_submessage_format+0xae>
 801269c:	f1b8 0f06 	cmp.w	r8, #6
 80126a0:	d1ef      	bne.n	8012682 <read_submessage_format+0x5a>
 80126a2:	f8d6 8088 	ldr.w	r8, [r6, #136]	@ 0x88
 80126a6:	f1b8 0f00 	cmp.w	r8, #0
 80126aa:	d011      	beq.n	80126d0 <read_submessage_format+0xa8>
 80126ac:	ab0c      	add	r3, sp, #48	@ 0x30
 80126ae:	9501      	str	r5, [sp, #4]
 80126b0:	463a      	mov	r2, r7
 80126b2:	4630      	mov	r0, r6
 80126b4:	9300      	str	r3, [sp, #0]
 80126b6:	2306      	movs	r3, #6
 80126b8:	f88d 3016 	strb.w	r3, [sp, #22]
 80126bc:	f8d6 308c 	ldr.w	r3, [r6, #140]	@ 0x8c
 80126c0:	9302      	str	r3, [sp, #8]
 80126c2:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 80126c6:	47c0      	blx	r8
 80126c8:	2301      	movs	r3, #1
 80126ca:	69e2      	ldr	r2, [r4, #28]
 80126cc:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80126d0:	2a00      	cmp	r2, #0
 80126d2:	d1d4      	bne.n	801267e <read_submessage_format+0x56>
 80126d4:	e7d5      	b.n	8012682 <read_submessage_format+0x5a>
 80126d6:	f8d6 30a4 	ldr.w	r3, [r6, #164]	@ 0xa4
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d0f8      	beq.n	80126d0 <read_submessage_format+0xa8>
 80126de:	a80c      	add	r0, sp, #48	@ 0x30
 80126e0:	a906      	add	r1, sp, #24
 80126e2:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 80126e6:	f003 f893 	bl	8015810 <uxr_deserialize_SampleIdentity>
 80126ea:	b9a0      	cbnz	r0, 8012716 <read_submessage_format+0xee>
 80126ec:	69e2      	ldr	r2, [r4, #28]
 80126ee:	2a00      	cmp	r2, #0
 80126f0:	d1c5      	bne.n	801267e <read_submessage_format+0x56>
 80126f2:	e7c6      	b.n	8012682 <read_submessage_format+0x5a>
 80126f4:	f8d6 30ac 	ldr.w	r3, [r6, #172]	@ 0xac
 80126f8:	b13b      	cbz	r3, 801270a <read_submessage_format+0xe2>
 80126fa:	a906      	add	r1, sp, #24
 80126fc:	a80c      	add	r0, sp, #48	@ 0x30
 80126fe:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 8012702:	f002 fd4b 	bl	801519c <uxr_deserialize_BaseObjectRequest>
 8012706:	bb60      	cbnz	r0, 8012762 <read_submessage_format+0x13a>
 8012708:	69e2      	ldr	r2, [r4, #28]
 801270a:	68a3      	ldr	r3, [r4, #8]
 801270c:	442b      	add	r3, r5
 801270e:	60a3      	str	r3, [r4, #8]
 8012710:	2a00      	cmp	r2, #0
 8012712:	d1b4      	bne.n	801267e <read_submessage_format+0x56>
 8012714:	e7b5      	b.n	8012682 <read_submessage_format+0x5a>
 8012716:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012718:	a80c      	add	r0, sp, #48	@ 0x30
 801271a:	eba8 0803 	sub.w	r8, r8, r3
 801271e:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8012722:	44a8      	add	r8, r5
 8012724:	1a52      	subs	r2, r2, r1
 8012726:	f7ff fc13 	bl	8011f50 <ucdr_init_buffer>
 801272a:	a80c      	add	r0, sp, #48	@ 0x30
 801272c:	fa1f f888 	uxth.w	r8, r8
 8012730:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8012734:	f7ff fbe0 	bl	8011ef8 <ucdr_set_on_full_buffer_callback>
 8012738:	ab0c      	add	r3, sp, #48	@ 0x30
 801273a:	2108      	movs	r1, #8
 801273c:	f8cd 8004 	str.w	r8, [sp, #4]
 8012740:	9300      	str	r3, [sp, #0]
 8012742:	463a      	mov	r2, r7
 8012744:	f88d 1016 	strb.w	r1, [sp, #22]
 8012748:	ab06      	add	r3, sp, #24
 801274a:	f8d6 10a8 	ldr.w	r1, [r6, #168]	@ 0xa8
 801274e:	4630      	mov	r0, r6
 8012750:	9102      	str	r1, [sp, #8]
 8012752:	9905      	ldr	r1, [sp, #20]
 8012754:	f8d6 70a4 	ldr.w	r7, [r6, #164]	@ 0xa4
 8012758:	47b8      	blx	r7
 801275a:	2301      	movs	r3, #1
 801275c:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 8012760:	e7c4      	b.n	80126ec <read_submessage_format+0xc4>
 8012762:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 8012766:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8012768:	a80c      	add	r0, sp, #48	@ 0x30
 801276a:	1a52      	subs	r2, r2, r1
 801276c:	eba8 0803 	sub.w	r8, r8, r3
 8012770:	f7ff fbee 	bl	8011f50 <ucdr_init_buffer>
 8012774:	a80c      	add	r0, sp, #48	@ 0x30
 8012776:	44a8      	add	r8, r5
 8012778:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801277c:	f7ff fbbc 	bl	8011ef8 <ucdr_set_on_full_buffer_callback>
 8012780:	ab0c      	add	r3, sp, #48	@ 0x30
 8012782:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8012786:	fa1f f888 	uxth.w	r8, r8
 801278a:	9300      	str	r3, [sp, #0]
 801278c:	463a      	mov	r2, r7
 801278e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8012792:	4630      	mov	r0, r6
 8012794:	f8cd 8004 	str.w	r8, [sp, #4]
 8012798:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801279c:	2107      	movs	r1, #7
 801279e:	f88d 1016 	strb.w	r1, [sp, #22]
 80127a2:	b29b      	uxth	r3, r3
 80127a4:	f8d6 10b0 	ldr.w	r1, [r6, #176]	@ 0xb0
 80127a8:	9102      	str	r1, [sp, #8]
 80127aa:	9905      	ldr	r1, [sp, #20]
 80127ac:	f8d6 70ac 	ldr.w	r7, [r6, #172]	@ 0xac
 80127b0:	47b8      	blx	r7
 80127b2:	2301      	movs	r3, #1
 80127b4:	f886 30b4 	strb.w	r3, [r6, #180]	@ 0xb4
 80127b8:	e7a6      	b.n	8012708 <read_submessage_format+0xe0>
 80127ba:	bf00      	nop

080127bc <on_get_fragmentation_info>:
 80127bc:	b500      	push	{lr}
 80127be:	b08b      	sub	sp, #44	@ 0x2c
 80127c0:	4601      	mov	r1, r0
 80127c2:	2204      	movs	r2, #4
 80127c4:	a802      	add	r0, sp, #8
 80127c6:	f7ff fbc3 	bl	8011f50 <ucdr_init_buffer>
 80127ca:	f10d 0305 	add.w	r3, sp, #5
 80127ce:	f10d 0206 	add.w	r2, sp, #6
 80127d2:	a901      	add	r1, sp, #4
 80127d4:	a802      	add	r0, sp, #8
 80127d6:	f001 feb3 	bl	8014540 <uxr_read_submessage_header>
 80127da:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80127de:	2b0d      	cmp	r3, #13
 80127e0:	d003      	beq.n	80127ea <on_get_fragmentation_info+0x2e>
 80127e2:	2000      	movs	r0, #0
 80127e4:	b00b      	add	sp, #44	@ 0x2c
 80127e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80127ea:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80127ee:	f013 0f02 	tst.w	r3, #2
 80127f2:	bf14      	ite	ne
 80127f4:	2002      	movne	r0, #2
 80127f6:	2001      	moveq	r0, #1
 80127f8:	b00b      	add	sp, #44	@ 0x2c
 80127fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80127fe:	bf00      	nop

08012800 <read_submessage_get_info>:
 8012800:	b570      	push	{r4, r5, r6, lr}
 8012802:	2500      	movs	r5, #0
 8012804:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 8012808:	460e      	mov	r6, r1
 801280a:	4604      	mov	r4, r0
 801280c:	f44f 7224 	mov.w	r2, #656	@ 0x290
 8012810:	4629      	mov	r1, r5
 8012812:	a810      	add	r0, sp, #64	@ 0x40
 8012814:	9503      	str	r5, [sp, #12]
 8012816:	9504      	str	r5, [sp, #16]
 8012818:	f009 fac2 	bl	801bda0 <memset>
 801281c:	a903      	add	r1, sp, #12
 801281e:	4630      	mov	r0, r6
 8012820:	f002 fe5c 	bl	80154dc <uxr_deserialize_GET_INFO_Payload>
 8012824:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8012828:	4620      	mov	r0, r4
 801282a:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 801282e:	f001 f879 	bl	8013924 <uxr_session_header_offset>
 8012832:	462b      	mov	r3, r5
 8012834:	220c      	movs	r2, #12
 8012836:	a905      	add	r1, sp, #20
 8012838:	9000      	str	r0, [sp, #0]
 801283a:	a808      	add	r0, sp, #32
 801283c:	f7ff fb76 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 8012840:	a910      	add	r1, sp, #64	@ 0x40
 8012842:	a808      	add	r0, sp, #32
 8012844:	f002 febe 	bl	80155c4 <uxr_serialize_INFO_Payload>
 8012848:	9b08      	ldr	r3, [sp, #32]
 801284a:	462a      	mov	r2, r5
 801284c:	4629      	mov	r1, r5
 801284e:	4620      	mov	r0, r4
 8012850:	f001 f814 	bl	801387c <uxr_stamp_session_header>
 8012854:	a808      	add	r0, sp, #32
 8012856:	f7ff fba9 	bl	8011fac <ucdr_buffer_length>
 801285a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801285c:	4602      	mov	r2, r0
 801285e:	a905      	add	r1, sp, #20
 8012860:	e9d3 0400 	ldrd	r0, r4, [r3]
 8012864:	47a0      	blx	r4
 8012866:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 801286a:	bd70      	pop	{r4, r5, r6, pc}

0801286c <write_submessage_acknack.isra.0>:
 801286c:	b570      	push	{r4, r5, r6, lr}
 801286e:	b092      	sub	sp, #72	@ 0x48
 8012870:	4605      	mov	r5, r0
 8012872:	460e      	mov	r6, r1
 8012874:	4614      	mov	r4, r2
 8012876:	f001 f855 	bl	8013924 <uxr_session_header_offset>
 801287a:	a905      	add	r1, sp, #20
 801287c:	9000      	str	r0, [sp, #0]
 801287e:	2300      	movs	r3, #0
 8012880:	a80a      	add	r0, sp, #40	@ 0x28
 8012882:	2211      	movs	r2, #17
 8012884:	f7ff fb52 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 8012888:	2218      	movs	r2, #24
 801288a:	2300      	movs	r3, #0
 801288c:	210a      	movs	r1, #10
 801288e:	fb02 5404 	mla	r4, r2, r4, r5
 8012892:	a80a      	add	r0, sp, #40	@ 0x28
 8012894:	2205      	movs	r2, #5
 8012896:	3450      	adds	r4, #80	@ 0x50
 8012898:	f001 fe38 	bl	801450c <uxr_buffer_submessage_header>
 801289c:	a903      	add	r1, sp, #12
 801289e:	4620      	mov	r0, r4
 80128a0:	f007 fdc2 	bl	801a428 <uxr_compute_acknack>
 80128a4:	ba40      	rev16	r0, r0
 80128a6:	a903      	add	r1, sp, #12
 80128a8:	f88d 6010 	strb.w	r6, [sp, #16]
 80128ac:	f8ad 000e 	strh.w	r0, [sp, #14]
 80128b0:	a80a      	add	r0, sp, #40	@ 0x28
 80128b2:	f002 fef9 	bl	80156a8 <uxr_serialize_ACKNACK_Payload>
 80128b6:	2200      	movs	r2, #0
 80128b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80128ba:	4628      	mov	r0, r5
 80128bc:	4611      	mov	r1, r2
 80128be:	f000 ffdd 	bl	801387c <uxr_stamp_session_header>
 80128c2:	a80a      	add	r0, sp, #40	@ 0x28
 80128c4:	f7ff fb72 	bl	8011fac <ucdr_buffer_length>
 80128c8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80128ca:	4602      	mov	r2, r0
 80128cc:	a905      	add	r1, sp, #20
 80128ce:	e9d3 0400 	ldrd	r0, r4, [r3]
 80128d2:	47a0      	blx	r4
 80128d4:	b012      	add	sp, #72	@ 0x48
 80128d6:	bd70      	pop	{r4, r5, r6, pc}

080128d8 <uxr_init_session>:
 80128d8:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 8012910 <uxr_init_session+0x38>
 80128dc:	2300      	movs	r3, #0
 80128de:	b510      	push	{r4, lr}
 80128e0:	4604      	mov	r4, r0
 80128e2:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 80128e6:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 80128ea:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 80128ee:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 80128f2:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 80128f6:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 80128fa:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 80128fe:	2181      	movs	r1, #129	@ 0x81
 8012900:	f000 ff20 	bl	8013744 <uxr_init_session_info>
 8012904:	f104 0008 	add.w	r0, r4, #8
 8012908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801290c:	f001 bd1a 	b.w	8014344 <uxr_init_stream_storage>
	...

08012918 <uxr_set_status_callback>:
 8012918:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 801291c:	4770      	bx	lr
 801291e:	bf00      	nop

08012920 <uxr_set_topic_callback>:
 8012920:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 8012924:	4770      	bx	lr
 8012926:	bf00      	nop

08012928 <uxr_set_request_callback>:
 8012928:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 801292c:	4770      	bx	lr
 801292e:	bf00      	nop

08012930 <uxr_set_reply_callback>:
 8012930:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 8012934:	4770      	bx	lr
 8012936:	bf00      	nop

08012938 <uxr_create_output_best_effort_stream>:
 8012938:	b510      	push	{r4, lr}
 801293a:	4604      	mov	r4, r0
 801293c:	b084      	sub	sp, #16
 801293e:	e9cd 2100 	strd	r2, r1, [sp]
 8012942:	f000 ffef 	bl	8013924 <uxr_session_header_offset>
 8012946:	4603      	mov	r3, r0
 8012948:	f104 0008 	add.w	r0, r4, #8
 801294c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8012950:	b004      	add	sp, #16
 8012952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012956:	f001 bd3b 	b.w	80143d0 <uxr_add_output_best_effort_buffer>
 801295a:	bf00      	nop

0801295c <uxr_create_output_reliable_stream>:
 801295c:	b530      	push	{r4, r5, lr}
 801295e:	b089      	sub	sp, #36	@ 0x24
 8012960:	4604      	mov	r4, r0
 8012962:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8012966:	9303      	str	r3, [sp, #12]
 8012968:	f000 ffdc 	bl	8013924 <uxr_session_header_offset>
 801296c:	4605      	mov	r5, r0
 801296e:	9905      	ldr	r1, [sp, #20]
 8012970:	f104 0008 	add.w	r0, r4, #8
 8012974:	9500      	str	r5, [sp, #0]
 8012976:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 801297a:	f001 fd3d 	bl	80143f8 <uxr_add_output_reliable_buffer>
 801297e:	2200      	movs	r2, #0
 8012980:	fa5f fc80 	uxtb.w	ip, r0
 8012984:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8012988:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801298c:	0e03      	lsrs	r3, r0, #24
 801298e:	f36c 0207 	bfi	r2, ip, #0, #8
 8012992:	f364 220f 	bfi	r2, r4, #8, #8
 8012996:	f361 4217 	bfi	r2, r1, #16, #8
 801299a:	f363 621f 	bfi	r2, r3, #24, #8
 801299e:	4610      	mov	r0, r2
 80129a0:	b009      	add	sp, #36	@ 0x24
 80129a2:	bd30      	pop	{r4, r5, pc}

080129a4 <uxr_create_input_best_effort_stream>:
 80129a4:	b082      	sub	sp, #8
 80129a6:	3008      	adds	r0, #8
 80129a8:	b002      	add	sp, #8
 80129aa:	f001 bd3f 	b.w	801442c <uxr_add_input_best_effort_buffer>
 80129ae:	bf00      	nop

080129b0 <uxr_create_input_reliable_stream>:
 80129b0:	b510      	push	{r4, lr}
 80129b2:	4c0c      	ldr	r4, [pc, #48]	@ (80129e4 <uxr_create_input_reliable_stream+0x34>)
 80129b4:	b084      	sub	sp, #16
 80129b6:	3008      	adds	r0, #8
 80129b8:	9400      	str	r4, [sp, #0]
 80129ba:	f001 fd4d 	bl	8014458 <uxr_add_input_reliable_buffer>
 80129be:	2200      	movs	r2, #0
 80129c0:	fa5f fe80 	uxtb.w	lr, r0
 80129c4:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 80129c8:	f3c0 4107 	ubfx	r1, r0, #16, #8
 80129cc:	0e03      	lsrs	r3, r0, #24
 80129ce:	f36e 0207 	bfi	r2, lr, #0, #8
 80129d2:	f36c 220f 	bfi	r2, ip, #8, #8
 80129d6:	f361 4217 	bfi	r2, r1, #16, #8
 80129da:	f363 621f 	bfi	r2, r3, #24, #8
 80129de:	4610      	mov	r0, r2
 80129e0:	b004      	add	sp, #16
 80129e2:	bd10      	pop	{r4, pc}
 80129e4:	080127bd 	.word	0x080127bd

080129e8 <uxr_epoch_nanos>:
 80129e8:	b510      	push	{r4, lr}
 80129ea:	4604      	mov	r4, r0
 80129ec:	f001 fdf0 	bl	80145d0 <uxr_nanos>
 80129f0:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 80129f4:	1ac0      	subs	r0, r0, r3
 80129f6:	eb61 0102 	sbc.w	r1, r1, r2
 80129fa:	bd10      	pop	{r4, pc}

080129fc <uxr_flash_output_streams>:
 80129fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a00:	7e03      	ldrb	r3, [r0, #24]
 8012a02:	b084      	sub	sp, #16
 8012a04:	4604      	mov	r4, r0
 8012a06:	b1fb      	cbz	r3, 8012a48 <uxr_flash_output_streams+0x4c>
 8012a08:	f04f 0900 	mov.w	r9, #0
 8012a0c:	f10d 0802 	add.w	r8, sp, #2
 8012a10:	af03      	add	r7, sp, #12
 8012a12:	ae02      	add	r6, sp, #8
 8012a14:	4648      	mov	r0, r9
 8012a16:	2201      	movs	r2, #1
 8012a18:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 8012a1c:	4611      	mov	r1, r2
 8012a1e:	3508      	adds	r5, #8
 8012a20:	f001 fc36 	bl	8014290 <uxr_stream_id>
 8012a24:	4684      	mov	ip, r0
 8012a26:	4643      	mov	r3, r8
 8012a28:	463a      	mov	r2, r7
 8012a2a:	4631      	mov	r1, r6
 8012a2c:	4628      	mov	r0, r5
 8012a2e:	f8cd c004 	str.w	ip, [sp, #4]
 8012a32:	f007 fd83 	bl	801a53c <uxr_prepare_best_effort_buffer_to_send>
 8012a36:	2800      	cmp	r0, #0
 8012a38:	d13d      	bne.n	8012ab6 <uxr_flash_output_streams+0xba>
 8012a3a:	f109 0901 	add.w	r9, r9, #1
 8012a3e:	7e23      	ldrb	r3, [r4, #24]
 8012a40:	fa5f f089 	uxtb.w	r0, r9
 8012a44:	4283      	cmp	r3, r0
 8012a46:	d8e6      	bhi.n	8012a16 <uxr_flash_output_streams+0x1a>
 8012a48:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012a4c:	b383      	cbz	r3, 8012ab0 <uxr_flash_output_streams+0xb4>
 8012a4e:	f04f 0900 	mov.w	r9, #0
 8012a52:	f10d 0802 	add.w	r8, sp, #2
 8012a56:	af03      	add	r7, sp, #12
 8012a58:	ae02      	add	r6, sp, #8
 8012a5a:	4648      	mov	r0, r9
 8012a5c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 8012a60:	2201      	movs	r2, #1
 8012a62:	2102      	movs	r1, #2
 8012a64:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 8012a68:	f001 fc12 	bl	8014290 <uxr_stream_id>
 8012a6c:	9001      	str	r0, [sp, #4]
 8012a6e:	3520      	adds	r5, #32
 8012a70:	e00c      	b.n	8012a8c <uxr_flash_output_streams+0x90>
 8012a72:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012a76:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012a7a:	9b02      	ldr	r3, [sp, #8]
 8012a7c:	f000 fefe 	bl	801387c <uxr_stamp_session_header>
 8012a80:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012a82:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8012a86:	e9d3 0a00 	ldrd	r0, sl, [r3]
 8012a8a:	47d0      	blx	sl
 8012a8c:	4643      	mov	r3, r8
 8012a8e:	463a      	mov	r2, r7
 8012a90:	4631      	mov	r1, r6
 8012a92:	4628      	mov	r0, r5
 8012a94:	f007 ff74 	bl	801a980 <uxr_prepare_next_reliable_buffer_to_send>
 8012a98:	4603      	mov	r3, r0
 8012a9a:	4620      	mov	r0, r4
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d1e8      	bne.n	8012a72 <uxr_flash_output_streams+0x76>
 8012aa0:	f109 0901 	add.w	r9, r9, #1
 8012aa4:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 8012aa8:	fa5f f089 	uxtb.w	r0, r9
 8012aac:	4283      	cmp	r3, r0
 8012aae:	d8d5      	bhi.n	8012a5c <uxr_flash_output_streams+0x60>
 8012ab0:	b004      	add	sp, #16
 8012ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012ab6:	9b02      	ldr	r3, [sp, #8]
 8012ab8:	4620      	mov	r0, r4
 8012aba:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8012abe:	f109 0901 	add.w	r9, r9, #1
 8012ac2:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8012ac6:	f000 fed9 	bl	801387c <uxr_stamp_session_header>
 8012aca:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012acc:	9a03      	ldr	r2, [sp, #12]
 8012ace:	685d      	ldr	r5, [r3, #4]
 8012ad0:	6818      	ldr	r0, [r3, #0]
 8012ad2:	9902      	ldr	r1, [sp, #8]
 8012ad4:	47a8      	blx	r5
 8012ad6:	7e23      	ldrb	r3, [r4, #24]
 8012ad8:	fa5f f089 	uxtb.w	r0, r9
 8012adc:	4283      	cmp	r3, r0
 8012ade:	d89a      	bhi.n	8012a16 <uxr_flash_output_streams+0x1a>
 8012ae0:	e7b2      	b.n	8012a48 <uxr_flash_output_streams+0x4c>
 8012ae2:	bf00      	nop

08012ae4 <read_submessage_info>:
 8012ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ae8:	460d      	mov	r5, r1
 8012aea:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 8012aee:	4606      	mov	r6, r0
 8012af0:	4669      	mov	r1, sp
 8012af2:	4628      	mov	r0, r5
 8012af4:	f002 fc04 	bl	8015300 <uxr_deserialize_BaseObjectReply>
 8012af8:	4604      	mov	r4, r0
 8012afa:	a902      	add	r1, sp, #8
 8012afc:	4628      	mov	r0, r5
 8012afe:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8012b02:	f7fe f931 	bl	8010d68 <ucdr_deserialize_bool>
 8012b06:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8012b0a:	4004      	ands	r4, r0
 8012b0c:	b2e4      	uxtb	r4, r4
 8012b0e:	b95b      	cbnz	r3, 8012b28 <read_submessage_info+0x44>
 8012b10:	a987      	add	r1, sp, #540	@ 0x21c
 8012b12:	4628      	mov	r0, r5
 8012b14:	f7fe f928 	bl	8010d68 <ucdr_deserialize_bool>
 8012b18:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 8012b1c:	4680      	mov	r8, r0
 8012b1e:	b94b      	cbnz	r3, 8012b34 <read_submessage_info+0x50>
 8012b20:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 8012b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b28:	a903      	add	r1, sp, #12
 8012b2a:	4628      	mov	r0, r5
 8012b2c:	f002 fa94 	bl	8015058 <uxr_deserialize_ObjectVariant>
 8012b30:	4004      	ands	r4, r0
 8012b32:	e7ed      	b.n	8012b10 <read_submessage_info+0x2c>
 8012b34:	a988      	add	r1, sp, #544	@ 0x220
 8012b36:	4628      	mov	r0, r5
 8012b38:	f7fe f944 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 8012b3c:	ea14 0f08 	tst.w	r4, r8
 8012b40:	d0ee      	beq.n	8012b20 <read_submessage_info+0x3c>
 8012b42:	2800      	cmp	r0, #0
 8012b44:	d0ec      	beq.n	8012b20 <read_submessage_info+0x3c>
 8012b46:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 8012b4a:	2b0d      	cmp	r3, #13
 8012b4c:	d1e8      	bne.n	8012b20 <read_submessage_info+0x3c>
 8012b4e:	a98a      	add	r1, sp, #552	@ 0x228
 8012b50:	4628      	mov	r0, r5
 8012b52:	f7fe fedd 	bl	8011910 <ucdr_deserialize_int16_t>
 8012b56:	b138      	cbz	r0, 8012b68 <read_submessage_info+0x84>
 8012b58:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	dd06      	ble.n	8012b6e <read_submessage_info+0x8a>
 8012b60:	2f00      	cmp	r7, #0
 8012b62:	bf14      	ite	ne
 8012b64:	2001      	movne	r0, #1
 8012b66:	2002      	moveq	r0, #2
 8012b68:	f886 00b5 	strb.w	r0, [r6, #181]	@ 0xb5
 8012b6c:	e7d8      	b.n	8012b20 <read_submessage_info+0x3c>
 8012b6e:	2000      	movs	r0, #0
 8012b70:	e7fa      	b.n	8012b68 <read_submessage_info+0x84>
 8012b72:	bf00      	nop

08012b74 <read_submessage_list>:
 8012b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b78:	4604      	mov	r4, r0
 8012b7a:	b097      	sub	sp, #92	@ 0x5c
 8012b7c:	460d      	mov	r5, r1
 8012b7e:	4ec1      	ldr	r6, [pc, #772]	@ (8012e84 <read_submessage_list+0x310>)
 8012b80:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b82:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 8012b86:	aa0c      	add	r2, sp, #48	@ 0x30
 8012b88:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 8012b8c:	4628      	mov	r0, r5
 8012b8e:	f001 fcd7 	bl	8014540 <uxr_read_submessage_header>
 8012b92:	2800      	cmp	r0, #0
 8012b94:	f000 8142 	beq.w	8012e1c <read_submessage_list+0x2a8>
 8012b98:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 8012b9c:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 8012ba0:	3b02      	subs	r3, #2
 8012ba2:	2b0d      	cmp	r3, #13
 8012ba4:	d8ed      	bhi.n	8012b82 <read_submessage_list+0xe>
 8012ba6:	a101      	add	r1, pc, #4	@ (adr r1, 8012bac <read_submessage_list+0x38>)
 8012ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012bac:	08012e13 	.word	0x08012e13
 8012bb0:	08012b83 	.word	0x08012b83
 8012bb4:	08012e03 	.word	0x08012e03
 8012bb8:	08012da1 	.word	0x08012da1
 8012bbc:	08012d97 	.word	0x08012d97
 8012bc0:	08012b83 	.word	0x08012b83
 8012bc4:	08012b83 	.word	0x08012b83
 8012bc8:	08012ced 	.word	0x08012ced
 8012bcc:	08012c7f 	.word	0x08012c7f
 8012bd0:	08012c3f 	.word	0x08012c3f
 8012bd4:	08012b83 	.word	0x08012b83
 8012bd8:	08012b83 	.word	0x08012b83
 8012bdc:	08012b83 	.word	0x08012b83
 8012be0:	08012be5 	.word	0x08012be5
 8012be4:	a910      	add	r1, sp, #64	@ 0x40
 8012be6:	4628      	mov	r0, r5
 8012be8:	f002 fdc0 	bl	801576c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 8012bec:	f8d4 8090 	ldr.w	r8, [r4, #144]	@ 0x90
 8012bf0:	f1b8 0f00 	cmp.w	r8, #0
 8012bf4:	f000 811a 	beq.w	8012e2c <read_submessage_list+0x2b8>
 8012bf8:	f001 fcea 	bl	80145d0 <uxr_nanos>
 8012bfc:	4602      	mov	r2, r0
 8012bfe:	460b      	mov	r3, r1
 8012c00:	f8d4 0094 	ldr.w	r0, [r4, #148]	@ 0x94
 8012c04:	2100      	movs	r1, #0
 8012c06:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8012c08:	9006      	str	r0, [sp, #24]
 8012c0a:	468c      	mov	ip, r1
 8012c0c:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8012c0e:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8012c12:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8012c14:	e9cd 0c04 	strd	r0, ip, [sp, #16]
 8012c18:	468c      	mov	ip, r1
 8012c1a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8012c1c:	fbc7 0c06 	smlal	r0, ip, r7, r6
 8012c20:	e9cd 0c02 	strd	r0, ip, [sp, #8]
 8012c24:	e9dd 7012 	ldrd	r7, r0, [sp, #72]	@ 0x48
 8012c28:	fbc7 0106 	smlal	r0, r1, r7, r6
 8012c2c:	e9cd 0100 	strd	r0, r1, [sp]
 8012c30:	4620      	mov	r0, r4
 8012c32:	47c0      	blx	r8
 8012c34:	f04f 0301 	mov.w	r3, #1
 8012c38:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 8012c3c:	e7a1      	b.n	8012b82 <read_submessage_list+0xe>
 8012c3e:	a910      	add	r1, sp, #64	@ 0x40
 8012c40:	4628      	mov	r0, r5
 8012c42:	f002 fd71 	bl	8015728 <uxr_deserialize_HEARTBEAT_Payload>
 8012c46:	2100      	movs	r1, #0
 8012c48:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012c4c:	f001 fb4e 	bl	80142ec <uxr_stream_id_from_raw>
 8012c50:	f3c0 2807 	ubfx	r8, r0, #8, #8
 8012c54:	900f      	str	r0, [sp, #60]	@ 0x3c
 8012c56:	f104 0008 	add.w	r0, r4, #8
 8012c5a:	4641      	mov	r1, r8
 8012c5c:	f001 fc34 	bl	80144c8 <uxr_get_input_reliable_stream>
 8012c60:	2800      	cmp	r0, #0
 8012c62:	d08e      	beq.n	8012b82 <read_submessage_list+0xe>
 8012c64:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8012c68:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 8012c6c:	f007 fbd0 	bl	801a410 <uxr_process_heartbeat>
 8012c70:	4642      	mov	r2, r8
 8012c72:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 8012c76:	4620      	mov	r0, r4
 8012c78:	f7ff fdf8 	bl	801286c <write_submessage_acknack.isra.0>
 8012c7c:	e781      	b.n	8012b82 <read_submessage_list+0xe>
 8012c7e:	a910      	add	r1, sp, #64	@ 0x40
 8012c80:	4628      	mov	r0, r5
 8012c82:	f002 fd29 	bl	80156d8 <uxr_deserialize_ACKNACK_Payload>
 8012c86:	2100      	movs	r1, #0
 8012c88:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 8012c8c:	f001 fb2e 	bl	80142ec <uxr_stream_id_from_raw>
 8012c90:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8012c94:	900d      	str	r0, [sp, #52]	@ 0x34
 8012c96:	f104 0008 	add.w	r0, r4, #8
 8012c9a:	f001 fbff 	bl	801449c <uxr_get_output_reliable_stream>
 8012c9e:	4680      	mov	r8, r0
 8012ca0:	2800      	cmp	r0, #0
 8012ca2:	f43f af6e 	beq.w	8012b82 <read_submessage_list+0xe>
 8012ca6:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 8012caa:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012cae:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 8012cb2:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 8012cb6:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 8012cba:	b289      	uxth	r1, r1
 8012cbc:	f007 ff08 	bl	801aad0 <uxr_process_acknack>
 8012cc0:	4640      	mov	r0, r8
 8012cc2:	f007 fec9 	bl	801aa58 <uxr_begin_output_nack_buffer_it>
 8012cc6:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8012cca:	e005      	b.n	8012cd8 <read_submessage_list+0x164>
 8012ccc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8012cce:	e9dd 120e 	ldrd	r1, r2, [sp, #56]	@ 0x38
 8012cd2:	e9d3 0900 	ldrd	r0, r9, [r3]
 8012cd6:	47c8      	blx	r9
 8012cd8:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 8012cdc:	aa0f      	add	r2, sp, #60	@ 0x3c
 8012cde:	4651      	mov	r1, sl
 8012ce0:	4640      	mov	r0, r8
 8012ce2:	f007 febb 	bl	801aa5c <uxr_next_reliable_nack_buffer_to_send>
 8012ce6:	2800      	cmp	r0, #0
 8012ce8:	d1f0      	bne.n	8012ccc <read_submessage_list+0x158>
 8012cea:	e74a      	b.n	8012b82 <read_submessage_list+0xe>
 8012cec:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 8012cf0:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 8012cf4:	f8bd 8030 	ldrh.w	r8, [sp, #48]	@ 0x30
 8012cf8:	4628      	mov	r0, r5
 8012cfa:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 8012cfe:	4651      	mov	r1, sl
 8012d00:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 8012d04:	f1a8 0804 	sub.w	r8, r8, #4
 8012d08:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 8012d0c:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 8012d10:	fa1f f888 	uxth.w	r8, r8
 8012d14:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012d18:	f009 090e 	and.w	r9, r9, #14
 8012d1c:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 8012d20:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 8012d24:	f002 fa3a 	bl	801519c <uxr_deserialize_BaseObjectRequest>
 8012d28:	4650      	mov	r0, sl
 8012d2a:	a90f      	add	r1, sp, #60	@ 0x3c
 8012d2c:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 8012d30:	f000 fe20 	bl	8013974 <uxr_parse_base_object_request>
 8012d34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012d36:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 8012d3a:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 8012d3e:	9110      	str	r1, [sp, #64]	@ 0x40
 8012d40:	f1bb 0f00 	cmp.w	fp, #0
 8012d44:	d006      	beq.n	8012d54 <read_submessage_list+0x1e0>
 8012d46:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8012d4a:	4652      	mov	r2, sl
 8012d4c:	4620      	mov	r0, r4
 8012d4e:	9300      	str	r3, [sp, #0]
 8012d50:	2300      	movs	r3, #0
 8012d52:	47d8      	blx	fp
 8012d54:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012d56:	b182      	cbz	r2, 8012d7a <read_submessage_list+0x206>
 8012d58:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8012d5a:	f04f 0c00 	mov.w	ip, #0
 8012d5e:	3902      	subs	r1, #2
 8012d60:	e003      	b.n	8012d6a <read_submessage_list+0x1f6>
 8012d62:	f10c 0c01 	add.w	ip, ip, #1
 8012d66:	4594      	cmp	ip, r2
 8012d68:	d007      	beq.n	8012d7a <read_submessage_list+0x206>
 8012d6a:	f831 3f02 	ldrh.w	r3, [r1, #2]!
 8012d6e:	4553      	cmp	r3, sl
 8012d70:	d1f7      	bne.n	8012d62 <read_submessage_list+0x1ee>
 8012d72:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012d74:	2200      	movs	r2, #0
 8012d76:	f803 200c 	strb.w	r2, [r3, ip]
 8012d7a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 8012d7e:	464b      	mov	r3, r9
 8012d80:	4642      	mov	r2, r8
 8012d82:	4620      	mov	r0, r4
 8012d84:	9102      	str	r1, [sp, #8]
 8012d86:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8012d88:	9101      	str	r1, [sp, #4]
 8012d8a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8012d8c:	9100      	str	r1, [sp, #0]
 8012d8e:	4629      	mov	r1, r5
 8012d90:	f7ff fc4a 	bl	8012628 <read_submessage_format>
 8012d94:	e6f5      	b.n	8012b82 <read_submessage_list+0xe>
 8012d96:	4629      	mov	r1, r5
 8012d98:	4620      	mov	r0, r4
 8012d9a:	f7ff fea3 	bl	8012ae4 <read_submessage_info>
 8012d9e:	e6f0      	b.n	8012b82 <read_submessage_list+0xe>
 8012da0:	2a00      	cmp	r2, #0
 8012da2:	d03e      	beq.n	8012e22 <read_submessage_list+0x2ae>
 8012da4:	a910      	add	r1, sp, #64	@ 0x40
 8012da6:	4628      	mov	r0, r5
 8012da8:	f002 fbee 	bl	8015588 <uxr_deserialize_STATUS_Payload>
 8012dac:	a90e      	add	r1, sp, #56	@ 0x38
 8012dae:	aa0d      	add	r2, sp, #52	@ 0x34
 8012db0:	a810      	add	r0, sp, #64	@ 0x40
 8012db2:	f000 fddf 	bl	8013974 <uxr_parse_base_object_request>
 8012db6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8012db8:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 8012dbc:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 8012dc0:	f8bd 8034 	ldrh.w	r8, [sp, #52]	@ 0x34
 8012dc4:	910f      	str	r1, [sp, #60]	@ 0x3c
 8012dc6:	f1ba 0f00 	cmp.w	sl, #0
 8012dca:	d006      	beq.n	8012dda <read_submessage_list+0x266>
 8012dcc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8012dd0:	4642      	mov	r2, r8
 8012dd2:	4620      	mov	r0, r4
 8012dd4:	9300      	str	r3, [sp, #0]
 8012dd6:	464b      	mov	r3, r9
 8012dd8:	47d0      	blx	sl
 8012dda:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8012ddc:	2a00      	cmp	r2, #0
 8012dde:	f43f aed0 	beq.w	8012b82 <read_submessage_list+0xe>
 8012de2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 8012de4:	2100      	movs	r1, #0
 8012de6:	3802      	subs	r0, #2
 8012de8:	e003      	b.n	8012df2 <read_submessage_list+0x27e>
 8012dea:	3101      	adds	r1, #1
 8012dec:	4291      	cmp	r1, r2
 8012dee:	f43f aec8 	beq.w	8012b82 <read_submessage_list+0xe>
 8012df2:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8012df6:	4543      	cmp	r3, r8
 8012df8:	d1f7      	bne.n	8012dea <read_submessage_list+0x276>
 8012dfa:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8012dfc:	f803 9001 	strb.w	r9, [r3, r1]
 8012e00:	e6bf      	b.n	8012b82 <read_submessage_list+0xe>
 8012e02:	2a00      	cmp	r2, #0
 8012e04:	f47f aebd 	bne.w	8012b82 <read_submessage_list+0xe>
 8012e08:	4629      	mov	r1, r5
 8012e0a:	4620      	mov	r0, r4
 8012e0c:	f000 fcf6 	bl	80137fc <uxr_read_create_session_status>
 8012e10:	e6b7      	b.n	8012b82 <read_submessage_list+0xe>
 8012e12:	4629      	mov	r1, r5
 8012e14:	4620      	mov	r0, r4
 8012e16:	f7ff fcf3 	bl	8012800 <read_submessage_get_info>
 8012e1a:	e6b2      	b.n	8012b82 <read_submessage_list+0xe>
 8012e1c:	b017      	add	sp, #92	@ 0x5c
 8012e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e22:	4629      	mov	r1, r5
 8012e24:	4620      	mov	r0, r4
 8012e26:	f000 fcf7 	bl	8013818 <uxr_read_delete_session_status>
 8012e2a:	e6aa      	b.n	8012b82 <read_submessage_list+0xe>
 8012e2c:	f001 fbd0 	bl	80145d0 <uxr_nanos>
 8012e30:	4642      	mov	r2, r8
 8012e32:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8012e34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8012e36:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012e3a:	1818      	adds	r0, r3, r0
 8012e3c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8012e3e:	eb42 0101 	adc.w	r1, r2, r1
 8012e42:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8012e44:	4642      	mov	r2, r8
 8012e46:	fbc7 3206 	smlal	r3, r2, r7, r6
 8012e4a:	469c      	mov	ip, r3
 8012e4c:	e9dd 3710 	ldrd	r3, r7, [sp, #64]	@ 0x40
 8012e50:	fbc3 7806 	smlal	r7, r8, r3, r6
 8012e54:	4643      	mov	r3, r8
 8012e56:	eb1c 0c07 	adds.w	ip, ip, r7
 8012e5a:	eb42 0203 	adc.w	r2, r2, r3
 8012e5e:	ebb0 030c 	subs.w	r3, r0, ip
 8012e62:	eb61 0202 	sbc.w	r2, r1, r2
 8012e66:	2a00      	cmp	r2, #0
 8012e68:	db08      	blt.n	8012e7c <read_submessage_list+0x308>
 8012e6a:	085b      	lsrs	r3, r3, #1
 8012e6c:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
 8012e70:	1052      	asrs	r2, r2, #1
 8012e72:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8012e76:	f8c4 209c 	str.w	r2, [r4, #156]	@ 0x9c
 8012e7a:	e6db      	b.n	8012c34 <read_submessage_list+0xc0>
 8012e7c:	3301      	adds	r3, #1
 8012e7e:	f142 0200 	adc.w	r2, r2, #0
 8012e82:	e7f2      	b.n	8012e6a <read_submessage_list+0x2f6>
 8012e84:	3b9aca00 	.word	0x3b9aca00

08012e88 <listen_message_reliably>:
 8012e88:	1e0b      	subs	r3, r1, #0
 8012e8a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e8e:	bfb8      	it	lt
 8012e90:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 8012e94:	b09d      	sub	sp, #116	@ 0x74
 8012e96:	4680      	mov	r8, r0
 8012e98:	9305      	str	r3, [sp, #20]
 8012e9a:	f001 fb7d 	bl	8014598 <uxr_millis>
 8012e9e:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 8012ea2:	4681      	mov	r9, r0
 8012ea4:	2a00      	cmp	r2, #0
 8012ea6:	f000 809a 	beq.w	8012fde <listen_message_reliably+0x156>
 8012eaa:	2600      	movs	r6, #0
 8012eac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012eb0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8012eb4:	460f      	mov	r7, r1
 8012eb6:	4630      	mov	r0, r6
 8012eb8:	9303      	str	r3, [sp, #12]
 8012eba:	e00e      	b.n	8012eda <listen_message_reliably+0x52>
 8012ebc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012ebe:	3601      	adds	r6, #1
 8012ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012ec2:	455a      	cmp	r2, fp
 8012ec4:	9903      	ldr	r1, [sp, #12]
 8012ec6:	b2f0      	uxtb	r0, r6
 8012ec8:	eb73 0101 	sbcs.w	r1, r3, r1
 8012ecc:	da01      	bge.n	8012ed2 <listen_message_reliably+0x4a>
 8012ece:	4693      	mov	fp, r2
 8012ed0:	9303      	str	r3, [sp, #12]
 8012ed2:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8012ed6:	4283      	cmp	r3, r0
 8012ed8:	d95f      	bls.n	8012f9a <listen_message_reliably+0x112>
 8012eda:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 8012ede:	2102      	movs	r1, #2
 8012ee0:	2201      	movs	r2, #1
 8012ee2:	00e4      	lsls	r4, r4, #3
 8012ee4:	f001 f9d4 	bl	8014290 <uxr_stream_id>
 8012ee8:	4601      	mov	r1, r0
 8012eea:	f104 0520 	add.w	r5, r4, #32
 8012eee:	463b      	mov	r3, r7
 8012ef0:	464a      	mov	r2, r9
 8012ef2:	9109      	str	r1, [sp, #36]	@ 0x24
 8012ef4:	4445      	add	r5, r8
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	f007 fd82 	bl	801aa00 <uxr_update_output_stream_heartbeat_timestamp>
 8012efc:	eb08 0304 	add.w	r3, r8, r4
 8012f00:	2800      	cmp	r0, #0
 8012f02:	d0db      	beq.n	8012ebc <listen_message_reliably+0x34>
 8012f04:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 8012f08:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 8012f0c:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8012f10:	4640      	mov	r0, r8
 8012f12:	3501      	adds	r5, #1
 8012f14:	4444      	add	r4, r8
 8012f16:	9304      	str	r3, [sp, #16]
 8012f18:	f000 fd04 	bl	8013924 <uxr_session_header_offset>
 8012f1c:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8012f20:	2300      	movs	r3, #0
 8012f22:	2211      	movs	r2, #17
 8012f24:	a90c      	add	r1, sp, #48	@ 0x30
 8012f26:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 8012f2a:	9000      	str	r0, [sp, #0]
 8012f2c:	4650      	mov	r0, sl
 8012f2e:	3601      	adds	r6, #1
 8012f30:	f7fe fffc 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 8012f34:	2300      	movs	r3, #0
 8012f36:	2205      	movs	r2, #5
 8012f38:	210b      	movs	r1, #11
 8012f3a:	4650      	mov	r0, sl
 8012f3c:	f001 fae6 	bl	801450c <uxr_buffer_submessage_header>
 8012f40:	2101      	movs	r1, #1
 8012f42:	8968      	ldrh	r0, [r5, #10]
 8012f44:	f007 fe20 	bl	801ab88 <uxr_seq_num_add>
 8012f48:	892b      	ldrh	r3, [r5, #8]
 8012f4a:	4602      	mov	r2, r0
 8012f4c:	a90a      	add	r1, sp, #40	@ 0x28
 8012f4e:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012f52:	4650      	mov	r0, sl
 8012f54:	9b04      	ldr	r3, [sp, #16]
 8012f56:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012f5a:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 8012f5e:	f002 fbcf 	bl	8015700 <uxr_serialize_HEARTBEAT_Payload>
 8012f62:	2200      	movs	r2, #0
 8012f64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8012f66:	4640      	mov	r0, r8
 8012f68:	4611      	mov	r1, r2
 8012f6a:	f000 fc87 	bl	801387c <uxr_stamp_session_header>
 8012f6e:	4650      	mov	r0, sl
 8012f70:	f7ff f81c 	bl	8011fac <ucdr_buffer_length>
 8012f74:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 8012f78:	4602      	mov	r2, r0
 8012f7a:	a90c      	add	r1, sp, #48	@ 0x30
 8012f7c:	e9d3 0500 	ldrd	r0, r5, [r3]
 8012f80:	47a8      	blx	r5
 8012f82:	9903      	ldr	r1, [sp, #12]
 8012f84:	b2f0      	uxtb	r0, r6
 8012f86:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 8012f8a:	455a      	cmp	r2, fp
 8012f8c:	eb73 0101 	sbcs.w	r1, r3, r1
 8012f90:	db9d      	blt.n	8012ece <listen_message_reliably+0x46>
 8012f92:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 8012f96:	4283      	cmp	r3, r0
 8012f98:	d89f      	bhi.n	8012eda <listen_message_reliably+0x52>
 8012f9a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8012f9e:	9a03      	ldr	r2, [sp, #12]
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	bf08      	it	eq
 8012fa4:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 8012fa8:	d019      	beq.n	8012fde <listen_message_reliably+0x156>
 8012faa:	ebab 0309 	sub.w	r3, fp, r9
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	9d05      	ldr	r5, [sp, #20]
 8012fb2:	f8d8 0070 	ldr.w	r0, [r8, #112]	@ 0x70
 8012fb6:	aa08      	add	r2, sp, #32
 8012fb8:	bf08      	it	eq
 8012fba:	2301      	moveq	r3, #1
 8012fbc:	a907      	add	r1, sp, #28
 8012fbe:	6884      	ldr	r4, [r0, #8]
 8012fc0:	429d      	cmp	r5, r3
 8012fc2:	6800      	ldr	r0, [r0, #0]
 8012fc4:	bfa8      	it	ge
 8012fc6:	461d      	movge	r5, r3
 8012fc8:	462b      	mov	r3, r5
 8012fca:	47a0      	blx	r4
 8012fcc:	b948      	cbnz	r0, 8012fe2 <listen_message_reliably+0x15a>
 8012fce:	9b05      	ldr	r3, [sp, #20]
 8012fd0:	1b5b      	subs	r3, r3, r5
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	9305      	str	r3, [sp, #20]
 8012fd6:	f73f af60 	bgt.w	8012e9a <listen_message_reliably+0x12>
 8012fda:	4604      	mov	r4, r0
 8012fdc:	e012      	b.n	8013004 <listen_message_reliably+0x17c>
 8012fde:	9b05      	ldr	r3, [sp, #20]
 8012fe0:	e7e5      	b.n	8012fae <listen_message_reliably+0x126>
 8012fe2:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8012fe6:	4604      	mov	r4, r0
 8012fe8:	2500      	movs	r5, #0
 8012fea:	a80c      	add	r0, sp, #48	@ 0x30
 8012fec:	f7fe ffb0 	bl	8011f50 <ucdr_init_buffer>
 8012ff0:	f10d 031a 	add.w	r3, sp, #26
 8012ff4:	aa06      	add	r2, sp, #24
 8012ff6:	a90c      	add	r1, sp, #48	@ 0x30
 8012ff8:	4640      	mov	r0, r8
 8012ffa:	f88d 5018 	strb.w	r5, [sp, #24]
 8012ffe:	f000 fc51 	bl	80138a4 <uxr_read_session_header>
 8013002:	b918      	cbnz	r0, 801300c <listen_message_reliably+0x184>
 8013004:	4620      	mov	r0, r4
 8013006:	b01d      	add	sp, #116	@ 0x74
 8013008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801300c:	4629      	mov	r1, r5
 801300e:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8013012:	f001 f96b 	bl	80142ec <uxr_stream_id_from_raw>
 8013016:	f3c0 4607 	ubfx	r6, r0, #16, #8
 801301a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 801301e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8013022:	2e01      	cmp	r6, #1
 8013024:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 8013028:	d04b      	beq.n	80130c2 <listen_message_reliably+0x23a>
 801302a:	2e02      	cmp	r6, #2
 801302c:	d00f      	beq.n	801304e <listen_message_reliably+0x1c6>
 801302e:	2e00      	cmp	r6, #0
 8013030:	d1e8      	bne.n	8013004 <listen_message_reliably+0x17c>
 8013032:	4631      	mov	r1, r6
 8013034:	4630      	mov	r0, r6
 8013036:	f001 f959 	bl	80142ec <uxr_stream_id_from_raw>
 801303a:	4602      	mov	r2, r0
 801303c:	a90c      	add	r1, sp, #48	@ 0x30
 801303e:	4640      	mov	r0, r8
 8013040:	920a      	str	r2, [sp, #40]	@ 0x28
 8013042:	f7ff fd97 	bl	8012b74 <read_submessage_list>
 8013046:	4620      	mov	r0, r4
 8013048:	b01d      	add	sp, #116	@ 0x74
 801304a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801304e:	4629      	mov	r1, r5
 8013050:	f108 0008 	add.w	r0, r8, #8
 8013054:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 8013058:	f001 fa36 	bl	80144c8 <uxr_get_input_reliable_stream>
 801305c:	4607      	mov	r7, r0
 801305e:	b338      	cbz	r0, 80130b0 <listen_message_reliably+0x228>
 8013060:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013062:	a80c      	add	r0, sp, #48	@ 0x30
 8013064:	9203      	str	r2, [sp, #12]
 8013066:	f7fe ffa5 	bl	8011fb4 <ucdr_buffer_remaining>
 801306a:	4603      	mov	r3, r0
 801306c:	f10d 0019 	add.w	r0, sp, #25
 8013070:	9a03      	ldr	r2, [sp, #12]
 8013072:	4651      	mov	r1, sl
 8013074:	9000      	str	r0, [sp, #0]
 8013076:	4638      	mov	r0, r7
 8013078:	f007 f8ce 	bl	801a218 <uxr_receive_reliable_message>
 801307c:	b1c0      	cbz	r0, 80130b0 <listen_message_reliably+0x228>
 801307e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013082:	b393      	cbz	r3, 80130ea <listen_message_reliably+0x262>
 8013084:	ae14      	add	r6, sp, #80	@ 0x50
 8013086:	f04f 0a02 	mov.w	sl, #2
 801308a:	e00a      	b.n	80130a2 <listen_message_reliably+0x21a>
 801308c:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 8013090:	4631      	mov	r1, r6
 8013092:	f88d 5029 	strb.w	r5, [sp, #41]	@ 0x29
 8013096:	4640      	mov	r0, r8
 8013098:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 801309c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801309e:	f7ff fd69 	bl	8012b74 <read_submessage_list>
 80130a2:	2204      	movs	r2, #4
 80130a4:	4631      	mov	r1, r6
 80130a6:	4638      	mov	r0, r7
 80130a8:	f007 f938 	bl	801a31c <uxr_next_input_reliable_buffer_available>
 80130ac:	2800      	cmp	r0, #0
 80130ae:	d1ed      	bne.n	801308c <listen_message_reliably+0x204>
 80130b0:	4640      	mov	r0, r8
 80130b2:	462a      	mov	r2, r5
 80130b4:	4649      	mov	r1, r9
 80130b6:	f7ff fbd9 	bl	801286c <write_submessage_acknack.isra.0>
 80130ba:	4620      	mov	r0, r4
 80130bc:	b01d      	add	sp, #116	@ 0x74
 80130be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130c2:	4629      	mov	r1, r5
 80130c4:	f108 0008 	add.w	r0, r8, #8
 80130c8:	f001 f9f4 	bl	80144b4 <uxr_get_input_best_effort_stream>
 80130cc:	2800      	cmp	r0, #0
 80130ce:	d099      	beq.n	8013004 <listen_message_reliably+0x17c>
 80130d0:	4651      	mov	r1, sl
 80130d2:	f007 f817 	bl	801a104 <uxr_receive_best_effort_message>
 80130d6:	2800      	cmp	r0, #0
 80130d8:	d094      	beq.n	8013004 <listen_message_reliably+0x17c>
 80130da:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80130de:	a90c      	add	r1, sp, #48	@ 0x30
 80130e0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80130e2:	4640      	mov	r0, r8
 80130e4:	f7ff fd46 	bl	8012b74 <read_submessage_list>
 80130e8:	e78c      	b.n	8013004 <listen_message_reliably+0x17c>
 80130ea:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 80130ee:	a90c      	add	r1, sp, #48	@ 0x30
 80130f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80130f2:	4640      	mov	r0, r8
 80130f4:	f7ff fd3e 	bl	8012b74 <read_submessage_list>
 80130f8:	e7c4      	b.n	8013084 <listen_message_reliably+0x1fc>
 80130fa:	bf00      	nop

080130fc <uxr_run_session_timeout>:
 80130fc:	b570      	push	{r4, r5, r6, lr}
 80130fe:	4604      	mov	r4, r0
 8013100:	460d      	mov	r5, r1
 8013102:	f001 fa49 	bl	8014598 <uxr_millis>
 8013106:	4606      	mov	r6, r0
 8013108:	4620      	mov	r0, r4
 801310a:	f7ff fc77 	bl	80129fc <uxr_flash_output_streams>
 801310e:	4629      	mov	r1, r5
 8013110:	4620      	mov	r0, r4
 8013112:	f7ff feb9 	bl	8012e88 <listen_message_reliably>
 8013116:	f001 fa3f 	bl	8014598 <uxr_millis>
 801311a:	1b83      	subs	r3, r0, r6
 801311c:	1ae9      	subs	r1, r5, r3
 801311e:	2900      	cmp	r1, #0
 8013120:	dcf6      	bgt.n	8013110 <uxr_run_session_timeout+0x14>
 8013122:	f104 0008 	add.w	r0, r4, #8
 8013126:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801312a:	f001 b9d9 	b.w	80144e0 <uxr_output_streams_confirmed>
 801312e:	bf00      	nop

08013130 <uxr_run_session_until_data>:
 8013130:	b570      	push	{r4, r5, r6, lr}
 8013132:	4604      	mov	r4, r0
 8013134:	460d      	mov	r5, r1
 8013136:	f001 fa2f 	bl	8014598 <uxr_millis>
 801313a:	4606      	mov	r6, r0
 801313c:	4620      	mov	r0, r4
 801313e:	f7ff fc5d 	bl	80129fc <uxr_flash_output_streams>
 8013142:	2300      	movs	r3, #0
 8013144:	4629      	mov	r1, r5
 8013146:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 801314a:	e005      	b.n	8013158 <uxr_run_session_until_data+0x28>
 801314c:	f001 fa24 	bl	8014598 <uxr_millis>
 8013150:	1b83      	subs	r3, r0, r6
 8013152:	1ae9      	subs	r1, r5, r3
 8013154:	2900      	cmp	r1, #0
 8013156:	dd07      	ble.n	8013168 <uxr_run_session_until_data+0x38>
 8013158:	4620      	mov	r0, r4
 801315a:	f7ff fe95 	bl	8012e88 <listen_message_reliably>
 801315e:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 8013162:	2800      	cmp	r0, #0
 8013164:	d0f2      	beq.n	801314c <uxr_run_session_until_data+0x1c>
 8013166:	bd70      	pop	{r4, r5, r6, pc}
 8013168:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 801316c:	bd70      	pop	{r4, r5, r6, pc}
 801316e:	bf00      	nop

08013170 <uxr_run_session_until_confirm_delivery>:
 8013170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013174:	4606      	mov	r6, r0
 8013176:	460d      	mov	r5, r1
 8013178:	f001 fa0e 	bl	8014598 <uxr_millis>
 801317c:	4607      	mov	r7, r0
 801317e:	4630      	mov	r0, r6
 8013180:	f106 0808 	add.w	r8, r6, #8
 8013184:	f7ff fc3a 	bl	80129fc <uxr_flash_output_streams>
 8013188:	2d00      	cmp	r5, #0
 801318a:	db10      	blt.n	80131ae <uxr_run_session_until_confirm_delivery+0x3e>
 801318c:	462c      	mov	r4, r5
 801318e:	e006      	b.n	801319e <uxr_run_session_until_confirm_delivery+0x2e>
 8013190:	f7ff fe7a 	bl	8012e88 <listen_message_reliably>
 8013194:	f001 fa00 	bl	8014598 <uxr_millis>
 8013198:	1bc3      	subs	r3, r0, r7
 801319a:	1aec      	subs	r4, r5, r3
 801319c:	d407      	bmi.n	80131ae <uxr_run_session_until_confirm_delivery+0x3e>
 801319e:	4640      	mov	r0, r8
 80131a0:	f001 f99e 	bl	80144e0 <uxr_output_streams_confirmed>
 80131a4:	4603      	mov	r3, r0
 80131a6:	4621      	mov	r1, r4
 80131a8:	4630      	mov	r0, r6
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d0f0      	beq.n	8013190 <uxr_run_session_until_confirm_delivery+0x20>
 80131ae:	4640      	mov	r0, r8
 80131b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80131b4:	f001 b994 	b.w	80144e0 <uxr_output_streams_confirmed>

080131b8 <uxr_run_session_until_all_status>:
 80131b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131bc:	f8dd b028 	ldr.w	fp, [sp, #40]	@ 0x28
 80131c0:	4606      	mov	r6, r0
 80131c2:	4688      	mov	r8, r1
 80131c4:	4692      	mov	sl, r2
 80131c6:	461f      	mov	r7, r3
 80131c8:	f7ff fc18 	bl	80129fc <uxr_flash_output_streams>
 80131cc:	f1bb 0f00 	cmp.w	fp, #0
 80131d0:	d004      	beq.n	80131dc <uxr_run_session_until_all_status+0x24>
 80131d2:	465a      	mov	r2, fp
 80131d4:	21ff      	movs	r1, #255	@ 0xff
 80131d6:	4638      	mov	r0, r7
 80131d8:	f008 fde2 	bl	801bda0 <memset>
 80131dc:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 80131e0:	1e7d      	subs	r5, r7, #1
 80131e2:	e9c6 a71d 	strd	sl, r7, [r6, #116]	@ 0x74
 80131e6:	f001 f9d7 	bl	8014598 <uxr_millis>
 80131ea:	4641      	mov	r1, r8
 80131ec:	4681      	mov	r9, r0
 80131ee:	4630      	mov	r0, r6
 80131f0:	f7ff fe4a 	bl	8012e88 <listen_message_reliably>
 80131f4:	f001 f9d0 	bl	8014598 <uxr_millis>
 80131f8:	eba0 0009 	sub.w	r0, r0, r9
 80131fc:	eba8 0100 	sub.w	r1, r8, r0
 8013200:	f1bb 0f00 	cmp.w	fp, #0
 8013204:	d029      	beq.n	801325a <uxr_run_session_until_all_status+0xa2>
 8013206:	46ae      	mov	lr, r5
 8013208:	f04f 0c00 	mov.w	ip, #0
 801320c:	f81e 4f01 	ldrb.w	r4, [lr, #1]!
 8013210:	2cff      	cmp	r4, #255	@ 0xff
 8013212:	d015      	beq.n	8013240 <uxr_run_session_until_all_status+0x88>
 8013214:	f10c 0c01 	add.w	ip, ip, #1
 8013218:	45e3      	cmp	fp, ip
 801321a:	d8f7      	bhi.n	801320c <uxr_run_session_until_all_status+0x54>
 801321c:	2300      	movs	r3, #0
 801321e:	67f3      	str	r3, [r6, #124]	@ 0x7c
 8013220:	e000      	b.n	8013224 <uxr_run_session_until_all_status+0x6c>
 8013222:	b158      	cbz	r0, 801323c <uxr_run_session_until_all_status+0x84>
 8013224:	462b      	mov	r3, r5
 8013226:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 801322a:	3302      	adds	r3, #2
 801322c:	2801      	cmp	r0, #1
 801322e:	eba3 0307 	sub.w	r3, r3, r7
 8013232:	bf8c      	ite	hi
 8013234:	2000      	movhi	r0, #0
 8013236:	2001      	movls	r0, #1
 8013238:	459b      	cmp	fp, r3
 801323a:	d8f2      	bhi.n	8013222 <uxr_run_session_until_all_status+0x6a>
 801323c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013240:	f83a 301c 	ldrh.w	r3, [sl, ip, lsl #1]
 8013244:	f10c 0c01 	add.w	ip, ip, #1
 8013248:	45dc      	cmp	ip, fp
 801324a:	d201      	bcs.n	8013250 <uxr_run_session_until_all_status+0x98>
 801324c:	2b00      	cmp	r3, #0
 801324e:	d0dd      	beq.n	801320c <uxr_run_session_until_all_status+0x54>
 8013250:	2900      	cmp	r1, #0
 8013252:	dde3      	ble.n	801321c <uxr_run_session_until_all_status+0x64>
 8013254:	2b00      	cmp	r3, #0
 8013256:	d1ca      	bne.n	80131ee <uxr_run_session_until_all_status+0x36>
 8013258:	e7e0      	b.n	801321c <uxr_run_session_until_all_status+0x64>
 801325a:	2001      	movs	r0, #1
 801325c:	f8c6 b07c 	str.w	fp, [r6, #124]	@ 0x7c
 8013260:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013264:	0000      	movs	r0, r0
	...

08013268 <uxr_sync_session>:
 8013268:	b5f0      	push	{r4, r5, r6, r7, lr}
 801326a:	b093      	sub	sp, #76	@ 0x4c
 801326c:	4604      	mov	r4, r0
 801326e:	460d      	mov	r5, r1
 8013270:	f000 fb58 	bl	8013924 <uxr_session_header_offset>
 8013274:	2214      	movs	r2, #20
 8013276:	2300      	movs	r3, #0
 8013278:	9000      	str	r0, [sp, #0]
 801327a:	a80a      	add	r0, sp, #40	@ 0x28
 801327c:	eb0d 0102 	add.w	r1, sp, r2
 8013280:	f7fe fe54 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 8013284:	2300      	movs	r3, #0
 8013286:	2208      	movs	r2, #8
 8013288:	210e      	movs	r1, #14
 801328a:	a80a      	add	r0, sp, #40	@ 0x28
 801328c:	f001 f93e 	bl	801450c <uxr_buffer_submessage_header>
 8013290:	f001 f99e 	bl	80145d0 <uxr_nanos>
 8013294:	460e      	mov	r6, r1
 8013296:	4607      	mov	r7, r0
 8013298:	a31b      	add	r3, pc, #108	@ (adr r3, 8013308 <uxr_sync_session+0xa0>)
 801329a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801329e:	f7ed f887 	bl	80003b0 <__aeabi_ldivmod>
 80132a2:	4631      	mov	r1, r6
 80132a4:	9003      	str	r0, [sp, #12]
 80132a6:	4638      	mov	r0, r7
 80132a8:	a317      	add	r3, pc, #92	@ (adr r3, 8013308 <uxr_sync_session+0xa0>)
 80132aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132ae:	f7ed f87f 	bl	80003b0 <__aeabi_ldivmod>
 80132b2:	a903      	add	r1, sp, #12
 80132b4:	a80a      	add	r0, sp, #40	@ 0x28
 80132b6:	9204      	str	r2, [sp, #16]
 80132b8:	f002 fa4a 	bl	8015750 <uxr_serialize_TIMESTAMP_Payload>
 80132bc:	2200      	movs	r2, #0
 80132be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80132c0:	4620      	mov	r0, r4
 80132c2:	4611      	mov	r1, r2
 80132c4:	f000 fada 	bl	801387c <uxr_stamp_session_header>
 80132c8:	a80a      	add	r0, sp, #40	@ 0x28
 80132ca:	f7fe fe6f 	bl	8011fac <ucdr_buffer_length>
 80132ce:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 80132d0:	4602      	mov	r2, r0
 80132d2:	a905      	add	r1, sp, #20
 80132d4:	e9d3 0600 	ldrd	r0, r6, [r3]
 80132d8:	47b0      	blx	r6
 80132da:	f001 f95d 	bl	8014598 <uxr_millis>
 80132de:	2300      	movs	r3, #0
 80132e0:	4606      	mov	r6, r0
 80132e2:	4629      	mov	r1, r5
 80132e4:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
 80132e8:	e000      	b.n	80132ec <uxr_sync_session+0x84>
 80132ea:	b950      	cbnz	r0, 8013302 <uxr_sync_session+0x9a>
 80132ec:	4620      	mov	r0, r4
 80132ee:	f7ff fdcb 	bl	8012e88 <listen_message_reliably>
 80132f2:	f001 f951 	bl	8014598 <uxr_millis>
 80132f6:	1b83      	subs	r3, r0, r6
 80132f8:	f894 00a0 	ldrb.w	r0, [r4, #160]	@ 0xa0
 80132fc:	1ae9      	subs	r1, r5, r3
 80132fe:	2900      	cmp	r1, #0
 8013300:	dcf3      	bgt.n	80132ea <uxr_sync_session+0x82>
 8013302:	b013      	add	sp, #76	@ 0x4c
 8013304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013306:	bf00      	nop
 8013308:	3b9aca00 	.word	0x3b9aca00
 801330c:	00000000 	.word	0x00000000

08013310 <wait_session_status>:
 8013310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013314:	4604      	mov	r4, r0
 8013316:	b09d      	sub	sp, #116	@ 0x74
 8013318:	20ff      	movs	r0, #255	@ 0xff
 801331a:	9303      	str	r3, [sp, #12]
 801331c:	7160      	strb	r0, [r4, #5]
 801331e:	2b00      	cmp	r3, #0
 8013320:	f000 80b6 	beq.w	8013490 <wait_session_status+0x180>
 8013324:	4689      	mov	r9, r1
 8013326:	4692      	mov	sl, r2
 8013328:	f04f 0b00 	mov.w	fp, #0
 801332c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801332e:	4652      	mov	r2, sl
 8013330:	4649      	mov	r1, r9
 8013332:	e9d3 0500 	ldrd	r0, r5, [r3]
 8013336:	47a8      	blx	r5
 8013338:	f001 f92e 	bl	8014598 <uxr_millis>
 801333c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013340:	4605      	mov	r5, r0
 8013342:	e009      	b.n	8013358 <wait_session_status+0x48>
 8013344:	f001 f928 	bl	8014598 <uxr_millis>
 8013348:	1b40      	subs	r0, r0, r5
 801334a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 801334e:	2b00      	cmp	r3, #0
 8013350:	dd40      	ble.n	80133d4 <wait_session_status+0xc4>
 8013352:	7960      	ldrb	r0, [r4, #5]
 8013354:	28ff      	cmp	r0, #255	@ 0xff
 8013356:	d145      	bne.n	80133e4 <wait_session_status+0xd4>
 8013358:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801335a:	a908      	add	r1, sp, #32
 801335c:	6896      	ldr	r6, [r2, #8]
 801335e:	6810      	ldr	r0, [r2, #0]
 8013360:	aa09      	add	r2, sp, #36	@ 0x24
 8013362:	47b0      	blx	r6
 8013364:	2800      	cmp	r0, #0
 8013366:	d0ed      	beq.n	8013344 <wait_session_status+0x34>
 8013368:	a80c      	add	r0, sp, #48	@ 0x30
 801336a:	2600      	movs	r6, #0
 801336c:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 8013370:	f7fe fdee 	bl	8011f50 <ucdr_init_buffer>
 8013374:	f10d 031e 	add.w	r3, sp, #30
 8013378:	aa07      	add	r2, sp, #28
 801337a:	a90c      	add	r1, sp, #48	@ 0x30
 801337c:	4620      	mov	r0, r4
 801337e:	f88d 601c 	strb.w	r6, [sp, #28]
 8013382:	f000 fa8f 	bl	80138a4 <uxr_read_session_header>
 8013386:	2800      	cmp	r0, #0
 8013388:	d0dc      	beq.n	8013344 <wait_session_status+0x34>
 801338a:	4631      	mov	r1, r6
 801338c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8013390:	f000 ffac 	bl	80142ec <uxr_stream_id_from_raw>
 8013394:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8013398:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 801339c:	f3c0 2607 	ubfx	r6, r0, #8, #8
 80133a0:	2f01      	cmp	r7, #1
 80133a2:	9302      	str	r3, [sp, #8]
 80133a4:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80133a8:	d05c      	beq.n	8013464 <wait_session_status+0x154>
 80133aa:	2f02      	cmp	r7, #2
 80133ac:	d020      	beq.n	80133f0 <wait_session_status+0xe0>
 80133ae:	2f00      	cmp	r7, #0
 80133b0:	d1c8      	bne.n	8013344 <wait_session_status+0x34>
 80133b2:	4639      	mov	r1, r7
 80133b4:	4638      	mov	r0, r7
 80133b6:	f000 ff99 	bl	80142ec <uxr_stream_id_from_raw>
 80133ba:	a90c      	add	r1, sp, #48	@ 0x30
 80133bc:	4602      	mov	r2, r0
 80133be:	900b      	str	r0, [sp, #44]	@ 0x2c
 80133c0:	4620      	mov	r0, r4
 80133c2:	f7ff fbd7 	bl	8012b74 <read_submessage_list>
 80133c6:	f001 f8e7 	bl	8014598 <uxr_millis>
 80133ca:	1b40      	subs	r0, r0, r5
 80133cc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	dcbe      	bgt.n	8013352 <wait_session_status+0x42>
 80133d4:	f10b 0b01 	add.w	fp, fp, #1
 80133d8:	9b03      	ldr	r3, [sp, #12]
 80133da:	7960      	ldrb	r0, [r4, #5]
 80133dc:	455b      	cmp	r3, fp
 80133de:	d001      	beq.n	80133e4 <wait_session_status+0xd4>
 80133e0:	28ff      	cmp	r0, #255	@ 0xff
 80133e2:	d0a3      	beq.n	801332c <wait_session_status+0x1c>
 80133e4:	38ff      	subs	r0, #255	@ 0xff
 80133e6:	bf18      	it	ne
 80133e8:	2001      	movne	r0, #1
 80133ea:	b01d      	add	sp, #116	@ 0x74
 80133ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133f0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 80133f4:	4631      	mov	r1, r6
 80133f6:	f104 0008 	add.w	r0, r4, #8
 80133fa:	9304      	str	r3, [sp, #16]
 80133fc:	f001 f864 	bl	80144c8 <uxr_get_input_reliable_stream>
 8013400:	4680      	mov	r8, r0
 8013402:	b348      	cbz	r0, 8013458 <wait_session_status+0x148>
 8013404:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013406:	a80c      	add	r0, sp, #48	@ 0x30
 8013408:	9205      	str	r2, [sp, #20]
 801340a:	f7fe fdd3 	bl	8011fb4 <ucdr_buffer_remaining>
 801340e:	4603      	mov	r3, r0
 8013410:	f10d 001d 	add.w	r0, sp, #29
 8013414:	9a05      	ldr	r2, [sp, #20]
 8013416:	9000      	str	r0, [sp, #0]
 8013418:	4640      	mov	r0, r8
 801341a:	9902      	ldr	r1, [sp, #8]
 801341c:	f006 fefc 	bl	801a218 <uxr_receive_reliable_message>
 8013420:	b1d0      	cbz	r0, 8013458 <wait_session_status+0x148>
 8013422:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d03a      	beq.n	80134a0 <wait_session_status+0x190>
 801342a:	9f04      	ldr	r7, [sp, #16]
 801342c:	e00a      	b.n	8013444 <wait_session_status+0x134>
 801342e:	f04f 0302 	mov.w	r3, #2
 8013432:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 8013436:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801343a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 801343e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013440:	f7ff fb98 	bl	8012b74 <read_submessage_list>
 8013444:	a914      	add	r1, sp, #80	@ 0x50
 8013446:	2204      	movs	r2, #4
 8013448:	4640      	mov	r0, r8
 801344a:	f006 ff67 	bl	801a31c <uxr_next_input_reliable_buffer_available>
 801344e:	4603      	mov	r3, r0
 8013450:	a914      	add	r1, sp, #80	@ 0x50
 8013452:	4620      	mov	r0, r4
 8013454:	2b00      	cmp	r3, #0
 8013456:	d1ea      	bne.n	801342e <wait_session_status+0x11e>
 8013458:	4632      	mov	r2, r6
 801345a:	9904      	ldr	r1, [sp, #16]
 801345c:	4620      	mov	r0, r4
 801345e:	f7ff fa05 	bl	801286c <write_submessage_acknack.isra.0>
 8013462:	e76f      	b.n	8013344 <wait_session_status+0x34>
 8013464:	4631      	mov	r1, r6
 8013466:	f104 0008 	add.w	r0, r4, #8
 801346a:	f001 f823 	bl	80144b4 <uxr_get_input_best_effort_stream>
 801346e:	2800      	cmp	r0, #0
 8013470:	f43f af68 	beq.w	8013344 <wait_session_status+0x34>
 8013474:	9902      	ldr	r1, [sp, #8]
 8013476:	f006 fe45 	bl	801a104 <uxr_receive_best_effort_message>
 801347a:	2800      	cmp	r0, #0
 801347c:	f43f af62 	beq.w	8013344 <wait_session_status+0x34>
 8013480:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 8013484:	a90c      	add	r1, sp, #48	@ 0x30
 8013486:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8013488:	4620      	mov	r0, r4
 801348a:	f7ff fb73 	bl	8012b74 <read_submessage_list>
 801348e:	e759      	b.n	8013344 <wait_session_status+0x34>
 8013490:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013492:	e9d3 0400 	ldrd	r0, r4, [r3]
 8013496:	47a0      	blx	r4
 8013498:	2001      	movs	r0, #1
 801349a:	b01d      	add	sp, #116	@ 0x74
 801349c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134a0:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 80134a4:	a90c      	add	r1, sp, #48	@ 0x30
 80134a6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80134a8:	4620      	mov	r0, r4
 80134aa:	f7ff fb63 	bl	8012b74 <read_submessage_list>
 80134ae:	e7bc      	b.n	801342a <wait_session_status+0x11a>

080134b0 <uxr_delete_session_retries>:
 80134b0:	b530      	push	{r4, r5, lr}
 80134b2:	b08f      	sub	sp, #60	@ 0x3c
 80134b4:	4604      	mov	r4, r0
 80134b6:	460d      	mov	r5, r1
 80134b8:	f000 fa34 	bl	8013924 <uxr_session_header_offset>
 80134bc:	2300      	movs	r3, #0
 80134be:	2210      	movs	r2, #16
 80134c0:	a902      	add	r1, sp, #8
 80134c2:	9000      	str	r0, [sp, #0]
 80134c4:	a806      	add	r0, sp, #24
 80134c6:	f7fe fd31 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 80134ca:	a906      	add	r1, sp, #24
 80134cc:	4620      	mov	r0, r4
 80134ce:	f000 f979 	bl	80137c4 <uxr_buffer_delete_session>
 80134d2:	2200      	movs	r2, #0
 80134d4:	9b06      	ldr	r3, [sp, #24]
 80134d6:	4620      	mov	r0, r4
 80134d8:	4611      	mov	r1, r2
 80134da:	f000 f9cf 	bl	801387c <uxr_stamp_session_header>
 80134de:	a806      	add	r0, sp, #24
 80134e0:	f7fe fd64 	bl	8011fac <ucdr_buffer_length>
 80134e4:	462b      	mov	r3, r5
 80134e6:	4602      	mov	r2, r0
 80134e8:	a902      	add	r1, sp, #8
 80134ea:	4620      	mov	r0, r4
 80134ec:	f7ff ff10 	bl	8013310 <wait_session_status>
 80134f0:	b118      	cbz	r0, 80134fa <uxr_delete_session_retries+0x4a>
 80134f2:	7960      	ldrb	r0, [r4, #5]
 80134f4:	fab0 f080 	clz	r0, r0
 80134f8:	0940      	lsrs	r0, r0, #5
 80134fa:	b00f      	add	sp, #60	@ 0x3c
 80134fc:	bd30      	pop	{r4, r5, pc}
 80134fe:	bf00      	nop

08013500 <uxr_create_session>:
 8013500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013504:	f100 0b08 	add.w	fp, r0, #8
 8013508:	4604      	mov	r4, r0
 801350a:	b0ab      	sub	sp, #172	@ 0xac
 801350c:	4658      	mov	r0, fp
 801350e:	465e      	mov	r6, fp
 8013510:	f000 ff22 	bl	8014358 <uxr_reset_stream_storage>
 8013514:	4620      	mov	r0, r4
 8013516:	f000 fa05 	bl	8013924 <uxr_session_header_offset>
 801351a:	2300      	movs	r3, #0
 801351c:	221c      	movs	r2, #28
 801351e:	a90b      	add	r1, sp, #44	@ 0x2c
 8013520:	9000      	str	r0, [sp, #0]
 8013522:	a812      	add	r0, sp, #72	@ 0x48
 8013524:	f7fe fd02 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 8013528:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 801352a:	a912      	add	r1, sp, #72	@ 0x48
 801352c:	4620      	mov	r0, r4
 801352e:	8a1a      	ldrh	r2, [r3, #16]
 8013530:	3a04      	subs	r2, #4
 8013532:	b292      	uxth	r2, r2
 8013534:	f000 f91c 	bl	8013770 <uxr_buffer_create_session>
 8013538:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801353a:	4620      	mov	r0, r4
 801353c:	f000 f98a 	bl	8013854 <uxr_stamp_create_session_header>
 8013540:	a812      	add	r0, sp, #72	@ 0x48
 8013542:	f7fe fd33 	bl	8011fac <ucdr_buffer_length>
 8013546:	23ff      	movs	r3, #255	@ 0xff
 8013548:	4681      	mov	r9, r0
 801354a:	7163      	strb	r3, [r4, #5]
 801354c:	230a      	movs	r3, #10
 801354e:	9303      	str	r3, [sp, #12]
 8013550:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 8013552:	464a      	mov	r2, r9
 8013554:	a90b      	add	r1, sp, #44	@ 0x2c
 8013556:	e9d3 0500 	ldrd	r0, r5, [r3]
 801355a:	47a8      	blx	r5
 801355c:	f001 f81c 	bl	8014598 <uxr_millis>
 8013560:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8013564:	4605      	mov	r5, r0
 8013566:	e009      	b.n	801357c <uxr_create_session+0x7c>
 8013568:	f001 f816 	bl	8014598 <uxr_millis>
 801356c:	1b40      	subs	r0, r0, r5
 801356e:	7962      	ldrb	r2, [r4, #5]
 8013570:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 8013574:	2b00      	cmp	r3, #0
 8013576:	dd38      	ble.n	80135ea <uxr_create_session+0xea>
 8013578:	2aff      	cmp	r2, #255	@ 0xff
 801357a:	d13c      	bne.n	80135f6 <uxr_create_session+0xf6>
 801357c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 801357e:	a907      	add	r1, sp, #28
 8013580:	6897      	ldr	r7, [r2, #8]
 8013582:	6810      	ldr	r0, [r2, #0]
 8013584:	aa08      	add	r2, sp, #32
 8013586:	47b8      	blx	r7
 8013588:	2800      	cmp	r0, #0
 801358a:	d0ed      	beq.n	8013568 <uxr_create_session+0x68>
 801358c:	a81a      	add	r0, sp, #104	@ 0x68
 801358e:	2700      	movs	r7, #0
 8013590:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 8013594:	f7fe fcdc 	bl	8011f50 <ucdr_init_buffer>
 8013598:	f10d 031a 	add.w	r3, sp, #26
 801359c:	aa06      	add	r2, sp, #24
 801359e:	a91a      	add	r1, sp, #104	@ 0x68
 80135a0:	4620      	mov	r0, r4
 80135a2:	f88d 7018 	strb.w	r7, [sp, #24]
 80135a6:	f000 f97d 	bl	80138a4 <uxr_read_session_header>
 80135aa:	2800      	cmp	r0, #0
 80135ac:	d0dc      	beq.n	8013568 <uxr_create_session+0x68>
 80135ae:	4639      	mov	r1, r7
 80135b0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 80135b4:	f000 fe9a 	bl	80142ec <uxr_stream_id_from_raw>
 80135b8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 80135bc:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80135c0:	f3c0 2807 	ubfx	r8, r0, #8, #8
 80135c4:	2f01      	cmp	r7, #1
 80135c6:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 80135ca:	d053      	beq.n	8013674 <uxr_create_session+0x174>
 80135cc:	2f02      	cmp	r7, #2
 80135ce:	d018      	beq.n	8013602 <uxr_create_session+0x102>
 80135d0:	2f00      	cmp	r7, #0
 80135d2:	d1c9      	bne.n	8013568 <uxr_create_session+0x68>
 80135d4:	4639      	mov	r1, r7
 80135d6:	4638      	mov	r0, r7
 80135d8:	f000 fe88 	bl	80142ec <uxr_stream_id_from_raw>
 80135dc:	a91a      	add	r1, sp, #104	@ 0x68
 80135de:	4602      	mov	r2, r0
 80135e0:	900a      	str	r0, [sp, #40]	@ 0x28
 80135e2:	4620      	mov	r0, r4
 80135e4:	f7ff fac6 	bl	8012b74 <read_submessage_list>
 80135e8:	e7be      	b.n	8013568 <uxr_create_session+0x68>
 80135ea:	9b03      	ldr	r3, [sp, #12]
 80135ec:	3b01      	subs	r3, #1
 80135ee:	9303      	str	r3, [sp, #12]
 80135f0:	d001      	beq.n	80135f6 <uxr_create_session+0xf6>
 80135f2:	2aff      	cmp	r2, #255	@ 0xff
 80135f4:	d0ac      	beq.n	8013550 <uxr_create_session+0x50>
 80135f6:	2a00      	cmp	r2, #0
 80135f8:	d051      	beq.n	801369e <uxr_create_session+0x19e>
 80135fa:	2000      	movs	r0, #0
 80135fc:	b02b      	add	sp, #172	@ 0xac
 80135fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013602:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013606:	4641      	mov	r1, r8
 8013608:	4630      	mov	r0, r6
 801360a:	9304      	str	r3, [sp, #16]
 801360c:	f000 ff5c 	bl	80144c8 <uxr_get_input_reliable_stream>
 8013610:	4682      	mov	sl, r0
 8013612:	b348      	cbz	r0, 8013668 <uxr_create_session+0x168>
 8013614:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8013616:	a81a      	add	r0, sp, #104	@ 0x68
 8013618:	9205      	str	r2, [sp, #20]
 801361a:	f7fe fccb 	bl	8011fb4 <ucdr_buffer_remaining>
 801361e:	4603      	mov	r3, r0
 8013620:	f10d 0019 	add.w	r0, sp, #25
 8013624:	9a05      	ldr	r2, [sp, #20]
 8013626:	4659      	mov	r1, fp
 8013628:	9000      	str	r0, [sp, #0]
 801362a:	4650      	mov	r0, sl
 801362c:	f006 fdf4 	bl	801a218 <uxr_receive_reliable_message>
 8013630:	b1d0      	cbz	r0, 8013668 <uxr_create_session+0x168>
 8013632:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8013636:	2b00      	cmp	r3, #0
 8013638:	d038      	beq.n	80136ac <uxr_create_session+0x1ac>
 801363a:	9f04      	ldr	r7, [sp, #16]
 801363c:	e00a      	b.n	8013654 <uxr_create_session+0x154>
 801363e:	f04f 0302 	mov.w	r3, #2
 8013642:	f88d 7028 	strb.w	r7, [sp, #40]	@ 0x28
 8013646:	f88d 8029 	strb.w	r8, [sp, #41]	@ 0x29
 801364a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801364e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013650:	f7ff fa90 	bl	8012b74 <read_submessage_list>
 8013654:	a922      	add	r1, sp, #136	@ 0x88
 8013656:	2204      	movs	r2, #4
 8013658:	4650      	mov	r0, sl
 801365a:	f006 fe5f 	bl	801a31c <uxr_next_input_reliable_buffer_available>
 801365e:	4603      	mov	r3, r0
 8013660:	a922      	add	r1, sp, #136	@ 0x88
 8013662:	4620      	mov	r0, r4
 8013664:	2b00      	cmp	r3, #0
 8013666:	d1ea      	bne.n	801363e <uxr_create_session+0x13e>
 8013668:	4642      	mov	r2, r8
 801366a:	9904      	ldr	r1, [sp, #16]
 801366c:	4620      	mov	r0, r4
 801366e:	f7ff f8fd 	bl	801286c <write_submessage_acknack.isra.0>
 8013672:	e779      	b.n	8013568 <uxr_create_session+0x68>
 8013674:	4641      	mov	r1, r8
 8013676:	4630      	mov	r0, r6
 8013678:	f000 ff1c 	bl	80144b4 <uxr_get_input_best_effort_stream>
 801367c:	2800      	cmp	r0, #0
 801367e:	f43f af73 	beq.w	8013568 <uxr_create_session+0x68>
 8013682:	4659      	mov	r1, fp
 8013684:	f006 fd3e 	bl	801a104 <uxr_receive_best_effort_message>
 8013688:	2800      	cmp	r0, #0
 801368a:	f43f af6d 	beq.w	8013568 <uxr_create_session+0x68>
 801368e:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 8013692:	a91a      	add	r1, sp, #104	@ 0x68
 8013694:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013696:	4620      	mov	r0, r4
 8013698:	f7ff fa6c 	bl	8012b74 <read_submessage_list>
 801369c:	e764      	b.n	8013568 <uxr_create_session+0x68>
 801369e:	4630      	mov	r0, r6
 80136a0:	f000 fe5a 	bl	8014358 <uxr_reset_stream_storage>
 80136a4:	2001      	movs	r0, #1
 80136a6:	b02b      	add	sp, #172	@ 0xac
 80136a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80136ac:	f88d 702a 	strb.w	r7, [sp, #42]	@ 0x2a
 80136b0:	a91a      	add	r1, sp, #104	@ 0x68
 80136b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80136b4:	4620      	mov	r0, r4
 80136b6:	f7ff fa5d 	bl	8012b74 <read_submessage_list>
 80136ba:	e7be      	b.n	801363a <uxr_create_session+0x13a>

080136bc <uxr_prepare_stream_to_write_submessage>:
 80136bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136c0:	b082      	sub	sp, #8
 80136c2:	4604      	mov	r4, r0
 80136c4:	4610      	mov	r0, r2
 80136c6:	4615      	mov	r5, r2
 80136c8:	461e      	mov	r6, r3
 80136ca:	f3c1 2a07 	ubfx	sl, r1, #8, #8
 80136ce:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 80136d2:	f105 0904 	add.w	r9, r5, #4
 80136d6:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 80136da:	9101      	str	r1, [sp, #4]
 80136dc:	f000 ff56 	bl	801458c <uxr_submessage_padding>
 80136e0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80136e4:	4481      	add	r9, r0
 80136e6:	2b01      	cmp	r3, #1
 80136e8:	d01d      	beq.n	8013726 <uxr_prepare_stream_to_write_submessage+0x6a>
 80136ea:	2b02      	cmp	r3, #2
 80136ec:	d116      	bne.n	801371c <uxr_prepare_stream_to_write_submessage+0x60>
 80136ee:	f104 0008 	add.w	r0, r4, #8
 80136f2:	4651      	mov	r1, sl
 80136f4:	f000 fed2 	bl	801449c <uxr_get_output_reliable_stream>
 80136f8:	4604      	mov	r4, r0
 80136fa:	b158      	cbz	r0, 8013714 <uxr_prepare_stream_to_write_submessage+0x58>
 80136fc:	4649      	mov	r1, r9
 80136fe:	4632      	mov	r2, r6
 8013700:	f006 ffd0 	bl	801a6a4 <uxr_prepare_reliable_buffer_to_write>
 8013704:	4604      	mov	r4, r0
 8013706:	b12c      	cbz	r4, 8013714 <uxr_prepare_stream_to_write_submessage+0x58>
 8013708:	4643      	mov	r3, r8
 801370a:	b2aa      	uxth	r2, r5
 801370c:	4639      	mov	r1, r7
 801370e:	4630      	mov	r0, r6
 8013710:	f000 fefc 	bl	801450c <uxr_buffer_submessage_header>
 8013714:	4620      	mov	r0, r4
 8013716:	b002      	add	sp, #8
 8013718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801371c:	2400      	movs	r4, #0
 801371e:	4620      	mov	r0, r4
 8013720:	b002      	add	sp, #8
 8013722:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013726:	f104 0008 	add.w	r0, r4, #8
 801372a:	4651      	mov	r1, sl
 801372c:	f000 feae 	bl	801448c <uxr_get_output_best_effort_stream>
 8013730:	4604      	mov	r4, r0
 8013732:	2800      	cmp	r0, #0
 8013734:	d0ee      	beq.n	8013714 <uxr_prepare_stream_to_write_submessage+0x58>
 8013736:	4649      	mov	r1, r9
 8013738:	4632      	mov	r2, r6
 801373a:	f006 fedf 	bl	801a4fc <uxr_prepare_best_effort_buffer_to_write>
 801373e:	4604      	mov	r4, r0
 8013740:	e7e1      	b.n	8013706 <uxr_prepare_stream_to_write_submessage+0x4a>
 8013742:	bf00      	nop

08013744 <uxr_init_session_info>:
 8013744:	ea4f 6c12 	mov.w	ip, r2, lsr #24
 8013748:	23ff      	movs	r3, #255	@ 0xff
 801374a:	7102      	strb	r2, [r0, #4]
 801374c:	f880 c001 	strb.w	ip, [r0, #1]
 8013750:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 8013754:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8013758:	7001      	strb	r1, [r0, #0]
 801375a:	f880 c002 	strb.w	ip, [r0, #2]
 801375e:	7143      	strb	r3, [r0, #5]
 8013760:	70c2      	strb	r2, [r0, #3]
 8013762:	b500      	push	{lr}
 8013764:	f04f 0e09 	mov.w	lr, #9
 8013768:	f8a0 e006 	strh.w	lr, [r0, #6]
 801376c:	f85d fb04 	ldr.w	pc, [sp], #4

08013770 <uxr_buffer_create_session>:
 8013770:	b530      	push	{r4, r5, lr}
 8013772:	2300      	movs	r3, #0
 8013774:	b089      	sub	sp, #36	@ 0x24
 8013776:	4d12      	ldr	r5, [pc, #72]	@ (80137c0 <uxr_buffer_create_session+0x50>)
 8013778:	460c      	mov	r4, r1
 801377a:	9307      	str	r3, [sp, #28]
 801377c:	4619      	mov	r1, r3
 801377e:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013782:	2201      	movs	r2, #1
 8013784:	9301      	str	r3, [sp, #4]
 8013786:	80c2      	strh	r2, [r0, #6]
 8013788:	f88d 2004 	strb.w	r2, [sp, #4]
 801378c:	682a      	ldr	r2, [r5, #0]
 801378e:	9303      	str	r3, [sp, #12]
 8013790:	9200      	str	r2, [sp, #0]
 8013792:	88aa      	ldrh	r2, [r5, #4]
 8013794:	9306      	str	r3, [sp, #24]
 8013796:	f8ad 2006 	strh.w	r2, [sp, #6]
 801379a:	f8d0 2001 	ldr.w	r2, [r0, #1]
 801379e:	9202      	str	r2, [sp, #8]
 80137a0:	7802      	ldrb	r2, [r0, #0]
 80137a2:	4620      	mov	r0, r4
 80137a4:	f88d 200c 	strb.w	r2, [sp, #12]
 80137a8:	2210      	movs	r2, #16
 80137aa:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80137ae:	f000 fead 	bl	801450c <uxr_buffer_submessage_header>
 80137b2:	4669      	mov	r1, sp
 80137b4:	4620      	mov	r0, r4
 80137b6:	f001 fdff 	bl	80153b8 <uxr_serialize_CREATE_CLIENT_Payload>
 80137ba:	b009      	add	sp, #36	@ 0x24
 80137bc:	bd30      	pop	{r4, r5, pc}
 80137be:	bf00      	nop
 80137c0:	0801cc3c 	.word	0x0801cc3c

080137c4 <uxr_buffer_delete_session>:
 80137c4:	4a0c      	ldr	r2, [pc, #48]	@ (80137f8 <uxr_buffer_delete_session+0x34>)
 80137c6:	2302      	movs	r3, #2
 80137c8:	f44f 7c00 	mov.w	ip, #512	@ 0x200
 80137cc:	b510      	push	{r4, lr}
 80137ce:	460c      	mov	r4, r1
 80137d0:	b082      	sub	sp, #8
 80137d2:	8911      	ldrh	r1, [r2, #8]
 80137d4:	2204      	movs	r2, #4
 80137d6:	80c3      	strh	r3, [r0, #6]
 80137d8:	2300      	movs	r3, #0
 80137da:	f8ad 1006 	strh.w	r1, [sp, #6]
 80137de:	4620      	mov	r0, r4
 80137e0:	2103      	movs	r1, #3
 80137e2:	f8ad c004 	strh.w	ip, [sp, #4]
 80137e6:	f000 fe91 	bl	801450c <uxr_buffer_submessage_header>
 80137ea:	a901      	add	r1, sp, #4
 80137ec:	4620      	mov	r0, r4
 80137ee:	f001 fe8b 	bl	8015508 <uxr_serialize_DELETE_Payload>
 80137f2:	b002      	add	sp, #8
 80137f4:	bd10      	pop	{r4, pc}
 80137f6:	bf00      	nop
 80137f8:	0801cc3c 	.word	0x0801cc3c

080137fc <uxr_read_create_session_status>:
 80137fc:	b510      	push	{r4, lr}
 80137fe:	460b      	mov	r3, r1
 8013800:	b088      	sub	sp, #32
 8013802:	4604      	mov	r4, r0
 8013804:	a901      	add	r1, sp, #4
 8013806:	4618      	mov	r0, r3
 8013808:	f001 fe8e 	bl	8015528 <uxr_deserialize_STATUS_AGENT_Payload>
 801380c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8013810:	7163      	strb	r3, [r4, #5]
 8013812:	b008      	add	sp, #32
 8013814:	bd10      	pop	{r4, pc}
 8013816:	bf00      	nop

08013818 <uxr_read_delete_session_status>:
 8013818:	b510      	push	{r4, lr}
 801381a:	b084      	sub	sp, #16
 801381c:	4604      	mov	r4, r0
 801381e:	4608      	mov	r0, r1
 8013820:	a902      	add	r1, sp, #8
 8013822:	f001 feb1 	bl	8015588 <uxr_deserialize_STATUS_Payload>
 8013826:	88e3      	ldrh	r3, [r4, #6]
 8013828:	2b02      	cmp	r3, #2
 801382a:	d001      	beq.n	8013830 <uxr_read_delete_session_status+0x18>
 801382c:	b004      	add	sp, #16
 801382e:	bd10      	pop	{r4, pc}
 8013830:	f10d 000a 	add.w	r0, sp, #10
 8013834:	f7fe feaa 	bl	801258c <uxr_object_id_from_raw>
 8013838:	f89d 2008 	ldrb.w	r2, [sp, #8]
 801383c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8013840:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013844:	b29b      	uxth	r3, r3
 8013846:	2b02      	cmp	r3, #2
 8013848:	d1f0      	bne.n	801382c <uxr_read_delete_session_status+0x14>
 801384a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801384e:	7163      	strb	r3, [r4, #5]
 8013850:	e7ec      	b.n	801382c <uxr_read_delete_session_status+0x14>
 8013852:	bf00      	nop

08013854 <uxr_stamp_create_session_header>:
 8013854:	b510      	push	{r4, lr}
 8013856:	2208      	movs	r2, #8
 8013858:	b08a      	sub	sp, #40	@ 0x28
 801385a:	4604      	mov	r4, r0
 801385c:	eb0d 0002 	add.w	r0, sp, r2
 8013860:	f7fe fb76 	bl	8011f50 <ucdr_init_buffer>
 8013864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013868:	2300      	movs	r3, #0
 801386a:	a802      	add	r0, sp, #8
 801386c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8013870:	9400      	str	r4, [sp, #0]
 8013872:	461a      	mov	r2, r3
 8013874:	f001 f846 	bl	8014904 <uxr_serialize_message_header>
 8013878:	b00a      	add	sp, #40	@ 0x28
 801387a:	bd10      	pop	{r4, pc}

0801387c <uxr_stamp_session_header>:
 801387c:	b530      	push	{r4, r5, lr}
 801387e:	b08d      	sub	sp, #52	@ 0x34
 8013880:	4604      	mov	r4, r0
 8013882:	460d      	mov	r5, r1
 8013884:	4619      	mov	r1, r3
 8013886:	a804      	add	r0, sp, #16
 8013888:	9203      	str	r2, [sp, #12]
 801388a:	2208      	movs	r2, #8
 801388c:	f7fe fb60 	bl	8011f50 <ucdr_init_buffer>
 8013890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013894:	9b03      	ldr	r3, [sp, #12]
 8013896:	462a      	mov	r2, r5
 8013898:	a804      	add	r0, sp, #16
 801389a:	9400      	str	r4, [sp, #0]
 801389c:	f001 f832 	bl	8014904 <uxr_serialize_message_header>
 80138a0:	b00d      	add	sp, #52	@ 0x34
 80138a2:	bd30      	pop	{r4, r5, pc}

080138a4 <uxr_read_session_header>:
 80138a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138a8:	4607      	mov	r7, r0
 80138aa:	b084      	sub	sp, #16
 80138ac:	4608      	mov	r0, r1
 80138ae:	460c      	mov	r4, r1
 80138b0:	4615      	mov	r5, r2
 80138b2:	461e      	mov	r6, r3
 80138b4:	f7fe fb7e 	bl	8011fb4 <ucdr_buffer_remaining>
 80138b8:	2808      	cmp	r0, #8
 80138ba:	d803      	bhi.n	80138c4 <uxr_read_session_header+0x20>
 80138bc:	2000      	movs	r0, #0
 80138be:	b004      	add	sp, #16
 80138c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138c4:	f10d 080c 	add.w	r8, sp, #12
 80138c8:	4633      	mov	r3, r6
 80138ca:	462a      	mov	r2, r5
 80138cc:	4620      	mov	r0, r4
 80138ce:	f10d 010b 	add.w	r1, sp, #11
 80138d2:	f8cd 8000 	str.w	r8, [sp]
 80138d6:	f001 f833 	bl	8014940 <uxr_deserialize_message_header>
 80138da:	783a      	ldrb	r2, [r7, #0]
 80138dc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80138e0:	4293      	cmp	r3, r2
 80138e2:	d1eb      	bne.n	80138bc <uxr_read_session_header+0x18>
 80138e4:	061b      	lsls	r3, r3, #24
 80138e6:	d41b      	bmi.n	8013920 <uxr_read_session_header+0x7c>
 80138e8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80138ec:	787b      	ldrb	r3, [r7, #1]
 80138ee:	429a      	cmp	r2, r3
 80138f0:	d003      	beq.n	80138fa <uxr_read_session_header+0x56>
 80138f2:	2001      	movs	r0, #1
 80138f4:	f080 0001 	eor.w	r0, r0, #1
 80138f8:	e7e1      	b.n	80138be <uxr_read_session_header+0x1a>
 80138fa:	f89d 200d 	ldrb.w	r2, [sp, #13]
 80138fe:	1cb8      	adds	r0, r7, #2
 8013900:	78bb      	ldrb	r3, [r7, #2]
 8013902:	429a      	cmp	r2, r3
 8013904:	d1f5      	bne.n	80138f2 <uxr_read_session_header+0x4e>
 8013906:	f89d 200e 	ldrb.w	r2, [sp, #14]
 801390a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 801390e:	429a      	cmp	r2, r3
 8013910:	d1ef      	bne.n	80138f2 <uxr_read_session_header+0x4e>
 8013912:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8013916:	7843      	ldrb	r3, [r0, #1]
 8013918:	429a      	cmp	r2, r3
 801391a:	d1ea      	bne.n	80138f2 <uxr_read_session_header+0x4e>
 801391c:	2000      	movs	r0, #0
 801391e:	e7e9      	b.n	80138f4 <uxr_read_session_header+0x50>
 8013920:	2001      	movs	r0, #1
 8013922:	e7cc      	b.n	80138be <uxr_read_session_header+0x1a>

08013924 <uxr_session_header_offset>:
 8013924:	f990 3000 	ldrsb.w	r3, [r0]
 8013928:	2b00      	cmp	r3, #0
 801392a:	bfac      	ite	ge
 801392c:	2008      	movge	r0, #8
 801392e:	2004      	movlt	r0, #4
 8013930:	4770      	bx	lr
 8013932:	bf00      	nop

08013934 <uxr_init_base_object_request>:
 8013934:	b510      	push	{r4, lr}
 8013936:	b082      	sub	sp, #8
 8013938:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 801393c:	9101      	str	r1, [sp, #4]
 801393e:	88c3      	ldrh	r3, [r0, #6]
 8013940:	f1a3 010a 	sub.w	r1, r3, #10
 8013944:	b289      	uxth	r1, r1
 8013946:	42a1      	cmp	r1, r4
 8013948:	d80f      	bhi.n	801396a <uxr_init_base_object_request+0x36>
 801394a:	3301      	adds	r3, #1
 801394c:	b29c      	uxth	r4, r3
 801394e:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8013952:	b2db      	uxtb	r3, r3
 8013954:	80c4      	strh	r4, [r0, #6]
 8013956:	1c91      	adds	r1, r2, #2
 8013958:	9801      	ldr	r0, [sp, #4]
 801395a:	f882 c000 	strb.w	ip, [r2]
 801395e:	7053      	strb	r3, [r2, #1]
 8013960:	f7fe fe28 	bl	80125b4 <uxr_object_id_to_raw>
 8013964:	4620      	mov	r0, r4
 8013966:	b002      	add	sp, #8
 8013968:	bd10      	pop	{r4, pc}
 801396a:	230a      	movs	r3, #10
 801396c:	f04f 0c00 	mov.w	ip, #0
 8013970:	461c      	mov	r4, r3
 8013972:	e7ef      	b.n	8013954 <uxr_init_base_object_request+0x20>

08013974 <uxr_parse_base_object_request>:
 8013974:	b570      	push	{r4, r5, r6, lr}
 8013976:	4604      	mov	r4, r0
 8013978:	3002      	adds	r0, #2
 801397a:	460d      	mov	r5, r1
 801397c:	4616      	mov	r6, r2
 801397e:	f7fe fe05 	bl	801258c <uxr_object_id_from_raw>
 8013982:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8013986:	8028      	strh	r0, [r5, #0]
 8013988:	806b      	strh	r3, [r5, #2]
 801398a:	7822      	ldrb	r2, [r4, #0]
 801398c:	7863      	ldrb	r3, [r4, #1]
 801398e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013992:	8033      	strh	r3, [r6, #0]
 8013994:	bd70      	pop	{r4, r5, r6, pc}
 8013996:	bf00      	nop

08013998 <uxr_init_framing_io>:
 8013998:	2300      	movs	r3, #0
 801399a:	7041      	strb	r1, [r0, #1]
 801399c:	7003      	strb	r3, [r0, #0]
 801399e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 80139a0:	4770      	bx	lr
 80139a2:	bf00      	nop

080139a4 <uxr_write_framed_msg>:
 80139a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139a8:	4617      	mov	r7, r2
 80139aa:	7842      	ldrb	r2, [r0, #1]
 80139ac:	460e      	mov	r6, r1
 80139ae:	b083      	sub	sp, #12
 80139b0:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 80139b4:	469b      	mov	fp, r3
 80139b6:	237e      	movs	r3, #126	@ 0x7e
 80139b8:	4604      	mov	r4, r0
 80139ba:	2901      	cmp	r1, #1
 80139bc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80139c0:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 80139c4:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 80139c8:	f240 8115 	bls.w	8013bf6 <uxr_write_framed_msg+0x252>
 80139cc:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 80139d0:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 80139d4:	2202      	movs	r2, #2
 80139d6:	2901      	cmp	r1, #1
 80139d8:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80139dc:	d952      	bls.n	8013a84 <uxr_write_framed_msg+0xe0>
 80139de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139e0:	2103      	movs	r1, #3
 80139e2:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 80139e6:	b2dd      	uxtb	r5, r3
 80139e8:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 80139ec:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 80139f0:	2a01      	cmp	r2, #1
 80139f2:	d95c      	bls.n	8013aae <uxr_write_framed_msg+0x10a>
 80139f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139f6:	1862      	adds	r2, r4, r1
 80139f8:	3101      	adds	r1, #1
 80139fa:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80139fe:	f882 5038 	strb.w	r5, [r2, #56]	@ 0x38
 8013a02:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8013a06:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8013a0a:	2a01      	cmp	r2, #1
 8013a0c:	d961      	bls.n	8013ad2 <uxr_write_framed_msg+0x12e>
 8013a0e:	1c4a      	adds	r2, r1, #1
 8013a10:	4421      	add	r1, r4
 8013a12:	b2d2      	uxtb	r2, r2
 8013a14:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 8013a18:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d06a      	beq.n	8013af6 <uxr_write_framed_msg+0x152>
 8013a20:	f04f 0800 	mov.w	r8, #0
 8013a24:	46c1      	mov	r9, r8
 8013a26:	e016      	b.n	8013a56 <uxr_write_framed_msg+0xb2>
 8013a28:	2a29      	cmp	r2, #41	@ 0x29
 8013a2a:	d868      	bhi.n	8013afe <uxr_write_framed_msg+0x15a>
 8013a2c:	18a0      	adds	r0, r4, r2
 8013a2e:	3201      	adds	r2, #1
 8013a30:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8013a34:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013a38:	ea88 0101 	eor.w	r1, r8, r1
 8013a3c:	4b7d      	ldr	r3, [pc, #500]	@ (8013c34 <uxr_write_framed_msg+0x290>)
 8013a3e:	f109 0901 	add.w	r9, r9, #1
 8013a42:	b2c9      	uxtb	r1, r1
 8013a44:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8013a48:	ea82 2818 	eor.w	r8, r2, r8, lsr #8
 8013a4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a4e:	454b      	cmp	r3, r9
 8013a50:	d969      	bls.n	8013b26 <uxr_write_framed_msg+0x182>
 8013a52:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013a56:	f81b 1009 	ldrb.w	r1, [fp, r9]
 8013a5a:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 8013a5e:	2801      	cmp	r0, #1
 8013a60:	d8e2      	bhi.n	8013a28 <uxr_write_framed_msg+0x84>
 8013a62:	1c50      	adds	r0, r2, #1
 8013a64:	b2c0      	uxtb	r0, r0
 8013a66:	2829      	cmp	r0, #41	@ 0x29
 8013a68:	d849      	bhi.n	8013afe <uxr_write_framed_msg+0x15a>
 8013a6a:	18a0      	adds	r0, r4, r2
 8013a6c:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 8013a70:	3202      	adds	r2, #2
 8013a72:	f081 0520 	eor.w	r5, r1, #32
 8013a76:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 8013a7a:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8013a7e:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013a82:	e7d9      	b.n	8013a38 <uxr_write_framed_msg+0x94>
 8013a84:	2104      	movs	r1, #4
 8013a86:	f04f 0c03 	mov.w	ip, #3
 8013a8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013a8c:	4422      	add	r2, r4
 8013a8e:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 8013a92:	44a4      	add	ip, r4
 8013a94:	b2dd      	uxtb	r5, r3
 8013a96:	f080 0020 	eor.w	r0, r0, #32
 8013a9a:	f882 e038 	strb.w	lr, [r2, #56]	@ 0x38
 8013a9e:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8013aa2:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8013aa6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8013aaa:	2a01      	cmp	r2, #1
 8013aac:	d8a2      	bhi.n	80139f4 <uxr_write_framed_msg+0x50>
 8013aae:	1862      	adds	r2, r4, r1
 8013ab0:	207d      	movs	r0, #125	@ 0x7d
 8013ab2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013ab4:	f085 0520 	eor.w	r5, r5, #32
 8013ab8:	f882 0038 	strb.w	r0, [r2, #56]	@ 0x38
 8013abc:	3102      	adds	r1, #2
 8013abe:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8013ac2:	f882 5039 	strb.w	r5, [r2, #57]	@ 0x39
 8013ac6:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8013aca:	f1a0 027d 	sub.w	r2, r0, #125	@ 0x7d
 8013ace:	2a01      	cmp	r2, #1
 8013ad0:	d89d      	bhi.n	8013a0e <uxr_write_framed_msg+0x6a>
 8013ad2:	1c4d      	adds	r5, r1, #1
 8013ad4:	1c8a      	adds	r2, r1, #2
 8013ad6:	f080 0020 	eor.w	r0, r0, #32
 8013ada:	4421      	add	r1, r4
 8013adc:	fa54 f585 	uxtab	r5, r4, r5
 8013ae0:	b2d2      	uxtb	r2, r2
 8013ae2:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 8013ae6:	f881 c038 	strb.w	ip, [r1, #56]	@ 0x38
 8013aea:	f885 0038 	strb.w	r0, [r5, #56]	@ 0x38
 8013aee:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d194      	bne.n	8013a20 <uxr_write_framed_msg+0x7c>
 8013af6:	4619      	mov	r1, r3
 8013af8:	f8ad 3004 	strh.w	r3, [sp, #4]
 8013afc:	e019      	b.n	8013b32 <uxr_write_framed_msg+0x18e>
 8013afe:	2500      	movs	r5, #0
 8013b00:	e000      	b.n	8013b04 <uxr_write_framed_msg+0x160>
 8013b02:	b160      	cbz	r0, 8013b1e <uxr_write_framed_msg+0x17a>
 8013b04:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013b08:	1b52      	subs	r2, r2, r5
 8013b0a:	4653      	mov	r3, sl
 8013b0c:	4638      	mov	r0, r7
 8013b0e:	4421      	add	r1, r4
 8013b10:	47b0      	blx	r6
 8013b12:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013b16:	4405      	add	r5, r0
 8013b18:	4295      	cmp	r5, r2
 8013b1a:	d3f2      	bcc.n	8013b02 <uxr_write_framed_msg+0x15e>
 8013b1c:	d066      	beq.n	8013bec <uxr_write_framed_msg+0x248>
 8013b1e:	2000      	movs	r0, #0
 8013b20:	b003      	add	sp, #12
 8013b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b26:	fa5f f188 	uxtb.w	r1, r8
 8013b2a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013b2e:	f8ad 8004 	strh.w	r8, [sp, #4]
 8013b32:	f04f 0900 	mov.w	r9, #0
 8013b36:	f04f 0b7d 	mov.w	fp, #125	@ 0x7d
 8013b3a:	46c8      	mov	r8, r9
 8013b3c:	e013      	b.n	8013b66 <uxr_write_framed_msg+0x1c2>
 8013b3e:	2a29      	cmp	r2, #41	@ 0x29
 8013b40:	d824      	bhi.n	8013b8c <uxr_write_framed_msg+0x1e8>
 8013b42:	18a3      	adds	r3, r4, r2
 8013b44:	3201      	adds	r2, #1
 8013b46:	f883 1038 	strb.w	r1, [r3, #56]	@ 0x38
 8013b4a:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013b4e:	f109 0901 	add.w	r9, r9, #1
 8013b52:	f1b9 0f02 	cmp.w	r9, #2
 8013b56:	d02d      	beq.n	8013bb4 <uxr_write_framed_msg+0x210>
 8013b58:	f109 0308 	add.w	r3, r9, #8
 8013b5c:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013b60:	446b      	add	r3, sp
 8013b62:	f813 1c04 	ldrb.w	r1, [r3, #-4]
 8013b66:	f1a1 037d 	sub.w	r3, r1, #125	@ 0x7d
 8013b6a:	2b01      	cmp	r3, #1
 8013b6c:	d8e7      	bhi.n	8013b3e <uxr_write_framed_msg+0x19a>
 8013b6e:	1c53      	adds	r3, r2, #1
 8013b70:	b2db      	uxtb	r3, r3
 8013b72:	2b29      	cmp	r3, #41	@ 0x29
 8013b74:	d80a      	bhi.n	8013b8c <uxr_write_framed_msg+0x1e8>
 8013b76:	18a3      	adds	r3, r4, r2
 8013b78:	f081 0120 	eor.w	r1, r1, #32
 8013b7c:	3202      	adds	r2, #2
 8013b7e:	f883 1039 	strb.w	r1, [r3, #57]	@ 0x39
 8013b82:	f883 b038 	strb.w	fp, [r3, #56]	@ 0x38
 8013b86:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013b8a:	e7e0      	b.n	8013b4e <uxr_write_framed_msg+0x1aa>
 8013b8c:	2500      	movs	r5, #0
 8013b8e:	e001      	b.n	8013b94 <uxr_write_framed_msg+0x1f0>
 8013b90:	2800      	cmp	r0, #0
 8013b92:	d0c4      	beq.n	8013b1e <uxr_write_framed_msg+0x17a>
 8013b94:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013b98:	1b52      	subs	r2, r2, r5
 8013b9a:	4653      	mov	r3, sl
 8013b9c:	4638      	mov	r0, r7
 8013b9e:	4421      	add	r1, r4
 8013ba0:	47b0      	blx	r6
 8013ba2:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013ba6:	4405      	add	r5, r0
 8013ba8:	4295      	cmp	r5, r2
 8013baa:	d3f1      	bcc.n	8013b90 <uxr_write_framed_msg+0x1ec>
 8013bac:	d1b7      	bne.n	8013b1e <uxr_write_framed_msg+0x17a>
 8013bae:	f884 8062 	strb.w	r8, [r4, #98]	@ 0x62
 8013bb2:	e7d1      	b.n	8013b58 <uxr_write_framed_msg+0x1b4>
 8013bb4:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013bb8:	b19a      	cbz	r2, 8013be2 <uxr_write_framed_msg+0x23e>
 8013bba:	2500      	movs	r5, #0
 8013bbc:	e001      	b.n	8013bc2 <uxr_write_framed_msg+0x21e>
 8013bbe:	2800      	cmp	r0, #0
 8013bc0:	d0ad      	beq.n	8013b1e <uxr_write_framed_msg+0x17a>
 8013bc2:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8013bc6:	1b52      	subs	r2, r2, r5
 8013bc8:	4653      	mov	r3, sl
 8013bca:	4638      	mov	r0, r7
 8013bcc:	4421      	add	r1, r4
 8013bce:	47b0      	blx	r6
 8013bd0:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8013bd4:	4405      	add	r5, r0
 8013bd6:	4295      	cmp	r5, r2
 8013bd8:	d3f1      	bcc.n	8013bbe <uxr_write_framed_msg+0x21a>
 8013bda:	d1a0      	bne.n	8013b1e <uxr_write_framed_msg+0x17a>
 8013bdc:	2300      	movs	r3, #0
 8013bde:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013be2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013be4:	b298      	uxth	r0, r3
 8013be6:	b003      	add	sp, #12
 8013be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013bec:	f04f 0300 	mov.w	r3, #0
 8013bf0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8013bf4:	e72a      	b.n	8013a4c <uxr_write_framed_msg+0xa8>
 8013bf6:	217d      	movs	r1, #125	@ 0x7d
 8013bf8:	f082 0220 	eor.w	r2, r2, #32
 8013bfc:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8013c00:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 8013c04:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 8013c08:	2203      	movs	r2, #3
 8013c0a:	2901      	cmp	r1, #1
 8013c0c:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8013c10:	d803      	bhi.n	8013c1a <uxr_write_framed_msg+0x276>
 8013c12:	2105      	movs	r1, #5
 8013c14:	f04f 0c04 	mov.w	ip, #4
 8013c18:	e737      	b.n	8013a8a <uxr_write_framed_msg+0xe6>
 8013c1a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013c1c:	2104      	movs	r1, #4
 8013c1e:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 8013c22:	b2dd      	uxtb	r5, r3
 8013c24:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
 8013c28:	f1a5 027d 	sub.w	r2, r5, #125	@ 0x7d
 8013c2c:	2a01      	cmp	r2, #1
 8013c2e:	f63f aee1 	bhi.w	80139f4 <uxr_write_framed_msg+0x50>
 8013c32:	e73c      	b.n	8013aae <uxr_write_framed_msg+0x10a>
 8013c34:	0801d008 	.word	0x0801d008

08013c38 <uxr_framing_read_transport>:
 8013c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c3c:	4604      	mov	r4, r0
 8013c3e:	b085      	sub	sp, #20
 8013c40:	4692      	mov	sl, r2
 8013c42:	4689      	mov	r9, r1
 8013c44:	461d      	mov	r5, r3
 8013c46:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8013c48:	f000 fca6 	bl	8014598 <uxr_millis>
 8013c4c:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8013c50:	f894 702d 	ldrb.w	r7, [r4, #45]	@ 0x2d
 8013c54:	4680      	mov	r8, r0
 8013c56:	42ba      	cmp	r2, r7
 8013c58:	d05f      	beq.n	8013d1a <uxr_framing_read_transport+0xe2>
 8013c5a:	d817      	bhi.n	8013c8c <uxr_framing_read_transport+0x54>
 8013c5c:	3f01      	subs	r7, #1
 8013c5e:	1aba      	subs	r2, r7, r2
 8013c60:	2700      	movs	r7, #0
 8013c62:	b2d2      	uxtb	r2, r2
 8013c64:	42b2      	cmp	r2, r6
 8013c66:	d81a      	bhi.n	8013c9e <uxr_framing_read_transport+0x66>
 8013c68:	19d3      	adds	r3, r2, r7
 8013c6a:	42b3      	cmp	r3, r6
 8013c6c:	d852      	bhi.n	8013d14 <uxr_framing_read_transport+0xdc>
 8013c6e:	b9d2      	cbnz	r2, 8013ca6 <uxr_framing_read_transport+0x6e>
 8013c70:	2600      	movs	r6, #0
 8013c72:	f000 fc91 	bl	8014598 <uxr_millis>
 8013c76:	682b      	ldr	r3, [r5, #0]
 8013c78:	eba0 0008 	sub.w	r0, r0, r8
 8013c7c:	1a1b      	subs	r3, r3, r0
 8013c7e:	4630      	mov	r0, r6
 8013c80:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013c84:	602b      	str	r3, [r5, #0]
 8013c86:	b005      	add	sp, #20
 8013c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c8c:	2f00      	cmp	r7, #0
 8013c8e:	d060      	beq.n	8013d52 <uxr_framing_read_transport+0x11a>
 8013c90:	f1c2 022a 	rsb	r2, r2, #42	@ 0x2a
 8013c94:	3f01      	subs	r7, #1
 8013c96:	b2d2      	uxtb	r2, r2
 8013c98:	b2ff      	uxtb	r7, r7
 8013c9a:	42b2      	cmp	r2, r6
 8013c9c:	d9e4      	bls.n	8013c68 <uxr_framing_read_transport+0x30>
 8013c9e:	b2f2      	uxtb	r2, r6
 8013ca0:	2700      	movs	r7, #0
 8013ca2:	2a00      	cmp	r2, #0
 8013ca4:	d0e4      	beq.n	8013c70 <uxr_framing_read_transport+0x38>
 8013ca6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ca8:	4650      	mov	r0, sl
 8013caa:	9203      	str	r2, [sp, #12]
 8013cac:	9300      	str	r3, [sp, #0]
 8013cae:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013cb2:	682b      	ldr	r3, [r5, #0]
 8013cb4:	3102      	adds	r1, #2
 8013cb6:	f8df b0a4 	ldr.w	fp, [pc, #164]	@ 8013d5c <uxr_framing_read_transport+0x124>
 8013cba:	4421      	add	r1, r4
 8013cbc:	47c8      	blx	r9
 8013cbe:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013cc2:	4606      	mov	r6, r0
 8013cc4:	4403      	add	r3, r0
 8013cc6:	0859      	lsrs	r1, r3, #1
 8013cc8:	fbab 2101 	umull	r2, r1, fp, r1
 8013ccc:	222a      	movs	r2, #42	@ 0x2a
 8013cce:	0889      	lsrs	r1, r1, #2
 8013cd0:	fb02 3111 	mls	r1, r2, r1, r3
 8013cd4:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 8013cd8:	2800      	cmp	r0, #0
 8013cda:	d0c9      	beq.n	8013c70 <uxr_framing_read_transport+0x38>
 8013cdc:	9a03      	ldr	r2, [sp, #12]
 8013cde:	4290      	cmp	r0, r2
 8013ce0:	d1c7      	bne.n	8013c72 <uxr_framing_read_transport+0x3a>
 8013ce2:	2f00      	cmp	r7, #0
 8013ce4:	d0c5      	beq.n	8013c72 <uxr_framing_read_transport+0x3a>
 8013ce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013ce8:	3102      	adds	r1, #2
 8013cea:	463a      	mov	r2, r7
 8013cec:	4650      	mov	r0, sl
 8013cee:	4421      	add	r1, r4
 8013cf0:	9300      	str	r3, [sp, #0]
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	47c8      	blx	r9
 8013cf6:	f894 202c 	ldrb.w	r2, [r4, #44]	@ 0x2c
 8013cfa:	4406      	add	r6, r0
 8013cfc:	1813      	adds	r3, r2, r0
 8013cfe:	085a      	lsrs	r2, r3, #1
 8013d00:	fbab 1b02 	umull	r1, fp, fp, r2
 8013d04:	222a      	movs	r2, #42	@ 0x2a
 8013d06:	ea4f 0b9b 	mov.w	fp, fp, lsr #2
 8013d0a:	fb02 331b 	mls	r3, r2, fp, r3
 8013d0e:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8013d12:	e7ae      	b.n	8013c72 <uxr_framing_read_transport+0x3a>
 8013d14:	1ab6      	subs	r6, r6, r2
 8013d16:	b2f7      	uxtb	r7, r6
 8013d18:	e7a9      	b.n	8013c6e <uxr_framing_read_transport+0x36>
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	2e28      	cmp	r6, #40	@ 0x28
 8013d1e:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8013d20:	d9bd      	bls.n	8013c9e <uxr_framing_read_transport+0x66>
 8013d22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013d24:	2229      	movs	r2, #41	@ 0x29
 8013d26:	1ca1      	adds	r1, r4, #2
 8013d28:	4650      	mov	r0, sl
 8013d2a:	9300      	str	r3, [sp, #0]
 8013d2c:	682b      	ldr	r3, [r5, #0]
 8013d2e:	47c8      	blx	r9
 8013d30:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8013d34:	4606      	mov	r6, r0
 8013d36:	212a      	movs	r1, #42	@ 0x2a
 8013d38:	4403      	add	r3, r0
 8013d3a:	4808      	ldr	r0, [pc, #32]	@ (8013d5c <uxr_framing_read_transport+0x124>)
 8013d3c:	085a      	lsrs	r2, r3, #1
 8013d3e:	fba0 0202 	umull	r0, r2, r0, r2
 8013d42:	0892      	lsrs	r2, r2, #2
 8013d44:	fb01 3312 	mls	r3, r1, r2, r3
 8013d48:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8013d4c:	2e00      	cmp	r6, #0
 8013d4e:	d08f      	beq.n	8013c70 <uxr_framing_read_transport+0x38>
 8013d50:	e78f      	b.n	8013c72 <uxr_framing_read_transport+0x3a>
 8013d52:	f1c2 0229 	rsb	r2, r2, #41	@ 0x29
 8013d56:	b2d2      	uxtb	r2, r2
 8013d58:	e784      	b.n	8013c64 <uxr_framing_read_transport+0x2c>
 8013d5a:	bf00      	nop
 8013d5c:	30c30c31 	.word	0x30c30c31

08013d60 <uxr_read_framed_msg>:
 8013d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d64:	461e      	mov	r6, r3
 8013d66:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8013d6a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8013d6e:	b083      	sub	sp, #12
 8013d70:	4604      	mov	r4, r0
 8013d72:	4688      	mov	r8, r1
 8013d74:	429d      	cmp	r5, r3
 8013d76:	4691      	mov	r9, r2
 8013d78:	f000 818c 	beq.w	8014094 <uxr_read_framed_msg+0x334>
 8013d7c:	7823      	ldrb	r3, [r4, #0]
 8013d7e:	4dc3      	ldr	r5, [pc, #780]	@ (801408c <uxr_read_framed_msg+0x32c>)
 8013d80:	4fc3      	ldr	r7, [pc, #780]	@ (8014090 <uxr_read_framed_msg+0x330>)
 8013d82:	2b07      	cmp	r3, #7
 8013d84:	d8fd      	bhi.n	8013d82 <uxr_read_framed_msg+0x22>
 8013d86:	e8df f013 	tbh	[pc, r3, lsl #1]
 8013d8a:	011c      	.short	0x011c
 8013d8c:	00d900fb 	.word	0x00d900fb
 8013d90:	008f00ba 	.word	0x008f00ba
 8013d94:	00320051 	.word	0x00320051
 8013d98:	0008      	.short	0x0008
 8013d9a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013d9e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013da2:	4299      	cmp	r1, r3
 8013da4:	f000 814d 	beq.w	8014042 <uxr_read_framed_msg+0x2e2>
 8013da8:	18e2      	adds	r2, r4, r3
 8013daa:	7892      	ldrb	r2, [r2, #2]
 8013dac:	2a7d      	cmp	r2, #125	@ 0x7d
 8013dae:	f000 81b8 	beq.w	8014122 <uxr_read_framed_msg+0x3c2>
 8013db2:	3301      	adds	r3, #1
 8013db4:	212a      	movs	r1, #42	@ 0x2a
 8013db6:	2a7e      	cmp	r2, #126	@ 0x7e
 8013db8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 8013dbc:	fba5 c000 	umull	ip, r0, r5, r0
 8013dc0:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8013dc4:	fb01 3310 	mls	r3, r1, r0, r3
 8013dc8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013dcc:	f000 8257 	beq.w	801427e <uxr_read_framed_msg+0x51e>
 8013dd0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013dd2:	2000      	movs	r0, #0
 8013dd4:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 8013dd6:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8013dda:	7020      	strb	r0, [r4, #0]
 8013ddc:	b29b      	uxth	r3, r3
 8013dde:	4299      	cmp	r1, r3
 8013de0:	86a3      	strh	r3, [r4, #52]	@ 0x34
 8013de2:	f000 8178 	beq.w	80140d6 <uxr_read_framed_msg+0x376>
 8013de6:	2000      	movs	r0, #0
 8013de8:	b003      	add	sp, #12
 8013dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dee:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013df2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013df6:	4298      	cmp	r0, r3
 8013df8:	f000 8132 	beq.w	8014060 <uxr_read_framed_msg+0x300>
 8013dfc:	18e2      	adds	r2, r4, r3
 8013dfe:	7891      	ldrb	r1, [r2, #2]
 8013e00:	297d      	cmp	r1, #125	@ 0x7d
 8013e02:	f000 8170 	beq.w	80140e6 <uxr_read_framed_msg+0x386>
 8013e06:	3301      	adds	r3, #1
 8013e08:	202a      	movs	r0, #42	@ 0x2a
 8013e0a:	297e      	cmp	r1, #126	@ 0x7e
 8013e0c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8013e10:	fba5 c202 	umull	ip, r2, r5, r2
 8013e14:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013e18:	fb00 3312 	mls	r3, r0, r2, r3
 8013e1c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013e20:	f000 821d 	beq.w	801425e <uxr_read_framed_msg+0x4fe>
 8013e24:	2307      	movs	r3, #7
 8013e26:	86a1      	strh	r1, [r4, #52]	@ 0x34
 8013e28:	7023      	strb	r3, [r4, #0]
 8013e2a:	e7aa      	b.n	8013d82 <uxr_read_framed_msg+0x22>
 8013e2c:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013e2e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8013e32:	459e      	cmp	lr, r3
 8013e34:	d827      	bhi.n	8013e86 <uxr_read_framed_msg+0x126>
 8013e36:	e032      	b.n	8013e9e <uxr_read_framed_msg+0x13e>
 8013e38:	fba5 b101 	umull	fp, r1, r5, r1
 8013e3c:	f89c c002 	ldrb.w	ip, [ip, #2]
 8013e40:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8013e44:	0889      	lsrs	r1, r1, #2
 8013e46:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8013e4a:	fb0b 0111 	mls	r1, fp, r1, r0
 8013e4e:	f000 80d4 	beq.w	8013ffa <uxr_read_framed_msg+0x29a>
 8013e52:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 8013e56:	f884 102d 	strb.w	r1, [r4, #45]	@ 0x2d
 8013e5a:	f000 80cb 	beq.w	8013ff4 <uxr_read_framed_msg+0x294>
 8013e5e:	f806 c003 	strb.w	ip, [r6, r3]
 8013e62:	8ee0      	ldrh	r0, [r4, #54]	@ 0x36
 8013e64:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 8013e66:	ea80 010c 	eor.w	r1, r0, ip
 8013e6a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8013e6e:	3301      	adds	r3, #1
 8013e70:	b2c9      	uxtb	r1, r1
 8013e72:	b29b      	uxth	r3, r3
 8013e74:	f837 2011 	ldrh.w	r2, [r7, r1, lsl #1]
 8013e78:	4573      	cmp	r3, lr
 8013e7a:	8663      	strh	r3, [r4, #50]	@ 0x32
 8013e7c:	ea82 2210 	eor.w	r2, r2, r0, lsr #8
 8013e80:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8013e82:	f080 811d 	bcs.w	80140c0 <uxr_read_framed_msg+0x360>
 8013e86:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8013e8a:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8013e8e:	1c50      	adds	r0, r2, #1
 8013e90:	eb04 0c02 	add.w	ip, r4, r2
 8013e94:	4592      	cmp	sl, r2
 8013e96:	ea4f 0150 	mov.w	r1, r0, lsr #1
 8013e9a:	d1cd      	bne.n	8013e38 <uxr_read_framed_msg+0xd8>
 8013e9c:	459e      	cmp	lr, r3
 8013e9e:	f040 8114 	bne.w	80140ca <uxr_read_framed_msg+0x36a>
 8013ea2:	2306      	movs	r3, #6
 8013ea4:	7023      	strb	r3, [r4, #0]
 8013ea6:	e76c      	b.n	8013d82 <uxr_read_framed_msg+0x22>
 8013ea8:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013eac:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013eb0:	4298      	cmp	r0, r3
 8013eb2:	f000 80c6 	beq.w	8014042 <uxr_read_framed_msg+0x2e2>
 8013eb6:	18e2      	adds	r2, r4, r3
 8013eb8:	7891      	ldrb	r1, [r2, #2]
 8013eba:	297d      	cmp	r1, #125	@ 0x7d
 8013ebc:	f000 8193 	beq.w	80141e6 <uxr_read_framed_msg+0x486>
 8013ec0:	3301      	adds	r3, #1
 8013ec2:	202a      	movs	r0, #42	@ 0x2a
 8013ec4:	297e      	cmp	r1, #126	@ 0x7e
 8013ec6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8013eca:	fba5 c202 	umull	ip, r2, r5, r2
 8013ece:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013ed2:	fb00 3312 	mls	r3, r0, r2, r3
 8013ed6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013eda:	f000 81d0 	beq.w	801427e <uxr_read_framed_msg+0x51e>
 8013ede:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8013ee0:	2000      	movs	r0, #0
 8013ee2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8013ee6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013ee8:	8660      	strh	r0, [r4, #50]	@ 0x32
 8013eea:	b29b      	uxth	r3, r3
 8013eec:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8013eee:	428b      	cmp	r3, r1
 8013ef0:	8623      	strh	r3, [r4, #48]	@ 0x30
 8013ef2:	f240 80e2 	bls.w	80140ba <uxr_read_framed_msg+0x35a>
 8013ef6:	7020      	strb	r0, [r4, #0]
 8013ef8:	b003      	add	sp, #12
 8013efa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013efe:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013f02:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013f06:	4298      	cmp	r0, r3
 8013f08:	f000 80aa 	beq.w	8014060 <uxr_read_framed_msg+0x300>
 8013f0c:	18e2      	adds	r2, r4, r3
 8013f0e:	7891      	ldrb	r1, [r2, #2]
 8013f10:	297d      	cmp	r1, #125	@ 0x7d
 8013f12:	f000 8186 	beq.w	8014222 <uxr_read_framed_msg+0x4c2>
 8013f16:	3301      	adds	r3, #1
 8013f18:	202a      	movs	r0, #42	@ 0x2a
 8013f1a:	297e      	cmp	r1, #126	@ 0x7e
 8013f1c:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8013f20:	fba5 c202 	umull	ip, r2, r5, r2
 8013f24:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013f28:	fb00 3312 	mls	r3, r0, r2, r3
 8013f2c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013f30:	f000 8195 	beq.w	801425e <uxr_read_framed_msg+0x4fe>
 8013f34:	2304      	movs	r3, #4
 8013f36:	8621      	strh	r1, [r4, #48]	@ 0x30
 8013f38:	7023      	strb	r3, [r4, #0]
 8013f3a:	e722      	b.n	8013d82 <uxr_read_framed_msg+0x22>
 8013f3c:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 8013f40:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8013f44:	4290      	cmp	r0, r2
 8013f46:	f000 80b4 	beq.w	80140b2 <uxr_read_framed_msg+0x352>
 8013f4a:	18a3      	adds	r3, r4, r2
 8013f4c:	7899      	ldrb	r1, [r3, #2]
 8013f4e:	297d      	cmp	r1, #125	@ 0x7d
 8013f50:	f000 8107 	beq.w	8014162 <uxr_read_framed_msg+0x402>
 8013f54:	3201      	adds	r2, #1
 8013f56:	232a      	movs	r3, #42	@ 0x2a
 8013f58:	297e      	cmp	r1, #126	@ 0x7e
 8013f5a:	ea4f 0052 	mov.w	r0, r2, lsr #1
 8013f5e:	fba5 c000 	umull	ip, r0, r5, r0
 8013f62:	ea4f 0090 	mov.w	r0, r0, lsr #2
 8013f66:	fb03 2210 	mls	r2, r3, r0, r2
 8013f6a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8013f6e:	f000 818a 	beq.w	8014286 <uxr_read_framed_msg+0x526>
 8013f72:	7863      	ldrb	r3, [r4, #1]
 8013f74:	428b      	cmp	r3, r1
 8013f76:	bf0c      	ite	eq
 8013f78:	2303      	moveq	r3, #3
 8013f7a:	2300      	movne	r3, #0
 8013f7c:	7023      	strb	r3, [r4, #0]
 8013f7e:	e700      	b.n	8013d82 <uxr_read_framed_msg+0x22>
 8013f80:	2300      	movs	r3, #0
 8013f82:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8013f86:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
 8013f8a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013f8e:	4299      	cmp	r1, r3
 8013f90:	d06a      	beq.n	8014068 <uxr_read_framed_msg+0x308>
 8013f92:	18e2      	adds	r2, r4, r3
 8013f94:	7890      	ldrb	r0, [r2, #2]
 8013f96:	287d      	cmp	r0, #125	@ 0x7d
 8013f98:	f000 8100 	beq.w	801419c <uxr_read_framed_msg+0x43c>
 8013f9c:	3301      	adds	r3, #1
 8013f9e:	212a      	movs	r1, #42	@ 0x2a
 8013fa0:	287e      	cmp	r0, #126	@ 0x7e
 8013fa2:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 8013fa6:	ea4f 0253 	mov.w	r2, r3, lsr #1
 8013faa:	fba5 c202 	umull	ip, r2, r5, r2
 8013fae:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8013fb2:	fb01 3312 	mls	r3, r1, r2, r3
 8013fb6:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013fba:	d055      	beq.n	8014068 <uxr_read_framed_msg+0x308>
 8013fbc:	2302      	movs	r3, #2
 8013fbe:	7023      	strb	r3, [r4, #0]
 8013fc0:	e6df      	b.n	8013d82 <uxr_read_framed_msg+0x22>
 8013fc2:	f894 c02c 	ldrb.w	ip, [r4, #44]	@ 0x2c
 8013fc6:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 8013fca:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8013fce:	1c5a      	adds	r2, r3, #1
 8013fd0:	459c      	cmp	ip, r3
 8013fd2:	eb04 0103 	add.w	r1, r4, r3
 8013fd6:	ea4f 0352 	mov.w	r3, r2, lsr #1
 8013fda:	f43f af04 	beq.w	8013de6 <uxr_read_framed_msg+0x86>
 8013fde:	fba5 0303 	umull	r0, r3, r5, r3
 8013fe2:	7889      	ldrb	r1, [r1, #2]
 8013fe4:	089b      	lsrs	r3, r3, #2
 8013fe6:	297e      	cmp	r1, #126	@ 0x7e
 8013fe8:	fb0e 2313 	mls	r3, lr, r3, r2
 8013fec:	b2db      	uxtb	r3, r3
 8013fee:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8013ff2:	d1ec      	bne.n	8013fce <uxr_read_framed_msg+0x26e>
 8013ff4:	2301      	movs	r3, #1
 8013ff6:	7023      	strb	r3, [r4, #0]
 8013ff8:	e6c3      	b.n	8013d82 <uxr_read_framed_msg+0x22>
 8013ffa:	1c50      	adds	r0, r2, #1
 8013ffc:	f04f 0b2a 	mov.w	fp, #42	@ 0x2a
 8014000:	3202      	adds	r2, #2
 8014002:	0841      	lsrs	r1, r0, #1
 8014004:	fba5 c101 	umull	ip, r1, r5, r1
 8014008:	0889      	lsrs	r1, r1, #2
 801400a:	fb0b 0111 	mls	r1, fp, r1, r0
 801400e:	1860      	adds	r0, r4, r1
 8014010:	b2c9      	uxtb	r1, r1
 8014012:	458a      	cmp	sl, r1
 8014014:	f43f af42 	beq.w	8013e9c <uxr_read_framed_msg+0x13c>
 8014018:	0851      	lsrs	r1, r2, #1
 801401a:	7880      	ldrb	r0, [r0, #2]
 801401c:	fba5 a101 	umull	sl, r1, r5, r1
 8014020:	287e      	cmp	r0, #126	@ 0x7e
 8014022:	f080 0c20 	eor.w	ip, r0, #32
 8014026:	ea4f 0191 	mov.w	r1, r1, lsr #2
 801402a:	fb0b 2211 	mls	r2, fp, r1, r2
 801402e:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014032:	f47f af14 	bne.w	8013e5e <uxr_read_framed_msg+0xfe>
 8014036:	459e      	cmp	lr, r3
 8014038:	f43f af33 	beq.w	8013ea2 <uxr_read_framed_msg+0x142>
 801403c:	2301      	movs	r3, #1
 801403e:	7023      	strb	r3, [r4, #0]
 8014040:	e69f      	b.n	8013d82 <uxr_read_framed_msg+0x22>
 8014042:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014044:	9300      	str	r3, [sp, #0]
 8014046:	2301      	movs	r3, #1
 8014048:	9301      	str	r3, [sp, #4]
 801404a:	464a      	mov	r2, r9
 801404c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801404e:	4641      	mov	r1, r8
 8014050:	4620      	mov	r0, r4
 8014052:	f7ff fdf1 	bl	8013c38 <uxr_framing_read_transport>
 8014056:	2800      	cmp	r0, #0
 8014058:	f43f aec5 	beq.w	8013de6 <uxr_read_framed_msg+0x86>
 801405c:	7823      	ldrb	r3, [r4, #0]
 801405e:	e690      	b.n	8013d82 <uxr_read_framed_msg+0x22>
 8014060:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014062:	9300      	str	r3, [sp, #0]
 8014064:	2302      	movs	r3, #2
 8014066:	e7ef      	b.n	8014048 <uxr_read_framed_msg+0x2e8>
 8014068:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801406a:	464a      	mov	r2, r9
 801406c:	4641      	mov	r1, r8
 801406e:	4620      	mov	r0, r4
 8014070:	9300      	str	r3, [sp, #0]
 8014072:	2304      	movs	r3, #4
 8014074:	9301      	str	r3, [sp, #4]
 8014076:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014078:	f7ff fdde 	bl	8013c38 <uxr_framing_read_transport>
 801407c:	2800      	cmp	r0, #0
 801407e:	d1ed      	bne.n	801405c <uxr_read_framed_msg+0x2fc>
 8014080:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8014084:	2b7e      	cmp	r3, #126	@ 0x7e
 8014086:	d0e9      	beq.n	801405c <uxr_read_framed_msg+0x2fc>
 8014088:	e6ad      	b.n	8013de6 <uxr_read_framed_msg+0x86>
 801408a:	bf00      	nop
 801408c:	30c30c31 	.word	0x30c30c31
 8014090:	0801d008 	.word	0x0801d008
 8014094:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014096:	9300      	str	r3, [sp, #0]
 8014098:	2305      	movs	r3, #5
 801409a:	9301      	str	r3, [sp, #4]
 801409c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801409e:	f7ff fdcb 	bl	8013c38 <uxr_framing_read_transport>
 80140a2:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80140a6:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80140aa:	429a      	cmp	r2, r3
 80140ac:	f43f ae9b 	beq.w	8013de6 <uxr_read_framed_msg+0x86>
 80140b0:	e664      	b.n	8013d7c <uxr_read_framed_msg+0x1c>
 80140b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80140b4:	9300      	str	r3, [sp, #0]
 80140b6:	2303      	movs	r3, #3
 80140b8:	e7c6      	b.n	8014048 <uxr_read_framed_msg+0x2e8>
 80140ba:	2305      	movs	r3, #5
 80140bc:	7023      	strb	r3, [r4, #0]
 80140be:	e660      	b.n	8013d82 <uxr_read_framed_msg+0x22>
 80140c0:	f43f aeef 	beq.w	8013ea2 <uxr_read_framed_msg+0x142>
 80140c4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80140c8:	d094      	beq.n	8013ff4 <uxr_read_framed_msg+0x294>
 80140ca:	ebae 0303 	sub.w	r3, lr, r3
 80140ce:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80140d0:	3302      	adds	r3, #2
 80140d2:	9200      	str	r2, [sp, #0]
 80140d4:	e7b8      	b.n	8014048 <uxr_read_framed_msg+0x2e8>
 80140d6:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80140da:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80140dc:	7013      	strb	r3, [r2, #0]
 80140de:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80140e0:	b003      	add	sp, #12
 80140e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140e6:	1c59      	adds	r1, r3, #1
 80140e8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80140ec:	084a      	lsrs	r2, r1, #1
 80140ee:	fba5 e202 	umull	lr, r2, r5, r2
 80140f2:	0892      	lsrs	r2, r2, #2
 80140f4:	fb0c 1212 	mls	r2, ip, r2, r1
 80140f8:	b2d1      	uxtb	r1, r2
 80140fa:	4288      	cmp	r0, r1
 80140fc:	d0b0      	beq.n	8014060 <uxr_read_framed_msg+0x300>
 80140fe:	3302      	adds	r3, #2
 8014100:	4422      	add	r2, r4
 8014102:	7891      	ldrb	r1, [r2, #2]
 8014104:	085a      	lsrs	r2, r3, #1
 8014106:	fba5 0202 	umull	r0, r2, r5, r2
 801410a:	297e      	cmp	r1, #126	@ 0x7e
 801410c:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014110:	fb0c 3312 	mls	r3, ip, r2, r3
 8014114:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014118:	f000 80a1 	beq.w	801425e <uxr_read_framed_msg+0x4fe>
 801411c:	f081 0120 	eor.w	r1, r1, #32
 8014120:	e680      	b.n	8013e24 <uxr_read_framed_msg+0xc4>
 8014122:	f103 0c01 	add.w	ip, r3, #1
 8014126:	202a      	movs	r0, #42	@ 0x2a
 8014128:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801412c:	fba5 e202 	umull	lr, r2, r5, r2
 8014130:	0892      	lsrs	r2, r2, #2
 8014132:	fb00 c212 	mls	r2, r0, r2, ip
 8014136:	fa5f fc82 	uxtb.w	ip, r2
 801413a:	4561      	cmp	r1, ip
 801413c:	d081      	beq.n	8014042 <uxr_read_framed_msg+0x2e2>
 801413e:	3302      	adds	r3, #2
 8014140:	4422      	add	r2, r4
 8014142:	0859      	lsrs	r1, r3, #1
 8014144:	7892      	ldrb	r2, [r2, #2]
 8014146:	fba5 c101 	umull	ip, r1, r5, r1
 801414a:	2a7e      	cmp	r2, #126	@ 0x7e
 801414c:	ea4f 0191 	mov.w	r1, r1, lsr #2
 8014150:	fb00 3311 	mls	r3, r0, r1, r3
 8014154:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014158:	f000 8091 	beq.w	801427e <uxr_read_framed_msg+0x51e>
 801415c:	f082 0220 	eor.w	r2, r2, #32
 8014160:	e636      	b.n	8013dd0 <uxr_read_framed_msg+0x70>
 8014162:	1c51      	adds	r1, r2, #1
 8014164:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014168:	084b      	lsrs	r3, r1, #1
 801416a:	fba5 e303 	umull	lr, r3, r5, r3
 801416e:	089b      	lsrs	r3, r3, #2
 8014170:	fb0c 1313 	mls	r3, ip, r3, r1
 8014174:	b2d9      	uxtb	r1, r3
 8014176:	4288      	cmp	r0, r1
 8014178:	d09b      	beq.n	80140b2 <uxr_read_framed_msg+0x352>
 801417a:	3202      	adds	r2, #2
 801417c:	4423      	add	r3, r4
 801417e:	0850      	lsrs	r0, r2, #1
 8014180:	789b      	ldrb	r3, [r3, #2]
 8014182:	fba5 1000 	umull	r1, r0, r5, r0
 8014186:	2b7e      	cmp	r3, #126	@ 0x7e
 8014188:	ea4f 0090 	mov.w	r0, r0, lsr #2
 801418c:	fb0c 2210 	mls	r2, ip, r0, r2
 8014190:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8014194:	d077      	beq.n	8014286 <uxr_read_framed_msg+0x526>
 8014196:	f083 0120 	eor.w	r1, r3, #32
 801419a:	e6ea      	b.n	8013f72 <uxr_read_framed_msg+0x212>
 801419c:	f103 0c01 	add.w	ip, r3, #1
 80141a0:	202a      	movs	r0, #42	@ 0x2a
 80141a2:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80141a6:	fba5 e202 	umull	lr, r2, r5, r2
 80141aa:	0892      	lsrs	r2, r2, #2
 80141ac:	fb00 c212 	mls	r2, r0, r2, ip
 80141b0:	fa5f fc82 	uxtb.w	ip, r2
 80141b4:	4561      	cmp	r1, ip
 80141b6:	f43f af57 	beq.w	8014068 <uxr_read_framed_msg+0x308>
 80141ba:	3302      	adds	r3, #2
 80141bc:	4422      	add	r2, r4
 80141be:	7891      	ldrb	r1, [r2, #2]
 80141c0:	085a      	lsrs	r2, r3, #1
 80141c2:	fba5 c202 	umull	ip, r2, r5, r2
 80141c6:	297e      	cmp	r1, #126	@ 0x7e
 80141c8:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80141cc:	ea4f 0292 	mov.w	r2, r2, lsr #2
 80141d0:	fb00 3312 	mls	r3, r0, r2, r3
 80141d4:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80141d8:	f43f af46 	beq.w	8014068 <uxr_read_framed_msg+0x308>
 80141dc:	f081 0120 	eor.w	r1, r1, #32
 80141e0:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80141e4:	e6ea      	b.n	8013fbc <uxr_read_framed_msg+0x25c>
 80141e6:	1c59      	adds	r1, r3, #1
 80141e8:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80141ec:	084a      	lsrs	r2, r1, #1
 80141ee:	fba5 e202 	umull	lr, r2, r5, r2
 80141f2:	0892      	lsrs	r2, r2, #2
 80141f4:	fb0c 1212 	mls	r2, ip, r2, r1
 80141f8:	b2d1      	uxtb	r1, r2
 80141fa:	4288      	cmp	r0, r1
 80141fc:	f43f af21 	beq.w	8014042 <uxr_read_framed_msg+0x2e2>
 8014200:	3302      	adds	r3, #2
 8014202:	4422      	add	r2, r4
 8014204:	7891      	ldrb	r1, [r2, #2]
 8014206:	085a      	lsrs	r2, r3, #1
 8014208:	fba5 0202 	umull	r0, r2, r5, r2
 801420c:	297e      	cmp	r1, #126	@ 0x7e
 801420e:	ea4f 0292 	mov.w	r2, r2, lsr #2
 8014212:	fb0c 3312 	mls	r3, ip, r2, r3
 8014216:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801421a:	d030      	beq.n	801427e <uxr_read_framed_msg+0x51e>
 801421c:	f081 0120 	eor.w	r1, r1, #32
 8014220:	e65d      	b.n	8013ede <uxr_read_framed_msg+0x17e>
 8014222:	1c59      	adds	r1, r3, #1
 8014224:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8014228:	084a      	lsrs	r2, r1, #1
 801422a:	fba5 e202 	umull	lr, r2, r5, r2
 801422e:	0892      	lsrs	r2, r2, #2
 8014230:	fb0c 1212 	mls	r2, ip, r2, r1
 8014234:	b2d1      	uxtb	r1, r2
 8014236:	4288      	cmp	r0, r1
 8014238:	f43f af12 	beq.w	8014060 <uxr_read_framed_msg+0x300>
 801423c:	3302      	adds	r3, #2
 801423e:	4422      	add	r2, r4
 8014240:	7891      	ldrb	r1, [r2, #2]
 8014242:	085a      	lsrs	r2, r3, #1
 8014244:	fba5 0202 	umull	r0, r2, r5, r2
 8014248:	297e      	cmp	r1, #126	@ 0x7e
 801424a:	ea4f 0292 	mov.w	r2, r2, lsr #2
 801424e:	fb0c 3312 	mls	r3, ip, r2, r3
 8014252:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8014256:	d002      	beq.n	801425e <uxr_read_framed_msg+0x4fe>
 8014258:	f081 0120 	eor.w	r1, r1, #32
 801425c:	e66a      	b.n	8013f34 <uxr_read_framed_msg+0x1d4>
 801425e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014260:	9300      	str	r3, [sp, #0]
 8014262:	2302      	movs	r3, #2
 8014264:	9301      	str	r3, [sp, #4]
 8014266:	464a      	mov	r2, r9
 8014268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801426a:	4641      	mov	r1, r8
 801426c:	4620      	mov	r0, r4
 801426e:	f7ff fce3 	bl	8013c38 <uxr_framing_read_transport>
 8014272:	2800      	cmp	r0, #0
 8014274:	f47f aef2 	bne.w	801405c <uxr_read_framed_msg+0x2fc>
 8014278:	2301      	movs	r3, #1
 801427a:	7023      	strb	r3, [r4, #0]
 801427c:	e581      	b.n	8013d82 <uxr_read_framed_msg+0x22>
 801427e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014280:	9300      	str	r3, [sp, #0]
 8014282:	2301      	movs	r3, #1
 8014284:	e7ee      	b.n	8014264 <uxr_read_framed_msg+0x504>
 8014286:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014288:	9300      	str	r3, [sp, #0]
 801428a:	2303      	movs	r3, #3
 801428c:	e7ea      	b.n	8014264 <uxr_read_framed_msg+0x504>
 801428e:	bf00      	nop

08014290 <uxr_stream_id>:
 8014290:	2901      	cmp	r1, #1
 8014292:	4684      	mov	ip, r0
 8014294:	b500      	push	{lr}
 8014296:	b083      	sub	sp, #12
 8014298:	d01f      	beq.n	80142da <uxr_stream_id+0x4a>
 801429a:	2902      	cmp	r1, #2
 801429c:	f04f 0e00 	mov.w	lr, #0
 80142a0:	d020      	beq.n	80142e4 <uxr_stream_id+0x54>
 80142a2:	2300      	movs	r3, #0
 80142a4:	2000      	movs	r0, #0
 80142a6:	f36e 0307 	bfi	r3, lr, #0, #8
 80142aa:	f36c 230f 	bfi	r3, ip, #8, #8
 80142ae:	f361 4317 	bfi	r3, r1, #16, #8
 80142b2:	f362 631f 	bfi	r3, r2, #24, #8
 80142b6:	fa5f fc83 	uxtb.w	ip, r3
 80142ba:	f3c3 2107 	ubfx	r1, r3, #8, #8
 80142be:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80142c2:	0e1b      	lsrs	r3, r3, #24
 80142c4:	f36c 0007 	bfi	r0, ip, #0, #8
 80142c8:	f361 200f 	bfi	r0, r1, #8, #8
 80142cc:	f362 4017 	bfi	r0, r2, #16, #8
 80142d0:	f363 601f 	bfi	r0, r3, #24, #8
 80142d4:	b003      	add	sp, #12
 80142d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80142da:	f100 0e01 	add.w	lr, r0, #1
 80142de:	fa5f fe8e 	uxtb.w	lr, lr
 80142e2:	e7de      	b.n	80142a2 <uxr_stream_id+0x12>
 80142e4:	f080 0e80 	eor.w	lr, r0, #128	@ 0x80
 80142e8:	e7db      	b.n	80142a2 <uxr_stream_id+0x12>
 80142ea:	bf00      	nop

080142ec <uxr_stream_id_from_raw>:
 80142ec:	b082      	sub	sp, #8
 80142ee:	b130      	cbz	r0, 80142fe <uxr_stream_id_from_raw+0x12>
 80142f0:	0603      	lsls	r3, r0, #24
 80142f2:	d421      	bmi.n	8014338 <uxr_stream_id_from_raw+0x4c>
 80142f4:	1e42      	subs	r2, r0, #1
 80142f6:	f04f 0c01 	mov.w	ip, #1
 80142fa:	b2d2      	uxtb	r2, r2
 80142fc:	e001      	b.n	8014302 <uxr_stream_id_from_raw+0x16>
 80142fe:	4684      	mov	ip, r0
 8014300:	4602      	mov	r2, r0
 8014302:	2300      	movs	r3, #0
 8014304:	f360 0307 	bfi	r3, r0, #0, #8
 8014308:	2000      	movs	r0, #0
 801430a:	f362 230f 	bfi	r3, r2, #8, #8
 801430e:	f36c 4317 	bfi	r3, ip, #16, #8
 8014312:	f361 631f 	bfi	r3, r1, #24, #8
 8014316:	fa5f fc83 	uxtb.w	ip, r3
 801431a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801431e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8014322:	0e1b      	lsrs	r3, r3, #24
 8014324:	f36c 0007 	bfi	r0, ip, #0, #8
 8014328:	f361 200f 	bfi	r0, r1, #8, #8
 801432c:	f362 4017 	bfi	r0, r2, #16, #8
 8014330:	f363 601f 	bfi	r0, r3, #24, #8
 8014334:	b002      	add	sp, #8
 8014336:	4770      	bx	lr
 8014338:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801433c:	f04f 0c02 	mov.w	ip, #2
 8014340:	e7df      	b.n	8014302 <uxr_stream_id_from_raw+0x16>
 8014342:	bf00      	nop

08014344 <uxr_init_stream_storage>:
 8014344:	2300      	movs	r3, #0
 8014346:	7403      	strb	r3, [r0, #16]
 8014348:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801434c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8014350:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8014354:	4770      	bx	lr
 8014356:	bf00      	nop

08014358 <uxr_reset_stream_storage>:
 8014358:	b570      	push	{r4, r5, r6, lr}
 801435a:	7c03      	ldrb	r3, [r0, #16]
 801435c:	4604      	mov	r4, r0
 801435e:	b14b      	cbz	r3, 8014374 <uxr_reset_stream_storage+0x1c>
 8014360:	4606      	mov	r6, r0
 8014362:	2500      	movs	r5, #0
 8014364:	4630      	mov	r0, r6
 8014366:	3501      	adds	r5, #1
 8014368:	f006 f8c2 	bl	801a4f0 <uxr_reset_output_best_effort_stream>
 801436c:	7c23      	ldrb	r3, [r4, #16]
 801436e:	3610      	adds	r6, #16
 8014370:	42ab      	cmp	r3, r5
 8014372:	d8f7      	bhi.n	8014364 <uxr_reset_stream_storage+0xc>
 8014374:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8014378:	b15b      	cbz	r3, 8014392 <uxr_reset_stream_storage+0x3a>
 801437a:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801437e:	2500      	movs	r5, #0
 8014380:	4630      	mov	r0, r6
 8014382:	3501      	adds	r5, #1
 8014384:	f005 feba 	bl	801a0fc <uxr_reset_input_best_effort_stream>
 8014388:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801438c:	3602      	adds	r6, #2
 801438e:	42ab      	cmp	r3, r5
 8014390:	d8f6      	bhi.n	8014380 <uxr_reset_stream_storage+0x28>
 8014392:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8014396:	b15b      	cbz	r3, 80143b0 <uxr_reset_stream_storage+0x58>
 8014398:	f104 0618 	add.w	r6, r4, #24
 801439c:	2500      	movs	r5, #0
 801439e:	4630      	mov	r0, r6
 80143a0:	3501      	adds	r5, #1
 80143a2:	f006 f951 	bl	801a648 <uxr_reset_output_reliable_stream>
 80143a6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80143aa:	3628      	adds	r6, #40	@ 0x28
 80143ac:	42ab      	cmp	r3, r5
 80143ae:	d8f6      	bhi.n	801439e <uxr_reset_stream_storage+0x46>
 80143b0:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80143b4:	b15b      	cbz	r3, 80143ce <uxr_reset_stream_storage+0x76>
 80143b6:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80143ba:	2500      	movs	r5, #0
 80143bc:	4630      	mov	r0, r6
 80143be:	3501      	adds	r5, #1
 80143c0:	f005 ff08 	bl	801a1d4 <uxr_reset_input_reliable_stream>
 80143c4:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80143c8:	3618      	adds	r6, #24
 80143ca:	42ab      	cmp	r3, r5
 80143cc:	d8f6      	bhi.n	80143bc <uxr_reset_stream_storage+0x64>
 80143ce:	bd70      	pop	{r4, r5, r6, pc}

080143d0 <uxr_add_output_best_effort_buffer>:
 80143d0:	b510      	push	{r4, lr}
 80143d2:	7c04      	ldrb	r4, [r0, #16]
 80143d4:	b082      	sub	sp, #8
 80143d6:	f104 0c01 	add.w	ip, r4, #1
 80143da:	f880 c010 	strb.w	ip, [r0, #16]
 80143de:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80143e2:	f006 f87b 	bl	801a4dc <uxr_init_output_best_effort_stream>
 80143e6:	2201      	movs	r2, #1
 80143e8:	4620      	mov	r0, r4
 80143ea:	4611      	mov	r1, r2
 80143ec:	b002      	add	sp, #8
 80143ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143f2:	f7ff bf4d 	b.w	8014290 <uxr_stream_id>
 80143f6:	bf00      	nop

080143f8 <uxr_add_output_reliable_buffer>:
 80143f8:	b510      	push	{r4, lr}
 80143fa:	b084      	sub	sp, #16
 80143fc:	4684      	mov	ip, r0
 80143fe:	2028      	movs	r0, #40	@ 0x28
 8014400:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8014404:	9400      	str	r4, [sp, #0]
 8014406:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 801440a:	fb00 c004 	mla	r0, r0, r4, ip
 801440e:	f104 0e01 	add.w	lr, r4, #1
 8014412:	3018      	adds	r0, #24
 8014414:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8014418:	f006 f8e0 	bl	801a5dc <uxr_init_output_reliable_stream>
 801441c:	2201      	movs	r2, #1
 801441e:	2102      	movs	r1, #2
 8014420:	4620      	mov	r0, r4
 8014422:	b004      	add	sp, #16
 8014424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014428:	f7ff bf32 	b.w	8014290 <uxr_stream_id>

0801442c <uxr_add_input_best_effort_buffer>:
 801442c:	b510      	push	{r4, lr}
 801442e:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8014432:	b082      	sub	sp, #8
 8014434:	1c62      	adds	r2, r4, #1
 8014436:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 801443a:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 801443e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8014442:	f005 fe57 	bl	801a0f4 <uxr_init_input_best_effort_stream>
 8014446:	2200      	movs	r2, #0
 8014448:	2101      	movs	r1, #1
 801444a:	4620      	mov	r0, r4
 801444c:	b002      	add	sp, #8
 801444e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014452:	f7ff bf1d 	b.w	8014290 <uxr_stream_id>
 8014456:	bf00      	nop

08014458 <uxr_add_input_reliable_buffer>:
 8014458:	b510      	push	{r4, lr}
 801445a:	b084      	sub	sp, #16
 801445c:	4684      	mov	ip, r0
 801445e:	2018      	movs	r0, #24
 8014460:	9c06      	ldr	r4, [sp, #24]
 8014462:	9400      	str	r4, [sp, #0]
 8014464:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8014468:	fb00 c004 	mla	r0, r0, r4, ip
 801446c:	f104 0e01 	add.w	lr, r4, #1
 8014470:	3048      	adds	r0, #72	@ 0x48
 8014472:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8014476:	f005 fe87 	bl	801a188 <uxr_init_input_reliable_stream>
 801447a:	2200      	movs	r2, #0
 801447c:	2102      	movs	r1, #2
 801447e:	4620      	mov	r0, r4
 8014480:	b004      	add	sp, #16
 8014482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014486:	f7ff bf03 	b.w	8014290 <uxr_stream_id>
 801448a:	bf00      	nop

0801448c <uxr_get_output_best_effort_stream>:
 801448c:	7c03      	ldrb	r3, [r0, #16]
 801448e:	428b      	cmp	r3, r1
 8014490:	bf8c      	ite	hi
 8014492:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8014496:	2000      	movls	r0, #0
 8014498:	4770      	bx	lr
 801449a:	bf00      	nop

0801449c <uxr_get_output_reliable_stream>:
 801449c:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80144a0:	428b      	cmp	r3, r1
 80144a2:	d904      	bls.n	80144ae <uxr_get_output_reliable_stream+0x12>
 80144a4:	2328      	movs	r3, #40	@ 0x28
 80144a6:	fb03 0001 	mla	r0, r3, r1, r0
 80144aa:	3018      	adds	r0, #24
 80144ac:	4770      	bx	lr
 80144ae:	2000      	movs	r0, #0
 80144b0:	4770      	bx	lr
 80144b2:	bf00      	nop

080144b4 <uxr_get_input_best_effort_stream>:
 80144b4:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 80144b8:	428b      	cmp	r3, r1
 80144ba:	d903      	bls.n	80144c4 <uxr_get_input_best_effort_stream+0x10>
 80144bc:	3121      	adds	r1, #33	@ 0x21
 80144be:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80144c2:	4770      	bx	lr
 80144c4:	2000      	movs	r0, #0
 80144c6:	4770      	bx	lr

080144c8 <uxr_get_input_reliable_stream>:
 80144c8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80144cc:	428b      	cmp	r3, r1
 80144ce:	d904      	bls.n	80144da <uxr_get_input_reliable_stream+0x12>
 80144d0:	2318      	movs	r3, #24
 80144d2:	fb03 0001 	mla	r0, r3, r1, r0
 80144d6:	3048      	adds	r0, #72	@ 0x48
 80144d8:	4770      	bx	lr
 80144da:	2000      	movs	r0, #0
 80144dc:	4770      	bx	lr
 80144de:	bf00      	nop

080144e0 <uxr_output_streams_confirmed>:
 80144e0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80144e4:	b183      	cbz	r3, 8014508 <uxr_output_streams_confirmed+0x28>
 80144e6:	b570      	push	{r4, r5, r6, lr}
 80144e8:	4606      	mov	r6, r0
 80144ea:	f100 0518 	add.w	r5, r0, #24
 80144ee:	2400      	movs	r4, #0
 80144f0:	e000      	b.n	80144f4 <uxr_output_streams_confirmed+0x14>
 80144f2:	b140      	cbz	r0, 8014506 <uxr_output_streams_confirmed+0x26>
 80144f4:	4628      	mov	r0, r5
 80144f6:	3401      	adds	r4, #1
 80144f8:	f006 fb1a 	bl	801ab30 <uxr_is_output_up_to_date>
 80144fc:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8014500:	3528      	adds	r5, #40	@ 0x28
 8014502:	42a3      	cmp	r3, r4
 8014504:	d8f5      	bhi.n	80144f2 <uxr_output_streams_confirmed+0x12>
 8014506:	bd70      	pop	{r4, r5, r6, pc}
 8014508:	2001      	movs	r0, #1
 801450a:	4770      	bx	lr

0801450c <uxr_buffer_submessage_header>:
 801450c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801450e:	460e      	mov	r6, r1
 8014510:	2104      	movs	r1, #4
 8014512:	4604      	mov	r4, r0
 8014514:	4615      	mov	r5, r2
 8014516:	461f      	mov	r7, r3
 8014518:	f7fd fd36 	bl	8011f88 <ucdr_align_to>
 801451c:	2301      	movs	r3, #1
 801451e:	4631      	mov	r1, r6
 8014520:	4620      	mov	r0, r4
 8014522:	ea47 0203 	orr.w	r2, r7, r3
 8014526:	7523      	strb	r3, [r4, #20]
 8014528:	462b      	mov	r3, r5
 801452a:	f000 fa29 	bl	8014980 <uxr_serialize_submessage_header>
 801452e:	4620      	mov	r0, r4
 8014530:	f7fd fd40 	bl	8011fb4 <ucdr_buffer_remaining>
 8014534:	42a8      	cmp	r0, r5
 8014536:	bf34      	ite	cc
 8014538:	2000      	movcc	r0, #0
 801453a:	2001      	movcs	r0, #1
 801453c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801453e:	bf00      	nop

08014540 <uxr_read_submessage_header>:
 8014540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014544:	4604      	mov	r4, r0
 8014546:	460d      	mov	r5, r1
 8014548:	2104      	movs	r1, #4
 801454a:	4616      	mov	r6, r2
 801454c:	4698      	mov	r8, r3
 801454e:	f7fd fd1b 	bl	8011f88 <ucdr_align_to>
 8014552:	4620      	mov	r0, r4
 8014554:	f7fd fd2e 	bl	8011fb4 <ucdr_buffer_remaining>
 8014558:	2803      	cmp	r0, #3
 801455a:	bf8c      	ite	hi
 801455c:	2701      	movhi	r7, #1
 801455e:	2700      	movls	r7, #0
 8014560:	d802      	bhi.n	8014568 <uxr_read_submessage_header+0x28>
 8014562:	4638      	mov	r0, r7
 8014564:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014568:	4633      	mov	r3, r6
 801456a:	4642      	mov	r2, r8
 801456c:	4620      	mov	r0, r4
 801456e:	4629      	mov	r1, r5
 8014570:	f000 fa1a 	bl	80149a8 <uxr_deserialize_submessage_header>
 8014574:	f898 3000 	ldrb.w	r3, [r8]
 8014578:	4638      	mov	r0, r7
 801457a:	f003 0201 	and.w	r2, r3, #1
 801457e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8014582:	f888 3000 	strb.w	r3, [r8]
 8014586:	7522      	strb	r2, [r4, #20]
 8014588:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801458c <uxr_submessage_padding>:
 801458c:	f010 0003 	ands.w	r0, r0, #3
 8014590:	bf18      	it	ne
 8014592:	f1c0 0004 	rsbne	r0, r0, #4
 8014596:	4770      	bx	lr

08014598 <uxr_millis>:
 8014598:	b510      	push	{r4, lr}
 801459a:	b084      	sub	sp, #16
 801459c:	2001      	movs	r0, #1
 801459e:	4669      	mov	r1, sp
 80145a0:	f7ed fc0a 	bl	8001db8 <clock_gettime>
 80145a4:	4908      	ldr	r1, [pc, #32]	@ (80145c8 <uxr_millis+0x30>)
 80145a6:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 80145aa:	fba0 0301 	umull	r0, r3, r0, r1
 80145ae:	1900      	adds	r0, r0, r4
 80145b0:	fb01 3102 	mla	r1, r1, r2, r3
 80145b4:	4a05      	ldr	r2, [pc, #20]	@ (80145cc <uxr_millis+0x34>)
 80145b6:	f04f 0300 	mov.w	r3, #0
 80145ba:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 80145be:	f7eb fef7 	bl	80003b0 <__aeabi_ldivmod>
 80145c2:	b004      	add	sp, #16
 80145c4:	bd10      	pop	{r4, pc}
 80145c6:	bf00      	nop
 80145c8:	3b9aca00 	.word	0x3b9aca00
 80145cc:	000f4240 	.word	0x000f4240

080145d0 <uxr_nanos>:
 80145d0:	b510      	push	{r4, lr}
 80145d2:	b084      	sub	sp, #16
 80145d4:	2001      	movs	r0, #1
 80145d6:	4669      	mov	r1, sp
 80145d8:	f7ed fbee 	bl	8001db8 <clock_gettime>
 80145dc:	4a06      	ldr	r2, [pc, #24]	@ (80145f8 <uxr_nanos+0x28>)
 80145de:	9800      	ldr	r0, [sp, #0]
 80145e0:	9902      	ldr	r1, [sp, #8]
 80145e2:	fba0 0302 	umull	r0, r3, r0, r2
 80145e6:	9c01      	ldr	r4, [sp, #4]
 80145e8:	1840      	adds	r0, r0, r1
 80145ea:	fb02 3304 	mla	r3, r2, r4, r3
 80145ee:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 80145f2:	b004      	add	sp, #16
 80145f4:	bd10      	pop	{r4, pc}
 80145f6:	bf00      	nop
 80145f8:	3b9aca00 	.word	0x3b9aca00

080145fc <on_full_output_buffer_fragmented>:
 80145fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014600:	460c      	mov	r4, r1
 8014602:	b08a      	sub	sp, #40	@ 0x28
 8014604:	4606      	mov	r6, r0
 8014606:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 801460a:	f104 0008 	add.w	r0, r4, #8
 801460e:	f7ff ff45 	bl	801449c <uxr_get_output_reliable_stream>
 8014612:	4605      	mov	r5, r0
 8014614:	f006 fa96 	bl	801ab44 <get_available_free_slots>
 8014618:	b968      	cbnz	r0, 8014636 <on_full_output_buffer_fragmented+0x3a>
 801461a:	4620      	mov	r0, r4
 801461c:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8014620:	4798      	blx	r3
 8014622:	b918      	cbnz	r0, 801462c <on_full_output_buffer_fragmented+0x30>
 8014624:	2001      	movs	r0, #1
 8014626:	b00a      	add	sp, #40	@ 0x28
 8014628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801462c:	4628      	mov	r0, r5
 801462e:	f006 fa89 	bl	801ab44 <get_available_free_slots>
 8014632:	2800      	cmp	r0, #0
 8014634:	d0f6      	beq.n	8014624 <on_full_output_buffer_fragmented+0x28>
 8014636:	8929      	ldrh	r1, [r5, #8]
 8014638:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801463c:	89eb      	ldrh	r3, [r5, #14]
 801463e:	7b28      	ldrb	r0, [r5, #12]
 8014640:	686f      	ldr	r7, [r5, #4]
 8014642:	1a12      	subs	r2, r2, r0
 8014644:	fbb3 f0f1 	udiv	r0, r3, r1
 8014648:	fbb7 f7f1 	udiv	r7, r7, r1
 801464c:	fb01 3110 	mls	r1, r1, r0, r3
 8014650:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8014654:	b289      	uxth	r1, r1
 8014656:	fb07 f101 	mul.w	r1, r7, r1
 801465a:	3f04      	subs	r7, #4
 801465c:	443a      	add	r2, r7
 801465e:	3104      	adds	r1, #4
 8014660:	fa1f f882 	uxth.w	r8, r2
 8014664:	463a      	mov	r2, r7
 8014666:	eba3 0308 	sub.w	r3, r3, r8
 801466a:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 801466e:	682b      	ldr	r3, [r5, #0]
 8014670:	4419      	add	r1, r3
 8014672:	2300      	movs	r3, #0
 8014674:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8014678:	9000      	str	r0, [sp, #0]
 801467a:	a802      	add	r0, sp, #8
 801467c:	f7fd fc56 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 8014680:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8014684:	f102 0308 	add.w	r3, r2, #8
 8014688:	42bb      	cmp	r3, r7
 801468a:	d927      	bls.n	80146dc <on_full_output_buffer_fragmented+0xe0>
 801468c:	4642      	mov	r2, r8
 801468e:	2300      	movs	r3, #0
 8014690:	210d      	movs	r1, #13
 8014692:	a802      	add	r0, sp, #8
 8014694:	f7ff ff3a 	bl	801450c <uxr_buffer_submessage_header>
 8014698:	8929      	ldrh	r1, [r5, #8]
 801469a:	89eb      	ldrh	r3, [r5, #14]
 801469c:	686a      	ldr	r2, [r5, #4]
 801469e:	fbb3 f0f1 	udiv	r0, r3, r1
 80146a2:	fbb2 f2f1 	udiv	r2, r2, r1
 80146a6:	fb01 3310 	mls	r3, r1, r0, r3
 80146aa:	b29b      	uxth	r3, r3
 80146ac:	fb02 f303 	mul.w	r3, r2, r3
 80146b0:	682a      	ldr	r2, [r5, #0]
 80146b2:	50d7      	str	r7, [r2, r3]
 80146b4:	2101      	movs	r1, #1
 80146b6:	89e8      	ldrh	r0, [r5, #14]
 80146b8:	f006 fa66 	bl	801ab88 <uxr_seq_num_add>
 80146bc:	9904      	ldr	r1, [sp, #16]
 80146be:	9a03      	ldr	r2, [sp, #12]
 80146c0:	81e8      	strh	r0, [r5, #14]
 80146c2:	4630      	mov	r0, r6
 80146c4:	1a52      	subs	r2, r2, r1
 80146c6:	f7fd fc43 	bl	8011f50 <ucdr_init_buffer>
 80146ca:	4630      	mov	r0, r6
 80146cc:	4622      	mov	r2, r4
 80146ce:	490f      	ldr	r1, [pc, #60]	@ (801470c <on_full_output_buffer_fragmented+0x110>)
 80146d0:	f7fd fc12 	bl	8011ef8 <ucdr_set_on_full_buffer_callback>
 80146d4:	2000      	movs	r0, #0
 80146d6:	b00a      	add	sp, #40	@ 0x28
 80146d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80146dc:	b292      	uxth	r2, r2
 80146de:	2302      	movs	r3, #2
 80146e0:	210d      	movs	r1, #13
 80146e2:	a802      	add	r0, sp, #8
 80146e4:	f7ff ff12 	bl	801450c <uxr_buffer_submessage_header>
 80146e8:	8928      	ldrh	r0, [r5, #8]
 80146ea:	89eb      	ldrh	r3, [r5, #14]
 80146ec:	6869      	ldr	r1, [r5, #4]
 80146ee:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 80146f2:	fbb3 f7f0 	udiv	r7, r3, r0
 80146f6:	fbb1 f1f0 	udiv	r1, r1, r0
 80146fa:	fb00 3317 	mls	r3, r0, r7, r3
 80146fe:	3208      	adds	r2, #8
 8014700:	b29b      	uxth	r3, r3
 8014702:	fb01 f303 	mul.w	r3, r1, r3
 8014706:	6829      	ldr	r1, [r5, #0]
 8014708:	50ca      	str	r2, [r1, r3]
 801470a:	e7d3      	b.n	80146b4 <on_full_output_buffer_fragmented+0xb8>
 801470c:	080145fd 	.word	0x080145fd

08014710 <uxr_prepare_output_stream>:
 8014710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014712:	b087      	sub	sp, #28
 8014714:	2707      	movs	r7, #7
 8014716:	2500      	movs	r5, #0
 8014718:	461c      	mov	r4, r3
 801471a:	4606      	mov	r6, r0
 801471c:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8014720:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8014722:	e9cd 7500 	strd	r7, r5, [sp]
 8014726:	3204      	adds	r2, #4
 8014728:	f7fe ffc8 	bl	80136bc <uxr_prepare_stream_to_write_submessage>
 801472c:	f080 0201 	eor.w	r2, r0, #1
 8014730:	b2d2      	uxtb	r2, r2
 8014732:	75a2      	strb	r2, [r4, #22]
 8014734:	b112      	cbz	r2, 801473c <uxr_prepare_output_stream+0x2c>
 8014736:	4628      	mov	r0, r5
 8014738:	b007      	add	sp, #28
 801473a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801473c:	aa05      	add	r2, sp, #20
 801473e:	9902      	ldr	r1, [sp, #8]
 8014740:	4630      	mov	r0, r6
 8014742:	f7ff f8f7 	bl	8013934 <uxr_init_base_object_request>
 8014746:	a905      	add	r1, sp, #20
 8014748:	4605      	mov	r5, r0
 801474a:	4620      	mov	r0, r4
 801474c:	f000 ff9c 	bl	8015688 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014750:	69a6      	ldr	r6, [r4, #24]
 8014752:	69e7      	ldr	r7, [r4, #28]
 8014754:	4620      	mov	r0, r4
 8014756:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 801475a:	1a52      	subs	r2, r2, r1
 801475c:	f7fd fbf8 	bl	8011f50 <ucdr_init_buffer>
 8014760:	4620      	mov	r0, r4
 8014762:	463a      	mov	r2, r7
 8014764:	4631      	mov	r1, r6
 8014766:	f7fd fbc7 	bl	8011ef8 <ucdr_set_on_full_buffer_callback>
 801476a:	4628      	mov	r0, r5
 801476c:	b007      	add	sp, #28
 801476e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014770 <uxr_prepare_output_stream_fragmented>:
 8014770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014774:	b091      	sub	sp, #68	@ 0x44
 8014776:	4605      	mov	r5, r0
 8014778:	3008      	adds	r0, #8
 801477a:	461e      	mov	r6, r3
 801477c:	9105      	str	r1, [sp, #20]
 801477e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8014782:	9204      	str	r2, [sp, #16]
 8014784:	f7ff fe8a 	bl	801449c <uxr_get_output_reliable_stream>
 8014788:	f89d 3016 	ldrb.w	r3, [sp, #22]
 801478c:	2b01      	cmp	r3, #1
 801478e:	f000 8093 	beq.w	80148b8 <uxr_prepare_output_stream_fragmented+0x148>
 8014792:	4604      	mov	r4, r0
 8014794:	2800      	cmp	r0, #0
 8014796:	f000 808f 	beq.w	80148b8 <uxr_prepare_output_stream_fragmented+0x148>
 801479a:	f006 f9d3 	bl	801ab44 <get_available_free_slots>
 801479e:	2800      	cmp	r0, #0
 80147a0:	f000 8085 	beq.w	80148ae <uxr_prepare_output_stream_fragmented+0x13e>
 80147a4:	8923      	ldrh	r3, [r4, #8]
 80147a6:	89e7      	ldrh	r7, [r4, #14]
 80147a8:	6862      	ldr	r2, [r4, #4]
 80147aa:	fbb7 f9f3 	udiv	r9, r7, r3
 80147ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80147b2:	fb03 7919 	mls	r9, r3, r9, r7
 80147b6:	6823      	ldr	r3, [r4, #0]
 80147b8:	f1a2 0b04 	sub.w	fp, r2, #4
 80147bc:	9203      	str	r2, [sp, #12]
 80147be:	fa1f f989 	uxth.w	r9, r9
 80147c2:	fb02 f909 	mul.w	r9, r2, r9
 80147c6:	f109 0904 	add.w	r9, r9, #4
 80147ca:	4499      	add	r9, r3
 80147cc:	7b23      	ldrb	r3, [r4, #12]
 80147ce:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80147d2:	4543      	cmp	r3, r8
 80147d4:	d37c      	bcc.n	80148d0 <uxr_prepare_output_stream_fragmented+0x160>
 80147d6:	f1ab 0a04 	sub.w	sl, fp, #4
 80147da:	465a      	mov	r2, fp
 80147dc:	4649      	mov	r1, r9
 80147de:	a808      	add	r0, sp, #32
 80147e0:	ebaa 0a03 	sub.w	sl, sl, r3
 80147e4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80147e6:	f8cd 8000 	str.w	r8, [sp]
 80147ea:	3308      	adds	r3, #8
 80147ec:	fa1f fa8a 	uxth.w	sl, sl
 80147f0:	9302      	str	r3, [sp, #8]
 80147f2:	2300      	movs	r3, #0
 80147f4:	f7fd fb9a 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 80147f8:	9b02      	ldr	r3, [sp, #8]
 80147fa:	4652      	mov	r2, sl
 80147fc:	210d      	movs	r1, #13
 80147fe:	455b      	cmp	r3, fp
 8014800:	bf34      	ite	cc
 8014802:	2302      	movcc	r3, #2
 8014804:	2300      	movcs	r3, #0
 8014806:	a808      	add	r0, sp, #32
 8014808:	f7ff fe80 	bl	801450c <uxr_buffer_submessage_header>
 801480c:	8921      	ldrh	r1, [r4, #8]
 801480e:	6863      	ldr	r3, [r4, #4]
 8014810:	4638      	mov	r0, r7
 8014812:	fbb7 f2f1 	udiv	r2, r7, r1
 8014816:	fbb3 f3f1 	udiv	r3, r3, r1
 801481a:	fb01 7212 	mls	r2, r1, r2, r7
 801481e:	2101      	movs	r1, #1
 8014820:	b292      	uxth	r2, r2
 8014822:	fb02 f303 	mul.w	r3, r2, r3
 8014826:	6822      	ldr	r2, [r4, #0]
 8014828:	f842 b003 	str.w	fp, [r2, r3]
 801482c:	f006 f9ac 	bl	801ab88 <uxr_seq_num_add>
 8014830:	9b03      	ldr	r3, [sp, #12]
 8014832:	f108 0104 	add.w	r1, r8, #4
 8014836:	4607      	mov	r7, r0
 8014838:	f1a3 0208 	sub.w	r2, r3, #8
 801483c:	4630      	mov	r0, r6
 801483e:	4449      	add	r1, r9
 8014840:	eba2 0208 	sub.w	r2, r2, r8
 8014844:	f7fd fb84 	bl	8011f50 <ucdr_init_buffer>
 8014848:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801484a:	2107      	movs	r1, #7
 801484c:	81e7      	strh	r7, [r4, #14]
 801484e:	1d1a      	adds	r2, r3, #4
 8014850:	2300      	movs	r3, #0
 8014852:	4630      	mov	r0, r6
 8014854:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8014858:	bf28      	it	cs
 801485a:	461a      	movcs	r2, r3
 801485c:	b292      	uxth	r2, r2
 801485e:	f7ff fe55 	bl	801450c <uxr_buffer_submessage_header>
 8014862:	aa07      	add	r2, sp, #28
 8014864:	9904      	ldr	r1, [sp, #16]
 8014866:	4628      	mov	r0, r5
 8014868:	f7ff f864 	bl	8013934 <uxr_init_base_object_request>
 801486c:	4604      	mov	r4, r0
 801486e:	b320      	cbz	r0, 80148ba <uxr_prepare_output_stream_fragmented+0x14a>
 8014870:	a907      	add	r1, sp, #28
 8014872:	4630      	mov	r0, r6
 8014874:	f000 ff08 	bl	8015688 <uxr_serialize_WRITE_DATA_Payload_Data>
 8014878:	4630      	mov	r0, r6
 801487a:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 801487e:	1a52      	subs	r2, r2, r1
 8014880:	f7fd fb66 	bl	8011f50 <ucdr_init_buffer>
 8014884:	9b05      	ldr	r3, [sp, #20]
 8014886:	9a02      	ldr	r2, [sp, #8]
 8014888:	4630      	mov	r0, r6
 801488a:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 801488e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8014890:	f8c5 20c4 	str.w	r2, [r5, #196]	@ 0xc4
 8014894:	462a      	mov	r2, r5
 8014896:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 801489a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801489c:	4918      	ldr	r1, [pc, #96]	@ (8014900 <uxr_prepare_output_stream_fragmented+0x190>)
 801489e:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 80148a2:	f7fd fb29 	bl	8011ef8 <ucdr_set_on_full_buffer_callback>
 80148a6:	4620      	mov	r0, r4
 80148a8:	b011      	add	sp, #68	@ 0x44
 80148aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148ae:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80148b0:	4628      	mov	r0, r5
 80148b2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80148b4:	4798      	blx	r3
 80148b6:	b920      	cbnz	r0, 80148c2 <uxr_prepare_output_stream_fragmented+0x152>
 80148b8:	2400      	movs	r4, #0
 80148ba:	4620      	mov	r0, r4
 80148bc:	b011      	add	sp, #68	@ 0x44
 80148be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148c2:	4620      	mov	r0, r4
 80148c4:	f006 f93e 	bl	801ab44 <get_available_free_slots>
 80148c8:	2800      	cmp	r0, #0
 80148ca:	f47f af6b 	bne.w	80147a4 <uxr_prepare_output_stream_fragmented+0x34>
 80148ce:	e7f3      	b.n	80148b8 <uxr_prepare_output_stream_fragmented+0x148>
 80148d0:	4638      	mov	r0, r7
 80148d2:	2101      	movs	r1, #1
 80148d4:	f006 f958 	bl	801ab88 <uxr_seq_num_add>
 80148d8:	8922      	ldrh	r2, [r4, #8]
 80148da:	6863      	ldr	r3, [r4, #4]
 80148dc:	4607      	mov	r7, r0
 80148de:	fbb3 f9f2 	udiv	r9, r3, r2
 80148e2:	fbb0 f3f2 	udiv	r3, r0, r2
 80148e6:	fb02 0313 	mls	r3, r2, r3, r0
 80148ea:	b29b      	uxth	r3, r3
 80148ec:	fb03 f909 	mul.w	r9, r3, r9
 80148f0:	6823      	ldr	r3, [r4, #0]
 80148f2:	f109 0904 	add.w	r9, r9, #4
 80148f6:	4499      	add	r9, r3
 80148f8:	7b23      	ldrb	r3, [r4, #12]
 80148fa:	f859 8c04 	ldr.w	r8, [r9, #-4]
 80148fe:	e76a      	b.n	80147d6 <uxr_prepare_output_stream_fragmented+0x66>
 8014900:	080145fd 	.word	0x080145fd

08014904 <uxr_serialize_message_header>:
 8014904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014906:	4616      	mov	r6, r2
 8014908:	b083      	sub	sp, #12
 801490a:	4604      	mov	r4, r0
 801490c:	460d      	mov	r5, r1
 801490e:	9301      	str	r3, [sp, #4]
 8014910:	9f08      	ldr	r7, [sp, #32]
 8014912:	f7fc fa41 	bl	8010d98 <ucdr_serialize_uint8_t>
 8014916:	4631      	mov	r1, r6
 8014918:	4620      	mov	r0, r4
 801491a:	f7fc fa3d 	bl	8010d98 <ucdr_serialize_uint8_t>
 801491e:	9a01      	ldr	r2, [sp, #4]
 8014920:	2101      	movs	r1, #1
 8014922:	4620      	mov	r0, r4
 8014924:	f7fc fae4 	bl	8010ef0 <ucdr_serialize_endian_uint16_t>
 8014928:	062b      	lsls	r3, r5, #24
 801492a:	d501      	bpl.n	8014930 <uxr_serialize_message_header+0x2c>
 801492c:	b003      	add	sp, #12
 801492e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014930:	2204      	movs	r2, #4
 8014932:	4639      	mov	r1, r7
 8014934:	4620      	mov	r0, r4
 8014936:	b003      	add	sp, #12
 8014938:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801493c:	f005 ba4c 	b.w	8019dd8 <ucdr_serialize_array_uint8_t>

08014940 <uxr_deserialize_message_header>:
 8014940:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014942:	4616      	mov	r6, r2
 8014944:	b083      	sub	sp, #12
 8014946:	4604      	mov	r4, r0
 8014948:	460d      	mov	r5, r1
 801494a:	9301      	str	r3, [sp, #4]
 801494c:	9f08      	ldr	r7, [sp, #32]
 801494e:	f7fc fa39 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 8014952:	4631      	mov	r1, r6
 8014954:	4620      	mov	r0, r4
 8014956:	f7fc fa35 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 801495a:	9a01      	ldr	r2, [sp, #4]
 801495c:	2101      	movs	r1, #1
 801495e:	4620      	mov	r0, r4
 8014960:	f7fc fbba 	bl	80110d8 <ucdr_deserialize_endian_uint16_t>
 8014964:	f995 3000 	ldrsb.w	r3, [r5]
 8014968:	2b00      	cmp	r3, #0
 801496a:	da01      	bge.n	8014970 <uxr_deserialize_message_header+0x30>
 801496c:	b003      	add	sp, #12
 801496e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014970:	2204      	movs	r2, #4
 8014972:	4639      	mov	r1, r7
 8014974:	4620      	mov	r0, r4
 8014976:	b003      	add	sp, #12
 8014978:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801497c:	f005 ba90 	b.w	8019ea0 <ucdr_deserialize_array_uint8_t>

08014980 <uxr_serialize_submessage_header>:
 8014980:	b530      	push	{r4, r5, lr}
 8014982:	4615      	mov	r5, r2
 8014984:	b083      	sub	sp, #12
 8014986:	4604      	mov	r4, r0
 8014988:	9301      	str	r3, [sp, #4]
 801498a:	f7fc fa05 	bl	8010d98 <ucdr_serialize_uint8_t>
 801498e:	4629      	mov	r1, r5
 8014990:	4620      	mov	r0, r4
 8014992:	f7fc fa01 	bl	8010d98 <ucdr_serialize_uint8_t>
 8014996:	9a01      	ldr	r2, [sp, #4]
 8014998:	2101      	movs	r1, #1
 801499a:	4620      	mov	r0, r4
 801499c:	b003      	add	sp, #12
 801499e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149a2:	f7fc baa5 	b.w	8010ef0 <ucdr_serialize_endian_uint16_t>
 80149a6:	bf00      	nop

080149a8 <uxr_deserialize_submessage_header>:
 80149a8:	b530      	push	{r4, r5, lr}
 80149aa:	4615      	mov	r5, r2
 80149ac:	b083      	sub	sp, #12
 80149ae:	4604      	mov	r4, r0
 80149b0:	9301      	str	r3, [sp, #4]
 80149b2:	f7fc fa07 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 80149b6:	4629      	mov	r1, r5
 80149b8:	4620      	mov	r0, r4
 80149ba:	f7fc fa03 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 80149be:	9a01      	ldr	r2, [sp, #4]
 80149c0:	2101      	movs	r1, #1
 80149c2:	4620      	mov	r0, r4
 80149c4:	b003      	add	sp, #12
 80149c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149ca:	f7fc bb85 	b.w	80110d8 <ucdr_deserialize_endian_uint16_t>
 80149ce:	bf00      	nop

080149d0 <uxr_serialize_CLIENT_Representation>:
 80149d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80149d4:	2204      	movs	r2, #4
 80149d6:	460e      	mov	r6, r1
 80149d8:	4605      	mov	r5, r0
 80149da:	f005 f9fd 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 80149de:	4607      	mov	r7, r0
 80149e0:	2202      	movs	r2, #2
 80149e2:	1d31      	adds	r1, r6, #4
 80149e4:	4628      	mov	r0, r5
 80149e6:	f005 f9f7 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 80149ea:	4038      	ands	r0, r7
 80149ec:	2202      	movs	r2, #2
 80149ee:	1db1      	adds	r1, r6, #6
 80149f0:	b2c7      	uxtb	r7, r0
 80149f2:	4628      	mov	r0, r5
 80149f4:	f005 f9f0 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 80149f8:	2204      	movs	r2, #4
 80149fa:	4007      	ands	r7, r0
 80149fc:	f106 0108 	add.w	r1, r6, #8
 8014a00:	4628      	mov	r0, r5
 8014a02:	f005 f9e9 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 8014a06:	4007      	ands	r7, r0
 8014a08:	7b31      	ldrb	r1, [r6, #12]
 8014a0a:	4628      	mov	r0, r5
 8014a0c:	f7fc f9c4 	bl	8010d98 <ucdr_serialize_uint8_t>
 8014a10:	7b71      	ldrb	r1, [r6, #13]
 8014a12:	4007      	ands	r7, r0
 8014a14:	4628      	mov	r0, r5
 8014a16:	f7fc f991 	bl	8010d3c <ucdr_serialize_bool>
 8014a1a:	7b73      	ldrb	r3, [r6, #13]
 8014a1c:	ea07 0800 	and.w	r8, r7, r0
 8014a20:	b93b      	cbnz	r3, 8014a32 <uxr_serialize_CLIENT_Representation+0x62>
 8014a22:	8bb1      	ldrh	r1, [r6, #28]
 8014a24:	4628      	mov	r0, r5
 8014a26:	f7fc f9e3 	bl	8010df0 <ucdr_serialize_uint16_t>
 8014a2a:	ea08 0000 	and.w	r0, r8, r0
 8014a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014a32:	6931      	ldr	r1, [r6, #16]
 8014a34:	4628      	mov	r0, r5
 8014a36:	f7fc fbc5 	bl	80111c4 <ucdr_serialize_uint32_t>
 8014a3a:	6933      	ldr	r3, [r6, #16]
 8014a3c:	b1e3      	cbz	r3, 8014a78 <uxr_serialize_CLIENT_Representation+0xa8>
 8014a3e:	b1c0      	cbz	r0, 8014a72 <uxr_serialize_CLIENT_Representation+0xa2>
 8014a40:	4637      	mov	r7, r6
 8014a42:	f04f 0900 	mov.w	r9, #0
 8014a46:	e000      	b.n	8014a4a <uxr_serialize_CLIENT_Representation+0x7a>
 8014a48:	b19c      	cbz	r4, 8014a72 <uxr_serialize_CLIENT_Representation+0xa2>
 8014a4a:	6979      	ldr	r1, [r7, #20]
 8014a4c:	4628      	mov	r0, r5
 8014a4e:	f005 fb39 	bl	801a0c4 <ucdr_serialize_string>
 8014a52:	69b9      	ldr	r1, [r7, #24]
 8014a54:	4604      	mov	r4, r0
 8014a56:	4628      	mov	r0, r5
 8014a58:	f005 fb34 	bl	801a0c4 <ucdr_serialize_string>
 8014a5c:	f109 0901 	add.w	r9, r9, #1
 8014a60:	6933      	ldr	r3, [r6, #16]
 8014a62:	4004      	ands	r4, r0
 8014a64:	3708      	adds	r7, #8
 8014a66:	4599      	cmp	r9, r3
 8014a68:	b2e4      	uxtb	r4, r4
 8014a6a:	d3ed      	bcc.n	8014a48 <uxr_serialize_CLIENT_Representation+0x78>
 8014a6c:	ea08 0804 	and.w	r8, r8, r4
 8014a70:	e7d7      	b.n	8014a22 <uxr_serialize_CLIENT_Representation+0x52>
 8014a72:	f04f 0800 	mov.w	r8, #0
 8014a76:	e7d4      	b.n	8014a22 <uxr_serialize_CLIENT_Representation+0x52>
 8014a78:	ea08 0800 	and.w	r8, r8, r0
 8014a7c:	e7d1      	b.n	8014a22 <uxr_serialize_CLIENT_Representation+0x52>
 8014a7e:	bf00      	nop

08014a80 <uxr_deserialize_CLIENT_Representation>:
 8014a80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a84:	2204      	movs	r2, #4
 8014a86:	460c      	mov	r4, r1
 8014a88:	4605      	mov	r5, r0
 8014a8a:	f005 fa09 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8014a8e:	4607      	mov	r7, r0
 8014a90:	2202      	movs	r2, #2
 8014a92:	1d21      	adds	r1, r4, #4
 8014a94:	4628      	mov	r0, r5
 8014a96:	f005 fa03 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8014a9a:	4038      	ands	r0, r7
 8014a9c:	2202      	movs	r2, #2
 8014a9e:	1da1      	adds	r1, r4, #6
 8014aa0:	b2c6      	uxtb	r6, r0
 8014aa2:	4628      	mov	r0, r5
 8014aa4:	f005 f9fc 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8014aa8:	2204      	movs	r2, #4
 8014aaa:	4006      	ands	r6, r0
 8014aac:	f104 0108 	add.w	r1, r4, #8
 8014ab0:	4628      	mov	r0, r5
 8014ab2:	f005 f9f5 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8014ab6:	4006      	ands	r6, r0
 8014ab8:	f104 010c 	add.w	r1, r4, #12
 8014abc:	4628      	mov	r0, r5
 8014abe:	f7fc f981 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 8014ac2:	f104 010d 	add.w	r1, r4, #13
 8014ac6:	ea06 0700 	and.w	r7, r6, r0
 8014aca:	4628      	mov	r0, r5
 8014acc:	f7fc f94c 	bl	8010d68 <ucdr_deserialize_bool>
 8014ad0:	7b63      	ldrb	r3, [r4, #13]
 8014ad2:	4007      	ands	r7, r0
 8014ad4:	b93b      	cbnz	r3, 8014ae6 <uxr_deserialize_CLIENT_Representation+0x66>
 8014ad6:	f104 011c 	add.w	r1, r4, #28
 8014ada:	4628      	mov	r0, r5
 8014adc:	f7fc fa88 	bl	8010ff0 <ucdr_deserialize_uint16_t>
 8014ae0:	4038      	ands	r0, r7
 8014ae2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014ae6:	f104 0110 	add.w	r1, r4, #16
 8014aea:	4628      	mov	r0, r5
 8014aec:	f7fc fc9a 	bl	8011424 <ucdr_deserialize_uint32_t>
 8014af0:	6923      	ldr	r3, [r4, #16]
 8014af2:	2b01      	cmp	r3, #1
 8014af4:	d903      	bls.n	8014afe <uxr_deserialize_CLIENT_Representation+0x7e>
 8014af6:	2301      	movs	r3, #1
 8014af8:	2700      	movs	r7, #0
 8014afa:	75ab      	strb	r3, [r5, #22]
 8014afc:	e7eb      	b.n	8014ad6 <uxr_deserialize_CLIENT_Representation+0x56>
 8014afe:	b30b      	cbz	r3, 8014b44 <uxr_deserialize_CLIENT_Representation+0xc4>
 8014b00:	b1f0      	cbz	r0, 8014b40 <uxr_deserialize_CLIENT_Representation+0xc0>
 8014b02:	46a0      	mov	r8, r4
 8014b04:	f04f 0900 	mov.w	r9, #0
 8014b08:	e000      	b.n	8014b0c <uxr_deserialize_CLIENT_Representation+0x8c>
 8014b0a:	b1ce      	cbz	r6, 8014b40 <uxr_deserialize_CLIENT_Representation+0xc0>
 8014b0c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8014b10:	f108 0808 	add.w	r8, r8, #8
 8014b14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b18:	4628      	mov	r0, r5
 8014b1a:	f005 fae3 	bl	801a0e4 <ucdr_deserialize_string>
 8014b1e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014b22:	4606      	mov	r6, r0
 8014b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014b28:	4628      	mov	r0, r5
 8014b2a:	f109 0901 	add.w	r9, r9, #1
 8014b2e:	f005 fad9 	bl	801a0e4 <ucdr_deserialize_string>
 8014b32:	6923      	ldr	r3, [r4, #16]
 8014b34:	4006      	ands	r6, r0
 8014b36:	4599      	cmp	r9, r3
 8014b38:	b2f6      	uxtb	r6, r6
 8014b3a:	d3e6      	bcc.n	8014b0a <uxr_deserialize_CLIENT_Representation+0x8a>
 8014b3c:	4037      	ands	r7, r6
 8014b3e:	e7ca      	b.n	8014ad6 <uxr_deserialize_CLIENT_Representation+0x56>
 8014b40:	2700      	movs	r7, #0
 8014b42:	e7c8      	b.n	8014ad6 <uxr_deserialize_CLIENT_Representation+0x56>
 8014b44:	4007      	ands	r7, r0
 8014b46:	e7c6      	b.n	8014ad6 <uxr_deserialize_CLIENT_Representation+0x56>

08014b48 <uxr_serialize_AGENT_Representation>:
 8014b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014b4c:	2204      	movs	r2, #4
 8014b4e:	460f      	mov	r7, r1
 8014b50:	4605      	mov	r5, r0
 8014b52:	f005 f941 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 8014b56:	4604      	mov	r4, r0
 8014b58:	2202      	movs	r2, #2
 8014b5a:	1d39      	adds	r1, r7, #4
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	f005 f93b 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 8014b62:	4020      	ands	r0, r4
 8014b64:	2202      	movs	r2, #2
 8014b66:	1db9      	adds	r1, r7, #6
 8014b68:	b2c4      	uxtb	r4, r0
 8014b6a:	4628      	mov	r0, r5
 8014b6c:	f005 f934 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 8014b70:	7a39      	ldrb	r1, [r7, #8]
 8014b72:	4004      	ands	r4, r0
 8014b74:	4628      	mov	r0, r5
 8014b76:	f7fc f8e1 	bl	8010d3c <ucdr_serialize_bool>
 8014b7a:	7a3b      	ldrb	r3, [r7, #8]
 8014b7c:	ea00 0804 	and.w	r8, r0, r4
 8014b80:	b913      	cbnz	r3, 8014b88 <uxr_serialize_AGENT_Representation+0x40>
 8014b82:	4640      	mov	r0, r8
 8014b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014b88:	68f9      	ldr	r1, [r7, #12]
 8014b8a:	4628      	mov	r0, r5
 8014b8c:	f7fc fb1a 	bl	80111c4 <ucdr_serialize_uint32_t>
 8014b90:	68fb      	ldr	r3, [r7, #12]
 8014b92:	b303      	cbz	r3, 8014bd6 <uxr_serialize_AGENT_Representation+0x8e>
 8014b94:	b1d0      	cbz	r0, 8014bcc <uxr_serialize_AGENT_Representation+0x84>
 8014b96:	463e      	mov	r6, r7
 8014b98:	f04f 0900 	mov.w	r9, #0
 8014b9c:	e000      	b.n	8014ba0 <uxr_serialize_AGENT_Representation+0x58>
 8014b9e:	b1ac      	cbz	r4, 8014bcc <uxr_serialize_AGENT_Representation+0x84>
 8014ba0:	6931      	ldr	r1, [r6, #16]
 8014ba2:	4628      	mov	r0, r5
 8014ba4:	f005 fa8e 	bl	801a0c4 <ucdr_serialize_string>
 8014ba8:	6971      	ldr	r1, [r6, #20]
 8014baa:	4604      	mov	r4, r0
 8014bac:	4628      	mov	r0, r5
 8014bae:	f005 fa89 	bl	801a0c4 <ucdr_serialize_string>
 8014bb2:	f109 0901 	add.w	r9, r9, #1
 8014bb6:	68fb      	ldr	r3, [r7, #12]
 8014bb8:	4004      	ands	r4, r0
 8014bba:	3608      	adds	r6, #8
 8014bbc:	4599      	cmp	r9, r3
 8014bbe:	b2e4      	uxtb	r4, r4
 8014bc0:	d3ed      	bcc.n	8014b9e <uxr_serialize_AGENT_Representation+0x56>
 8014bc2:	ea08 0804 	and.w	r8, r8, r4
 8014bc6:	4640      	mov	r0, r8
 8014bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bcc:	f04f 0800 	mov.w	r8, #0
 8014bd0:	4640      	mov	r0, r8
 8014bd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014bd6:	ea08 0800 	and.w	r8, r8, r0
 8014bda:	e7d2      	b.n	8014b82 <uxr_serialize_AGENT_Representation+0x3a>

08014bdc <uxr_serialize_DATAWRITER_Representation>:
 8014bdc:	b570      	push	{r4, r5, r6, lr}
 8014bde:	460d      	mov	r5, r1
 8014be0:	7809      	ldrb	r1, [r1, #0]
 8014be2:	4606      	mov	r6, r0
 8014be4:	f7fc f8d8 	bl	8010d98 <ucdr_serialize_uint8_t>
 8014be8:	4604      	mov	r4, r0
 8014bea:	b130      	cbz	r0, 8014bfa <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014bec:	782b      	ldrb	r3, [r5, #0]
 8014bee:	2b02      	cmp	r3, #2
 8014bf0:	d00c      	beq.n	8014c0c <uxr_serialize_DATAWRITER_Representation+0x30>
 8014bf2:	2b03      	cmp	r3, #3
 8014bf4:	d010      	beq.n	8014c18 <uxr_serialize_DATAWRITER_Representation+0x3c>
 8014bf6:	2b01      	cmp	r3, #1
 8014bf8:	d008      	beq.n	8014c0c <uxr_serialize_DATAWRITER_Representation+0x30>
 8014bfa:	2202      	movs	r2, #2
 8014bfc:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8014c00:	4630      	mov	r0, r6
 8014c02:	f005 f8e9 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 8014c06:	4020      	ands	r0, r4
 8014c08:	b2c0      	uxtb	r0, r0
 8014c0a:	bd70      	pop	{r4, r5, r6, pc}
 8014c0c:	6869      	ldr	r1, [r5, #4]
 8014c0e:	4630      	mov	r0, r6
 8014c10:	f005 fa58 	bl	801a0c4 <ucdr_serialize_string>
 8014c14:	4604      	mov	r4, r0
 8014c16:	e7f0      	b.n	8014bfa <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014c18:	4629      	mov	r1, r5
 8014c1a:	4630      	mov	r0, r6
 8014c1c:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8014c20:	3104      	adds	r1, #4
 8014c22:	f7fd fa35 	bl	8012090 <ucdr_serialize_sequence_uint8_t>
 8014c26:	4604      	mov	r4, r0
 8014c28:	e7e7      	b.n	8014bfa <uxr_serialize_DATAWRITER_Representation+0x1e>
 8014c2a:	bf00      	nop

08014c2c <uxr_serialize_ObjectVariant.part.0>:
 8014c2c:	b570      	push	{r4, r5, r6, lr}
 8014c2e:	780b      	ldrb	r3, [r1, #0]
 8014c30:	460c      	mov	r4, r1
 8014c32:	4605      	mov	r5, r0
 8014c34:	3b01      	subs	r3, #1
 8014c36:	2b0d      	cmp	r3, #13
 8014c38:	d854      	bhi.n	8014ce4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014c3a:	e8df f003 	tbb	[pc, r3]
 8014c3e:	0730      	.short	0x0730
 8014c40:	07071b1b 	.word	0x07071b1b
 8014c44:	0c530707 	.word	0x0c530707
 8014c48:	494e0c0c 	.word	0x494e0c0c
 8014c4c:	3104      	adds	r1, #4
 8014c4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c52:	f7ff bfc3 	b.w	8014bdc <uxr_serialize_DATAWRITER_Representation>
 8014c56:	7909      	ldrb	r1, [r1, #4]
 8014c58:	f7fc f89e 	bl	8010d98 <ucdr_serialize_uint8_t>
 8014c5c:	b1e8      	cbz	r0, 8014c9a <uxr_serialize_ObjectVariant.part.0+0x6e>
 8014c5e:	7923      	ldrb	r3, [r4, #4]
 8014c60:	2b01      	cmp	r3, #1
 8014c62:	d001      	beq.n	8014c68 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8014c64:	2b02      	cmp	r3, #2
 8014c66:	d13d      	bne.n	8014ce4 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8014c68:	68a1      	ldr	r1, [r4, #8]
 8014c6a:	4628      	mov	r0, r5
 8014c6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014c70:	f005 ba28 	b.w	801a0c4 <ucdr_serialize_string>
 8014c74:	7909      	ldrb	r1, [r1, #4]
 8014c76:	f7fc f88f 	bl	8010d98 <ucdr_serialize_uint8_t>
 8014c7a:	4606      	mov	r6, r0
 8014c7c:	b120      	cbz	r0, 8014c88 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014c7e:	7923      	ldrb	r3, [r4, #4]
 8014c80:	2b02      	cmp	r3, #2
 8014c82:	d039      	beq.n	8014cf8 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8014c84:	2b03      	cmp	r3, #3
 8014c86:	d02f      	beq.n	8014ce8 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8014c88:	2202      	movs	r2, #2
 8014c8a:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 8014c8e:	4628      	mov	r0, r5
 8014c90:	f005 f8a2 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 8014c94:	4030      	ands	r0, r6
 8014c96:	b2c0      	uxtb	r0, r0
 8014c98:	bd70      	pop	{r4, r5, r6, pc}
 8014c9a:	2000      	movs	r0, #0
 8014c9c:	bd70      	pop	{r4, r5, r6, pc}
 8014c9e:	7909      	ldrb	r1, [r1, #4]
 8014ca0:	f7fc f87a 	bl	8010d98 <ucdr_serialize_uint8_t>
 8014ca4:	4606      	mov	r6, r0
 8014ca6:	b158      	cbz	r0, 8014cc0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8014ca8:	7923      	ldrb	r3, [r4, #4]
 8014caa:	2b02      	cmp	r3, #2
 8014cac:	d003      	beq.n	8014cb6 <uxr_serialize_ObjectVariant.part.0+0x8a>
 8014cae:	2b03      	cmp	r3, #3
 8014cb0:	d028      	beq.n	8014d04 <uxr_serialize_ObjectVariant.part.0+0xd8>
 8014cb2:	2b01      	cmp	r3, #1
 8014cb4:	d104      	bne.n	8014cc0 <uxr_serialize_ObjectVariant.part.0+0x94>
 8014cb6:	68a1      	ldr	r1, [r4, #8]
 8014cb8:	4628      	mov	r0, r5
 8014cba:	f005 fa03 	bl	801a0c4 <ucdr_serialize_string>
 8014cbe:	4606      	mov	r6, r0
 8014cc0:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 8014cc4:	4628      	mov	r0, r5
 8014cc6:	f7fc fda3 	bl	8011810 <ucdr_serialize_int16_t>
 8014cca:	4030      	ands	r0, r6
 8014ccc:	b2c0      	uxtb	r0, r0
 8014cce:	bd70      	pop	{r4, r5, r6, pc}
 8014cd0:	3104      	adds	r1, #4
 8014cd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014cd6:	f7ff be7b 	b.w	80149d0 <uxr_serialize_CLIENT_Representation>
 8014cda:	3104      	adds	r1, #4
 8014cdc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014ce0:	f7ff bf32 	b.w	8014b48 <uxr_serialize_AGENT_Representation>
 8014ce4:	2001      	movs	r0, #1
 8014ce6:	bd70      	pop	{r4, r5, r6, pc}
 8014ce8:	68a2      	ldr	r2, [r4, #8]
 8014cea:	f104 010c 	add.w	r1, r4, #12
 8014cee:	4628      	mov	r0, r5
 8014cf0:	f7fd f9ce 	bl	8012090 <ucdr_serialize_sequence_uint8_t>
 8014cf4:	4606      	mov	r6, r0
 8014cf6:	e7c7      	b.n	8014c88 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014cf8:	68a1      	ldr	r1, [r4, #8]
 8014cfa:	4628      	mov	r0, r5
 8014cfc:	f005 f9e2 	bl	801a0c4 <ucdr_serialize_string>
 8014d00:	4606      	mov	r6, r0
 8014d02:	e7c1      	b.n	8014c88 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8014d04:	68a2      	ldr	r2, [r4, #8]
 8014d06:	f104 010c 	add.w	r1, r4, #12
 8014d0a:	4628      	mov	r0, r5
 8014d0c:	f7fd f9c0 	bl	8012090 <ucdr_serialize_sequence_uint8_t>
 8014d10:	4606      	mov	r6, r0
 8014d12:	e7d5      	b.n	8014cc0 <uxr_serialize_ObjectVariant.part.0+0x94>

08014d14 <uxr_deserialize_DATAWRITER_Representation>:
 8014d14:	b570      	push	{r4, r5, r6, lr}
 8014d16:	4606      	mov	r6, r0
 8014d18:	460d      	mov	r5, r1
 8014d1a:	f7fc f853 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 8014d1e:	4604      	mov	r4, r0
 8014d20:	b130      	cbz	r0, 8014d30 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014d22:	782b      	ldrb	r3, [r5, #0]
 8014d24:	2b02      	cmp	r3, #2
 8014d26:	d00c      	beq.n	8014d42 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014d28:	2b03      	cmp	r3, #3
 8014d2a:	d012      	beq.n	8014d52 <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8014d2c:	2b01      	cmp	r3, #1
 8014d2e:	d008      	beq.n	8014d42 <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8014d30:	2202      	movs	r2, #2
 8014d32:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8014d36:	4630      	mov	r0, r6
 8014d38:	f005 f8b2 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8014d3c:	4020      	ands	r0, r4
 8014d3e:	b2c0      	uxtb	r0, r0
 8014d40:	bd70      	pop	{r4, r5, r6, pc}
 8014d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014d46:	6869      	ldr	r1, [r5, #4]
 8014d48:	4630      	mov	r0, r6
 8014d4a:	f005 f9cb 	bl	801a0e4 <ucdr_deserialize_string>
 8014d4e:	4604      	mov	r4, r0
 8014d50:	e7ee      	b.n	8014d30 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014d52:	1d2b      	adds	r3, r5, #4
 8014d54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8014d58:	f105 0108 	add.w	r1, r5, #8
 8014d5c:	4630      	mov	r0, r6
 8014d5e:	f7fd f9a9 	bl	80120b4 <ucdr_deserialize_sequence_uint8_t>
 8014d62:	4604      	mov	r4, r0
 8014d64:	e7e4      	b.n	8014d30 <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8014d66:	bf00      	nop

08014d68 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8014d68:	b570      	push	{r4, r5, r6, lr}
 8014d6a:	460d      	mov	r5, r1
 8014d6c:	7809      	ldrb	r1, [r1, #0]
 8014d6e:	4606      	mov	r6, r0
 8014d70:	f7fb ffe4 	bl	8010d3c <ucdr_serialize_bool>
 8014d74:	782b      	ldrb	r3, [r5, #0]
 8014d76:	4604      	mov	r4, r0
 8014d78:	b94b      	cbnz	r3, 8014d8e <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8014d7a:	7a29      	ldrb	r1, [r5, #8]
 8014d7c:	4630      	mov	r0, r6
 8014d7e:	f7fb ffdd 	bl	8010d3c <ucdr_serialize_bool>
 8014d82:	7a2b      	ldrb	r3, [r5, #8]
 8014d84:	4004      	ands	r4, r0
 8014d86:	b2e4      	uxtb	r4, r4
 8014d88:	b943      	cbnz	r3, 8014d9c <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	bd70      	pop	{r4, r5, r6, pc}
 8014d8e:	6869      	ldr	r1, [r5, #4]
 8014d90:	4630      	mov	r0, r6
 8014d92:	f005 f997 	bl	801a0c4 <ucdr_serialize_string>
 8014d96:	4004      	ands	r4, r0
 8014d98:	b2e4      	uxtb	r4, r4
 8014d9a:	e7ee      	b.n	8014d7a <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8014d9c:	68e9      	ldr	r1, [r5, #12]
 8014d9e:	4630      	mov	r0, r6
 8014da0:	f005 f990 	bl	801a0c4 <ucdr_serialize_string>
 8014da4:	4004      	ands	r4, r0
 8014da6:	4620      	mov	r0, r4
 8014da8:	bd70      	pop	{r4, r5, r6, pc}
 8014daa:	bf00      	nop

08014dac <uxr_serialize_OBJK_Topic_Binary>:
 8014dac:	b570      	push	{r4, r5, r6, lr}
 8014dae:	460d      	mov	r5, r1
 8014db0:	4606      	mov	r6, r0
 8014db2:	6809      	ldr	r1, [r1, #0]
 8014db4:	f005 f986 	bl	801a0c4 <ucdr_serialize_string>
 8014db8:	4604      	mov	r4, r0
 8014dba:	7929      	ldrb	r1, [r5, #4]
 8014dbc:	4630      	mov	r0, r6
 8014dbe:	f7fb ffbd 	bl	8010d3c <ucdr_serialize_bool>
 8014dc2:	792b      	ldrb	r3, [r5, #4]
 8014dc4:	4004      	ands	r4, r0
 8014dc6:	b2e4      	uxtb	r4, r4
 8014dc8:	b943      	cbnz	r3, 8014ddc <uxr_serialize_OBJK_Topic_Binary+0x30>
 8014dca:	7b29      	ldrb	r1, [r5, #12]
 8014dcc:	4630      	mov	r0, r6
 8014dce:	f7fb ffb5 	bl	8010d3c <ucdr_serialize_bool>
 8014dd2:	7b2b      	ldrb	r3, [r5, #12]
 8014dd4:	4004      	ands	r4, r0
 8014dd6:	b93b      	cbnz	r3, 8014de8 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 8014dd8:	4620      	mov	r0, r4
 8014dda:	bd70      	pop	{r4, r5, r6, pc}
 8014ddc:	68a9      	ldr	r1, [r5, #8]
 8014dde:	4630      	mov	r0, r6
 8014de0:	f005 f970 	bl	801a0c4 <ucdr_serialize_string>
 8014de4:	4004      	ands	r4, r0
 8014de6:	e7f0      	b.n	8014dca <uxr_serialize_OBJK_Topic_Binary+0x1e>
 8014de8:	6929      	ldr	r1, [r5, #16]
 8014dea:	4630      	mov	r0, r6
 8014dec:	f005 f96a 	bl	801a0c4 <ucdr_serialize_string>
 8014df0:	4004      	ands	r4, r0
 8014df2:	b2e4      	uxtb	r4, r4
 8014df4:	4620      	mov	r0, r4
 8014df6:	bd70      	pop	{r4, r5, r6, pc}

08014df8 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 8014df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014dfc:	460c      	mov	r4, r1
 8014dfe:	7809      	ldrb	r1, [r1, #0]
 8014e00:	4606      	mov	r6, r0
 8014e02:	f7fb ff9b 	bl	8010d3c <ucdr_serialize_bool>
 8014e06:	7823      	ldrb	r3, [r4, #0]
 8014e08:	4605      	mov	r5, r0
 8014e0a:	b96b      	cbnz	r3, 8014e28 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8014e0c:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 8014e10:	4630      	mov	r0, r6
 8014e12:	f7fb ff93 	bl	8010d3c <ucdr_serialize_bool>
 8014e16:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8014e1a:	4005      	ands	r5, r0
 8014e1c:	b2ed      	uxtb	r5, r5
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d169      	bne.n	8014ef6 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 8014e22:	4628      	mov	r0, r5
 8014e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e28:	6861      	ldr	r1, [r4, #4]
 8014e2a:	4630      	mov	r0, r6
 8014e2c:	f7fc f9ca 	bl	80111c4 <ucdr_serialize_uint32_t>
 8014e30:	6863      	ldr	r3, [r4, #4]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d06b      	beq.n	8014f0e <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8014e36:	2800      	cmp	r0, #0
 8014e38:	d067      	beq.n	8014f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014e3a:	68a1      	ldr	r1, [r4, #8]
 8014e3c:	4630      	mov	r0, r6
 8014e3e:	f005 f941 	bl	801a0c4 <ucdr_serialize_string>
 8014e42:	6863      	ldr	r3, [r4, #4]
 8014e44:	2b01      	cmp	r3, #1
 8014e46:	d953      	bls.n	8014ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014e48:	2800      	cmp	r0, #0
 8014e4a:	d05e      	beq.n	8014f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014e4c:	68e1      	ldr	r1, [r4, #12]
 8014e4e:	4630      	mov	r0, r6
 8014e50:	f005 f938 	bl	801a0c4 <ucdr_serialize_string>
 8014e54:	6863      	ldr	r3, [r4, #4]
 8014e56:	2b02      	cmp	r3, #2
 8014e58:	d94a      	bls.n	8014ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014e5a:	2800      	cmp	r0, #0
 8014e5c:	d055      	beq.n	8014f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014e5e:	6921      	ldr	r1, [r4, #16]
 8014e60:	4630      	mov	r0, r6
 8014e62:	f005 f92f 	bl	801a0c4 <ucdr_serialize_string>
 8014e66:	6863      	ldr	r3, [r4, #4]
 8014e68:	2b03      	cmp	r3, #3
 8014e6a:	d941      	bls.n	8014ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014e6c:	2800      	cmp	r0, #0
 8014e6e:	d04c      	beq.n	8014f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014e70:	6961      	ldr	r1, [r4, #20]
 8014e72:	4630      	mov	r0, r6
 8014e74:	f005 f926 	bl	801a0c4 <ucdr_serialize_string>
 8014e78:	6863      	ldr	r3, [r4, #4]
 8014e7a:	2b04      	cmp	r3, #4
 8014e7c:	d938      	bls.n	8014ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014e7e:	2800      	cmp	r0, #0
 8014e80:	d043      	beq.n	8014f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014e82:	69a1      	ldr	r1, [r4, #24]
 8014e84:	4630      	mov	r0, r6
 8014e86:	f005 f91d 	bl	801a0c4 <ucdr_serialize_string>
 8014e8a:	6863      	ldr	r3, [r4, #4]
 8014e8c:	2b05      	cmp	r3, #5
 8014e8e:	d92f      	bls.n	8014ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014e90:	2800      	cmp	r0, #0
 8014e92:	d03a      	beq.n	8014f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014e94:	69e1      	ldr	r1, [r4, #28]
 8014e96:	4630      	mov	r0, r6
 8014e98:	f005 f914 	bl	801a0c4 <ucdr_serialize_string>
 8014e9c:	6863      	ldr	r3, [r4, #4]
 8014e9e:	2b06      	cmp	r3, #6
 8014ea0:	d926      	bls.n	8014ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014ea2:	b390      	cbz	r0, 8014f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014ea4:	6a21      	ldr	r1, [r4, #32]
 8014ea6:	4630      	mov	r0, r6
 8014ea8:	f005 f90c 	bl	801a0c4 <ucdr_serialize_string>
 8014eac:	6863      	ldr	r3, [r4, #4]
 8014eae:	2b07      	cmp	r3, #7
 8014eb0:	d91e      	bls.n	8014ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014eb2:	b350      	cbz	r0, 8014f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014eb4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8014eb6:	4630      	mov	r0, r6
 8014eb8:	f005 f904 	bl	801a0c4 <ucdr_serialize_string>
 8014ebc:	6863      	ldr	r3, [r4, #4]
 8014ebe:	2b08      	cmp	r3, #8
 8014ec0:	d916      	bls.n	8014ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014ec2:	b310      	cbz	r0, 8014f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014ec4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8014ec6:	4630      	mov	r0, r6
 8014ec8:	f005 f8fc 	bl	801a0c4 <ucdr_serialize_string>
 8014ecc:	6863      	ldr	r3, [r4, #4]
 8014ece:	2b09      	cmp	r3, #9
 8014ed0:	d90e      	bls.n	8014ef0 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8014ed2:	b1d0      	cbz	r0, 8014f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014ed4:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 8014ed8:	2709      	movs	r7, #9
 8014eda:	e000      	b.n	8014ede <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 8014edc:	b1a8      	cbz	r0, 8014f0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8014ede:	f858 1b04 	ldr.w	r1, [r8], #4
 8014ee2:	4630      	mov	r0, r6
 8014ee4:	f005 f8ee 	bl	801a0c4 <ucdr_serialize_string>
 8014ee8:	3701      	adds	r7, #1
 8014eea:	6862      	ldr	r2, [r4, #4]
 8014eec:	4297      	cmp	r7, r2
 8014eee:	d3f5      	bcc.n	8014edc <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 8014ef0:	4005      	ands	r5, r0
 8014ef2:	b2ed      	uxtb	r5, r5
 8014ef4:	e78a      	b.n	8014e0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014ef6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8014ef8:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8014efc:	4630      	mov	r0, r6
 8014efe:	f7fd f8c7 	bl	8012090 <ucdr_serialize_sequence_uint8_t>
 8014f02:	4005      	ands	r5, r0
 8014f04:	4628      	mov	r0, r5
 8014f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f0a:	2500      	movs	r5, #0
 8014f0c:	e77e      	b.n	8014e0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 8014f0e:	4028      	ands	r0, r5
 8014f10:	b2c5      	uxtb	r5, r0
 8014f12:	e77b      	b.n	8014e0c <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08014f14 <uxr_serialize_OBJK_Publisher_Binary>:
 8014f14:	b570      	push	{r4, r5, r6, lr}
 8014f16:	460d      	mov	r5, r1
 8014f18:	7809      	ldrb	r1, [r1, #0]
 8014f1a:	4606      	mov	r6, r0
 8014f1c:	f7fb ff0e 	bl	8010d3c <ucdr_serialize_bool>
 8014f20:	782b      	ldrb	r3, [r5, #0]
 8014f22:	4604      	mov	r4, r0
 8014f24:	b94b      	cbnz	r3, 8014f3a <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8014f26:	7a29      	ldrb	r1, [r5, #8]
 8014f28:	4630      	mov	r0, r6
 8014f2a:	f7fb ff07 	bl	8010d3c <ucdr_serialize_bool>
 8014f2e:	7a2b      	ldrb	r3, [r5, #8]
 8014f30:	4004      	ands	r4, r0
 8014f32:	b2e4      	uxtb	r4, r4
 8014f34:	b943      	cbnz	r3, 8014f48 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8014f36:	4620      	mov	r0, r4
 8014f38:	bd70      	pop	{r4, r5, r6, pc}
 8014f3a:	6869      	ldr	r1, [r5, #4]
 8014f3c:	4630      	mov	r0, r6
 8014f3e:	f005 f8c1 	bl	801a0c4 <ucdr_serialize_string>
 8014f42:	4004      	ands	r4, r0
 8014f44:	b2e4      	uxtb	r4, r4
 8014f46:	e7ee      	b.n	8014f26 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8014f48:	f105 010c 	add.w	r1, r5, #12
 8014f4c:	4630      	mov	r0, r6
 8014f4e:	f7ff ff53 	bl	8014df8 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 8014f52:	4004      	ands	r4, r0
 8014f54:	4620      	mov	r0, r4
 8014f56:	bd70      	pop	{r4, r5, r6, pc}

08014f58 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8014f58:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8014f5c:	4688      	mov	r8, r1
 8014f5e:	4681      	mov	r9, r0
 8014f60:	8809      	ldrh	r1, [r1, #0]
 8014f62:	f7fb ff45 	bl	8010df0 <ucdr_serialize_uint16_t>
 8014f66:	4606      	mov	r6, r0
 8014f68:	f898 1002 	ldrb.w	r1, [r8, #2]
 8014f6c:	4648      	mov	r0, r9
 8014f6e:	f7fb fee5 	bl	8010d3c <ucdr_serialize_bool>
 8014f72:	f898 3002 	ldrb.w	r3, [r8, #2]
 8014f76:	4006      	ands	r6, r0
 8014f78:	b2f5      	uxtb	r5, r6
 8014f7a:	b9eb      	cbnz	r3, 8014fb8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8014f7c:	f898 1006 	ldrb.w	r1, [r8, #6]
 8014f80:	4648      	mov	r0, r9
 8014f82:	f7fb fedb 	bl	8010d3c <ucdr_serialize_bool>
 8014f86:	f898 3006 	ldrb.w	r3, [r8, #6]
 8014f8a:	4005      	ands	r5, r0
 8014f8c:	bb7b      	cbnz	r3, 8014fee <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 8014f8e:	f898 100c 	ldrb.w	r1, [r8, #12]
 8014f92:	4648      	mov	r0, r9
 8014f94:	f7fb fed2 	bl	8010d3c <ucdr_serialize_bool>
 8014f98:	f898 300c 	ldrb.w	r3, [r8, #12]
 8014f9c:	4005      	ands	r5, r0
 8014f9e:	b9f3      	cbnz	r3, 8014fde <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 8014fa0:	f898 1014 	ldrb.w	r1, [r8, #20]
 8014fa4:	4648      	mov	r0, r9
 8014fa6:	f7fb fec9 	bl	8010d3c <ucdr_serialize_bool>
 8014faa:	f898 3014 	ldrb.w	r3, [r8, #20]
 8014fae:	4005      	ands	r5, r0
 8014fb0:	b94b      	cbnz	r3, 8014fc6 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 8014fb2:	4628      	mov	r0, r5
 8014fb4:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014fb8:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8014fbc:	4648      	mov	r0, r9
 8014fbe:	f7fb ff17 	bl	8010df0 <ucdr_serialize_uint16_t>
 8014fc2:	4005      	ands	r5, r0
 8014fc4:	e7da      	b.n	8014f7c <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 8014fc6:	f8d8 2018 	ldr.w	r2, [r8, #24]
 8014fca:	f108 011c 	add.w	r1, r8, #28
 8014fce:	4648      	mov	r0, r9
 8014fd0:	f7fd f85e 	bl	8012090 <ucdr_serialize_sequence_uint8_t>
 8014fd4:	4028      	ands	r0, r5
 8014fd6:	b2c5      	uxtb	r5, r0
 8014fd8:	4628      	mov	r0, r5
 8014fda:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 8014fde:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8014fe2:	4648      	mov	r0, r9
 8014fe4:	f7fc f8ee 	bl	80111c4 <ucdr_serialize_uint32_t>
 8014fe8:	4028      	ands	r0, r5
 8014fea:	b2c5      	uxtb	r5, r0
 8014fec:	e7d8      	b.n	8014fa0 <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 8014fee:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8014ff2:	4648      	mov	r0, r9
 8014ff4:	f7fc f8e6 	bl	80111c4 <ucdr_serialize_uint32_t>
 8014ff8:	4028      	ands	r0, r5
 8014ffa:	b2c5      	uxtb	r5, r0
 8014ffc:	e7c7      	b.n	8014f8e <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 8014ffe:	bf00      	nop

08015000 <uxr_serialize_OBJK_DataWriter_Binary>:
 8015000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015002:	2202      	movs	r2, #2
 8015004:	460d      	mov	r5, r1
 8015006:	4606      	mov	r6, r0
 8015008:	f004 fee6 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 801500c:	4604      	mov	r4, r0
 801500e:	78a9      	ldrb	r1, [r5, #2]
 8015010:	4630      	mov	r0, r6
 8015012:	f7fb fe93 	bl	8010d3c <ucdr_serialize_bool>
 8015016:	78ab      	ldrb	r3, [r5, #2]
 8015018:	4004      	ands	r4, r0
 801501a:	b2e4      	uxtb	r4, r4
 801501c:	b90b      	cbnz	r3, 8015022 <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801501e:	4620      	mov	r0, r4
 8015020:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015022:	f105 0108 	add.w	r1, r5, #8
 8015026:	4630      	mov	r0, r6
 8015028:	f7ff ff96 	bl	8014f58 <uxr_serialize_OBJK_Endpoint_QosBinary>
 801502c:	4607      	mov	r7, r0
 801502e:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 8015032:	4630      	mov	r0, r6
 8015034:	f7fb fe82 	bl	8010d3c <ucdr_serialize_bool>
 8015038:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 801503c:	4038      	ands	r0, r7
 801503e:	b2c7      	uxtb	r7, r0
 8015040:	b913      	cbnz	r3, 8015048 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 8015042:	403c      	ands	r4, r7
 8015044:	4620      	mov	r0, r4
 8015046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015048:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 801504c:	4630      	mov	r0, r6
 801504e:	f7fc fb0f 	bl	8011670 <ucdr_serialize_uint64_t>
 8015052:	4007      	ands	r7, r0
 8015054:	e7f5      	b.n	8015042 <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8015056:	bf00      	nop

08015058 <uxr_deserialize_ObjectVariant>:
 8015058:	b570      	push	{r4, r5, r6, lr}
 801505a:	4605      	mov	r5, r0
 801505c:	460e      	mov	r6, r1
 801505e:	f7fb feb1 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 8015062:	b168      	cbz	r0, 8015080 <uxr_deserialize_ObjectVariant+0x28>
 8015064:	7833      	ldrb	r3, [r6, #0]
 8015066:	4604      	mov	r4, r0
 8015068:	3b01      	subs	r3, #1
 801506a:	2b0d      	cmp	r3, #13
 801506c:	d809      	bhi.n	8015082 <uxr_deserialize_ObjectVariant+0x2a>
 801506e:	e8df f003 	tbb	[pc, r3]
 8015072:	0a41      	.short	0x0a41
 8015074:	0a0a2323 	.word	0x0a0a2323
 8015078:	10080a0a 	.word	0x10080a0a
 801507c:	565c1010 	.word	0x565c1010
 8015080:	2400      	movs	r4, #0
 8015082:	4620      	mov	r0, r4
 8015084:	bd70      	pop	{r4, r5, r6, pc}
 8015086:	1d31      	adds	r1, r6, #4
 8015088:	4628      	mov	r0, r5
 801508a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801508e:	f7ff be41 	b.w	8014d14 <uxr_deserialize_DATAWRITER_Representation>
 8015092:	1d31      	adds	r1, r6, #4
 8015094:	4628      	mov	r0, r5
 8015096:	f7fb fe95 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 801509a:	2800      	cmp	r0, #0
 801509c:	d0f0      	beq.n	8015080 <uxr_deserialize_ObjectVariant+0x28>
 801509e:	7933      	ldrb	r3, [r6, #4]
 80150a0:	2b01      	cmp	r3, #1
 80150a2:	d001      	beq.n	80150a8 <uxr_deserialize_ObjectVariant+0x50>
 80150a4:	2b02      	cmp	r3, #2
 80150a6:	d1ec      	bne.n	8015082 <uxr_deserialize_ObjectVariant+0x2a>
 80150a8:	68b1      	ldr	r1, [r6, #8]
 80150aa:	4628      	mov	r0, r5
 80150ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80150b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80150b4:	f005 b816 	b.w	801a0e4 <ucdr_deserialize_string>
 80150b8:	1d31      	adds	r1, r6, #4
 80150ba:	4628      	mov	r0, r5
 80150bc:	f7fb fe82 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 80150c0:	4604      	mov	r4, r0
 80150c2:	b170      	cbz	r0, 80150e2 <uxr_deserialize_ObjectVariant+0x8a>
 80150c4:	7933      	ldrb	r3, [r6, #4]
 80150c6:	2b02      	cmp	r3, #2
 80150c8:	d04c      	beq.n	8015164 <uxr_deserialize_ObjectVariant+0x10c>
 80150ca:	2b03      	cmp	r3, #3
 80150cc:	d109      	bne.n	80150e2 <uxr_deserialize_ObjectVariant+0x8a>
 80150ce:	f106 0308 	add.w	r3, r6, #8
 80150d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80150d6:	f106 010c 	add.w	r1, r6, #12
 80150da:	4628      	mov	r0, r5
 80150dc:	f7fc ffea 	bl	80120b4 <ucdr_deserialize_sequence_uint8_t>
 80150e0:	4604      	mov	r4, r0
 80150e2:	2202      	movs	r2, #2
 80150e4:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80150e8:	4628      	mov	r0, r5
 80150ea:	f004 fed9 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 80150ee:	4020      	ands	r0, r4
 80150f0:	b2c4      	uxtb	r4, r0
 80150f2:	e7c6      	b.n	8015082 <uxr_deserialize_ObjectVariant+0x2a>
 80150f4:	1d31      	adds	r1, r6, #4
 80150f6:	4628      	mov	r0, r5
 80150f8:	f7fb fe64 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 80150fc:	4604      	mov	r4, r0
 80150fe:	b130      	cbz	r0, 801510e <uxr_deserialize_ObjectVariant+0xb6>
 8015100:	7933      	ldrb	r3, [r6, #4]
 8015102:	2b02      	cmp	r3, #2
 8015104:	d036      	beq.n	8015174 <uxr_deserialize_ObjectVariant+0x11c>
 8015106:	2b03      	cmp	r3, #3
 8015108:	d03c      	beq.n	8015184 <uxr_deserialize_ObjectVariant+0x12c>
 801510a:	2b01      	cmp	r3, #1
 801510c:	d032      	beq.n	8015174 <uxr_deserialize_ObjectVariant+0x11c>
 801510e:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 8015112:	4628      	mov	r0, r5
 8015114:	f7fc fbfc 	bl	8011910 <ucdr_deserialize_int16_t>
 8015118:	4020      	ands	r0, r4
 801511a:	b2c4      	uxtb	r4, r0
 801511c:	e7b1      	b.n	8015082 <uxr_deserialize_ObjectVariant+0x2a>
 801511e:	1d31      	adds	r1, r6, #4
 8015120:	4628      	mov	r0, r5
 8015122:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015126:	f7ff bcab 	b.w	8014a80 <uxr_deserialize_CLIENT_Representation>
 801512a:	2204      	movs	r2, #4
 801512c:	4628      	mov	r0, r5
 801512e:	18b1      	adds	r1, r6, r2
 8015130:	f004 feb6 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8015134:	4604      	mov	r4, r0
 8015136:	2202      	movs	r2, #2
 8015138:	f106 0108 	add.w	r1, r6, #8
 801513c:	4628      	mov	r0, r5
 801513e:	f004 feaf 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8015142:	4004      	ands	r4, r0
 8015144:	2202      	movs	r2, #2
 8015146:	f106 010a 	add.w	r1, r6, #10
 801514a:	4628      	mov	r0, r5
 801514c:	b2e4      	uxtb	r4, r4
 801514e:	f004 fea7 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8015152:	4603      	mov	r3, r0
 8015154:	f106 010c 	add.w	r1, r6, #12
 8015158:	4628      	mov	r0, r5
 801515a:	401c      	ands	r4, r3
 801515c:	f7fb fe04 	bl	8010d68 <ucdr_deserialize_bool>
 8015160:	4004      	ands	r4, r0
 8015162:	e78e      	b.n	8015082 <uxr_deserialize_ObjectVariant+0x2a>
 8015164:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015168:	68b1      	ldr	r1, [r6, #8]
 801516a:	4628      	mov	r0, r5
 801516c:	f004 ffba 	bl	801a0e4 <ucdr_deserialize_string>
 8015170:	4604      	mov	r4, r0
 8015172:	e7b6      	b.n	80150e2 <uxr_deserialize_ObjectVariant+0x8a>
 8015174:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015178:	68b1      	ldr	r1, [r6, #8]
 801517a:	4628      	mov	r0, r5
 801517c:	f004 ffb2 	bl	801a0e4 <ucdr_deserialize_string>
 8015180:	4604      	mov	r4, r0
 8015182:	e7c4      	b.n	801510e <uxr_deserialize_ObjectVariant+0xb6>
 8015184:	f106 0308 	add.w	r3, r6, #8
 8015188:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801518c:	f106 010c 	add.w	r1, r6, #12
 8015190:	4628      	mov	r0, r5
 8015192:	f7fc ff8f 	bl	80120b4 <ucdr_deserialize_sequence_uint8_t>
 8015196:	4604      	mov	r4, r0
 8015198:	e7b9      	b.n	801510e <uxr_deserialize_ObjectVariant+0xb6>
 801519a:	bf00      	nop

0801519c <uxr_deserialize_BaseObjectRequest>:
 801519c:	b570      	push	{r4, r5, r6, lr}
 801519e:	2202      	movs	r2, #2
 80151a0:	4605      	mov	r5, r0
 80151a2:	460e      	mov	r6, r1
 80151a4:	f004 fe7c 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 80151a8:	2202      	movs	r2, #2
 80151aa:	4604      	mov	r4, r0
 80151ac:	4628      	mov	r0, r5
 80151ae:	18b1      	adds	r1, r6, r2
 80151b0:	f004 fe76 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 80151b4:	4020      	ands	r0, r4
 80151b6:	b2c0      	uxtb	r0, r0
 80151b8:	bd70      	pop	{r4, r5, r6, pc}
 80151ba:	bf00      	nop

080151bc <uxr_serialize_ActivityInfoVariant>:
 80151bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80151c0:	460e      	mov	r6, r1
 80151c2:	7809      	ldrb	r1, [r1, #0]
 80151c4:	4680      	mov	r8, r0
 80151c6:	f7fb fde7 	bl	8010d98 <ucdr_serialize_uint8_t>
 80151ca:	4607      	mov	r7, r0
 80151cc:	b138      	cbz	r0, 80151de <uxr_serialize_ActivityInfoVariant+0x22>
 80151ce:	7833      	ldrb	r3, [r6, #0]
 80151d0:	2b06      	cmp	r3, #6
 80151d2:	f000 8081 	beq.w	80152d8 <uxr_serialize_ActivityInfoVariant+0x11c>
 80151d6:	2b0d      	cmp	r3, #13
 80151d8:	d014      	beq.n	8015204 <uxr_serialize_ActivityInfoVariant+0x48>
 80151da:	2b05      	cmp	r3, #5
 80151dc:	d002      	beq.n	80151e4 <uxr_serialize_ActivityInfoVariant+0x28>
 80151de:	4638      	mov	r0, r7
 80151e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80151e4:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80151e8:	4640      	mov	r0, r8
 80151ea:	f7fc fb11 	bl	8011810 <ucdr_serialize_int16_t>
 80151ee:	4607      	mov	r7, r0
 80151f0:	4640      	mov	r0, r8
 80151f2:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 80151f6:	f7fc fa3b 	bl	8011670 <ucdr_serialize_uint64_t>
 80151fa:	4038      	ands	r0, r7
 80151fc:	b2c7      	uxtb	r7, r0
 80151fe:	4638      	mov	r0, r7
 8015200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015204:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8015208:	4640      	mov	r0, r8
 801520a:	f7fc fb01 	bl	8011810 <ucdr_serialize_int16_t>
 801520e:	68f1      	ldr	r1, [r6, #12]
 8015210:	4607      	mov	r7, r0
 8015212:	4640      	mov	r0, r8
 8015214:	f7fb ffd6 	bl	80111c4 <ucdr_serialize_uint32_t>
 8015218:	68f3      	ldr	r3, [r6, #12]
 801521a:	2b00      	cmp	r3, #0
 801521c:	d0ed      	beq.n	80151fa <uxr_serialize_ActivityInfoVariant+0x3e>
 801521e:	b318      	cbz	r0, 8015268 <uxr_serialize_ActivityInfoVariant+0xac>
 8015220:	f106 090c 	add.w	r9, r6, #12
 8015224:	2400      	movs	r4, #0
 8015226:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 801522a:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 801522e:	7c29      	ldrb	r1, [r5, #16]
 8015230:	4640      	mov	r0, r8
 8015232:	f7fb fdb1 	bl	8010d98 <ucdr_serialize_uint8_t>
 8015236:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 801523a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 801523e:	2800      	cmp	r0, #0
 8015240:	d051      	beq.n	80152e6 <uxr_serialize_ActivityInfoVariant+0x12a>
 8015242:	7c2b      	ldrb	r3, [r5, #16]
 8015244:	00c9      	lsls	r1, r1, #3
 8015246:	2b03      	cmp	r3, #3
 8015248:	d854      	bhi.n	80152f4 <uxr_serialize_ActivityInfoVariant+0x138>
 801524a:	e8df f003 	tbb	[pc, r3]
 801524e:	2133      	.short	0x2133
 8015250:	020f      	.short	0x020f
 8015252:	4449      	add	r1, r9
 8015254:	4640      	mov	r0, r8
 8015256:	6889      	ldr	r1, [r1, #8]
 8015258:	f004 ff34 	bl	801a0c4 <ucdr_serialize_string>
 801525c:	3401      	adds	r4, #1
 801525e:	68f2      	ldr	r2, [r6, #12]
 8015260:	4294      	cmp	r4, r2
 8015262:	d244      	bcs.n	80152ee <uxr_serialize_ActivityInfoVariant+0x132>
 8015264:	2800      	cmp	r0, #0
 8015266:	d1de      	bne.n	8015226 <uxr_serialize_ActivityInfoVariant+0x6a>
 8015268:	2700      	movs	r7, #0
 801526a:	e7b8      	b.n	80151de <uxr_serialize_ActivityInfoVariant+0x22>
 801526c:	3108      	adds	r1, #8
 801526e:	44a2      	add	sl, r4
 8015270:	2210      	movs	r2, #16
 8015272:	4640      	mov	r0, r8
 8015274:	4449      	add	r1, r9
 8015276:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801527a:	f004 fdad 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 801527e:	4605      	mov	r5, r0
 8015280:	f8da 1024 	ldr.w	r1, [sl, #36]	@ 0x24
 8015284:	4640      	mov	r0, r8
 8015286:	f7fb ff9d 	bl	80111c4 <ucdr_serialize_uint32_t>
 801528a:	4028      	ands	r0, r5
 801528c:	b2c0      	uxtb	r0, r0
 801528e:	e7e5      	b.n	801525c <uxr_serialize_ActivityInfoVariant+0xa0>
 8015290:	3108      	adds	r1, #8
 8015292:	44a2      	add	sl, r4
 8015294:	2204      	movs	r2, #4
 8015296:	4640      	mov	r0, r8
 8015298:	4449      	add	r1, r9
 801529a:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 801529e:	f004 fd9b 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 80152a2:	4605      	mov	r5, r0
 80152a4:	f8ba 1018 	ldrh.w	r1, [sl, #24]
 80152a8:	4640      	mov	r0, r8
 80152aa:	f7fb fda1 	bl	8010df0 <ucdr_serialize_uint16_t>
 80152ae:	4028      	ands	r0, r5
 80152b0:	b2c0      	uxtb	r0, r0
 80152b2:	e7d3      	b.n	801525c <uxr_serialize_ActivityInfoVariant+0xa0>
 80152b4:	3108      	adds	r1, #8
 80152b6:	44a2      	add	sl, r4
 80152b8:	2202      	movs	r2, #2
 80152ba:	4640      	mov	r0, r8
 80152bc:	4449      	add	r1, r9
 80152be:	eb06 0aca 	add.w	sl, r6, sl, lsl #3
 80152c2:	f004 fd89 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 80152c6:	4605      	mov	r5, r0
 80152c8:	f89a 1016 	ldrb.w	r1, [sl, #22]
 80152cc:	4640      	mov	r0, r8
 80152ce:	f7fb fd63 	bl	8010d98 <ucdr_serialize_uint8_t>
 80152d2:	4028      	ands	r0, r5
 80152d4:	b2c0      	uxtb	r0, r0
 80152d6:	e7c1      	b.n	801525c <uxr_serialize_ActivityInfoVariant+0xa0>
 80152d8:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 80152dc:	4640      	mov	r0, r8
 80152de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80152e2:	f7fc ba95 	b.w	8011810 <ucdr_serialize_int16_t>
 80152e6:	3401      	adds	r4, #1
 80152e8:	68f2      	ldr	r2, [r6, #12]
 80152ea:	42a2      	cmp	r2, r4
 80152ec:	d8bc      	bhi.n	8015268 <uxr_serialize_ActivityInfoVariant+0xac>
 80152ee:	4007      	ands	r7, r0
 80152f0:	b2ff      	uxtb	r7, r7
 80152f2:	e774      	b.n	80151de <uxr_serialize_ActivityInfoVariant+0x22>
 80152f4:	3401      	adds	r4, #1
 80152f6:	68f3      	ldr	r3, [r6, #12]
 80152f8:	3518      	adds	r5, #24
 80152fa:	429c      	cmp	r4, r3
 80152fc:	d397      	bcc.n	801522e <uxr_serialize_ActivityInfoVariant+0x72>
 80152fe:	e76e      	b.n	80151de <uxr_serialize_ActivityInfoVariant+0x22>

08015300 <uxr_deserialize_BaseObjectReply>:
 8015300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015304:	2202      	movs	r2, #2
 8015306:	4606      	mov	r6, r0
 8015308:	460f      	mov	r7, r1
 801530a:	f004 fdc9 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 801530e:	2202      	movs	r2, #2
 8015310:	4605      	mov	r5, r0
 8015312:	4630      	mov	r0, r6
 8015314:	18b9      	adds	r1, r7, r2
 8015316:	f004 fdc3 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 801531a:	4680      	mov	r8, r0
 801531c:	1d39      	adds	r1, r7, #4
 801531e:	4630      	mov	r0, r6
 8015320:	f7fb fd50 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 8015324:	ea05 0508 	and.w	r5, r5, r8
 8015328:	4604      	mov	r4, r0
 801532a:	1d79      	adds	r1, r7, #5
 801532c:	4630      	mov	r0, r6
 801532e:	402c      	ands	r4, r5
 8015330:	f7fb fd48 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 8015334:	4020      	ands	r0, r4
 8015336:	b2c0      	uxtb	r0, r0
 8015338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801533c <uxr_serialize_ReadSpecification>:
 801533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801533e:	460e      	mov	r6, r1
 8015340:	4607      	mov	r7, r0
 8015342:	7809      	ldrb	r1, [r1, #0]
 8015344:	f7fb fd28 	bl	8010d98 <ucdr_serialize_uint8_t>
 8015348:	4604      	mov	r4, r0
 801534a:	7871      	ldrb	r1, [r6, #1]
 801534c:	4638      	mov	r0, r7
 801534e:	f7fb fd23 	bl	8010d98 <ucdr_serialize_uint8_t>
 8015352:	4004      	ands	r4, r0
 8015354:	78b1      	ldrb	r1, [r6, #2]
 8015356:	4638      	mov	r0, r7
 8015358:	f7fb fcf0 	bl	8010d3c <ucdr_serialize_bool>
 801535c:	78b3      	ldrb	r3, [r6, #2]
 801535e:	b2e4      	uxtb	r4, r4
 8015360:	4004      	ands	r4, r0
 8015362:	b943      	cbnz	r3, 8015376 <uxr_serialize_ReadSpecification+0x3a>
 8015364:	7a31      	ldrb	r1, [r6, #8]
 8015366:	4638      	mov	r0, r7
 8015368:	f7fb fce8 	bl	8010d3c <ucdr_serialize_bool>
 801536c:	7a33      	ldrb	r3, [r6, #8]
 801536e:	4004      	ands	r4, r0
 8015370:	b93b      	cbnz	r3, 8015382 <uxr_serialize_ReadSpecification+0x46>
 8015372:	4620      	mov	r0, r4
 8015374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015376:	6871      	ldr	r1, [r6, #4]
 8015378:	4638      	mov	r0, r7
 801537a:	f004 fea3 	bl	801a0c4 <ucdr_serialize_string>
 801537e:	4004      	ands	r4, r0
 8015380:	e7f0      	b.n	8015364 <uxr_serialize_ReadSpecification+0x28>
 8015382:	8971      	ldrh	r1, [r6, #10]
 8015384:	4638      	mov	r0, r7
 8015386:	f7fb fd33 	bl	8010df0 <ucdr_serialize_uint16_t>
 801538a:	4605      	mov	r5, r0
 801538c:	89b1      	ldrh	r1, [r6, #12]
 801538e:	4638      	mov	r0, r7
 8015390:	f7fb fd2e 	bl	8010df0 <ucdr_serialize_uint16_t>
 8015394:	4005      	ands	r5, r0
 8015396:	89f1      	ldrh	r1, [r6, #14]
 8015398:	4638      	mov	r0, r7
 801539a:	b2ed      	uxtb	r5, r5
 801539c:	f7fb fd28 	bl	8010df0 <ucdr_serialize_uint16_t>
 80153a0:	8a31      	ldrh	r1, [r6, #16]
 80153a2:	4025      	ands	r5, r4
 80153a4:	4604      	mov	r4, r0
 80153a6:	4638      	mov	r0, r7
 80153a8:	4025      	ands	r5, r4
 80153aa:	f7fb fd21 	bl	8010df0 <ucdr_serialize_uint16_t>
 80153ae:	ea00 0405 	and.w	r4, r0, r5
 80153b2:	4620      	mov	r0, r4
 80153b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80153b6:	bf00      	nop

080153b8 <uxr_serialize_CREATE_CLIENT_Payload>:
 80153b8:	f7ff bb0a 	b.w	80149d0 <uxr_serialize_CLIENT_Representation>

080153bc <uxr_serialize_CREATE_Payload>:
 80153bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153be:	2202      	movs	r2, #2
 80153c0:	4607      	mov	r7, r0
 80153c2:	460e      	mov	r6, r1
 80153c4:	f004 fd08 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 80153c8:	2202      	movs	r2, #2
 80153ca:	4605      	mov	r5, r0
 80153cc:	4638      	mov	r0, r7
 80153ce:	18b1      	adds	r1, r6, r2
 80153d0:	f004 fd02 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 80153d4:	7931      	ldrb	r1, [r6, #4]
 80153d6:	4604      	mov	r4, r0
 80153d8:	4638      	mov	r0, r7
 80153da:	f7fb fcdd 	bl	8010d98 <ucdr_serialize_uint8_t>
 80153de:	b170      	cbz	r0, 80153fe <uxr_serialize_CREATE_Payload+0x42>
 80153e0:	7933      	ldrb	r3, [r6, #4]
 80153e2:	402c      	ands	r4, r5
 80153e4:	3b01      	subs	r3, #1
 80153e6:	b2e4      	uxtb	r4, r4
 80153e8:	2b0d      	cmp	r3, #13
 80153ea:	d809      	bhi.n	8015400 <uxr_serialize_CREATE_Payload+0x44>
 80153ec:	e8df f003 	tbb	[pc, r3]
 80153f0:	23230a4c 	.word	0x23230a4c
 80153f4:	0a0a0a0a 	.word	0x0a0a0a0a
 80153f8:	12121208 	.word	0x12121208
 80153fc:	3e45      	.short	0x3e45
 80153fe:	2400      	movs	r4, #0
 8015400:	4620      	mov	r0, r4
 8015402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015404:	f106 0108 	add.w	r1, r6, #8
 8015408:	4638      	mov	r0, r7
 801540a:	f7ff fbe7 	bl	8014bdc <uxr_serialize_DATAWRITER_Representation>
 801540e:	4004      	ands	r4, r0
 8015410:	4620      	mov	r0, r4
 8015412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015414:	7a31      	ldrb	r1, [r6, #8]
 8015416:	4638      	mov	r0, r7
 8015418:	f7fb fcbe 	bl	8010d98 <ucdr_serialize_uint8_t>
 801541c:	2800      	cmp	r0, #0
 801541e:	d0ee      	beq.n	80153fe <uxr_serialize_CREATE_Payload+0x42>
 8015420:	7a33      	ldrb	r3, [r6, #8]
 8015422:	2b01      	cmp	r3, #1
 8015424:	d001      	beq.n	801542a <uxr_serialize_CREATE_Payload+0x6e>
 8015426:	2b02      	cmp	r3, #2
 8015428:	d1ea      	bne.n	8015400 <uxr_serialize_CREATE_Payload+0x44>
 801542a:	68f1      	ldr	r1, [r6, #12]
 801542c:	4638      	mov	r0, r7
 801542e:	f004 fe49 	bl	801a0c4 <ucdr_serialize_string>
 8015432:	4004      	ands	r4, r0
 8015434:	e7e4      	b.n	8015400 <uxr_serialize_CREATE_Payload+0x44>
 8015436:	7a31      	ldrb	r1, [r6, #8]
 8015438:	4638      	mov	r0, r7
 801543a:	f7fb fcad 	bl	8010d98 <ucdr_serialize_uint8_t>
 801543e:	4605      	mov	r5, r0
 8015440:	b158      	cbz	r0, 801545a <uxr_serialize_CREATE_Payload+0x9e>
 8015442:	7a33      	ldrb	r3, [r6, #8]
 8015444:	2b02      	cmp	r3, #2
 8015446:	d034      	beq.n	80154b2 <uxr_serialize_CREATE_Payload+0xf6>
 8015448:	2b03      	cmp	r3, #3
 801544a:	d106      	bne.n	801545a <uxr_serialize_CREATE_Payload+0x9e>
 801544c:	68f2      	ldr	r2, [r6, #12]
 801544e:	f106 0110 	add.w	r1, r6, #16
 8015452:	4638      	mov	r0, r7
 8015454:	f7fc fe1c 	bl	8012090 <ucdr_serialize_sequence_uint8_t>
 8015458:	4605      	mov	r5, r0
 801545a:	2202      	movs	r2, #2
 801545c:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8015460:	4638      	mov	r0, r7
 8015462:	f004 fcb9 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 8015466:	4028      	ands	r0, r5
 8015468:	4004      	ands	r4, r0
 801546a:	e7c9      	b.n	8015400 <uxr_serialize_CREATE_Payload+0x44>
 801546c:	f106 0108 	add.w	r1, r6, #8
 8015470:	4638      	mov	r0, r7
 8015472:	f7ff faad 	bl	80149d0 <uxr_serialize_CLIENT_Representation>
 8015476:	4004      	ands	r4, r0
 8015478:	e7c2      	b.n	8015400 <uxr_serialize_CREATE_Payload+0x44>
 801547a:	f106 0108 	add.w	r1, r6, #8
 801547e:	4638      	mov	r0, r7
 8015480:	f7ff fb62 	bl	8014b48 <uxr_serialize_AGENT_Representation>
 8015484:	4004      	ands	r4, r0
 8015486:	e7bb      	b.n	8015400 <uxr_serialize_CREATE_Payload+0x44>
 8015488:	7a31      	ldrb	r1, [r6, #8]
 801548a:	4638      	mov	r0, r7
 801548c:	f7fb fc84 	bl	8010d98 <ucdr_serialize_uint8_t>
 8015490:	4605      	mov	r5, r0
 8015492:	b130      	cbz	r0, 80154a2 <uxr_serialize_CREATE_Payload+0xe6>
 8015494:	7a33      	ldrb	r3, [r6, #8]
 8015496:	2b02      	cmp	r3, #2
 8015498:	d011      	beq.n	80154be <uxr_serialize_CREATE_Payload+0x102>
 801549a:	2b03      	cmp	r3, #3
 801549c:	d015      	beq.n	80154ca <uxr_serialize_CREATE_Payload+0x10e>
 801549e:	2b01      	cmp	r3, #1
 80154a0:	d00d      	beq.n	80154be <uxr_serialize_CREATE_Payload+0x102>
 80154a2:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 80154a6:	4638      	mov	r0, r7
 80154a8:	f7fc f9b2 	bl	8011810 <ucdr_serialize_int16_t>
 80154ac:	4028      	ands	r0, r5
 80154ae:	4004      	ands	r4, r0
 80154b0:	e7a6      	b.n	8015400 <uxr_serialize_CREATE_Payload+0x44>
 80154b2:	68f1      	ldr	r1, [r6, #12]
 80154b4:	4638      	mov	r0, r7
 80154b6:	f004 fe05 	bl	801a0c4 <ucdr_serialize_string>
 80154ba:	4605      	mov	r5, r0
 80154bc:	e7cd      	b.n	801545a <uxr_serialize_CREATE_Payload+0x9e>
 80154be:	68f1      	ldr	r1, [r6, #12]
 80154c0:	4638      	mov	r0, r7
 80154c2:	f004 fdff 	bl	801a0c4 <ucdr_serialize_string>
 80154c6:	4605      	mov	r5, r0
 80154c8:	e7eb      	b.n	80154a2 <uxr_serialize_CREATE_Payload+0xe6>
 80154ca:	68f2      	ldr	r2, [r6, #12]
 80154cc:	f106 0110 	add.w	r1, r6, #16
 80154d0:	4638      	mov	r0, r7
 80154d2:	f7fc fddd 	bl	8012090 <ucdr_serialize_sequence_uint8_t>
 80154d6:	4605      	mov	r5, r0
 80154d8:	e7e3      	b.n	80154a2 <uxr_serialize_CREATE_Payload+0xe6>
 80154da:	bf00      	nop

080154dc <uxr_deserialize_GET_INFO_Payload>:
 80154dc:	b570      	push	{r4, r5, r6, lr}
 80154de:	2202      	movs	r2, #2
 80154e0:	4605      	mov	r5, r0
 80154e2:	460e      	mov	r6, r1
 80154e4:	f004 fcdc 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 80154e8:	2202      	movs	r2, #2
 80154ea:	4604      	mov	r4, r0
 80154ec:	4628      	mov	r0, r5
 80154ee:	18b1      	adds	r1, r6, r2
 80154f0:	f004 fcd6 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 80154f4:	4603      	mov	r3, r0
 80154f6:	1d31      	adds	r1, r6, #4
 80154f8:	4628      	mov	r0, r5
 80154fa:	401c      	ands	r4, r3
 80154fc:	f7fb ff92 	bl	8011424 <ucdr_deserialize_uint32_t>
 8015500:	b2e4      	uxtb	r4, r4
 8015502:	4020      	ands	r0, r4
 8015504:	bd70      	pop	{r4, r5, r6, pc}
 8015506:	bf00      	nop

08015508 <uxr_serialize_DELETE_Payload>:
 8015508:	b570      	push	{r4, r5, r6, lr}
 801550a:	2202      	movs	r2, #2
 801550c:	4605      	mov	r5, r0
 801550e:	460e      	mov	r6, r1
 8015510:	f004 fc62 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 8015514:	2202      	movs	r2, #2
 8015516:	4604      	mov	r4, r0
 8015518:	4628      	mov	r0, r5
 801551a:	18b1      	adds	r1, r6, r2
 801551c:	f004 fc5c 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 8015520:	4020      	ands	r0, r4
 8015522:	b2c0      	uxtb	r0, r0
 8015524:	bd70      	pop	{r4, r5, r6, pc}
 8015526:	bf00      	nop

08015528 <uxr_deserialize_STATUS_AGENT_Payload>:
 8015528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801552c:	460e      	mov	r6, r1
 801552e:	4605      	mov	r5, r0
 8015530:	f7fb fc48 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 8015534:	4604      	mov	r4, r0
 8015536:	1c71      	adds	r1, r6, #1
 8015538:	4628      	mov	r0, r5
 801553a:	f7fb fc43 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 801553e:	2204      	movs	r2, #4
 8015540:	4681      	mov	r9, r0
 8015542:	4628      	mov	r0, r5
 8015544:	18b1      	adds	r1, r6, r2
 8015546:	f004 fcab 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 801554a:	f106 0108 	add.w	r1, r6, #8
 801554e:	4680      	mov	r8, r0
 8015550:	2202      	movs	r2, #2
 8015552:	4628      	mov	r0, r5
 8015554:	f004 fca4 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8015558:	ea04 0309 	and.w	r3, r4, r9
 801555c:	4607      	mov	r7, r0
 801555e:	2202      	movs	r2, #2
 8015560:	b2db      	uxtb	r3, r3
 8015562:	f106 010a 	add.w	r1, r6, #10
 8015566:	4628      	mov	r0, r5
 8015568:	ea03 0408 	and.w	r4, r3, r8
 801556c:	f004 fc98 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8015570:	4603      	mov	r3, r0
 8015572:	4628      	mov	r0, r5
 8015574:	403c      	ands	r4, r7
 8015576:	f106 010c 	add.w	r1, r6, #12
 801557a:	461d      	mov	r5, r3
 801557c:	f7fb fbf4 	bl	8010d68 <ucdr_deserialize_bool>
 8015580:	4025      	ands	r5, r4
 8015582:	4028      	ands	r0, r5
 8015584:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015588 <uxr_deserialize_STATUS_Payload>:
 8015588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801558c:	2202      	movs	r2, #2
 801558e:	4606      	mov	r6, r0
 8015590:	460f      	mov	r7, r1
 8015592:	f004 fc85 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8015596:	2202      	movs	r2, #2
 8015598:	4605      	mov	r5, r0
 801559a:	4630      	mov	r0, r6
 801559c:	18b9      	adds	r1, r7, r2
 801559e:	f004 fc7f 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 80155a2:	4680      	mov	r8, r0
 80155a4:	1d39      	adds	r1, r7, #4
 80155a6:	4630      	mov	r0, r6
 80155a8:	f7fb fc0c 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 80155ac:	ea05 0508 	and.w	r5, r5, r8
 80155b0:	4604      	mov	r4, r0
 80155b2:	1d79      	adds	r1, r7, #5
 80155b4:	4630      	mov	r0, r6
 80155b6:	402c      	ands	r4, r5
 80155b8:	f7fb fc04 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 80155bc:	4020      	ands	r0, r4
 80155be:	b2c0      	uxtb	r0, r0
 80155c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080155c4 <uxr_serialize_INFO_Payload>:
 80155c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80155c8:	2202      	movs	r2, #2
 80155ca:	460c      	mov	r4, r1
 80155cc:	4605      	mov	r5, r0
 80155ce:	f004 fc03 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 80155d2:	2202      	movs	r2, #2
 80155d4:	4680      	mov	r8, r0
 80155d6:	4628      	mov	r0, r5
 80155d8:	18a1      	adds	r1, r4, r2
 80155da:	f004 fbfd 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 80155de:	4607      	mov	r7, r0
 80155e0:	7921      	ldrb	r1, [r4, #4]
 80155e2:	4628      	mov	r0, r5
 80155e4:	f7fb fbd8 	bl	8010d98 <ucdr_serialize_uint8_t>
 80155e8:	ea08 0807 	and.w	r8, r8, r7
 80155ec:	4606      	mov	r6, r0
 80155ee:	7961      	ldrb	r1, [r4, #5]
 80155f0:	4628      	mov	r0, r5
 80155f2:	ea06 0608 	and.w	r6, r6, r8
 80155f6:	f7fb fbcf 	bl	8010d98 <ucdr_serialize_uint8_t>
 80155fa:	7a21      	ldrb	r1, [r4, #8]
 80155fc:	4030      	ands	r0, r6
 80155fe:	b2c7      	uxtb	r7, r0
 8015600:	4628      	mov	r0, r5
 8015602:	f7fb fb9b 	bl	8010d3c <ucdr_serialize_bool>
 8015606:	7a23      	ldrb	r3, [r4, #8]
 8015608:	4606      	mov	r6, r0
 801560a:	b96b      	cbnz	r3, 8015628 <uxr_serialize_INFO_Payload+0x64>
 801560c:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8015610:	4628      	mov	r0, r5
 8015612:	f7fb fb93 	bl	8010d3c <ucdr_serialize_bool>
 8015616:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 801561a:	4030      	ands	r0, r6
 801561c:	b2c6      	uxtb	r6, r0
 801561e:	b983      	cbnz	r3, 8015642 <uxr_serialize_INFO_Payload+0x7e>
 8015620:	ea06 0007 	and.w	r0, r6, r7
 8015624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015628:	7b21      	ldrb	r1, [r4, #12]
 801562a:	4628      	mov	r0, r5
 801562c:	f7fb fbb4 	bl	8010d98 <ucdr_serialize_uint8_t>
 8015630:	b188      	cbz	r0, 8015656 <uxr_serialize_INFO_Payload+0x92>
 8015632:	f104 010c 	add.w	r1, r4, #12
 8015636:	4628      	mov	r0, r5
 8015638:	f7ff faf8 	bl	8014c2c <uxr_serialize_ObjectVariant.part.0>
 801563c:	4030      	ands	r0, r6
 801563e:	b2c6      	uxtb	r6, r0
 8015640:	e7e4      	b.n	801560c <uxr_serialize_INFO_Payload+0x48>
 8015642:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8015646:	4628      	mov	r0, r5
 8015648:	f7ff fdb8 	bl	80151bc <uxr_serialize_ActivityInfoVariant>
 801564c:	4006      	ands	r6, r0
 801564e:	ea06 0007 	and.w	r0, r6, r7
 8015652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015656:	4606      	mov	r6, r0
 8015658:	e7d8      	b.n	801560c <uxr_serialize_INFO_Payload+0x48>
 801565a:	bf00      	nop

0801565c <uxr_serialize_READ_DATA_Payload>:
 801565c:	b570      	push	{r4, r5, r6, lr}
 801565e:	2202      	movs	r2, #2
 8015660:	4605      	mov	r5, r0
 8015662:	460e      	mov	r6, r1
 8015664:	f004 fbb8 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 8015668:	2202      	movs	r2, #2
 801566a:	4604      	mov	r4, r0
 801566c:	4628      	mov	r0, r5
 801566e:	18b1      	adds	r1, r6, r2
 8015670:	f004 fbb2 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 8015674:	4603      	mov	r3, r0
 8015676:	1d31      	adds	r1, r6, #4
 8015678:	4628      	mov	r0, r5
 801567a:	401c      	ands	r4, r3
 801567c:	f7ff fe5e 	bl	801533c <uxr_serialize_ReadSpecification>
 8015680:	b2e4      	uxtb	r4, r4
 8015682:	4020      	ands	r0, r4
 8015684:	bd70      	pop	{r4, r5, r6, pc}
 8015686:	bf00      	nop

08015688 <uxr_serialize_WRITE_DATA_Payload_Data>:
 8015688:	b570      	push	{r4, r5, r6, lr}
 801568a:	2202      	movs	r2, #2
 801568c:	4605      	mov	r5, r0
 801568e:	460e      	mov	r6, r1
 8015690:	f004 fba2 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 8015694:	2202      	movs	r2, #2
 8015696:	4604      	mov	r4, r0
 8015698:	4628      	mov	r0, r5
 801569a:	18b1      	adds	r1, r6, r2
 801569c:	f004 fb9c 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 80156a0:	4020      	ands	r0, r4
 80156a2:	b2c0      	uxtb	r0, r0
 80156a4:	bd70      	pop	{r4, r5, r6, pc}
 80156a6:	bf00      	nop

080156a8 <uxr_serialize_ACKNACK_Payload>:
 80156a8:	b570      	push	{r4, r5, r6, lr}
 80156aa:	460c      	mov	r4, r1
 80156ac:	4605      	mov	r5, r0
 80156ae:	460e      	mov	r6, r1
 80156b0:	f834 1b02 	ldrh.w	r1, [r4], #2
 80156b4:	f7fb fb9c 	bl	8010df0 <ucdr_serialize_uint16_t>
 80156b8:	2202      	movs	r2, #2
 80156ba:	4621      	mov	r1, r4
 80156bc:	4604      	mov	r4, r0
 80156be:	4628      	mov	r0, r5
 80156c0:	f004 fb8a 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 80156c4:	4603      	mov	r3, r0
 80156c6:	7931      	ldrb	r1, [r6, #4]
 80156c8:	4628      	mov	r0, r5
 80156ca:	401c      	ands	r4, r3
 80156cc:	f7fb fb64 	bl	8010d98 <ucdr_serialize_uint8_t>
 80156d0:	b2e4      	uxtb	r4, r4
 80156d2:	4020      	ands	r0, r4
 80156d4:	bd70      	pop	{r4, r5, r6, pc}
 80156d6:	bf00      	nop

080156d8 <uxr_deserialize_ACKNACK_Payload>:
 80156d8:	b570      	push	{r4, r5, r6, lr}
 80156da:	460e      	mov	r6, r1
 80156dc:	4605      	mov	r5, r0
 80156de:	f7fb fc87 	bl	8010ff0 <ucdr_deserialize_uint16_t>
 80156e2:	2202      	movs	r2, #2
 80156e4:	4604      	mov	r4, r0
 80156e6:	4628      	mov	r0, r5
 80156e8:	18b1      	adds	r1, r6, r2
 80156ea:	f004 fbd9 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 80156ee:	4603      	mov	r3, r0
 80156f0:	1d31      	adds	r1, r6, #4
 80156f2:	4628      	mov	r0, r5
 80156f4:	401c      	ands	r4, r3
 80156f6:	f7fb fb65 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 80156fa:	b2e4      	uxtb	r4, r4
 80156fc:	4020      	ands	r0, r4
 80156fe:	bd70      	pop	{r4, r5, r6, pc}

08015700 <uxr_serialize_HEARTBEAT_Payload>:
 8015700:	b570      	push	{r4, r5, r6, lr}
 8015702:	460d      	mov	r5, r1
 8015704:	4606      	mov	r6, r0
 8015706:	8809      	ldrh	r1, [r1, #0]
 8015708:	f7fb fb72 	bl	8010df0 <ucdr_serialize_uint16_t>
 801570c:	8869      	ldrh	r1, [r5, #2]
 801570e:	4604      	mov	r4, r0
 8015710:	4630      	mov	r0, r6
 8015712:	f7fb fb6d 	bl	8010df0 <ucdr_serialize_uint16_t>
 8015716:	4603      	mov	r3, r0
 8015718:	7929      	ldrb	r1, [r5, #4]
 801571a:	4630      	mov	r0, r6
 801571c:	401c      	ands	r4, r3
 801571e:	f7fb fb3b 	bl	8010d98 <ucdr_serialize_uint8_t>
 8015722:	b2e4      	uxtb	r4, r4
 8015724:	4020      	ands	r0, r4
 8015726:	bd70      	pop	{r4, r5, r6, pc}

08015728 <uxr_deserialize_HEARTBEAT_Payload>:
 8015728:	b570      	push	{r4, r5, r6, lr}
 801572a:	460e      	mov	r6, r1
 801572c:	4605      	mov	r5, r0
 801572e:	f7fb fc5f 	bl	8010ff0 <ucdr_deserialize_uint16_t>
 8015732:	4604      	mov	r4, r0
 8015734:	1cb1      	adds	r1, r6, #2
 8015736:	4628      	mov	r0, r5
 8015738:	f7fb fc5a 	bl	8010ff0 <ucdr_deserialize_uint16_t>
 801573c:	4603      	mov	r3, r0
 801573e:	1d31      	adds	r1, r6, #4
 8015740:	4628      	mov	r0, r5
 8015742:	401c      	ands	r4, r3
 8015744:	f7fb fb3e 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 8015748:	b2e4      	uxtb	r4, r4
 801574a:	4020      	ands	r0, r4
 801574c:	bd70      	pop	{r4, r5, r6, pc}
 801574e:	bf00      	nop

08015750 <uxr_serialize_TIMESTAMP_Payload>:
 8015750:	b570      	push	{r4, r5, r6, lr}
 8015752:	460d      	mov	r5, r1
 8015754:	4606      	mov	r6, r0
 8015756:	6809      	ldr	r1, [r1, #0]
 8015758:	f7fc f94e 	bl	80119f8 <ucdr_serialize_int32_t>
 801575c:	4604      	mov	r4, r0
 801575e:	6869      	ldr	r1, [r5, #4]
 8015760:	4630      	mov	r0, r6
 8015762:	f7fb fd2f 	bl	80111c4 <ucdr_serialize_uint32_t>
 8015766:	4020      	ands	r0, r4
 8015768:	b2c0      	uxtb	r0, r0
 801576a:	bd70      	pop	{r4, r5, r6, pc}

0801576c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 801576c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015770:	460e      	mov	r6, r1
 8015772:	4605      	mov	r5, r0
 8015774:	f7fc f9d8 	bl	8011b28 <ucdr_deserialize_int32_t>
 8015778:	4607      	mov	r7, r0
 801577a:	1d31      	adds	r1, r6, #4
 801577c:	4628      	mov	r0, r5
 801577e:	f7fb fe51 	bl	8011424 <ucdr_deserialize_uint32_t>
 8015782:	4680      	mov	r8, r0
 8015784:	f106 0108 	add.w	r1, r6, #8
 8015788:	4628      	mov	r0, r5
 801578a:	f7fc f9cd 	bl	8011b28 <ucdr_deserialize_int32_t>
 801578e:	ea07 0708 	and.w	r7, r7, r8
 8015792:	4604      	mov	r4, r0
 8015794:	f106 010c 	add.w	r1, r6, #12
 8015798:	4628      	mov	r0, r5
 801579a:	403c      	ands	r4, r7
 801579c:	f7fb fe42 	bl	8011424 <ucdr_deserialize_uint32_t>
 80157a0:	f106 0110 	add.w	r1, r6, #16
 80157a4:	4004      	ands	r4, r0
 80157a6:	4628      	mov	r0, r5
 80157a8:	f7fc f9be 	bl	8011b28 <ucdr_deserialize_int32_t>
 80157ac:	4603      	mov	r3, r0
 80157ae:	b2e4      	uxtb	r4, r4
 80157b0:	4628      	mov	r0, r5
 80157b2:	461d      	mov	r5, r3
 80157b4:	f106 0114 	add.w	r1, r6, #20
 80157b8:	f7fb fe34 	bl	8011424 <ucdr_deserialize_uint32_t>
 80157bc:	402c      	ands	r4, r5
 80157be:	4020      	ands	r0, r4
 80157c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080157c4 <uxr_serialize_SampleIdentity>:
 80157c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80157c8:	4604      	mov	r4, r0
 80157ca:	460d      	mov	r5, r1
 80157cc:	220c      	movs	r2, #12
 80157ce:	f004 fb03 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 80157d2:	2203      	movs	r2, #3
 80157d4:	f105 010c 	add.w	r1, r5, #12
 80157d8:	4607      	mov	r7, r0
 80157da:	4620      	mov	r0, r4
 80157dc:	f004 fafc 	bl	8019dd8 <ucdr_serialize_array_uint8_t>
 80157e0:	7be9      	ldrb	r1, [r5, #15]
 80157e2:	4680      	mov	r8, r0
 80157e4:	4620      	mov	r0, r4
 80157e6:	f7fb fad7 	bl	8010d98 <ucdr_serialize_uint8_t>
 80157ea:	6929      	ldr	r1, [r5, #16]
 80157ec:	4606      	mov	r6, r0
 80157ee:	4620      	mov	r0, r4
 80157f0:	f7fc f902 	bl	80119f8 <ucdr_serialize_int32_t>
 80157f4:	ea07 0708 	and.w	r7, r7, r8
 80157f8:	4603      	mov	r3, r0
 80157fa:	4620      	mov	r0, r4
 80157fc:	403e      	ands	r6, r7
 80157fe:	6969      	ldr	r1, [r5, #20]
 8015800:	461c      	mov	r4, r3
 8015802:	f7fb fcdf 	bl	80111c4 <ucdr_serialize_uint32_t>
 8015806:	4034      	ands	r4, r6
 8015808:	4020      	ands	r0, r4
 801580a:	b2c0      	uxtb	r0, r0
 801580c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08015810 <uxr_deserialize_SampleIdentity>:
 8015810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015814:	4604      	mov	r4, r0
 8015816:	460d      	mov	r5, r1
 8015818:	220c      	movs	r2, #12
 801581a:	f004 fb41 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 801581e:	2203      	movs	r2, #3
 8015820:	f105 010c 	add.w	r1, r5, #12
 8015824:	4607      	mov	r7, r0
 8015826:	4620      	mov	r0, r4
 8015828:	f004 fb3a 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 801582c:	f105 010f 	add.w	r1, r5, #15
 8015830:	4680      	mov	r8, r0
 8015832:	4620      	mov	r0, r4
 8015834:	f7fb fac6 	bl	8010dc4 <ucdr_deserialize_uint8_t>
 8015838:	f105 0110 	add.w	r1, r5, #16
 801583c:	4606      	mov	r6, r0
 801583e:	4620      	mov	r0, r4
 8015840:	f7fc f972 	bl	8011b28 <ucdr_deserialize_int32_t>
 8015844:	ea07 0708 	and.w	r7, r7, r8
 8015848:	4603      	mov	r3, r0
 801584a:	4620      	mov	r0, r4
 801584c:	403e      	ands	r6, r7
 801584e:	f105 0114 	add.w	r1, r5, #20
 8015852:	461c      	mov	r4, r3
 8015854:	f7fb fde6 	bl	8011424 <ucdr_deserialize_uint32_t>
 8015858:	4034      	ands	r4, r6
 801585a:	4020      	ands	r0, r4
 801585c:	b2c0      	uxtb	r0, r0
 801585e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015862:	bf00      	nop

08015864 <rcl_client_get_rmw_handle>:
 8015864:	b118      	cbz	r0, 801586e <rcl_client_get_rmw_handle+0xa>
 8015866:	6800      	ldr	r0, [r0, #0]
 8015868:	b108      	cbz	r0, 801586e <rcl_client_get_rmw_handle+0xa>
 801586a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801586e:	4770      	bx	lr

08015870 <rcl_send_request>:
 8015870:	b570      	push	{r4, r5, r6, lr}
 8015872:	b082      	sub	sp, #8
 8015874:	b1f8      	cbz	r0, 80158b6 <rcl_send_request+0x46>
 8015876:	4604      	mov	r4, r0
 8015878:	6800      	ldr	r0, [r0, #0]
 801587a:	b1e0      	cbz	r0, 80158b6 <rcl_send_request+0x46>
 801587c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8015880:	b1cb      	cbz	r3, 80158b6 <rcl_send_request+0x46>
 8015882:	460e      	mov	r6, r1
 8015884:	b1e1      	cbz	r1, 80158c0 <rcl_send_request+0x50>
 8015886:	4615      	mov	r5, r2
 8015888:	b1d2      	cbz	r2, 80158c0 <rcl_send_request+0x50>
 801588a:	2105      	movs	r1, #5
 801588c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8015890:	f002 fe1a 	bl	80184c8 <__atomic_load_8>
 8015894:	4602      	mov	r2, r0
 8015896:	460b      	mov	r3, r1
 8015898:	4631      	mov	r1, r6
 801589a:	e9c5 2300 	strd	r2, r3, [r5]
 801589e:	6823      	ldr	r3, [r4, #0]
 80158a0:	462a      	mov	r2, r5
 80158a2:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 80158a6:	f003 fd3d 	bl	8019324 <rmw_send_request>
 80158aa:	4606      	mov	r6, r0
 80158ac:	b160      	cbz	r0, 80158c8 <rcl_send_request+0x58>
 80158ae:	2601      	movs	r6, #1
 80158b0:	4630      	mov	r0, r6
 80158b2:	b002      	add	sp, #8
 80158b4:	bd70      	pop	{r4, r5, r6, pc}
 80158b6:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 80158ba:	4630      	mov	r0, r6
 80158bc:	b002      	add	sp, #8
 80158be:	bd70      	pop	{r4, r5, r6, pc}
 80158c0:	260b      	movs	r6, #11
 80158c2:	4630      	mov	r0, r6
 80158c4:	b002      	add	sp, #8
 80158c6:	bd70      	pop	{r4, r5, r6, pc}
 80158c8:	6820      	ldr	r0, [r4, #0]
 80158ca:	2105      	movs	r1, #5
 80158cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80158d0:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 80158d4:	9100      	str	r1, [sp, #0]
 80158d6:	f002 fe63 	bl	80185a0 <__atomic_exchange_8>
 80158da:	4630      	mov	r0, r6
 80158dc:	b002      	add	sp, #8
 80158de:	bd70      	pop	{r4, r5, r6, pc}

080158e0 <rcl_take_response>:
 80158e0:	b570      	push	{r4, r5, r6, lr}
 80158e2:	468e      	mov	lr, r1
 80158e4:	b08c      	sub	sp, #48	@ 0x30
 80158e6:	460c      	mov	r4, r1
 80158e8:	4616      	mov	r6, r2
 80158ea:	f10d 0c18 	add.w	ip, sp, #24
 80158ee:	4605      	mov	r5, r0
 80158f0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80158f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80158f8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80158fc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015900:	b35d      	cbz	r5, 801595a <rcl_take_response+0x7a>
 8015902:	682b      	ldr	r3, [r5, #0]
 8015904:	b34b      	cbz	r3, 801595a <rcl_take_response+0x7a>
 8015906:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801590a:	b330      	cbz	r0, 801595a <rcl_take_response+0x7a>
 801590c:	b346      	cbz	r6, 8015960 <rcl_take_response+0x80>
 801590e:	2300      	movs	r3, #0
 8015910:	4632      	mov	r2, r6
 8015912:	a902      	add	r1, sp, #8
 8015914:	f88d 3007 	strb.w	r3, [sp, #7]
 8015918:	f10d 0307 	add.w	r3, sp, #7
 801591c:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8015968 <rcl_take_response+0x88>
 8015920:	ed8d 7b02 	vstr	d7, [sp, #8]
 8015924:	ed8d 7b04 	vstr	d7, [sp, #16]
 8015928:	f003 fe04 	bl	8019534 <rmw_take_response>
 801592c:	4605      	mov	r5, r0
 801592e:	b9c8      	cbnz	r0, 8015964 <rcl_take_response+0x84>
 8015930:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8015934:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8015938:	2a00      	cmp	r2, #0
 801593a:	bf08      	it	eq
 801593c:	461d      	moveq	r5, r3
 801593e:	f10d 0e18 	add.w	lr, sp, #24
 8015942:	46a4      	mov	ip, r4
 8015944:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015948:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801594c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8015950:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015954:	4628      	mov	r0, r5
 8015956:	b00c      	add	sp, #48	@ 0x30
 8015958:	bd70      	pop	{r4, r5, r6, pc}
 801595a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 801595e:	e7ee      	b.n	801593e <rcl_take_response+0x5e>
 8015960:	250b      	movs	r5, #11
 8015962:	e7ec      	b.n	801593e <rcl_take_response+0x5e>
 8015964:	2501      	movs	r5, #1
 8015966:	e7ea      	b.n	801593e <rcl_take_response+0x5e>
	...

08015970 <rcl_client_is_valid>:
 8015970:	b130      	cbz	r0, 8015980 <rcl_client_is_valid+0x10>
 8015972:	6800      	ldr	r0, [r0, #0]
 8015974:	b120      	cbz	r0, 8015980 <rcl_client_is_valid+0x10>
 8015976:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801597a:	3800      	subs	r0, #0
 801597c:	bf18      	it	ne
 801597e:	2001      	movne	r0, #1
 8015980:	4770      	bx	lr
 8015982:	bf00      	nop

08015984 <rcl_convert_rmw_ret_to_rcl_ret>:
 8015984:	280b      	cmp	r0, #11
 8015986:	dc0d      	bgt.n	80159a4 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8015988:	2800      	cmp	r0, #0
 801598a:	db09      	blt.n	80159a0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 801598c:	280b      	cmp	r0, #11
 801598e:	d807      	bhi.n	80159a0 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8015990:	e8df f000 	tbb	[pc, r0]
 8015994:	07060607 	.word	0x07060607
 8015998:	06060606 	.word	0x06060606
 801599c:	07070606 	.word	0x07070606
 80159a0:	2001      	movs	r0, #1
 80159a2:	4770      	bx	lr
 80159a4:	28cb      	cmp	r0, #203	@ 0xcb
 80159a6:	bf18      	it	ne
 80159a8:	2001      	movne	r0, #1
 80159aa:	4770      	bx	lr

080159ac <rcl_get_zero_initialized_context>:
 80159ac:	4a03      	ldr	r2, [pc, #12]	@ (80159bc <rcl_get_zero_initialized_context+0x10>)
 80159ae:	4603      	mov	r3, r0
 80159b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80159b4:	e883 0003 	stmia.w	r3, {r0, r1}
 80159b8:	4618      	mov	r0, r3
 80159ba:	4770      	bx	lr
 80159bc:	0801d208 	.word	0x0801d208

080159c0 <rcl_context_is_valid>:
 80159c0:	b118      	cbz	r0, 80159ca <rcl_context_is_valid+0xa>
 80159c2:	6840      	ldr	r0, [r0, #4]
 80159c4:	3800      	subs	r0, #0
 80159c6:	bf18      	it	ne
 80159c8:	2001      	movne	r0, #1
 80159ca:	4770      	bx	lr

080159cc <__cleanup_context>:
 80159cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80159d0:	4606      	mov	r6, r0
 80159d2:	2300      	movs	r3, #0
 80159d4:	6800      	ldr	r0, [r0, #0]
 80159d6:	6073      	str	r3, [r6, #4]
 80159d8:	2800      	cmp	r0, #0
 80159da:	d049      	beq.n	8015a70 <__cleanup_context+0xa4>
 80159dc:	6947      	ldr	r7, [r0, #20]
 80159de:	f8d0 8004 	ldr.w	r8, [r0, #4]
 80159e2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 80159e6:	b137      	cbz	r7, 80159f6 <__cleanup_context+0x2a>
 80159e8:	3014      	adds	r0, #20
 80159ea:	f7f8 fc87 	bl	800e2fc <rcl_init_options_fini>
 80159ee:	4607      	mov	r7, r0
 80159f0:	2800      	cmp	r0, #0
 80159f2:	d144      	bne.n	8015a7e <__cleanup_context+0xb2>
 80159f4:	6830      	ldr	r0, [r6, #0]
 80159f6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80159f8:	b143      	cbz	r3, 8015a0c <__cleanup_context+0x40>
 80159fa:	3028      	adds	r0, #40	@ 0x28
 80159fc:	f7fa f86e 	bl	800fadc <rmw_context_fini>
 8015a00:	b118      	cbz	r0, 8015a0a <__cleanup_context+0x3e>
 8015a02:	2f00      	cmp	r7, #0
 8015a04:	d03e      	beq.n	8015a84 <__cleanup_context+0xb8>
 8015a06:	f7f9 fd9f 	bl	800f548 <rcutils_reset_error>
 8015a0a:	6830      	ldr	r0, [r6, #0]
 8015a0c:	6a03      	ldr	r3, [r0, #32]
 8015a0e:	b1db      	cbz	r3, 8015a48 <__cleanup_context+0x7c>
 8015a10:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8015a14:	2a01      	cmp	r2, #1
 8015a16:	f17c 0100 	sbcs.w	r1, ip, #0
 8015a1a:	db11      	blt.n	8015a40 <__cleanup_context+0x74>
 8015a1c:	2400      	movs	r4, #0
 8015a1e:	4625      	mov	r5, r4
 8015a20:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015a24:	4649      	mov	r1, r9
 8015a26:	b1b8      	cbz	r0, 8015a58 <__cleanup_context+0x8c>
 8015a28:	47c0      	blx	r8
 8015a2a:	6833      	ldr	r3, [r6, #0]
 8015a2c:	3401      	adds	r4, #1
 8015a2e:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8015a32:	f145 0500 	adc.w	r5, r5, #0
 8015a36:	6a1b      	ldr	r3, [r3, #32]
 8015a38:	4294      	cmp	r4, r2
 8015a3a:	eb75 010c 	sbcs.w	r1, r5, ip
 8015a3e:	dbef      	blt.n	8015a20 <__cleanup_context+0x54>
 8015a40:	4618      	mov	r0, r3
 8015a42:	4649      	mov	r1, r9
 8015a44:	47c0      	blx	r8
 8015a46:	6830      	ldr	r0, [r6, #0]
 8015a48:	4649      	mov	r1, r9
 8015a4a:	47c0      	blx	r8
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	4638      	mov	r0, r7
 8015a50:	e9c6 3300 	strd	r3, r3, [r6]
 8015a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a58:	3401      	adds	r4, #1
 8015a5a:	f145 0500 	adc.w	r5, r5, #0
 8015a5e:	4294      	cmp	r4, r2
 8015a60:	eb75 010c 	sbcs.w	r1, r5, ip
 8015a64:	dbdc      	blt.n	8015a20 <__cleanup_context+0x54>
 8015a66:	4618      	mov	r0, r3
 8015a68:	4649      	mov	r1, r9
 8015a6a:	47c0      	blx	r8
 8015a6c:	6830      	ldr	r0, [r6, #0]
 8015a6e:	e7eb      	b.n	8015a48 <__cleanup_context+0x7c>
 8015a70:	4607      	mov	r7, r0
 8015a72:	2300      	movs	r3, #0
 8015a74:	4638      	mov	r0, r7
 8015a76:	e9c6 3300 	strd	r3, r3, [r6]
 8015a7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015a7e:	f7f9 fd63 	bl	800f548 <rcutils_reset_error>
 8015a82:	e7b7      	b.n	80159f4 <__cleanup_context+0x28>
 8015a84:	f7ff ff7e 	bl	8015984 <rcl_convert_rmw_ret_to_rcl_ret>
 8015a88:	4607      	mov	r7, r0
 8015a8a:	e7bc      	b.n	8015a06 <__cleanup_context+0x3a>

08015a8c <rcl_init>:
 8015a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015a90:	1e05      	subs	r5, r0, #0
 8015a92:	b09e      	sub	sp, #120	@ 0x78
 8015a94:	460e      	mov	r6, r1
 8015a96:	4690      	mov	r8, r2
 8015a98:	461f      	mov	r7, r3
 8015a9a:	f340 809f 	ble.w	8015bdc <rcl_init+0x150>
 8015a9e:	2900      	cmp	r1, #0
 8015aa0:	f000 809f 	beq.w	8015be2 <rcl_init+0x156>
 8015aa4:	f1a1 0e04 	sub.w	lr, r1, #4
 8015aa8:	f04f 0c00 	mov.w	ip, #0
 8015aac:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8015ab0:	f10c 0c01 	add.w	ip, ip, #1
 8015ab4:	2c00      	cmp	r4, #0
 8015ab6:	f000 8094 	beq.w	8015be2 <rcl_init+0x156>
 8015aba:	4565      	cmp	r5, ip
 8015abc:	d1f6      	bne.n	8015aac <rcl_init+0x20>
 8015abe:	f1b8 0f00 	cmp.w	r8, #0
 8015ac2:	f000 808e 	beq.w	8015be2 <rcl_init+0x156>
 8015ac6:	f8d8 4000 	ldr.w	r4, [r8]
 8015aca:	2c00      	cmp	r4, #0
 8015acc:	f000 8089 	beq.w	8015be2 <rcl_init+0x156>
 8015ad0:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 8015ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015ad6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015ada:	6823      	ldr	r3, [r4, #0]
 8015adc:	a819      	add	r0, sp, #100	@ 0x64
 8015ade:	f8cc 3000 	str.w	r3, [ip]
 8015ae2:	f7f9 fd0d 	bl	800f500 <rcutils_allocator_is_valid>
 8015ae6:	f080 0001 	eor.w	r0, r0, #1
 8015aea:	b2c0      	uxtb	r0, r0
 8015aec:	2800      	cmp	r0, #0
 8015aee:	d178      	bne.n	8015be2 <rcl_init+0x156>
 8015af0:	2f00      	cmp	r7, #0
 8015af2:	d076      	beq.n	8015be2 <rcl_init+0x156>
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d178      	bne.n	8015bec <rcl_init+0x160>
 8015afa:	2178      	movs	r1, #120	@ 0x78
 8015afc:	2001      	movs	r0, #1
 8015afe:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8015b02:	4798      	blx	r3
 8015b04:	4604      	mov	r4, r0
 8015b06:	6038      	str	r0, [r7, #0]
 8015b08:	2800      	cmp	r0, #0
 8015b0a:	f000 80b6 	beq.w	8015c7a <rcl_init+0x1ee>
 8015b0e:	a802      	add	r0, sp, #8
 8015b10:	f003 f84e 	bl	8018bb0 <rmw_get_zero_initialized_context>
 8015b14:	a902      	add	r1, sp, #8
 8015b16:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 8015b1a:	2250      	movs	r2, #80	@ 0x50
 8015b1c:	f006 fa09 	bl	801bf32 <memcpy>
 8015b20:	ac19      	add	r4, sp, #100	@ 0x64
 8015b22:	f8d7 e000 	ldr.w	lr, [r7]
 8015b26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8015b28:	46f4      	mov	ip, lr
 8015b2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015b2e:	6823      	ldr	r3, [r4, #0]
 8015b30:	f10e 0114 	add.w	r1, lr, #20
 8015b34:	4640      	mov	r0, r8
 8015b36:	f8cc 3000 	str.w	r3, [ip]
 8015b3a:	f7f8 fc09 	bl	800e350 <rcl_init_options_copy>
 8015b3e:	4604      	mov	r4, r0
 8015b40:	2800      	cmp	r0, #0
 8015b42:	d144      	bne.n	8015bce <rcl_init+0x142>
 8015b44:	f8d7 9000 	ldr.w	r9, [r7]
 8015b48:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8015b4c:	f8c9 0020 	str.w	r0, [r9, #32]
 8015b50:	f8c9 5018 	str.w	r5, [r9, #24]
 8015b54:	f8c9 801c 	str.w	r8, [r9, #28]
 8015b58:	2d00      	cmp	r5, #0
 8015b5a:	d04e      	beq.n	8015bfa <rcl_init+0x16e>
 8015b5c:	2e00      	cmp	r6, #0
 8015b5e:	d04c      	beq.n	8015bfa <rcl_init+0x16e>
 8015b60:	2104      	movs	r1, #4
 8015b62:	4628      	mov	r0, r5
 8015b64:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 8015b68:	4798      	blx	r3
 8015b6a:	f8c9 0020 	str.w	r0, [r9, #32]
 8015b6e:	f8d7 9000 	ldr.w	r9, [r7]
 8015b72:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8015b76:	46ca      	mov	sl, r9
 8015b78:	b343      	cbz	r3, 8015bcc <rcl_init+0x140>
 8015b7a:	2d01      	cmp	r5, #1
 8015b7c:	f178 0300 	sbcs.w	r3, r8, #0
 8015b80:	db3b      	blt.n	8015bfa <rcl_init+0x16e>
 8015b82:	2400      	movs	r4, #0
 8015b84:	3e04      	subs	r6, #4
 8015b86:	46a1      	mov	r9, r4
 8015b88:	e00b      	b.n	8015ba2 <rcl_init+0x116>
 8015b8a:	6831      	ldr	r1, [r6, #0]
 8015b8c:	f006 f9d1 	bl	801bf32 <memcpy>
 8015b90:	3401      	adds	r4, #1
 8015b92:	f149 0900 	adc.w	r9, r9, #0
 8015b96:	45c8      	cmp	r8, r9
 8015b98:	bf08      	it	eq
 8015b9a:	42a5      	cmpeq	r5, r4
 8015b9c:	d02b      	beq.n	8015bf6 <rcl_init+0x16a>
 8015b9e:	f8d7 a000 	ldr.w	sl, [r7]
 8015ba2:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8015ba6:	f7ea fba5 	bl	80002f4 <strlen>
 8015baa:	1c42      	adds	r2, r0, #1
 8015bac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8015bae:	4610      	mov	r0, r2
 8015bb0:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8015bb2:	f8da a020 	ldr.w	sl, [sl, #32]
 8015bb6:	9201      	str	r2, [sp, #4]
 8015bb8:	4798      	blx	r3
 8015bba:	683b      	ldr	r3, [r7, #0]
 8015bbc:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 8015bc0:	6a1b      	ldr	r3, [r3, #32]
 8015bc2:	9a01      	ldr	r2, [sp, #4]
 8015bc4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015bc8:	2800      	cmp	r0, #0
 8015bca:	d1de      	bne.n	8015b8a <rcl_init+0xfe>
 8015bcc:	240a      	movs	r4, #10
 8015bce:	4638      	mov	r0, r7
 8015bd0:	f7ff fefc 	bl	80159cc <__cleanup_context>
 8015bd4:	4620      	mov	r0, r4
 8015bd6:	b01e      	add	sp, #120	@ 0x78
 8015bd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bdc:	2900      	cmp	r1, #0
 8015bde:	f43f af6e 	beq.w	8015abe <rcl_init+0x32>
 8015be2:	240b      	movs	r4, #11
 8015be4:	4620      	mov	r0, r4
 8015be6:	b01e      	add	sp, #120	@ 0x78
 8015be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bec:	2464      	movs	r4, #100	@ 0x64
 8015bee:	4620      	mov	r0, r4
 8015bf0:	b01e      	add	sp, #120	@ 0x78
 8015bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015bf6:	f8d7 9000 	ldr.w	r9, [r7]
 8015bfa:	4926      	ldr	r1, [pc, #152]	@ (8015c94 <rcl_init+0x208>)
 8015bfc:	680b      	ldr	r3, [r1, #0]
 8015bfe:	3301      	adds	r3, #1
 8015c00:	d036      	beq.n	8015c70 <rcl_init+0x1e4>
 8015c02:	461a      	mov	r2, r3
 8015c04:	2400      	movs	r4, #0
 8015c06:	600b      	str	r3, [r1, #0]
 8015c08:	f8d9 0014 	ldr.w	r0, [r9, #20]
 8015c0c:	607b      	str	r3, [r7, #4]
 8015c0e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8015c10:	3301      	adds	r3, #1
 8015c12:	e9c0 2406 	strd	r2, r4, [r0, #24]
 8015c16:	d034      	beq.n	8015c82 <rcl_init+0x1f6>
 8015c18:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 8015c1c:	b93b      	cbnz	r3, 8015c2e <rcl_init+0x1a2>
 8015c1e:	3030      	adds	r0, #48	@ 0x30
 8015c20:	f000 f83a 	bl	8015c98 <rcl_get_localhost_only>
 8015c24:	4604      	mov	r4, r0
 8015c26:	2800      	cmp	r0, #0
 8015c28:	d1d1      	bne.n	8015bce <rcl_init+0x142>
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	6958      	ldr	r0, [r3, #20]
 8015c2e:	aa18      	add	r2, sp, #96	@ 0x60
 8015c30:	a917      	add	r1, sp, #92	@ 0x5c
 8015c32:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8015c34:	f001 f8d2 	bl	8016ddc <rcl_validate_enclave_name>
 8015c38:	4604      	mov	r4, r0
 8015c3a:	2800      	cmp	r0, #0
 8015c3c:	d1c7      	bne.n	8015bce <rcl_init+0x142>
 8015c3e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8015c40:	b9eb      	cbnz	r3, 8015c7e <rcl_init+0x1f2>
 8015c42:	6839      	ldr	r1, [r7, #0]
 8015c44:	694b      	ldr	r3, [r1, #20]
 8015c46:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8015c4a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8015c4c:	f000 fb72 	bl	8016334 <rcl_get_security_options_from_environment>
 8015c50:	4604      	mov	r4, r0
 8015c52:	2800      	cmp	r0, #0
 8015c54:	d1bb      	bne.n	8015bce <rcl_init+0x142>
 8015c56:	6839      	ldr	r1, [r7, #0]
 8015c58:	6948      	ldr	r0, [r1, #20]
 8015c5a:	3128      	adds	r1, #40	@ 0x28
 8015c5c:	3018      	adds	r0, #24
 8015c5e:	f7f9 fe07 	bl	800f870 <rmw_init>
 8015c62:	4604      	mov	r4, r0
 8015c64:	2800      	cmp	r0, #0
 8015c66:	d0bd      	beq.n	8015be4 <rcl_init+0x158>
 8015c68:	f7ff fe8c 	bl	8015984 <rcl_convert_rmw_ret_to_rcl_ret>
 8015c6c:	4604      	mov	r4, r0
 8015c6e:	e7ae      	b.n	8015bce <rcl_init+0x142>
 8015c70:	2201      	movs	r2, #1
 8015c72:	461c      	mov	r4, r3
 8015c74:	600a      	str	r2, [r1, #0]
 8015c76:	4613      	mov	r3, r2
 8015c78:	e7c6      	b.n	8015c08 <rcl_init+0x17c>
 8015c7a:	240a      	movs	r4, #10
 8015c7c:	e7b2      	b.n	8015be4 <rcl_init+0x158>
 8015c7e:	2401      	movs	r4, #1
 8015c80:	e7a5      	b.n	8015bce <rcl_init+0x142>
 8015c82:	3024      	adds	r0, #36	@ 0x24
 8015c84:	f004 ffa0 	bl	801abc8 <rcl_get_default_domain_id>
 8015c88:	4604      	mov	r4, r0
 8015c8a:	2800      	cmp	r0, #0
 8015c8c:	d19f      	bne.n	8015bce <rcl_init+0x142>
 8015c8e:	683b      	ldr	r3, [r7, #0]
 8015c90:	6958      	ldr	r0, [r3, #20]
 8015c92:	e7c1      	b.n	8015c18 <rcl_init+0x18c>
 8015c94:	24012f78 	.word	0x24012f78

08015c98 <rcl_get_localhost_only>:
 8015c98:	b510      	push	{r4, lr}
 8015c9a:	2300      	movs	r3, #0
 8015c9c:	b082      	sub	sp, #8
 8015c9e:	9301      	str	r3, [sp, #4]
 8015ca0:	b1b8      	cbz	r0, 8015cd2 <rcl_get_localhost_only+0x3a>
 8015ca2:	4604      	mov	r4, r0
 8015ca4:	a901      	add	r1, sp, #4
 8015ca6:	480c      	ldr	r0, [pc, #48]	@ (8015cd8 <rcl_get_localhost_only+0x40>)
 8015ca8:	f002 fcb2 	bl	8018610 <rcutils_get_env>
 8015cac:	b110      	cbz	r0, 8015cb4 <rcl_get_localhost_only+0x1c>
 8015cae:	2001      	movs	r0, #1
 8015cb0:	b002      	add	sp, #8
 8015cb2:	bd10      	pop	{r4, pc}
 8015cb4:	9b01      	ldr	r3, [sp, #4]
 8015cb6:	b113      	cbz	r3, 8015cbe <rcl_get_localhost_only+0x26>
 8015cb8:	781a      	ldrb	r2, [r3, #0]
 8015cba:	2a31      	cmp	r2, #49	@ 0x31
 8015cbc:	d004      	beq.n	8015cc8 <rcl_get_localhost_only+0x30>
 8015cbe:	2302      	movs	r3, #2
 8015cc0:	2000      	movs	r0, #0
 8015cc2:	7023      	strb	r3, [r4, #0]
 8015cc4:	b002      	add	sp, #8
 8015cc6:	bd10      	pop	{r4, pc}
 8015cc8:	785b      	ldrb	r3, [r3, #1]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d1f7      	bne.n	8015cbe <rcl_get_localhost_only+0x26>
 8015cce:	2301      	movs	r3, #1
 8015cd0:	e7f6      	b.n	8015cc0 <rcl_get_localhost_only+0x28>
 8015cd2:	200b      	movs	r0, #11
 8015cd4:	b002      	add	sp, #8
 8015cd6:	bd10      	pop	{r4, pc}
 8015cd8:	0801d210 	.word	0x0801d210

08015cdc <rcl_get_zero_initialized_node>:
 8015cdc:	4a03      	ldr	r2, [pc, #12]	@ (8015cec <rcl_get_zero_initialized_node+0x10>)
 8015cde:	4603      	mov	r3, r0
 8015ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8015ce4:	e883 0003 	stmia.w	r3, {r0, r1}
 8015ce8:	4618      	mov	r0, r3
 8015cea:	4770      	bx	lr
 8015cec:	0801d22c 	.word	0x0801d22c

08015cf0 <rcl_node_init>:
 8015cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015cf4:	b0a9      	sub	sp, #164	@ 0xa4
 8015cf6:	4604      	mov	r4, r0
 8015cf8:	460e      	mov	r6, r1
 8015cfa:	4615      	mov	r5, r2
 8015cfc:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 8015d00:	a823      	add	r0, sp, #140	@ 0x8c
 8015d02:	461f      	mov	r7, r3
 8015d04:	f005 f9d4 	bl	801b0b0 <rcl_guard_condition_get_default_options>
 8015d08:	f1b8 0f00 	cmp.w	r8, #0
 8015d0c:	f000 80f3 	beq.w	8015ef6 <rcl_node_init+0x206>
 8015d10:	4640      	mov	r0, r8
 8015d12:	f7f9 fbf5 	bl	800f500 <rcutils_allocator_is_valid>
 8015d16:	2d00      	cmp	r5, #0
 8015d18:	bf18      	it	ne
 8015d1a:	2c00      	cmpne	r4, #0
 8015d1c:	f080 0001 	eor.w	r0, r0, #1
 8015d20:	bf0c      	ite	eq
 8015d22:	f04f 0c01 	moveq.w	ip, #1
 8015d26:	f04f 0c00 	movne.w	ip, #0
 8015d2a:	2e00      	cmp	r6, #0
 8015d2c:	bf08      	it	eq
 8015d2e:	f04c 0c01 	orreq.w	ip, ip, #1
 8015d32:	ea4c 0c00 	orr.w	ip, ip, r0
 8015d36:	f01c 09ff 	ands.w	r9, ip, #255	@ 0xff
 8015d3a:	f040 80dc 	bne.w	8015ef6 <rcl_node_init+0x206>
 8015d3e:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8015d42:	f1ba 0f00 	cmp.w	sl, #0
 8015d46:	f040 80fc 	bne.w	8015f42 <rcl_node_init+0x252>
 8015d4a:	2f00      	cmp	r7, #0
 8015d4c:	f000 80d3 	beq.w	8015ef6 <rcl_node_init+0x206>
 8015d50:	4638      	mov	r0, r7
 8015d52:	f7ff fe35 	bl	80159c0 <rcl_context_is_valid>
 8015d56:	4683      	mov	fp, r0
 8015d58:	2800      	cmp	r0, #0
 8015d5a:	f000 80d2 	beq.w	8015f02 <rcl_node_init+0x212>
 8015d5e:	4652      	mov	r2, sl
 8015d60:	4630      	mov	r0, r6
 8015d62:	a922      	add	r1, sp, #136	@ 0x88
 8015d64:	f8cd a088 	str.w	sl, [sp, #136]	@ 0x88
 8015d68:	f003 f8b4 	bl	8018ed4 <rmw_validate_node_name>
 8015d6c:	4682      	mov	sl, r0
 8015d6e:	2800      	cmp	r0, #0
 8015d70:	f040 80c3 	bne.w	8015efa <rcl_node_init+0x20a>
 8015d74:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8015d76:	2800      	cmp	r0, #0
 8015d78:	f040 80f1 	bne.w	8015f5e <rcl_node_init+0x26e>
 8015d7c:	4628      	mov	r0, r5
 8015d7e:	f7ea fab9 	bl	80002f4 <strlen>
 8015d82:	2800      	cmp	r0, #0
 8015d84:	f040 80c0 	bne.w	8015f08 <rcl_node_init+0x218>
 8015d88:	4d79      	ldr	r5, [pc, #484]	@ (8015f70 <rcl_node_init+0x280>)
 8015d8a:	a922      	add	r1, sp, #136	@ 0x88
 8015d8c:	2200      	movs	r2, #0
 8015d8e:	4628      	mov	r0, r5
 8015d90:	f003 f882 	bl	8018e98 <rmw_validate_namespace>
 8015d94:	4682      	mov	sl, r0
 8015d96:	2800      	cmp	r0, #0
 8015d98:	f040 80af 	bne.w	8015efa <rcl_node_init+0x20a>
 8015d9c:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8015d9e:	2800      	cmp	r0, #0
 8015da0:	f040 80d5 	bne.w	8015f4e <rcl_node_init+0x25e>
 8015da4:	f8d8 3000 	ldr.w	r3, [r8]
 8015da8:	2078      	movs	r0, #120	@ 0x78
 8015daa:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015dae:	4798      	blx	r3
 8015db0:	4682      	mov	sl, r0
 8015db2:	6060      	str	r0, [r4, #4]
 8015db4:	2800      	cmp	r0, #0
 8015db6:	f000 80cf 	beq.w	8015f58 <rcl_node_init+0x268>
 8015dba:	2200      	movs	r2, #0
 8015dbc:	2300      	movs	r3, #0
 8015dbe:	a808      	add	r0, sp, #32
 8015dc0:	e9ca 231a 	strd	r2, r3, [sl, #104]	@ 0x68
 8015dc4:	e9ca 231c 	strd	r2, r3, [sl, #112]	@ 0x70
 8015dc8:	f000 f902 	bl	8015fd0 <rcl_node_get_default_options>
 8015dcc:	a908      	add	r1, sp, #32
 8015dce:	4650      	mov	r0, sl
 8015dd0:	2268      	movs	r2, #104	@ 0x68
 8015dd2:	f006 f8ae 	bl	801bf32 <memcpy>
 8015dd6:	6861      	ldr	r1, [r4, #4]
 8015dd8:	4640      	mov	r0, r8
 8015dda:	6027      	str	r7, [r4, #0]
 8015ddc:	f000 f906 	bl	8015fec <rcl_node_options_copy>
 8015de0:	2800      	cmp	r0, #0
 8015de2:	d158      	bne.n	8015e96 <rcl_node_init+0x1a6>
 8015de4:	4628      	mov	r0, r5
 8015de6:	f7ea fa85 	bl	80002f4 <strlen>
 8015dea:	4428      	add	r0, r5
 8015dec:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8015df0:	e9cd 5603 	strd	r5, r6, [sp, #12]
 8015df4:	2b2f      	cmp	r3, #47	@ 0x2f
 8015df6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015dfa:	9300      	str	r3, [sp, #0]
 8015dfc:	bf0c      	ite	eq
 8015dfe:	4b5d      	ldreq	r3, [pc, #372]	@ (8015f74 <rcl_node_init+0x284>)
 8015e00:	4b5d      	ldrne	r3, [pc, #372]	@ (8015f78 <rcl_node_init+0x288>)
 8015e02:	9302      	str	r3, [sp, #8]
 8015e04:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015e08:	9301      	str	r3, [sp, #4]
 8015e0a:	f8d4 a004 	ldr.w	sl, [r4, #4]
 8015e0e:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015e12:	f002 fc25 	bl	8018660 <rcutils_format_string_limit>
 8015e16:	6823      	ldr	r3, [r4, #0]
 8015e18:	f8ca 0074 	str.w	r0, [sl, #116]	@ 0x74
 8015e1c:	4631      	mov	r1, r6
 8015e1e:	6818      	ldr	r0, [r3, #0]
 8015e20:	462a      	mov	r2, r5
 8015e22:	6866      	ldr	r6, [r4, #4]
 8015e24:	3028      	adds	r0, #40	@ 0x28
 8015e26:	f7f9 ff0b 	bl	800fc40 <rmw_create_node>
 8015e2a:	6863      	ldr	r3, [r4, #4]
 8015e2c:	66b0      	str	r0, [r6, #104]	@ 0x68
 8015e2e:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8015e30:	2800      	cmp	r0, #0
 8015e32:	d032      	beq.n	8015e9a <rcl_node_init+0x1aa>
 8015e34:	f7f9 ff94 	bl	800fd60 <rmw_node_get_graph_guard_condition>
 8015e38:	4682      	mov	sl, r0
 8015e3a:	b360      	cbz	r0, 8015e96 <rcl_node_init+0x1a6>
 8015e3c:	f8d8 3000 	ldr.w	r3, [r8]
 8015e40:	2008      	movs	r0, #8
 8015e42:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015e46:	6866      	ldr	r6, [r4, #4]
 8015e48:	4798      	blx	r3
 8015e4a:	6863      	ldr	r3, [r4, #4]
 8015e4c:	66f0      	str	r0, [r6, #108]	@ 0x6c
 8015e4e:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8015e52:	f1bb 0f00 	cmp.w	fp, #0
 8015e56:	d020      	beq.n	8015e9a <rcl_node_init+0x1aa>
 8015e58:	a806      	add	r0, sp, #24
 8015e5a:	ae23      	add	r6, sp, #140	@ 0x8c
 8015e5c:	f005 f84e 	bl	801aefc <rcl_get_zero_initialized_guard_condition>
 8015e60:	a806      	add	r0, sp, #24
 8015e62:	6863      	ldr	r3, [r4, #4]
 8015e64:	46c4      	mov	ip, r8
 8015e66:	c803      	ldmia	r0, {r0, r1}
 8015e68:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8015e6c:	e88b 0003 	stmia.w	fp, {r0, r1}
 8015e70:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8015e74:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8015e76:	f8dc 3000 	ldr.w	r3, [ip]
 8015e7a:	6033      	str	r3, [r6, #0]
 8015e7c:	ab28      	add	r3, sp, #160	@ 0xa0
 8015e7e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8015e82:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015e86:	4651      	mov	r1, sl
 8015e88:	463a      	mov	r2, r7
 8015e8a:	4670      	mov	r0, lr
 8015e8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8015e8e:	f005 f88d 	bl	801afac <rcl_guard_condition_init_from_rmw>
 8015e92:	4682      	mov	sl, r0
 8015e94:	b328      	cbz	r0, 8015ee2 <rcl_node_init+0x1f2>
 8015e96:	6863      	ldr	r3, [r4, #4]
 8015e98:	b1f3      	cbz	r3, 8015ed8 <rcl_node_init+0x1e8>
 8015e9a:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8015e9c:	b128      	cbz	r0, 8015eaa <rcl_node_init+0x1ba>
 8015e9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ea2:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015ea6:	4798      	blx	r3
 8015ea8:	6863      	ldr	r3, [r4, #4]
 8015eaa:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 8015eac:	b110      	cbz	r0, 8015eb4 <rcl_node_init+0x1c4>
 8015eae:	f7f9 fed9 	bl	800fc64 <rmw_destroy_node>
 8015eb2:	6863      	ldr	r3, [r4, #4]
 8015eb4:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015eb6:	b148      	cbz	r0, 8015ecc <rcl_node_init+0x1dc>
 8015eb8:	f005 f8d4 	bl	801b064 <rcl_guard_condition_fini>
 8015ebc:	6863      	ldr	r3, [r4, #4]
 8015ebe:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015ec2:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8015ec4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ec8:	4798      	blx	r3
 8015eca:	6863      	ldr	r3, [r4, #4]
 8015ecc:	4618      	mov	r0, r3
 8015ece:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015ed2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015ed6:	4798      	blx	r3
 8015ed8:	2300      	movs	r3, #0
 8015eda:	f04f 0a01 	mov.w	sl, #1
 8015ede:	e9c4 3300 	strd	r3, r3, [r4]
 8015ee2:	f1b9 0f00 	cmp.w	r9, #0
 8015ee6:	d008      	beq.n	8015efa <rcl_node_init+0x20a>
 8015ee8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015eec:	4628      	mov	r0, r5
 8015eee:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8015ef2:	4798      	blx	r3
 8015ef4:	e001      	b.n	8015efa <rcl_node_init+0x20a>
 8015ef6:	f04f 0a0b 	mov.w	sl, #11
 8015efa:	4650      	mov	r0, sl
 8015efc:	b029      	add	sp, #164	@ 0xa4
 8015efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f02:	f04f 0a65 	mov.w	sl, #101	@ 0x65
 8015f06:	e7f8      	b.n	8015efa <rcl_node_init+0x20a>
 8015f08:	782b      	ldrb	r3, [r5, #0]
 8015f0a:	2b2f      	cmp	r3, #47	@ 0x2f
 8015f0c:	f43f af3d 	beq.w	8015d8a <rcl_node_init+0x9a>
 8015f10:	9503      	str	r5, [sp, #12]
 8015f12:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8015f16:	9300      	str	r3, [sp, #0]
 8015f18:	4b18      	ldr	r3, [pc, #96]	@ (8015f7c <rcl_node_init+0x28c>)
 8015f1a:	9302      	str	r3, [sp, #8]
 8015f1c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8015f20:	9301      	str	r3, [sp, #4]
 8015f22:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 8015f26:	f002 fb9b 	bl	8018660 <rcutils_format_string_limit>
 8015f2a:	4605      	mov	r5, r0
 8015f2c:	b1e0      	cbz	r0, 8015f68 <rcl_node_init+0x278>
 8015f2e:	2200      	movs	r2, #0
 8015f30:	a922      	add	r1, sp, #136	@ 0x88
 8015f32:	9222      	str	r2, [sp, #136]	@ 0x88
 8015f34:	f002 ffb0 	bl	8018e98 <rmw_validate_namespace>
 8015f38:	4682      	mov	sl, r0
 8015f3a:	2800      	cmp	r0, #0
 8015f3c:	d1d4      	bne.n	8015ee8 <rcl_node_init+0x1f8>
 8015f3e:	46d9      	mov	r9, fp
 8015f40:	e72c      	b.n	8015d9c <rcl_node_init+0xac>
 8015f42:	f04f 0a64 	mov.w	sl, #100	@ 0x64
 8015f46:	4650      	mov	r0, sl
 8015f48:	b029      	add	sp, #164	@ 0xa4
 8015f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f4e:	f04f 0aca 	mov.w	sl, #202	@ 0xca
 8015f52:	f002 ffb3 	bl	8018ebc <rmw_namespace_validation_result_string>
 8015f56:	e7c4      	b.n	8015ee2 <rcl_node_init+0x1f2>
 8015f58:	f04f 0a0a 	mov.w	sl, #10
 8015f5c:	e7c1      	b.n	8015ee2 <rcl_node_init+0x1f2>
 8015f5e:	f04f 0ac9 	mov.w	sl, #201	@ 0xc9
 8015f62:	f003 f80b 	bl	8018f7c <rmw_node_name_validation_result_string>
 8015f66:	e7c8      	b.n	8015efa <rcl_node_init+0x20a>
 8015f68:	f04f 0a0a 	mov.w	sl, #10
 8015f6c:	e7c5      	b.n	8015efa <rcl_node_init+0x20a>
 8015f6e:	bf00      	nop
 8015f70:	0801ce00 	.word	0x0801ce00
 8015f74:	0801ce4c 	.word	0x0801ce4c
 8015f78:	0801ce04 	.word	0x0801ce04
 8015f7c:	0801d228 	.word	0x0801d228

08015f80 <rcl_node_is_valid>:
 8015f80:	b130      	cbz	r0, 8015f90 <rcl_node_is_valid+0x10>
 8015f82:	6843      	ldr	r3, [r0, #4]
 8015f84:	b123      	cbz	r3, 8015f90 <rcl_node_is_valid+0x10>
 8015f86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015f88:	b113      	cbz	r3, 8015f90 <rcl_node_is_valid+0x10>
 8015f8a:	6800      	ldr	r0, [r0, #0]
 8015f8c:	f7ff bd18 	b.w	80159c0 <rcl_context_is_valid>
 8015f90:	2000      	movs	r0, #0
 8015f92:	4770      	bx	lr

08015f94 <rcl_node_get_name>:
 8015f94:	b120      	cbz	r0, 8015fa0 <rcl_node_get_name+0xc>
 8015f96:	6840      	ldr	r0, [r0, #4]
 8015f98:	b110      	cbz	r0, 8015fa0 <rcl_node_get_name+0xc>
 8015f9a:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015f9c:	b100      	cbz	r0, 8015fa0 <rcl_node_get_name+0xc>
 8015f9e:	6880      	ldr	r0, [r0, #8]
 8015fa0:	4770      	bx	lr
 8015fa2:	bf00      	nop

08015fa4 <rcl_node_get_namespace>:
 8015fa4:	b120      	cbz	r0, 8015fb0 <rcl_node_get_namespace+0xc>
 8015fa6:	6840      	ldr	r0, [r0, #4]
 8015fa8:	b110      	cbz	r0, 8015fb0 <rcl_node_get_namespace+0xc>
 8015faa:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015fac:	b100      	cbz	r0, 8015fb0 <rcl_node_get_namespace+0xc>
 8015fae:	68c0      	ldr	r0, [r0, #12]
 8015fb0:	4770      	bx	lr
 8015fb2:	bf00      	nop

08015fb4 <rcl_node_get_options>:
 8015fb4:	b128      	cbz	r0, 8015fc2 <rcl_node_get_options+0xe>
 8015fb6:	6840      	ldr	r0, [r0, #4]
 8015fb8:	b118      	cbz	r0, 8015fc2 <rcl_node_get_options+0xe>
 8015fba:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	bf08      	it	eq
 8015fc0:	2000      	moveq	r0, #0
 8015fc2:	4770      	bx	lr

08015fc4 <rcl_node_get_rmw_handle>:
 8015fc4:	b110      	cbz	r0, 8015fcc <rcl_node_get_rmw_handle+0x8>
 8015fc6:	6840      	ldr	r0, [r0, #4]
 8015fc8:	b100      	cbz	r0, 8015fcc <rcl_node_get_rmw_handle+0x8>
 8015fca:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8015fcc:	4770      	bx	lr
 8015fce:	bf00      	nop

08015fd0 <rcl_node_get_default_options>:
 8015fd0:	b510      	push	{r4, lr}
 8015fd2:	4604      	mov	r4, r0
 8015fd4:	2268      	movs	r2, #104	@ 0x68
 8015fd6:	2100      	movs	r1, #0
 8015fd8:	f005 fee2 	bl	801bda0 <memset>
 8015fdc:	4620      	mov	r0, r4
 8015fde:	f7f9 fa81 	bl	800f4e4 <rcutils_get_default_allocator>
 8015fe2:	2301      	movs	r3, #1
 8015fe4:	4620      	mov	r0, r4
 8015fe6:	7523      	strb	r3, [r4, #20]
 8015fe8:	bd10      	pop	{r4, pc}
 8015fea:	bf00      	nop

08015fec <rcl_node_options_copy>:
 8015fec:	2800      	cmp	r0, #0
 8015fee:	bf18      	it	ne
 8015ff0:	4288      	cmpne	r0, r1
 8015ff2:	d01b      	beq.n	801602c <rcl_node_options_copy+0x40>
 8015ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ff6:	fab1 f681 	clz	r6, r1
 8015ffa:	460c      	mov	r4, r1
 8015ffc:	0976      	lsrs	r6, r6, #5
 8015ffe:	b199      	cbz	r1, 8016028 <rcl_node_options_copy+0x3c>
 8016000:	4605      	mov	r5, r0
 8016002:	8a87      	ldrh	r7, [r0, #20]
 8016004:	4684      	mov	ip, r0
 8016006:	468e      	mov	lr, r1
 8016008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801600a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801600e:	682b      	ldr	r3, [r5, #0]
 8016010:	2250      	movs	r2, #80	@ 0x50
 8016012:	f10c 0118 	add.w	r1, ip, #24
 8016016:	f104 0018 	add.w	r0, r4, #24
 801601a:	f8ce 3000 	str.w	r3, [lr]
 801601e:	82a7      	strh	r7, [r4, #20]
 8016020:	f005 ff87 	bl	801bf32 <memcpy>
 8016024:	4630      	mov	r0, r6
 8016026:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016028:	200b      	movs	r0, #11
 801602a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801602c:	200b      	movs	r0, #11
 801602e:	4770      	bx	lr

08016030 <rcl_node_resolve_name>:
 8016030:	b082      	sub	sp, #8
 8016032:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016036:	b091      	sub	sp, #68	@ 0x44
 8016038:	ac1a      	add	r4, sp, #104	@ 0x68
 801603a:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 801603e:	e884 000c 	stmia.w	r4, {r2, r3}
 8016042:	2800      	cmp	r0, #0
 8016044:	d03d      	beq.n	80160c2 <rcl_node_resolve_name+0x92>
 8016046:	460c      	mov	r4, r1
 8016048:	4605      	mov	r5, r0
 801604a:	f7ff ffb3 	bl	8015fb4 <rcl_node_get_options>
 801604e:	2800      	cmp	r0, #0
 8016050:	d03a      	beq.n	80160c8 <rcl_node_resolve_name+0x98>
 8016052:	4628      	mov	r0, r5
 8016054:	f7ff ff9e 	bl	8015f94 <rcl_node_get_name>
 8016058:	4606      	mov	r6, r0
 801605a:	4628      	mov	r0, r5
 801605c:	ad0b      	add	r5, sp, #44	@ 0x2c
 801605e:	f7ff ffa1 	bl	8015fa4 <rcl_node_get_namespace>
 8016062:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8016066:	4607      	mov	r7, r0
 8016068:	46ac      	mov	ip, r5
 801606a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801606e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016072:	f8de 3000 	ldr.w	r3, [lr]
 8016076:	f8cc 3000 	str.w	r3, [ip]
 801607a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801607c:	b30b      	cbz	r3, 80160c2 <rcl_node_resolve_name+0x92>
 801607e:	4689      	mov	r9, r1
 8016080:	f8dd a078 	ldr.w	sl, [sp, #120]	@ 0x78
 8016084:	f002 fc64 	bl	8018950 <rcutils_get_zero_initialized_string_map>
 8016088:	ab10      	add	r3, sp, #64	@ 0x40
 801608a:	9008      	str	r0, [sp, #32]
 801608c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8016090:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016094:	2100      	movs	r1, #0
 8016096:	a808      	add	r0, sp, #32
 8016098:	e895 000c 	ldmia.w	r5, {r2, r3}
 801609c:	f002 fcce 	bl	8018a3c <rcutils_string_map_init>
 80160a0:	4683      	mov	fp, r0
 80160a2:	b1a0      	cbz	r0, 80160ce <rcl_node_resolve_name+0x9e>
 80160a4:	f7f9 fa3a 	bl	800f51c <rcutils_get_error_string>
 80160a8:	f7f9 fa4e 	bl	800f548 <rcutils_reset_error>
 80160ac:	f1bb 0f0a 	cmp.w	fp, #10
 80160b0:	bf18      	it	ne
 80160b2:	f04f 0b01 	movne.w	fp, #1
 80160b6:	4658      	mov	r0, fp
 80160b8:	b011      	add	sp, #68	@ 0x44
 80160ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160be:	b002      	add	sp, #8
 80160c0:	4770      	bx	lr
 80160c2:	f04f 0b0b 	mov.w	fp, #11
 80160c6:	e7f6      	b.n	80160b6 <rcl_node_resolve_name+0x86>
 80160c8:	f04f 0b01 	mov.w	fp, #1
 80160cc:	e7f3      	b.n	80160b6 <rcl_node_resolve_name+0x86>
 80160ce:	9009      	str	r0, [sp, #36]	@ 0x24
 80160d0:	9007      	str	r0, [sp, #28]
 80160d2:	a808      	add	r0, sp, #32
 80160d4:	f004 ff0c 	bl	801aef0 <rcl_get_default_topic_name_substitutions>
 80160d8:	4683      	mov	fp, r0
 80160da:	b180      	cbz	r0, 80160fe <rcl_node_resolve_name+0xce>
 80160dc:	280a      	cmp	r0, #10
 80160de:	a808      	add	r0, sp, #32
 80160e0:	bf18      	it	ne
 80160e2:	f04f 0b01 	movne.w	fp, #1
 80160e6:	f002 fce9 	bl	8018abc <rcutils_string_map_fini>
 80160ea:	4604      	mov	r4, r0
 80160ec:	2800      	cmp	r0, #0
 80160ee:	d15b      	bne.n	80161a8 <rcl_node_resolve_name+0x178>
 80160f0:	4651      	mov	r1, sl
 80160f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80160f4:	47c8      	blx	r9
 80160f6:	4651      	mov	r1, sl
 80160f8:	4620      	mov	r0, r4
 80160fa:	47c8      	blx	r9
 80160fc:	e7db      	b.n	80160b6 <rcl_node_resolve_name+0x86>
 80160fe:	ab09      	add	r3, sp, #36	@ 0x24
 8016100:	46ec      	mov	ip, sp
 8016102:	9305      	str	r3, [sp, #20]
 8016104:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016106:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801610a:	682b      	ldr	r3, [r5, #0]
 801610c:	463a      	mov	r2, r7
 801610e:	4631      	mov	r1, r6
 8016110:	4620      	mov	r0, r4
 8016112:	f8cc 3000 	str.w	r3, [ip]
 8016116:	ab08      	add	r3, sp, #32
 8016118:	f004 fd8a 	bl	801ac30 <rcl_expand_topic_name>
 801611c:	4683      	mov	fp, r0
 801611e:	b9d8      	cbnz	r0, 8016158 <rcl_node_resolve_name+0x128>
 8016120:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016122:	4602      	mov	r2, r0
 8016124:	9009      	str	r0, [sp, #36]	@ 0x24
 8016126:	a90a      	add	r1, sp, #40	@ 0x28
 8016128:	4620      	mov	r0, r4
 801612a:	f002 fde5 	bl	8018cf8 <rmw_validate_full_topic_name>
 801612e:	bb50      	cbnz	r0, 8016186 <rcl_node_resolve_name+0x156>
 8016130:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016132:	2d00      	cmp	r5, #0
 8016134:	d140      	bne.n	80161b8 <rcl_node_resolve_name+0x188>
 8016136:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016138:	a808      	add	r0, sp, #32
 801613a:	601c      	str	r4, [r3, #0]
 801613c:	f002 fcbe 	bl	8018abc <rcutils_string_map_fini>
 8016140:	4683      	mov	fp, r0
 8016142:	2800      	cmp	r0, #0
 8016144:	d043      	beq.n	80161ce <rcl_node_resolve_name+0x19e>
 8016146:	f7f9 f9e9 	bl	800f51c <rcutils_get_error_string>
 801614a:	46a8      	mov	r8, r5
 801614c:	f04f 0b01 	mov.w	fp, #1
 8016150:	462c      	mov	r4, r5
 8016152:	f7f9 f9f9 	bl	800f548 <rcutils_reset_error>
 8016156:	e00a      	b.n	801616e <rcl_node_resolve_name+0x13e>
 8016158:	2867      	cmp	r0, #103	@ 0x67
 801615a:	bf14      	ite	ne
 801615c:	f04f 0800 	movne.w	r8, #0
 8016160:	f008 0801 	andeq.w	r8, r8, #1
 8016164:	9c07      	ldr	r4, [sp, #28]
 8016166:	a808      	add	r0, sp, #32
 8016168:	f002 fca8 	bl	8018abc <rcutils_string_map_fini>
 801616c:	bb50      	cbnz	r0, 80161c4 <rcl_node_resolve_name+0x194>
 801616e:	4651      	mov	r1, sl
 8016170:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8016172:	47c8      	blx	r9
 8016174:	4651      	mov	r1, sl
 8016176:	4620      	mov	r0, r4
 8016178:	47c8      	blx	r9
 801617a:	f1b8 0f00 	cmp.w	r8, #0
 801617e:	bf18      	it	ne
 8016180:	f04f 0b68 	movne.w	fp, #104	@ 0x68
 8016184:	e797      	b.n	80160b6 <rcl_node_resolve_name+0x86>
 8016186:	f7f9 f9c9 	bl	800f51c <rcutils_get_error_string>
 801618a:	f7f9 f9dd 	bl	800f548 <rcutils_reset_error>
 801618e:	a808      	add	r0, sp, #32
 8016190:	f002 fc94 	bl	8018abc <rcutils_string_map_fini>
 8016194:	b998      	cbnz	r0, 80161be <rcl_node_resolve_name+0x18e>
 8016196:	4651      	mov	r1, sl
 8016198:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801619a:	47c8      	blx	r9
 801619c:	4651      	mov	r1, sl
 801619e:	4620      	mov	r0, r4
 80161a0:	f04f 0b01 	mov.w	fp, #1
 80161a4:	47c8      	blx	r9
 80161a6:	e786      	b.n	80160b6 <rcl_node_resolve_name+0x86>
 80161a8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80161ac:	f7f9 f9b6 	bl	800f51c <rcutils_get_error_string>
 80161b0:	f7f9 f9ca 	bl	800f548 <rcutils_reset_error>
 80161b4:	4644      	mov	r4, r8
 80161b6:	e7da      	b.n	801616e <rcl_node_resolve_name+0x13e>
 80161b8:	f04f 0b67 	mov.w	fp, #103	@ 0x67
 80161bc:	e7d3      	b.n	8016166 <rcl_node_resolve_name+0x136>
 80161be:	46d8      	mov	r8, fp
 80161c0:	f04f 0b01 	mov.w	fp, #1
 80161c4:	f7f9 f9aa 	bl	800f51c <rcutils_get_error_string>
 80161c8:	f7f9 f9be 	bl	800f548 <rcutils_reset_error>
 80161cc:	e7cf      	b.n	801616e <rcl_node_resolve_name+0x13e>
 80161ce:	4651      	mov	r1, sl
 80161d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80161d2:	47c8      	blx	r9
 80161d4:	4651      	mov	r1, sl
 80161d6:	4658      	mov	r0, fp
 80161d8:	47c8      	blx	r9
 80161da:	e76c      	b.n	80160b6 <rcl_node_resolve_name+0x86>

080161dc <exact_match_lookup>:
 80161dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80161de:	f102 0708 	add.w	r7, r2, #8
 80161e2:	460b      	mov	r3, r1
 80161e4:	b085      	sub	sp, #20
 80161e6:	4614      	mov	r4, r2
 80161e8:	4606      	mov	r6, r0
 80161ea:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80161ee:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80161f2:	4618      	mov	r0, r3
 80161f4:	4919      	ldr	r1, [pc, #100]	@ (801625c <exact_match_lookup+0x80>)
 80161f6:	e894 000c 	ldmia.w	r4, {r2, r3}
 80161fa:	f002 fa23 	bl	8018644 <rcutils_join_path>
 80161fe:	7833      	ldrb	r3, [r6, #0]
 8016200:	4605      	mov	r5, r0
 8016202:	2b2f      	cmp	r3, #47	@ 0x2f
 8016204:	d023      	beq.n	801624e <exact_match_lookup+0x72>
 8016206:	f104 030c 	add.w	r3, r4, #12
 801620a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801620e:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016212:	1c70      	adds	r0, r6, #1
 8016214:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8016218:	f002 fa1a 	bl	8018650 <rcutils_to_native_path>
 801621c:	4606      	mov	r6, r0
 801621e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8016222:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016226:	4631      	mov	r1, r6
 8016228:	4628      	mov	r0, r5
 801622a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801622e:	f002 fa09 	bl	8018644 <rcutils_join_path>
 8016232:	4603      	mov	r3, r0
 8016234:	4630      	mov	r0, r6
 8016236:	6862      	ldr	r2, [r4, #4]
 8016238:	461e      	mov	r6, r3
 801623a:	6921      	ldr	r1, [r4, #16]
 801623c:	4790      	blx	r2
 801623e:	4628      	mov	r0, r5
 8016240:	4635      	mov	r5, r6
 8016242:	6863      	ldr	r3, [r4, #4]
 8016244:	6921      	ldr	r1, [r4, #16]
 8016246:	4798      	blx	r3
 8016248:	4628      	mov	r0, r5
 801624a:	b005      	add	sp, #20
 801624c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801624e:	7873      	ldrb	r3, [r6, #1]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d1d8      	bne.n	8016206 <exact_match_lookup+0x2a>
 8016254:	4628      	mov	r0, r5
 8016256:	b005      	add	sp, #20
 8016258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801625a:	bf00      	nop
 801625c:	0801d270 	.word	0x0801d270

08016260 <rcl_get_secure_root>:
 8016260:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016264:	b085      	sub	sp, #20
 8016266:	b168      	cbz	r0, 8016284 <rcl_get_secure_root+0x24>
 8016268:	4607      	mov	r7, r0
 801626a:	4608      	mov	r0, r1
 801626c:	460c      	mov	r4, r1
 801626e:	f7f9 f947 	bl	800f500 <rcutils_allocator_is_valid>
 8016272:	b138      	cbz	r0, 8016284 <rcl_get_secure_root+0x24>
 8016274:	2300      	movs	r3, #0
 8016276:	482d      	ldr	r0, [pc, #180]	@ (801632c <rcl_get_secure_root+0xcc>)
 8016278:	a903      	add	r1, sp, #12
 801627a:	9303      	str	r3, [sp, #12]
 801627c:	f002 f9c8 	bl	8018610 <rcutils_get_env>
 8016280:	4605      	mov	r5, r0
 8016282:	b120      	cbz	r0, 801628e <rcl_get_secure_root+0x2e>
 8016284:	2500      	movs	r5, #0
 8016286:	4628      	mov	r0, r5
 8016288:	b005      	add	sp, #20
 801628a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801628e:	9b03      	ldr	r3, [sp, #12]
 8016290:	781a      	ldrb	r2, [r3, #0]
 8016292:	2a00      	cmp	r2, #0
 8016294:	d0f6      	beq.n	8016284 <rcl_get_secure_root+0x24>
 8016296:	f104 090c 	add.w	r9, r4, #12
 801629a:	e899 0003 	ldmia.w	r9, {r0, r1}
 801629e:	e88d 0003 	stmia.w	sp, {r0, r1}
 80162a2:	4618      	mov	r0, r3
 80162a4:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80162a8:	f002 fb14 	bl	80188d4 <rcutils_strdup>
 80162ac:	4680      	mov	r8, r0
 80162ae:	2800      	cmp	r0, #0
 80162b0:	d0e8      	beq.n	8016284 <rcl_get_secure_root+0x24>
 80162b2:	a903      	add	r1, sp, #12
 80162b4:	481e      	ldr	r0, [pc, #120]	@ (8016330 <rcl_get_secure_root+0xd0>)
 80162b6:	9503      	str	r5, [sp, #12]
 80162b8:	f002 f9aa 	bl	8018610 <rcutils_get_env>
 80162bc:	b160      	cbz	r0, 80162d8 <rcl_get_secure_root+0x78>
 80162be:	2600      	movs	r6, #0
 80162c0:	4630      	mov	r0, r6
 80162c2:	6863      	ldr	r3, [r4, #4]
 80162c4:	6921      	ldr	r1, [r4, #16]
 80162c6:	4798      	blx	r3
 80162c8:	4640      	mov	r0, r8
 80162ca:	6863      	ldr	r3, [r4, #4]
 80162cc:	6921      	ldr	r1, [r4, #16]
 80162ce:	4798      	blx	r3
 80162d0:	4628      	mov	r0, r5
 80162d2:	b005      	add	sp, #20
 80162d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80162d8:	9b03      	ldr	r3, [sp, #12]
 80162da:	781e      	ldrb	r6, [r3, #0]
 80162dc:	b1f6      	cbz	r6, 801631c <rcl_get_secure_root+0xbc>
 80162de:	e899 0003 	ldmia.w	r9, {r0, r1}
 80162e2:	e88d 0003 	stmia.w	sp, {r0, r1}
 80162e6:	4618      	mov	r0, r3
 80162e8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 80162ec:	f002 faf2 	bl	80188d4 <rcutils_strdup>
 80162f0:	4606      	mov	r6, r0
 80162f2:	2800      	cmp	r0, #0
 80162f4:	d0e3      	beq.n	80162be <rcl_get_secure_root+0x5e>
 80162f6:	4622      	mov	r2, r4
 80162f8:	4641      	mov	r1, r8
 80162fa:	f7ff ff6f 	bl	80161dc <exact_match_lookup>
 80162fe:	4605      	mov	r5, r0
 8016300:	2d00      	cmp	r5, #0
 8016302:	d0dd      	beq.n	80162c0 <rcl_get_secure_root+0x60>
 8016304:	4628      	mov	r0, r5
 8016306:	f002 f99b 	bl	8018640 <rcutils_is_directory>
 801630a:	4603      	mov	r3, r0
 801630c:	2800      	cmp	r0, #0
 801630e:	d1d7      	bne.n	80162c0 <rcl_get_secure_root+0x60>
 8016310:	4628      	mov	r0, r5
 8016312:	6921      	ldr	r1, [r4, #16]
 8016314:	461d      	mov	r5, r3
 8016316:	6863      	ldr	r3, [r4, #4]
 8016318:	4798      	blx	r3
 801631a:	e7d1      	b.n	80162c0 <rcl_get_secure_root+0x60>
 801631c:	4622      	mov	r2, r4
 801631e:	4638      	mov	r0, r7
 8016320:	4641      	mov	r1, r8
 8016322:	f7ff ff5b 	bl	80161dc <exact_match_lookup>
 8016326:	4605      	mov	r5, r0
 8016328:	e7ea      	b.n	8016300 <rcl_get_secure_root+0xa0>
 801632a:	bf00      	nop
 801632c:	0801d27c 	.word	0x0801d27c
 8016330:	0801d294 	.word	0x0801d294

08016334 <rcl_get_security_options_from_environment>:
 8016334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016338:	b082      	sub	sp, #8
 801633a:	2300      	movs	r3, #0
 801633c:	4606      	mov	r6, r0
 801633e:	460f      	mov	r7, r1
 8016340:	4821      	ldr	r0, [pc, #132]	@ (80163c8 <rcl_get_security_options_from_environment+0x94>)
 8016342:	a901      	add	r1, sp, #4
 8016344:	4690      	mov	r8, r2
 8016346:	9301      	str	r3, [sp, #4]
 8016348:	f002 f962 	bl	8018610 <rcutils_get_env>
 801634c:	b120      	cbz	r0, 8016358 <rcl_get_security_options_from_environment+0x24>
 801634e:	2501      	movs	r5, #1
 8016350:	4628      	mov	r0, r5
 8016352:	b002      	add	sp, #8
 8016354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016358:	4604      	mov	r4, r0
 801635a:	491c      	ldr	r1, [pc, #112]	@ (80163cc <rcl_get_security_options_from_environment+0x98>)
 801635c:	9801      	ldr	r0, [sp, #4]
 801635e:	f7e9 ffbf 	bl	80002e0 <strcmp>
 8016362:	4605      	mov	r5, r0
 8016364:	b9f0      	cbnz	r0, 80163a4 <rcl_get_security_options_from_environment+0x70>
 8016366:	9001      	str	r0, [sp, #4]
 8016368:	f1b8 0f00 	cmp.w	r8, #0
 801636c:	d021      	beq.n	80163b2 <rcl_get_security_options_from_environment+0x7e>
 801636e:	a901      	add	r1, sp, #4
 8016370:	4817      	ldr	r0, [pc, #92]	@ (80163d0 <rcl_get_security_options_from_environment+0x9c>)
 8016372:	f002 f94d 	bl	8018610 <rcutils_get_env>
 8016376:	2800      	cmp	r0, #0
 8016378:	d1e9      	bne.n	801634e <rcl_get_security_options_from_environment+0x1a>
 801637a:	4916      	ldr	r1, [pc, #88]	@ (80163d4 <rcl_get_security_options_from_environment+0xa0>)
 801637c:	9801      	ldr	r0, [sp, #4]
 801637e:	f7e9 ffaf 	bl	80002e0 <strcmp>
 8016382:	4603      	mov	r3, r0
 8016384:	4639      	mov	r1, r7
 8016386:	4630      	mov	r0, r6
 8016388:	fab3 f383 	clz	r3, r3
 801638c:	095b      	lsrs	r3, r3, #5
 801638e:	f888 3000 	strb.w	r3, [r8]
 8016392:	f7ff ff65 	bl	8016260 <rcl_get_secure_root>
 8016396:	b170      	cbz	r0, 80163b6 <rcl_get_security_options_from_environment+0x82>
 8016398:	f8c8 0004 	str.w	r0, [r8, #4]
 801639c:	4628      	mov	r0, r5
 801639e:	b002      	add	sp, #8
 80163a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163a4:	4625      	mov	r5, r4
 80163a6:	f888 4000 	strb.w	r4, [r8]
 80163aa:	4628      	mov	r0, r5
 80163ac:	b002      	add	sp, #8
 80163ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80163b2:	250b      	movs	r5, #11
 80163b4:	e7cc      	b.n	8016350 <rcl_get_security_options_from_environment+0x1c>
 80163b6:	f898 5000 	ldrb.w	r5, [r8]
 80163ba:	f1a5 0501 	sub.w	r5, r5, #1
 80163be:	fab5 f585 	clz	r5, r5
 80163c2:	096d      	lsrs	r5, r5, #5
 80163c4:	e7c4      	b.n	8016350 <rcl_get_security_options_from_environment+0x1c>
 80163c6:	bf00      	nop
 80163c8:	0801d234 	.word	0x0801d234
 80163cc:	0801d248 	.word	0x0801d248
 80163d0:	0801d250 	.word	0x0801d250
 80163d4:	0801d268 	.word	0x0801d268

080163d8 <rcl_service_get_rmw_handle>:
 80163d8:	b118      	cbz	r0, 80163e2 <rcl_service_get_rmw_handle+0xa>
 80163da:	6800      	ldr	r0, [r0, #0]
 80163dc:	b108      	cbz	r0, 80163e2 <rcl_service_get_rmw_handle+0xa>
 80163de:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80163e2:	4770      	bx	lr

080163e4 <rcl_take_request>:
 80163e4:	b570      	push	{r4, r5, r6, lr}
 80163e6:	468e      	mov	lr, r1
 80163e8:	b08c      	sub	sp, #48	@ 0x30
 80163ea:	460c      	mov	r4, r1
 80163ec:	4616      	mov	r6, r2
 80163ee:	f10d 0c18 	add.w	ip, sp, #24
 80163f2:	4605      	mov	r5, r0
 80163f4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80163f8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80163fc:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016400:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016404:	b30d      	cbz	r5, 801644a <rcl_take_request+0x66>
 8016406:	682b      	ldr	r3, [r5, #0]
 8016408:	b1fb      	cbz	r3, 801644a <rcl_take_request+0x66>
 801640a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801640e:	b1e0      	cbz	r0, 801644a <rcl_take_request+0x66>
 8016410:	b336      	cbz	r6, 8016460 <rcl_take_request+0x7c>
 8016412:	2300      	movs	r3, #0
 8016414:	4632      	mov	r2, r6
 8016416:	a902      	add	r1, sp, #8
 8016418:	f88d 3007 	strb.w	r3, [sp, #7]
 801641c:	f10d 0307 	add.w	r3, sp, #7
 8016420:	f002 ffce 	bl	80193c0 <rmw_take_request>
 8016424:	4605      	mov	r5, r0
 8016426:	b198      	cbz	r0, 8016450 <rcl_take_request+0x6c>
 8016428:	280a      	cmp	r0, #10
 801642a:	bf18      	it	ne
 801642c:	2501      	movne	r5, #1
 801642e:	f10d 0e18 	add.w	lr, sp, #24
 8016432:	46a4      	mov	ip, r4
 8016434:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016438:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801643c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8016440:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016444:	4628      	mov	r0, r5
 8016446:	b00c      	add	sp, #48	@ 0x30
 8016448:	bd70      	pop	{r4, r5, r6, pc}
 801644a:	f44f 7516 	mov.w	r5, #600	@ 0x258
 801644e:	e7ee      	b.n	801642e <rcl_take_request+0x4a>
 8016450:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8016454:	f240 2359 	movw	r3, #601	@ 0x259
 8016458:	2a00      	cmp	r2, #0
 801645a:	bf08      	it	eq
 801645c:	461d      	moveq	r5, r3
 801645e:	e7e6      	b.n	801642e <rcl_take_request+0x4a>
 8016460:	250b      	movs	r5, #11
 8016462:	e7e4      	b.n	801642e <rcl_take_request+0x4a>

08016464 <rcl_send_response>:
 8016464:	b170      	cbz	r0, 8016484 <rcl_send_response+0x20>
 8016466:	6800      	ldr	r0, [r0, #0]
 8016468:	b160      	cbz	r0, 8016484 <rcl_send_response+0x20>
 801646a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801646e:	b148      	cbz	r0, 8016484 <rcl_send_response+0x20>
 8016470:	b169      	cbz	r1, 801648e <rcl_send_response+0x2a>
 8016472:	b510      	push	{r4, lr}
 8016474:	b14a      	cbz	r2, 801648a <rcl_send_response+0x26>
 8016476:	f003 f801 	bl	801947c <rmw_send_response>
 801647a:	b110      	cbz	r0, 8016482 <rcl_send_response+0x1e>
 801647c:	2802      	cmp	r0, #2
 801647e:	bf18      	it	ne
 8016480:	2001      	movne	r0, #1
 8016482:	bd10      	pop	{r4, pc}
 8016484:	f44f 7016 	mov.w	r0, #600	@ 0x258
 8016488:	4770      	bx	lr
 801648a:	200b      	movs	r0, #11
 801648c:	bd10      	pop	{r4, pc}
 801648e:	200b      	movs	r0, #11
 8016490:	4770      	bx	lr
 8016492:	bf00      	nop

08016494 <rcl_service_is_valid>:
 8016494:	b130      	cbz	r0, 80164a4 <rcl_service_is_valid+0x10>
 8016496:	6800      	ldr	r0, [r0, #0]
 8016498:	b120      	cbz	r0, 80164a4 <rcl_service_is_valid+0x10>
 801649a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 801649e:	3800      	subs	r0, #0
 80164a0:	bf18      	it	ne
 80164a2:	2001      	movne	r0, #1
 80164a4:	4770      	bx	lr
 80164a6:	bf00      	nop

080164a8 <rcl_take>:
 80164a8:	2800      	cmp	r0, #0
 80164aa:	d049      	beq.n	8016540 <rcl_take+0x98>
 80164ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80164b0:	4615      	mov	r5, r2
 80164b2:	6802      	ldr	r2, [r0, #0]
 80164b4:	b0a4      	sub	sp, #144	@ 0x90
 80164b6:	4604      	mov	r4, r0
 80164b8:	2a00      	cmp	r2, #0
 80164ba:	d039      	beq.n	8016530 <rcl_take+0x88>
 80164bc:	461f      	mov	r7, r3
 80164be:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80164c2:	b3ab      	cbz	r3, 8016530 <rcl_take+0x88>
 80164c4:	460e      	mov	r6, r1
 80164c6:	2900      	cmp	r1, #0
 80164c8:	d038      	beq.n	801653c <rcl_take+0x94>
 80164ca:	2d00      	cmp	r5, #0
 80164cc:	d03c      	beq.n	8016548 <rcl_take+0xa0>
 80164ce:	a802      	add	r0, sp, #8
 80164d0:	f04f 0800 	mov.w	r8, #0
 80164d4:	f002 fc08 	bl	8018ce8 <rmw_get_zero_initialized_message_info>
 80164d8:	f10d 0c08 	add.w	ip, sp, #8
 80164dc:	46ae      	mov	lr, r5
 80164de:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80164e2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80164e6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80164ea:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80164ee:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80164f2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80164f6:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 80164fa:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 80164fe:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8016502:	462b      	mov	r3, r5
 8016504:	6820      	ldr	r0, [r4, #0]
 8016506:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 801650a:	4631      	mov	r1, r6
 801650c:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8016510:	9700      	str	r7, [sp, #0]
 8016512:	f003 f857 	bl	80195c4 <rmw_take_with_info>
 8016516:	4603      	mov	r3, r0
 8016518:	b9c0      	cbnz	r0, 801654c <rcl_take+0xa4>
 801651a:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 801651e:	f240 1291 	movw	r2, #401	@ 0x191
 8016522:	2900      	cmp	r1, #0
 8016524:	bf08      	it	eq
 8016526:	4613      	moveq	r3, r2
 8016528:	4618      	mov	r0, r3
 801652a:	b024      	add	sp, #144	@ 0x90
 801652c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016530:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016534:	4618      	mov	r0, r3
 8016536:	b024      	add	sp, #144	@ 0x90
 8016538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801653c:	230b      	movs	r3, #11
 801653e:	e7f3      	b.n	8016528 <rcl_take+0x80>
 8016540:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8016544:	4618      	mov	r0, r3
 8016546:	4770      	bx	lr
 8016548:	ad14      	add	r5, sp, #80	@ 0x50
 801654a:	e7c0      	b.n	80164ce <rcl_take+0x26>
 801654c:	f7ff fa1a 	bl	8015984 <rcl_convert_rmw_ret_to_rcl_ret>
 8016550:	4603      	mov	r3, r0
 8016552:	e7e9      	b.n	8016528 <rcl_take+0x80>

08016554 <rcl_subscription_get_rmw_handle>:
 8016554:	b118      	cbz	r0, 801655e <rcl_subscription_get_rmw_handle+0xa>
 8016556:	6800      	ldr	r0, [r0, #0]
 8016558:	b108      	cbz	r0, 801655e <rcl_subscription_get_rmw_handle+0xa>
 801655a:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801655e:	4770      	bx	lr

08016560 <rcl_subscription_is_valid>:
 8016560:	b130      	cbz	r0, 8016570 <rcl_subscription_is_valid+0x10>
 8016562:	6800      	ldr	r0, [r0, #0]
 8016564:	b120      	cbz	r0, 8016570 <rcl_subscription_is_valid+0x10>
 8016566:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 801656a:	3800      	subs	r0, #0
 801656c:	bf18      	it	ne
 801656e:	2001      	movne	r0, #1
 8016570:	4770      	bx	lr
 8016572:	bf00      	nop

08016574 <rcl_get_system_time>:
 8016574:	4608      	mov	r0, r1
 8016576:	f7f9 b803 	b.w	800f580 <rcutils_system_time_now>
 801657a:	bf00      	nop

0801657c <rcl_get_steady_time>:
 801657c:	4608      	mov	r0, r1
 801657e:	f7f9 b825 	b.w	800f5cc <rcutils_steady_time_now>
 8016582:	bf00      	nop

08016584 <rcl_get_ros_time>:
 8016584:	7a03      	ldrb	r3, [r0, #8]
 8016586:	b510      	push	{r4, lr}
 8016588:	460c      	mov	r4, r1
 801658a:	b143      	cbz	r3, 801659e <rcl_get_ros_time+0x1a>
 801658c:	2105      	movs	r1, #5
 801658e:	f001 ff9b 	bl	80184c8 <__atomic_load_8>
 8016592:	4602      	mov	r2, r0
 8016594:	460b      	mov	r3, r1
 8016596:	2000      	movs	r0, #0
 8016598:	e9c4 2300 	strd	r2, r3, [r4]
 801659c:	bd10      	pop	{r4, pc}
 801659e:	4608      	mov	r0, r1
 80165a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80165a4:	f7f8 bfec 	b.w	800f580 <rcutils_system_time_now>

080165a8 <rcl_clock_init>:
 80165a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165aa:	4605      	mov	r5, r0
 80165ac:	4610      	mov	r0, r2
 80165ae:	4614      	mov	r4, r2
 80165b0:	460e      	mov	r6, r1
 80165b2:	f7f8 ffa5 	bl	800f500 <rcutils_allocator_is_valid>
 80165b6:	b128      	cbz	r0, 80165c4 <rcl_clock_init+0x1c>
 80165b8:	2d03      	cmp	r5, #3
 80165ba:	d803      	bhi.n	80165c4 <rcl_clock_init+0x1c>
 80165bc:	e8df f005 	tbb	[pc, r5]
 80165c0:	0659301f 	.word	0x0659301f
 80165c4:	f04f 0c0b 	mov.w	ip, #11
 80165c8:	4660      	mov	r0, ip
 80165ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165cc:	2c00      	cmp	r4, #0
 80165ce:	d0f9      	beq.n	80165c4 <rcl_clock_init+0x1c>
 80165d0:	fab6 f386 	clz	r3, r6
 80165d4:	095b      	lsrs	r3, r3, #5
 80165d6:	2e00      	cmp	r6, #0
 80165d8:	d0f4      	beq.n	80165c4 <rcl_clock_init+0x1c>
 80165da:	6133      	str	r3, [r6, #16]
 80165dc:	469c      	mov	ip, r3
 80165de:	f106 0514 	add.w	r5, r6, #20
 80165e2:	4f32      	ldr	r7, [pc, #200]	@ (80166ac <rcl_clock_init+0x104>)
 80165e4:	f04f 0e03 	mov.w	lr, #3
 80165e8:	e9c6 3301 	strd	r3, r3, [r6, #4]
 80165ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80165ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80165f0:	6823      	ldr	r3, [r4, #0]
 80165f2:	4660      	mov	r0, ip
 80165f4:	602b      	str	r3, [r5, #0]
 80165f6:	60f7      	str	r7, [r6, #12]
 80165f8:	f886 e000 	strb.w	lr, [r6]
 80165fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165fe:	2e00      	cmp	r6, #0
 8016600:	d0e0      	beq.n	80165c4 <rcl_clock_init+0x1c>
 8016602:	2300      	movs	r3, #0
 8016604:	f106 0514 	add.w	r5, r6, #20
 8016608:	7033      	strb	r3, [r6, #0]
 801660a:	469c      	mov	ip, r3
 801660c:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016610:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8016614:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016616:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016618:	6823      	ldr	r3, [r4, #0]
 801661a:	4660      	mov	r0, ip
 801661c:	602b      	str	r3, [r5, #0]
 801661e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016620:	2c00      	cmp	r4, #0
 8016622:	d0cf      	beq.n	80165c4 <rcl_clock_init+0x1c>
 8016624:	fab6 f586 	clz	r5, r6
 8016628:	096d      	lsrs	r5, r5, #5
 801662a:	2e00      	cmp	r6, #0
 801662c:	d0ca      	beq.n	80165c4 <rcl_clock_init+0x1c>
 801662e:	46a6      	mov	lr, r4
 8016630:	7035      	strb	r5, [r6, #0]
 8016632:	f106 0c14 	add.w	ip, r6, #20
 8016636:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801663a:	e9c6 5501 	strd	r5, r5, [r6, #4]
 801663e:	e9c6 5503 	strd	r5, r5, [r6, #12]
 8016642:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016646:	f8de 3000 	ldr.w	r3, [lr]
 801664a:	2010      	movs	r0, #16
 801664c:	f8cc 3000 	str.w	r3, [ip]
 8016650:	6823      	ldr	r3, [r4, #0]
 8016652:	6921      	ldr	r1, [r4, #16]
 8016654:	4798      	blx	r3
 8016656:	6130      	str	r0, [r6, #16]
 8016658:	b320      	cbz	r0, 80166a4 <rcl_clock_init+0xfc>
 801665a:	2200      	movs	r2, #0
 801665c:	2300      	movs	r3, #0
 801665e:	46ac      	mov	ip, r5
 8016660:	7205      	strb	r5, [r0, #8]
 8016662:	e9c0 2300 	strd	r2, r3, [r0]
 8016666:	4a12      	ldr	r2, [pc, #72]	@ (80166b0 <rcl_clock_init+0x108>)
 8016668:	2301      	movs	r3, #1
 801666a:	4660      	mov	r0, ip
 801666c:	60f2      	str	r2, [r6, #12]
 801666e:	7033      	strb	r3, [r6, #0]
 8016670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016672:	2c00      	cmp	r4, #0
 8016674:	d0a6      	beq.n	80165c4 <rcl_clock_init+0x1c>
 8016676:	fab6 f386 	clz	r3, r6
 801667a:	095b      	lsrs	r3, r3, #5
 801667c:	2e00      	cmp	r6, #0
 801667e:	d0a1      	beq.n	80165c4 <rcl_clock_init+0x1c>
 8016680:	6133      	str	r3, [r6, #16]
 8016682:	469c      	mov	ip, r3
 8016684:	f106 0514 	add.w	r5, r6, #20
 8016688:	f8df e028 	ldr.w	lr, [pc, #40]	@ 80166b4 <rcl_clock_init+0x10c>
 801668c:	2702      	movs	r7, #2
 801668e:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8016692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8016696:	6823      	ldr	r3, [r4, #0]
 8016698:	4660      	mov	r0, ip
 801669a:	602b      	str	r3, [r5, #0]
 801669c:	f8c6 e00c 	str.w	lr, [r6, #12]
 80166a0:	7037      	strb	r7, [r6, #0]
 80166a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80166a4:	f04f 0c0a 	mov.w	ip, #10
 80166a8:	e78e      	b.n	80165c8 <rcl_clock_init+0x20>
 80166aa:	bf00      	nop
 80166ac:	0801657d 	.word	0x0801657d
 80166b0:	08016585 	.word	0x08016585
 80166b4:	08016575 	.word	0x08016575

080166b8 <rcl_clock_get_now>:
 80166b8:	b140      	cbz	r0, 80166cc <rcl_clock_get_now+0x14>
 80166ba:	b139      	cbz	r1, 80166cc <rcl_clock_get_now+0x14>
 80166bc:	7803      	ldrb	r3, [r0, #0]
 80166be:	b11b      	cbz	r3, 80166c8 <rcl_clock_get_now+0x10>
 80166c0:	68c3      	ldr	r3, [r0, #12]
 80166c2:	b10b      	cbz	r3, 80166c8 <rcl_clock_get_now+0x10>
 80166c4:	6900      	ldr	r0, [r0, #16]
 80166c6:	4718      	bx	r3
 80166c8:	2001      	movs	r0, #1
 80166ca:	4770      	bx	lr
 80166cc:	200b      	movs	r0, #11
 80166ce:	4770      	bx	lr

080166d0 <rcl_clock_add_jump_callback>:
 80166d0:	b082      	sub	sp, #8
 80166d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80166d6:	a906      	add	r1, sp, #24
 80166d8:	e9dd 560c 	ldrd	r5, r6, [sp, #48]	@ 0x30
 80166dc:	e881 000c 	stmia.w	r1, {r2, r3}
 80166e0:	b330      	cbz	r0, 8016730 <rcl_clock_add_jump_callback+0x60>
 80166e2:	4604      	mov	r4, r0
 80166e4:	3014      	adds	r0, #20
 80166e6:	f7f8 ff0b 	bl	800f500 <rcutils_allocator_is_valid>
 80166ea:	b30d      	cbz	r5, 8016730 <rcl_clock_add_jump_callback+0x60>
 80166ec:	f080 0301 	eor.w	r3, r0, #1
 80166f0:	f013 03ff 	ands.w	r3, r3, #255	@ 0xff
 80166f4:	d11c      	bne.n	8016730 <rcl_clock_add_jump_callback+0x60>
 80166f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80166f8:	2a00      	cmp	r2, #0
 80166fa:	db19      	blt.n	8016730 <rcl_clock_add_jump_callback+0x60>
 80166fc:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 8016700:	2901      	cmp	r1, #1
 8016702:	f172 0200 	sbcs.w	r2, r2, #0
 8016706:	da13      	bge.n	8016730 <rcl_clock_add_jump_callback+0x60>
 8016708:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 801670c:	2f00      	cmp	r7, #0
 801670e:	d040      	beq.n	8016792 <rcl_clock_add_jump_callback+0xc2>
 8016710:	4602      	mov	r2, r0
 8016712:	e003      	b.n	801671c <rcl_clock_add_jump_callback+0x4c>
 8016714:	42bb      	cmp	r3, r7
 8016716:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 801671a:	d010      	beq.n	801673e <rcl_clock_add_jump_callback+0x6e>
 801671c:	6811      	ldr	r1, [r2, #0]
 801671e:	3301      	adds	r3, #1
 8016720:	42a9      	cmp	r1, r5
 8016722:	d1f7      	bne.n	8016714 <rcl_clock_add_jump_callback+0x44>
 8016724:	6a11      	ldr	r1, [r2, #32]
 8016726:	42b1      	cmp	r1, r6
 8016728:	d1f4      	bne.n	8016714 <rcl_clock_add_jump_callback+0x44>
 801672a:	f04f 0e01 	mov.w	lr, #1
 801672e:	e001      	b.n	8016734 <rcl_clock_add_jump_callback+0x64>
 8016730:	f04f 0e0b 	mov.w	lr, #11
 8016734:	4670      	mov	r0, lr
 8016736:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801673a:	b002      	add	sp, #8
 801673c:	4770      	bx	lr
 801673e:	3301      	adds	r3, #1
 8016740:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016744:	00d9      	lsls	r1, r3, #3
 8016746:	69e3      	ldr	r3, [r4, #28]
 8016748:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801674a:	4798      	blx	r3
 801674c:	b1f0      	cbz	r0, 801678c <rcl_clock_add_jump_callback+0xbc>
 801674e:	68a3      	ldr	r3, [r4, #8]
 8016750:	f10d 0c18 	add.w	ip, sp, #24
 8016754:	6060      	str	r0, [r4, #4]
 8016756:	f04f 0e00 	mov.w	lr, #0
 801675a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801675e:	f103 0801 	add.w	r8, r3, #1
 8016762:	f840 5032 	str.w	r5, [r0, r2, lsl #3]
 8016766:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801676a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801676e:	f105 0708 	add.w	r7, r5, #8
 8016772:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016774:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8016778:	e887 0003 	stmia.w	r7, {r0, r1}
 801677c:	4670      	mov	r0, lr
 801677e:	622e      	str	r6, [r5, #32]
 8016780:	f8c4 8008 	str.w	r8, [r4, #8]
 8016784:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016788:	b002      	add	sp, #8
 801678a:	4770      	bx	lr
 801678c:	f04f 0e0a 	mov.w	lr, #10
 8016790:	e7d0      	b.n	8016734 <rcl_clock_add_jump_callback+0x64>
 8016792:	2128      	movs	r1, #40	@ 0x28
 8016794:	e7d7      	b.n	8016746 <rcl_clock_add_jump_callback+0x76>
 8016796:	bf00      	nop

08016798 <rcl_clock_remove_jump_callback>:
 8016798:	2800      	cmp	r0, #0
 801679a:	d05f      	beq.n	801685c <rcl_clock_remove_jump_callback+0xc4>
 801679c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80167a0:	4605      	mov	r5, r0
 80167a2:	3014      	adds	r0, #20
 80167a4:	460f      	mov	r7, r1
 80167a6:	4692      	mov	sl, r2
 80167a8:	f7f8 feaa 	bl	800f500 <rcutils_allocator_is_valid>
 80167ac:	f080 0001 	eor.w	r0, r0, #1
 80167b0:	b2c0      	uxtb	r0, r0
 80167b2:	2800      	cmp	r0, #0
 80167b4:	d13f      	bne.n	8016836 <rcl_clock_remove_jump_callback+0x9e>
 80167b6:	2f00      	cmp	r7, #0
 80167b8:	d03d      	beq.n	8016836 <rcl_clock_remove_jump_callback+0x9e>
 80167ba:	f8d5 8008 	ldr.w	r8, [r5, #8]
 80167be:	f1b8 0f00 	cmp.w	r8, #0
 80167c2:	d00c      	beq.n	80167de <rcl_clock_remove_jump_callback+0x46>
 80167c4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80167c8:	eb08 0688 	add.w	r6, r8, r8, lsl #2
 80167cc:	464c      	mov	r4, r9
 80167ce:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
 80167d2:	6823      	ldr	r3, [r4, #0]
 80167d4:	42bb      	cmp	r3, r7
 80167d6:	d005      	beq.n	80167e4 <rcl_clock_remove_jump_callback+0x4c>
 80167d8:	3428      	adds	r4, #40	@ 0x28
 80167da:	42a6      	cmp	r6, r4
 80167dc:	d1f9      	bne.n	80167d2 <rcl_clock_remove_jump_callback+0x3a>
 80167de:	2001      	movs	r0, #1
 80167e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167e4:	6a23      	ldr	r3, [r4, #32]
 80167e6:	3428      	adds	r4, #40	@ 0x28
 80167e8:	42a6      	cmp	r6, r4
 80167ea:	d02f      	beq.n	801684c <rcl_clock_remove_jump_callback+0xb4>
 80167ec:	4553      	cmp	r3, sl
 80167ee:	d1f0      	bne.n	80167d2 <rcl_clock_remove_jump_callback+0x3a>
 80167f0:	46a6      	mov	lr, r4
 80167f2:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 80167f6:	3428      	adds	r4, #40	@ 0x28
 80167f8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80167fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016800:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016804:	42a6      	cmp	r6, r4
 8016806:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801680a:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801680e:	e88c 0003 	stmia.w	ip, {r0, r1}
 8016812:	d1ed      	bne.n	80167f0 <rcl_clock_remove_jump_callback+0x58>
 8016814:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8016818:	60ac      	str	r4, [r5, #8]
 801681a:	b17c      	cbz	r4, 801683c <rcl_clock_remove_jump_callback+0xa4>
 801681c:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8016820:	69eb      	ldr	r3, [r5, #28]
 8016822:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8016824:	4648      	mov	r0, r9
 8016826:	00e1      	lsls	r1, r4, #3
 8016828:	4798      	blx	r3
 801682a:	4603      	mov	r3, r0
 801682c:	b1c0      	cbz	r0, 8016860 <rcl_clock_remove_jump_callback+0xc8>
 801682e:	2000      	movs	r0, #0
 8016830:	606b      	str	r3, [r5, #4]
 8016832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016836:	200b      	movs	r0, #11
 8016838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801683c:	4648      	mov	r0, r9
 801683e:	69ab      	ldr	r3, [r5, #24]
 8016840:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8016842:	4798      	blx	r3
 8016844:	4620      	mov	r0, r4
 8016846:	606c      	str	r4, [r5, #4]
 8016848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801684c:	4553      	cmp	r3, sl
 801684e:	d1c6      	bne.n	80167de <rcl_clock_remove_jump_callback+0x46>
 8016850:	f108 34ff 	add.w	r4, r8, #4294967295	@ 0xffffffff
 8016854:	60ac      	str	r4, [r5, #8]
 8016856:	2c00      	cmp	r4, #0
 8016858:	d1e0      	bne.n	801681c <rcl_clock_remove_jump_callback+0x84>
 801685a:	e7ef      	b.n	801683c <rcl_clock_remove_jump_callback+0xa4>
 801685c:	200b      	movs	r0, #11
 801685e:	4770      	bx	lr
 8016860:	200a      	movs	r0, #10
 8016862:	e7e9      	b.n	8016838 <rcl_clock_remove_jump_callback+0xa0>

08016864 <_rcl_timer_time_jump>:
 8016864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016868:	4605      	mov	r5, r0
 801686a:	b084      	sub	sp, #16
 801686c:	4614      	mov	r4, r2
 801686e:	b131      	cbz	r1, 801687e <_rcl_timer_time_jump+0x1a>
 8016870:	7803      	ldrb	r3, [r0, #0]
 8016872:	3b02      	subs	r3, #2
 8016874:	2b01      	cmp	r3, #1
 8016876:	d93f      	bls.n	80168f8 <_rcl_timer_time_jump+0x94>
 8016878:	b004      	add	sp, #16
 801687a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801687e:	6813      	ldr	r3, [r2, #0]
 8016880:	a902      	add	r1, sp, #8
 8016882:	6818      	ldr	r0, [r3, #0]
 8016884:	f7ff ff18 	bl	80166b8 <rcl_clock_get_now>
 8016888:	2800      	cmp	r0, #0
 801688a:	d1f5      	bne.n	8016878 <_rcl_timer_time_jump+0x14>
 801688c:	6820      	ldr	r0, [r4, #0]
 801688e:	2105      	movs	r1, #5
 8016890:	3020      	adds	r0, #32
 8016892:	f001 fe19 	bl	80184c8 <__atomic_load_8>
 8016896:	6823      	ldr	r3, [r4, #0]
 8016898:	4681      	mov	r9, r0
 801689a:	4688      	mov	r8, r1
 801689c:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 80168a0:	2105      	movs	r1, #5
 80168a2:	f001 fe11 	bl	80184c8 <__atomic_load_8>
 80168a6:	4607      	mov	r7, r0
 80168a8:	6820      	ldr	r0, [r4, #0]
 80168aa:	460e      	mov	r6, r1
 80168ac:	2105      	movs	r1, #5
 80168ae:	3018      	adds	r0, #24
 80168b0:	f001 fe0a 	bl	80184c8 <__atomic_load_8>
 80168b4:	782b      	ldrb	r3, [r5, #0]
 80168b6:	4682      	mov	sl, r0
 80168b8:	460d      	mov	r5, r1
 80168ba:	3b02      	subs	r3, #2
 80168bc:	9a02      	ldr	r2, [sp, #8]
 80168be:	2b01      	cmp	r3, #1
 80168c0:	9b03      	ldr	r3, [sp, #12]
 80168c2:	d937      	bls.n	8016934 <_rcl_timer_time_jump+0xd0>
 80168c4:	42ba      	cmp	r2, r7
 80168c6:	eb73 0106 	sbcs.w	r1, r3, r6
 80168ca:	da60      	bge.n	801698e <_rcl_timer_time_jump+0x12a>
 80168cc:	454a      	cmp	r2, r9
 80168ce:	eb73 0108 	sbcs.w	r1, r3, r8
 80168d2:	dad1      	bge.n	8016878 <_rcl_timer_time_jump+0x14>
 80168d4:	eb1a 0202 	adds.w	r2, sl, r2
 80168d8:	6820      	ldr	r0, [r4, #0]
 80168da:	eb43 0305 	adc.w	r3, r3, r5
 80168de:	2505      	movs	r5, #5
 80168e0:	3028      	adds	r0, #40	@ 0x28
 80168e2:	9500      	str	r5, [sp, #0]
 80168e4:	f001 fe26 	bl	8018534 <__atomic_store_8>
 80168e8:	6820      	ldr	r0, [r4, #0]
 80168ea:	9500      	str	r5, [sp, #0]
 80168ec:	3020      	adds	r0, #32
 80168ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80168f2:	f001 fe1f 	bl	8018534 <__atomic_store_8>
 80168f6:	e7bf      	b.n	8016878 <_rcl_timer_time_jump+0x14>
 80168f8:	6813      	ldr	r3, [r2, #0]
 80168fa:	a902      	add	r1, sp, #8
 80168fc:	6818      	ldr	r0, [r3, #0]
 80168fe:	f7ff fedb 	bl	80166b8 <rcl_clock_get_now>
 8016902:	2800      	cmp	r0, #0
 8016904:	d1b8      	bne.n	8016878 <_rcl_timer_time_jump+0x14>
 8016906:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801690a:	4313      	orrs	r3, r2
 801690c:	d0b4      	beq.n	8016878 <_rcl_timer_time_jump+0x14>
 801690e:	6820      	ldr	r0, [r4, #0]
 8016910:	2105      	movs	r1, #5
 8016912:	3028      	adds	r0, #40	@ 0x28
 8016914:	f001 fdd8 	bl	80184c8 <__atomic_load_8>
 8016918:	9d02      	ldr	r5, [sp, #8]
 801691a:	4602      	mov	r2, r0
 801691c:	9b03      	ldr	r3, [sp, #12]
 801691e:	6820      	ldr	r0, [r4, #0]
 8016920:	1b52      	subs	r2, r2, r5
 8016922:	f100 0030 	add.w	r0, r0, #48	@ 0x30
 8016926:	eb61 0303 	sbc.w	r3, r1, r3
 801692a:	2105      	movs	r1, #5
 801692c:	9100      	str	r1, [sp, #0]
 801692e:	f001 fe01 	bl	8018534 <__atomic_store_8>
 8016932:	e7a1      	b.n	8016878 <_rcl_timer_time_jump+0x14>
 8016934:	4313      	orrs	r3, r2
 8016936:	d09f      	beq.n	8016878 <_rcl_timer_time_jump+0x14>
 8016938:	6820      	ldr	r0, [r4, #0]
 801693a:	f04f 0805 	mov.w	r8, #5
 801693e:	2300      	movs	r3, #0
 8016940:	2200      	movs	r2, #0
 8016942:	3030      	adds	r0, #48	@ 0x30
 8016944:	f8cd 8000 	str.w	r8, [sp]
 8016948:	f001 fe2a 	bl	80185a0 <__atomic_exchange_8>
 801694c:	ea51 0300 	orrs.w	r3, r1, r0
 8016950:	4606      	mov	r6, r0
 8016952:	460f      	mov	r7, r1
 8016954:	d090      	beq.n	8016878 <_rcl_timer_time_jump+0x14>
 8016956:	9a02      	ldr	r2, [sp, #8]
 8016958:	9b03      	ldr	r3, [sp, #12]
 801695a:	1a12      	subs	r2, r2, r0
 801695c:	f8cd 8000 	str.w	r8, [sp]
 8016960:	6820      	ldr	r0, [r4, #0]
 8016962:	eb63 0301 	sbc.w	r3, r3, r1
 8016966:	eb12 020a 	adds.w	r2, r2, sl
 801696a:	f100 0028 	add.w	r0, r0, #40	@ 0x28
 801696e:	eb43 0305 	adc.w	r3, r3, r5
 8016972:	f001 fddf 	bl	8018534 <__atomic_store_8>
 8016976:	f8cd 8000 	str.w	r8, [sp]
 801697a:	6820      	ldr	r0, [r4, #0]
 801697c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016980:	3020      	adds	r0, #32
 8016982:	1b92      	subs	r2, r2, r6
 8016984:	eb63 0307 	sbc.w	r3, r3, r7
 8016988:	f001 fdd4 	bl	8018534 <__atomic_store_8>
 801698c:	e774      	b.n	8016878 <_rcl_timer_time_jump+0x14>
 801698e:	6820      	ldr	r0, [r4, #0]
 8016990:	3008      	adds	r0, #8
 8016992:	f004 fba9 	bl	801b0e8 <rcl_trigger_guard_condition>
 8016996:	e76f      	b.n	8016878 <_rcl_timer_time_jump+0x14>

08016998 <rcl_get_zero_initialized_timer>:
 8016998:	4b01      	ldr	r3, [pc, #4]	@ (80169a0 <rcl_get_zero_initialized_timer+0x8>)
 801699a:	6818      	ldr	r0, [r3, #0]
 801699c:	4770      	bx	lr
 801699e:	bf00      	nop
 80169a0:	0801d2b4 	.word	0x0801d2b4
 80169a4:	00000000 	.word	0x00000000

080169a8 <rcl_timer_init>:
 80169a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169ac:	b0ab      	sub	sp, #172	@ 0xac
 80169ae:	460d      	mov	r5, r1
 80169b0:	4604      	mov	r4, r0
 80169b2:	4692      	mov	sl, r2
 80169b4:	a837      	add	r0, sp, #220	@ 0xdc
 80169b6:	9f35      	ldr	r7, [sp, #212]	@ 0xd4
 80169b8:	f8dd 80d0 	ldr.w	r8, [sp, #208]	@ 0xd0
 80169bc:	f7f8 fda0 	bl	800f500 <rcutils_allocator_is_valid>
 80169c0:	fab5 f385 	clz	r3, r5
 80169c4:	095b      	lsrs	r3, r3, #5
 80169c6:	ea43 73d7 	orr.w	r3, r3, r7, lsr #31
 80169ca:	2c00      	cmp	r4, #0
 80169cc:	bf08      	it	eq
 80169ce:	f043 0301 	orreq.w	r3, r3, #1
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d164      	bne.n	8016aa0 <rcl_timer_init+0xf8>
 80169d6:	f080 0001 	eor.w	r0, r0, #1
 80169da:	b2c0      	uxtb	r0, r0
 80169dc:	2800      	cmp	r0, #0
 80169de:	d15f      	bne.n	8016aa0 <rcl_timer_init+0xf8>
 80169e0:	6823      	ldr	r3, [r4, #0]
 80169e2:	b123      	cbz	r3, 80169ee <rcl_timer_init+0x46>
 80169e4:	2664      	movs	r6, #100	@ 0x64
 80169e6:	4630      	mov	r0, r6
 80169e8:	b02b      	add	sp, #172	@ 0xac
 80169ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80169ee:	a908      	add	r1, sp, #32
 80169f0:	4628      	mov	r0, r5
 80169f2:	f7ff fe61 	bl	80166b8 <rcl_clock_get_now>
 80169f6:	4606      	mov	r6, r0
 80169f8:	2800      	cmp	r0, #0
 80169fa:	d1f4      	bne.n	80169e6 <rcl_timer_init+0x3e>
 80169fc:	f10d 0b18 	add.w	fp, sp, #24
 8016a00:	ae0b      	add	r6, sp, #44	@ 0x2c
 8016a02:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8016a06:	4658      	mov	r0, fp
 8016a08:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8016a0c:	f004 fa76 	bl	801aefc <rcl_get_zero_initialized_guard_condition>
 8016a10:	e89b 0003 	ldmia.w	fp, {r0, r1}
 8016a14:	e889 0003 	stmia.w	r9, {r0, r1}
 8016a18:	4630      	mov	r0, r6
 8016a1a:	f004 fb49 	bl	801b0b0 <rcl_guard_condition_get_default_options>
 8016a1e:	ab0d      	add	r3, sp, #52	@ 0x34
 8016a20:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016a24:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016a28:	4651      	mov	r1, sl
 8016a2a:	4648      	mov	r0, r9
 8016a2c:	e896 000c 	ldmia.w	r6, {r2, r3}
 8016a30:	f004 fa6e 	bl	801af10 <rcl_guard_condition_init>
 8016a34:	4606      	mov	r6, r0
 8016a36:	2800      	cmp	r0, #0
 8016a38:	d1d5      	bne.n	80169e6 <rcl_timer_init+0x3e>
 8016a3a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8016a3c:	781b      	ldrb	r3, [r3, #0]
 8016a3e:	2b01      	cmp	r3, #1
 8016a40:	d033      	beq.n	8016aaa <rcl_timer_init+0x102>
 8016a42:	9936      	ldr	r1, [sp, #216]	@ 0xd8
 8016a44:	4642      	mov	r2, r8
 8016a46:	463b      	mov	r3, r7
 8016a48:	f10d 0edc 	add.w	lr, sp, #220	@ 0xdc
 8016a4c:	911a      	str	r1, [sp, #104]	@ 0x68
 8016a4e:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8016a52:	f04f 0a00 	mov.w	sl, #0
 8016a56:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8016a5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8016a5e:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8016b08 <rcl_timer_init+0x160>
 8016a62:	eb12 0008 	adds.w	r0, r2, r8
 8016a66:	eb47 0103 	adc.w	r1, r7, r3
 8016a6a:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8016a6e:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8016a72:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8016a76:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016a7a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016a7e:	f8de 3000 	ldr.w	r3, [lr]
 8016a82:	2050      	movs	r0, #80	@ 0x50
 8016a84:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8016a88:	4619      	mov	r1, r3
 8016a8a:	f8cc 3000 	str.w	r3, [ip]
 8016a8e:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8016a90:	4798      	blx	r3
 8016a92:	6020      	str	r0, [r4, #0]
 8016a94:	b358      	cbz	r0, 8016aee <rcl_timer_init+0x146>
 8016a96:	2250      	movs	r2, #80	@ 0x50
 8016a98:	a916      	add	r1, sp, #88	@ 0x58
 8016a9a:	f005 fa4a 	bl	801bf32 <memcpy>
 8016a9e:	e7a2      	b.n	80169e6 <rcl_timer_init+0x3e>
 8016aa0:	260b      	movs	r6, #11
 8016aa2:	4630      	mov	r0, r6
 8016aa4:	b02b      	add	sp, #172	@ 0xac
 8016aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016aaa:	2001      	movs	r0, #1
 8016aac:	2100      	movs	r1, #0
 8016aae:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8016ab2:	ab12      	add	r3, sp, #72	@ 0x48
 8016ab4:	4a16      	ldr	r2, [pc, #88]	@ (8016b10 <rcl_timer_init+0x168>)
 8016ab6:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8016aba:	9405      	str	r4, [sp, #20]
 8016abc:	9204      	str	r2, [sp, #16]
 8016abe:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8016ac2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016ac6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8016aca:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8016ace:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016ad0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8016ad4:	4628      	mov	r0, r5
 8016ad6:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8016ada:	f7ff fdf9 	bl	80166d0 <rcl_clock_add_jump_callback>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	2800      	cmp	r0, #0
 8016ae2:	d0ae      	beq.n	8016a42 <rcl_timer_init+0x9a>
 8016ae4:	4648      	mov	r0, r9
 8016ae6:	461e      	mov	r6, r3
 8016ae8:	f004 fabc 	bl	801b064 <rcl_guard_condition_fini>
 8016aec:	e77b      	b.n	80169e6 <rcl_timer_init+0x3e>
 8016aee:	4648      	mov	r0, r9
 8016af0:	260a      	movs	r6, #10
 8016af2:	f004 fab7 	bl	801b064 <rcl_guard_condition_fini>
 8016af6:	4622      	mov	r2, r4
 8016af8:	4905      	ldr	r1, [pc, #20]	@ (8016b10 <rcl_timer_init+0x168>)
 8016afa:	4628      	mov	r0, r5
 8016afc:	f7ff fe4c 	bl	8016798 <rcl_clock_remove_jump_callback>
 8016b00:	e771      	b.n	80169e6 <rcl_timer_init+0x3e>
 8016b02:	bf00      	nop
 8016b04:	f3af 8000 	nop.w
	...
 8016b10:	08016865 	.word	0x08016865

08016b14 <rcl_timer_call>:
 8016b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b18:	b087      	sub	sp, #28
 8016b1a:	2800      	cmp	r0, #0
 8016b1c:	d06c      	beq.n	8016bf8 <rcl_timer_call+0xe4>
 8016b1e:	6803      	ldr	r3, [r0, #0]
 8016b20:	4604      	mov	r4, r0
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d062      	beq.n	8016bec <rcl_timer_call+0xd8>
 8016b26:	f3bf 8f5b 	dmb	ish
 8016b2a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016b2e:	f3bf 8f5b 	dmb	ish
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d14f      	bne.n	8016bd6 <rcl_timer_call+0xc2>
 8016b36:	6803      	ldr	r3, [r0, #0]
 8016b38:	a904      	add	r1, sp, #16
 8016b3a:	6818      	ldr	r0, [r3, #0]
 8016b3c:	f7ff fdbc 	bl	80166b8 <rcl_clock_get_now>
 8016b40:	4605      	mov	r5, r0
 8016b42:	2800      	cmp	r0, #0
 8016b44:	d149      	bne.n	8016bda <rcl_timer_call+0xc6>
 8016b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	db49      	blt.n	8016be2 <rcl_timer_call+0xce>
 8016b4e:	2605      	movs	r6, #5
 8016b50:	6820      	ldr	r0, [r4, #0]
 8016b52:	9600      	str	r6, [sp, #0]
 8016b54:	3020      	adds	r0, #32
 8016b56:	f001 fd23 	bl	80185a0 <__atomic_exchange_8>
 8016b5a:	6823      	ldr	r3, [r4, #0]
 8016b5c:	4680      	mov	r8, r0
 8016b5e:	f3bf 8f5b 	dmb	ish
 8016b62:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8016b66:	f3bf 8f5b 	dmb	ish
 8016b6a:	6820      	ldr	r0, [r4, #0]
 8016b6c:	4689      	mov	r9, r1
 8016b6e:	4631      	mov	r1, r6
 8016b70:	3028      	adds	r0, #40	@ 0x28
 8016b72:	f001 fca9 	bl	80184c8 <__atomic_load_8>
 8016b76:	460f      	mov	r7, r1
 8016b78:	4631      	mov	r1, r6
 8016b7a:	4606      	mov	r6, r0
 8016b7c:	6820      	ldr	r0, [r4, #0]
 8016b7e:	3018      	adds	r0, #24
 8016b80:	f001 fca2 	bl	80184c8 <__atomic_load_8>
 8016b84:	4602      	mov	r2, r0
 8016b86:	9804      	ldr	r0, [sp, #16]
 8016b88:	460b      	mov	r3, r1
 8016b8a:	18b6      	adds	r6, r6, r2
 8016b8c:	f8dd c014 	ldr.w	ip, [sp, #20]
 8016b90:	4692      	mov	sl, r2
 8016b92:	eb47 0701 	adc.w	r7, r7, r1
 8016b96:	4286      	cmp	r6, r0
 8016b98:	eb77 010c 	sbcs.w	r1, r7, ip
 8016b9c:	da04      	bge.n	8016ba8 <rcl_timer_call+0x94>
 8016b9e:	ea53 0102 	orrs.w	r1, r3, r2
 8016ba2:	d12e      	bne.n	8016c02 <rcl_timer_call+0xee>
 8016ba4:	4606      	mov	r6, r0
 8016ba6:	4667      	mov	r7, ip
 8016ba8:	6820      	ldr	r0, [r4, #0]
 8016baa:	2105      	movs	r1, #5
 8016bac:	4632      	mov	r2, r6
 8016bae:	463b      	mov	r3, r7
 8016bb0:	3028      	adds	r0, #40	@ 0x28
 8016bb2:	9100      	str	r1, [sp, #0]
 8016bb4:	f001 fcbe 	bl	8018534 <__atomic_store_8>
 8016bb8:	f1bb 0f00 	cmp.w	fp, #0
 8016bbc:	d00d      	beq.n	8016bda <rcl_timer_call+0xc6>
 8016bbe:	9a04      	ldr	r2, [sp, #16]
 8016bc0:	4620      	mov	r0, r4
 8016bc2:	9b05      	ldr	r3, [sp, #20]
 8016bc4:	ebb2 0208 	subs.w	r2, r2, r8
 8016bc8:	eb63 0309 	sbc.w	r3, r3, r9
 8016bcc:	47d8      	blx	fp
 8016bce:	4628      	mov	r0, r5
 8016bd0:	b007      	add	sp, #28
 8016bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bd6:	f240 3521 	movw	r5, #801	@ 0x321
 8016bda:	4628      	mov	r0, r5
 8016bdc:	b007      	add	sp, #28
 8016bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016be2:	2501      	movs	r5, #1
 8016be4:	4628      	mov	r0, r5
 8016be6:	b007      	add	sp, #28
 8016be8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bec:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8016bf0:	4628      	mov	r0, r5
 8016bf2:	b007      	add	sp, #28
 8016bf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016bf8:	250b      	movs	r5, #11
 8016bfa:	4628      	mov	r0, r5
 8016bfc:	b007      	add	sp, #28
 8016bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016c02:	1b80      	subs	r0, r0, r6
 8016c04:	eb6c 0107 	sbc.w	r1, ip, r7
 8016c08:	3801      	subs	r0, #1
 8016c0a:	f161 0100 	sbc.w	r1, r1, #0
 8016c0e:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8016c12:	f7e9 fbcd 	bl	80003b0 <__aeabi_ldivmod>
 8016c16:	9b02      	ldr	r3, [sp, #8]
 8016c18:	3001      	adds	r0, #1
 8016c1a:	f141 0100 	adc.w	r1, r1, #0
 8016c1e:	fb00 f303 	mul.w	r3, r0, r3
 8016c22:	fb01 330a 	mla	r3, r1, sl, r3
 8016c26:	fba0 0a0a 	umull	r0, sl, r0, sl
 8016c2a:	1986      	adds	r6, r0, r6
 8016c2c:	4453      	add	r3, sl
 8016c2e:	eb43 0707 	adc.w	r7, r3, r7
 8016c32:	e7b9      	b.n	8016ba8 <rcl_timer_call+0x94>

08016c34 <rcl_timer_is_ready>:
 8016c34:	b570      	push	{r4, r5, r6, lr}
 8016c36:	b082      	sub	sp, #8
 8016c38:	b380      	cbz	r0, 8016c9c <rcl_timer_is_ready+0x68>
 8016c3a:	6803      	ldr	r3, [r0, #0]
 8016c3c:	4604      	mov	r4, r0
 8016c3e:	b38b      	cbz	r3, 8016ca4 <rcl_timer_is_ready+0x70>
 8016c40:	460d      	mov	r5, r1
 8016c42:	b359      	cbz	r1, 8016c9c <rcl_timer_is_ready+0x68>
 8016c44:	f3bf 8f5b 	dmb	ish
 8016c48:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016c4c:	f3bf 8f5b 	dmb	ish
 8016c50:	b953      	cbnz	r3, 8016c68 <rcl_timer_is_ready+0x34>
 8016c52:	6803      	ldr	r3, [r0, #0]
 8016c54:	4669      	mov	r1, sp
 8016c56:	6818      	ldr	r0, [r3, #0]
 8016c58:	f7ff fd2e 	bl	80166b8 <rcl_clock_get_now>
 8016c5c:	4606      	mov	r6, r0
 8016c5e:	b148      	cbz	r0, 8016c74 <rcl_timer_is_ready+0x40>
 8016c60:	f240 3321 	movw	r3, #801	@ 0x321
 8016c64:	4298      	cmp	r0, r3
 8016c66:	d102      	bne.n	8016c6e <rcl_timer_is_ready+0x3a>
 8016c68:	2300      	movs	r3, #0
 8016c6a:	461e      	mov	r6, r3
 8016c6c:	702b      	strb	r3, [r5, #0]
 8016c6e:	4630      	mov	r0, r6
 8016c70:	b002      	add	sp, #8
 8016c72:	bd70      	pop	{r4, r5, r6, pc}
 8016c74:	6820      	ldr	r0, [r4, #0]
 8016c76:	2105      	movs	r1, #5
 8016c78:	3028      	adds	r0, #40	@ 0x28
 8016c7a:	f001 fc25 	bl	80184c8 <__atomic_load_8>
 8016c7e:	9b00      	ldr	r3, [sp, #0]
 8016c80:	1ac0      	subs	r0, r0, r3
 8016c82:	9b01      	ldr	r3, [sp, #4]
 8016c84:	eb61 0103 	sbc.w	r1, r1, r3
 8016c88:	2801      	cmp	r0, #1
 8016c8a:	4630      	mov	r0, r6
 8016c8c:	f171 0300 	sbcs.w	r3, r1, #0
 8016c90:	bfb4      	ite	lt
 8016c92:	2301      	movlt	r3, #1
 8016c94:	2300      	movge	r3, #0
 8016c96:	702b      	strb	r3, [r5, #0]
 8016c98:	b002      	add	sp, #8
 8016c9a:	bd70      	pop	{r4, r5, r6, pc}
 8016c9c:	260b      	movs	r6, #11
 8016c9e:	4630      	mov	r0, r6
 8016ca0:	b002      	add	sp, #8
 8016ca2:	bd70      	pop	{r4, r5, r6, pc}
 8016ca4:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016ca8:	e7e1      	b.n	8016c6e <rcl_timer_is_ready+0x3a>
 8016caa:	bf00      	nop

08016cac <rcl_timer_get_time_until_next_call>:
 8016cac:	b570      	push	{r4, r5, r6, lr}
 8016cae:	b082      	sub	sp, #8
 8016cb0:	b330      	cbz	r0, 8016d00 <rcl_timer_get_time_until_next_call+0x54>
 8016cb2:	6803      	ldr	r3, [r0, #0]
 8016cb4:	4604      	mov	r4, r0
 8016cb6:	b33b      	cbz	r3, 8016d08 <rcl_timer_get_time_until_next_call+0x5c>
 8016cb8:	460d      	mov	r5, r1
 8016cba:	b309      	cbz	r1, 8016d00 <rcl_timer_get_time_until_next_call+0x54>
 8016cbc:	f3bf 8f5b 	dmb	ish
 8016cc0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8016cc4:	f3bf 8f5b 	dmb	ish
 8016cc8:	b9ab      	cbnz	r3, 8016cf6 <rcl_timer_get_time_until_next_call+0x4a>
 8016cca:	6803      	ldr	r3, [r0, #0]
 8016ccc:	4669      	mov	r1, sp
 8016cce:	6818      	ldr	r0, [r3, #0]
 8016cd0:	f7ff fcf2 	bl	80166b8 <rcl_clock_get_now>
 8016cd4:	4606      	mov	r6, r0
 8016cd6:	b958      	cbnz	r0, 8016cf0 <rcl_timer_get_time_until_next_call+0x44>
 8016cd8:	6820      	ldr	r0, [r4, #0]
 8016cda:	2105      	movs	r1, #5
 8016cdc:	3028      	adds	r0, #40	@ 0x28
 8016cde:	f001 fbf3 	bl	80184c8 <__atomic_load_8>
 8016ce2:	9b00      	ldr	r3, [sp, #0]
 8016ce4:	1ac0      	subs	r0, r0, r3
 8016ce6:	9b01      	ldr	r3, [sp, #4]
 8016ce8:	eb61 0103 	sbc.w	r1, r1, r3
 8016cec:	6028      	str	r0, [r5, #0]
 8016cee:	6069      	str	r1, [r5, #4]
 8016cf0:	4630      	mov	r0, r6
 8016cf2:	b002      	add	sp, #8
 8016cf4:	bd70      	pop	{r4, r5, r6, pc}
 8016cf6:	f240 3621 	movw	r6, #801	@ 0x321
 8016cfa:	4630      	mov	r0, r6
 8016cfc:	b002      	add	sp, #8
 8016cfe:	bd70      	pop	{r4, r5, r6, pc}
 8016d00:	260b      	movs	r6, #11
 8016d02:	4630      	mov	r0, r6
 8016d04:	b002      	add	sp, #8
 8016d06:	bd70      	pop	{r4, r5, r6, pc}
 8016d08:	f44f 7648 	mov.w	r6, #800	@ 0x320
 8016d0c:	e7f0      	b.n	8016cf0 <rcl_timer_get_time_until_next_call+0x44>
 8016d0e:	bf00      	nop

08016d10 <rcl_timer_get_guard_condition>:
 8016d10:	b130      	cbz	r0, 8016d20 <rcl_timer_get_guard_condition+0x10>
 8016d12:	6800      	ldr	r0, [r0, #0]
 8016d14:	b120      	cbz	r0, 8016d20 <rcl_timer_get_guard_condition+0x10>
 8016d16:	68c3      	ldr	r3, [r0, #12]
 8016d18:	b10b      	cbz	r3, 8016d1e <rcl_timer_get_guard_condition+0xe>
 8016d1a:	3008      	adds	r0, #8
 8016d1c:	4770      	bx	lr
 8016d1e:	4618      	mov	r0, r3
 8016d20:	4770      	bx	lr
 8016d22:	bf00      	nop

08016d24 <rcl_validate_enclave_name_with_size>:
 8016d24:	2800      	cmp	r0, #0
 8016d26:	d049      	beq.n	8016dbc <rcl_validate_enclave_name_with_size+0x98>
 8016d28:	b570      	push	{r4, r5, r6, lr}
 8016d2a:	4615      	mov	r5, r2
 8016d2c:	b0c2      	sub	sp, #264	@ 0x108
 8016d2e:	b19a      	cbz	r2, 8016d58 <rcl_validate_enclave_name_with_size+0x34>
 8016d30:	461e      	mov	r6, r3
 8016d32:	466a      	mov	r2, sp
 8016d34:	ab01      	add	r3, sp, #4
 8016d36:	460c      	mov	r4, r1
 8016d38:	f002 f85a 	bl	8018df0 <rmw_validate_namespace_with_size>
 8016d3c:	4684      	mov	ip, r0
 8016d3e:	b9b8      	cbnz	r0, 8016d70 <rcl_validate_enclave_name_with_size+0x4c>
 8016d40:	9900      	ldr	r1, [sp, #0]
 8016d42:	b171      	cbz	r1, 8016d62 <rcl_validate_enclave_name_with_size+0x3e>
 8016d44:	2907      	cmp	r1, #7
 8016d46:	d019      	beq.n	8016d7c <rcl_validate_enclave_name_with_size+0x58>
 8016d48:	1e4b      	subs	r3, r1, #1
 8016d4a:	2b05      	cmp	r3, #5
 8016d4c:	d83a      	bhi.n	8016dc4 <rcl_validate_enclave_name_with_size+0xa0>
 8016d4e:	e8df f003 	tbb	[pc, r3]
 8016d52:	2926      	.short	0x2926
 8016d54:	1d322f2c 	.word	0x1d322f2c
 8016d58:	f04f 0c0b 	mov.w	ip, #11
 8016d5c:	4660      	mov	r0, ip
 8016d5e:	b042      	add	sp, #264	@ 0x108
 8016d60:	bd70      	pop	{r4, r5, r6, pc}
 8016d62:	2907      	cmp	r1, #7
 8016d64:	d00a      	beq.n	8016d7c <rcl_validate_enclave_name_with_size+0x58>
 8016d66:	2300      	movs	r3, #0
 8016d68:	4660      	mov	r0, ip
 8016d6a:	602b      	str	r3, [r5, #0]
 8016d6c:	b042      	add	sp, #264	@ 0x108
 8016d6e:	bd70      	pop	{r4, r5, r6, pc}
 8016d70:	f7fe fe08 	bl	8015984 <rcl_convert_rmw_ret_to_rcl_ret>
 8016d74:	4684      	mov	ip, r0
 8016d76:	4660      	mov	r0, ip
 8016d78:	b042      	add	sp, #264	@ 0x108
 8016d7a:	bd70      	pop	{r4, r5, r6, pc}
 8016d7c:	2cff      	cmp	r4, #255	@ 0xff
 8016d7e:	d9f2      	bls.n	8016d66 <rcl_validate_enclave_name_with_size+0x42>
 8016d80:	6029      	str	r1, [r5, #0]
 8016d82:	2e00      	cmp	r6, #0
 8016d84:	d0ea      	beq.n	8016d5c <rcl_validate_enclave_name_with_size+0x38>
 8016d86:	23fe      	movs	r3, #254	@ 0xfe
 8016d88:	6033      	str	r3, [r6, #0]
 8016d8a:	e7e7      	b.n	8016d5c <rcl_validate_enclave_name_with_size+0x38>
 8016d8c:	2306      	movs	r3, #6
 8016d8e:	602b      	str	r3, [r5, #0]
 8016d90:	2e00      	cmp	r6, #0
 8016d92:	d0e3      	beq.n	8016d5c <rcl_validate_enclave_name_with_size+0x38>
 8016d94:	9b01      	ldr	r3, [sp, #4]
 8016d96:	4660      	mov	r0, ip
 8016d98:	6033      	str	r3, [r6, #0]
 8016d9a:	b042      	add	sp, #264	@ 0x108
 8016d9c:	bd70      	pop	{r4, r5, r6, pc}
 8016d9e:	2301      	movs	r3, #1
 8016da0:	602b      	str	r3, [r5, #0]
 8016da2:	e7f5      	b.n	8016d90 <rcl_validate_enclave_name_with_size+0x6c>
 8016da4:	2302      	movs	r3, #2
 8016da6:	602b      	str	r3, [r5, #0]
 8016da8:	e7f2      	b.n	8016d90 <rcl_validate_enclave_name_with_size+0x6c>
 8016daa:	2303      	movs	r3, #3
 8016dac:	602b      	str	r3, [r5, #0]
 8016dae:	e7ef      	b.n	8016d90 <rcl_validate_enclave_name_with_size+0x6c>
 8016db0:	2304      	movs	r3, #4
 8016db2:	602b      	str	r3, [r5, #0]
 8016db4:	e7ec      	b.n	8016d90 <rcl_validate_enclave_name_with_size+0x6c>
 8016db6:	2305      	movs	r3, #5
 8016db8:	602b      	str	r3, [r5, #0]
 8016dba:	e7e9      	b.n	8016d90 <rcl_validate_enclave_name_with_size+0x6c>
 8016dbc:	f04f 0c0b 	mov.w	ip, #11
 8016dc0:	4660      	mov	r0, ip
 8016dc2:	4770      	bx	lr
 8016dc4:	460b      	mov	r3, r1
 8016dc6:	4a04      	ldr	r2, [pc, #16]	@ (8016dd8 <rcl_validate_enclave_name_with_size+0xb4>)
 8016dc8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8016dcc:	a802      	add	r0, sp, #8
 8016dce:	f001 fd33 	bl	8018838 <rcutils_snprintf>
 8016dd2:	f04f 0c01 	mov.w	ip, #1
 8016dd6:	e7c1      	b.n	8016d5c <rcl_validate_enclave_name_with_size+0x38>
 8016dd8:	0801d2b8 	.word	0x0801d2b8

08016ddc <rcl_validate_enclave_name>:
 8016ddc:	b168      	cbz	r0, 8016dfa <rcl_validate_enclave_name+0x1e>
 8016dde:	b570      	push	{r4, r5, r6, lr}
 8016de0:	460d      	mov	r5, r1
 8016de2:	4616      	mov	r6, r2
 8016de4:	4604      	mov	r4, r0
 8016de6:	f7e9 fa85 	bl	80002f4 <strlen>
 8016dea:	4633      	mov	r3, r6
 8016dec:	4601      	mov	r1, r0
 8016dee:	462a      	mov	r2, r5
 8016df0:	4620      	mov	r0, r4
 8016df2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016df6:	f7ff bf95 	b.w	8016d24 <rcl_validate_enclave_name_with_size>
 8016dfa:	200b      	movs	r0, #11
 8016dfc:	4770      	bx	lr
 8016dfe:	bf00      	nop

08016e00 <rcl_get_zero_initialized_wait_set>:
 8016e00:	b510      	push	{r4, lr}
 8016e02:	4c08      	ldr	r4, [pc, #32]	@ (8016e24 <rcl_get_zero_initialized_wait_set+0x24>)
 8016e04:	4686      	mov	lr, r0
 8016e06:	4684      	mov	ip, r0
 8016e08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e0a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e10:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016e16:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016e1a:	6823      	ldr	r3, [r4, #0]
 8016e1c:	4670      	mov	r0, lr
 8016e1e:	f8cc 3000 	str.w	r3, [ip]
 8016e22:	bd10      	pop	{r4, pc}
 8016e24:	0801d318 	.word	0x0801d318

08016e28 <rcl_wait_set_is_valid>:
 8016e28:	b118      	cbz	r0, 8016e32 <rcl_wait_set_is_valid+0xa>
 8016e2a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8016e2c:	3800      	subs	r0, #0
 8016e2e:	bf18      	it	ne
 8016e30:	2001      	movne	r0, #1
 8016e32:	4770      	bx	lr

08016e34 <rcl_wait_set_fini>:
 8016e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e38:	b082      	sub	sp, #8
 8016e3a:	2800      	cmp	r0, #0
 8016e3c:	f000 8095 	beq.w	8016f6a <rcl_wait_set_fini+0x136>
 8016e40:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8016e42:	4604      	mov	r4, r0
 8016e44:	2e00      	cmp	r6, #0
 8016e46:	f000 808c 	beq.w	8016f62 <rcl_wait_set_fini+0x12e>
 8016e4a:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8016e4c:	f002 fd7c 	bl	8019948 <rmw_destroy_wait_set>
 8016e50:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016e52:	1e06      	subs	r6, r0, #0
 8016e54:	bf18      	it	ne
 8016e56:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8016e5a:	2d00      	cmp	r5, #0
 8016e5c:	f000 8081 	beq.w	8016f62 <rcl_wait_set_fini+0x12e>
 8016e60:	2700      	movs	r7, #0
 8016e62:	6820      	ldr	r0, [r4, #0]
 8016e64:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016e68:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016e6a:	6067      	str	r7, [r4, #4]
 8016e6c:	602f      	str	r7, [r5, #0]
 8016e6e:	b120      	cbz	r0, 8016e7a <rcl_wait_set_fini+0x46>
 8016e70:	9101      	str	r1, [sp, #4]
 8016e72:	47c0      	blx	r8
 8016e74:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016e76:	9901      	ldr	r1, [sp, #4]
 8016e78:	6027      	str	r7, [r4, #0]
 8016e7a:	68a8      	ldr	r0, [r5, #8]
 8016e7c:	b120      	cbz	r0, 8016e88 <rcl_wait_set_fini+0x54>
 8016e7e:	47c0      	blx	r8
 8016e80:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016e82:	2300      	movs	r3, #0
 8016e84:	e9c5 3301 	strd	r3, r3, [r5, #4]
 8016e88:	f04f 0800 	mov.w	r8, #0
 8016e8c:	68a0      	ldr	r0, [r4, #8]
 8016e8e:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016e90:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016e92:	f8c4 800c 	str.w	r8, [r4, #12]
 8016e96:	f8c5 800c 	str.w	r8, [r5, #12]
 8016e9a:	b128      	cbz	r0, 8016ea8 <rcl_wait_set_fini+0x74>
 8016e9c:	47b8      	blx	r7
 8016e9e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016ea0:	f8c4 8008 	str.w	r8, [r4, #8]
 8016ea4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016ea6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016ea8:	f04f 0800 	mov.w	r8, #0
 8016eac:	6968      	ldr	r0, [r5, #20]
 8016eae:	f8c5 8010 	str.w	r8, [r5, #16]
 8016eb2:	b128      	cbz	r0, 8016ec0 <rcl_wait_set_fini+0x8c>
 8016eb4:	47b8      	blx	r7
 8016eb6:	f8c5 8014 	str.w	r8, [r5, #20]
 8016eba:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016ebc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016ebe:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016ec0:	f04f 0800 	mov.w	r8, #0
 8016ec4:	6920      	ldr	r0, [r4, #16]
 8016ec6:	f8c4 8014 	str.w	r8, [r4, #20]
 8016eca:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 8016ece:	b128      	cbz	r0, 8016edc <rcl_wait_set_fini+0xa8>
 8016ed0:	47b8      	blx	r7
 8016ed2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016ed4:	f8c4 8010 	str.w	r8, [r4, #16]
 8016ed8:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 8016eda:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016edc:	f04f 0800 	mov.w	r8, #0
 8016ee0:	69a0      	ldr	r0, [r4, #24]
 8016ee2:	f8c4 801c 	str.w	r8, [r4, #28]
 8016ee6:	f8c5 8018 	str.w	r8, [r5, #24]
 8016eea:	b128      	cbz	r0, 8016ef8 <rcl_wait_set_fini+0xc4>
 8016eec:	9101      	str	r1, [sp, #4]
 8016eee:	47b8      	blx	r7
 8016ef0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016ef2:	9901      	ldr	r1, [sp, #4]
 8016ef4:	f8c4 8018 	str.w	r8, [r4, #24]
 8016ef8:	6a28      	ldr	r0, [r5, #32]
 8016efa:	b120      	cbz	r0, 8016f06 <rcl_wait_set_fini+0xd2>
 8016efc:	47b8      	blx	r7
 8016efe:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016f00:	2300      	movs	r3, #0
 8016f02:	e9c5 3307 	strd	r3, r3, [r5, #28]
 8016f06:	2700      	movs	r7, #0
 8016f08:	6a20      	ldr	r0, [r4, #32]
 8016f0a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016f0e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016f10:	6267      	str	r7, [r4, #36]	@ 0x24
 8016f12:	626f      	str	r7, [r5, #36]	@ 0x24
 8016f14:	b120      	cbz	r0, 8016f20 <rcl_wait_set_fini+0xec>
 8016f16:	9101      	str	r1, [sp, #4]
 8016f18:	47c0      	blx	r8
 8016f1a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016f1c:	9901      	ldr	r1, [sp, #4]
 8016f1e:	6227      	str	r7, [r4, #32]
 8016f20:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8016f22:	b120      	cbz	r0, 8016f2e <rcl_wait_set_fini+0xfa>
 8016f24:	47c0      	blx	r8
 8016f26:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016f28:	2300      	movs	r3, #0
 8016f2a:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8016f2e:	2700      	movs	r7, #0
 8016f30:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8016f32:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8016f36:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016f38:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8016f3a:	632f      	str	r7, [r5, #48]	@ 0x30
 8016f3c:	b120      	cbz	r0, 8016f48 <rcl_wait_set_fini+0x114>
 8016f3e:	9101      	str	r1, [sp, #4]
 8016f40:	47c0      	blx	r8
 8016f42:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016f44:	9901      	ldr	r1, [sp, #4]
 8016f46:	62a7      	str	r7, [r4, #40]	@ 0x28
 8016f48:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8016f4a:	b120      	cbz	r0, 8016f56 <rcl_wait_set_fini+0x122>
 8016f4c:	47c0      	blx	r8
 8016f4e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8016f50:	2300      	movs	r3, #0
 8016f52:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 8016f56:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8016f58:	4628      	mov	r0, r5
 8016f5a:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8016f5c:	4798      	blx	r3
 8016f5e:	2300      	movs	r3, #0
 8016f60:	6323      	str	r3, [r4, #48]	@ 0x30
 8016f62:	4630      	mov	r0, r6
 8016f64:	b002      	add	sp, #8
 8016f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016f6a:	260b      	movs	r6, #11
 8016f6c:	4630      	mov	r0, r6
 8016f6e:	b002      	add	sp, #8
 8016f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016f74 <rcl_wait_set_add_subscription>:
 8016f74:	b318      	cbz	r0, 8016fbe <rcl_wait_set_add_subscription+0x4a>
 8016f76:	b538      	push	{r3, r4, r5, lr}
 8016f78:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016f7a:	4604      	mov	r4, r0
 8016f7c:	b30b      	cbz	r3, 8016fc2 <rcl_wait_set_add_subscription+0x4e>
 8016f7e:	b319      	cbz	r1, 8016fc8 <rcl_wait_set_add_subscription+0x54>
 8016f80:	681d      	ldr	r5, [r3, #0]
 8016f82:	6840      	ldr	r0, [r0, #4]
 8016f84:	4285      	cmp	r5, r0
 8016f86:	d217      	bcs.n	8016fb8 <rcl_wait_set_add_subscription+0x44>
 8016f88:	1c68      	adds	r0, r5, #1
 8016f8a:	6018      	str	r0, [r3, #0]
 8016f8c:	6823      	ldr	r3, [r4, #0]
 8016f8e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8016f92:	b102      	cbz	r2, 8016f96 <rcl_wait_set_add_subscription+0x22>
 8016f94:	6015      	str	r5, [r2, #0]
 8016f96:	4608      	mov	r0, r1
 8016f98:	f7ff fadc 	bl	8016554 <rcl_subscription_get_rmw_handle>
 8016f9c:	b150      	cbz	r0, 8016fb4 <rcl_wait_set_add_subscription+0x40>
 8016f9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016fa0:	6842      	ldr	r2, [r0, #4]
 8016fa2:	2000      	movs	r0, #0
 8016fa4:	689b      	ldr	r3, [r3, #8]
 8016fa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016faa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8016fac:	6853      	ldr	r3, [r2, #4]
 8016fae:	3301      	adds	r3, #1
 8016fb0:	6053      	str	r3, [r2, #4]
 8016fb2:	bd38      	pop	{r3, r4, r5, pc}
 8016fb4:	2001      	movs	r0, #1
 8016fb6:	bd38      	pop	{r3, r4, r5, pc}
 8016fb8:	f240 3086 	movw	r0, #902	@ 0x386
 8016fbc:	bd38      	pop	{r3, r4, r5, pc}
 8016fbe:	200b      	movs	r0, #11
 8016fc0:	4770      	bx	lr
 8016fc2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8016fc6:	bd38      	pop	{r3, r4, r5, pc}
 8016fc8:	200b      	movs	r0, #11
 8016fca:	bd38      	pop	{r3, r4, r5, pc}

08016fcc <rcl_wait_set_clear>:
 8016fcc:	2800      	cmp	r0, #0
 8016fce:	d074      	beq.n	80170ba <rcl_wait_set_clear+0xee>
 8016fd0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8016fd2:	b510      	push	{r4, lr}
 8016fd4:	4604      	mov	r4, r0
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d071      	beq.n	80170be <rcl_wait_set_clear+0xf2>
 8016fda:	6800      	ldr	r0, [r0, #0]
 8016fdc:	b138      	cbz	r0, 8016fee <rcl_wait_set_clear+0x22>
 8016fde:	6862      	ldr	r2, [r4, #4]
 8016fe0:	2100      	movs	r1, #0
 8016fe2:	0092      	lsls	r2, r2, #2
 8016fe4:	f004 fedc 	bl	801bda0 <memset>
 8016fe8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016fea:	2200      	movs	r2, #0
 8016fec:	601a      	str	r2, [r3, #0]
 8016fee:	68a0      	ldr	r0, [r4, #8]
 8016ff0:	b138      	cbz	r0, 8017002 <rcl_wait_set_clear+0x36>
 8016ff2:	68e2      	ldr	r2, [r4, #12]
 8016ff4:	2100      	movs	r1, #0
 8016ff6:	0092      	lsls	r2, r2, #2
 8016ff8:	f004 fed2 	bl	801bda0 <memset>
 8016ffc:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8016ffe:	2200      	movs	r2, #0
 8017000:	60da      	str	r2, [r3, #12]
 8017002:	69a0      	ldr	r0, [r4, #24]
 8017004:	b138      	cbz	r0, 8017016 <rcl_wait_set_clear+0x4a>
 8017006:	69e2      	ldr	r2, [r4, #28]
 8017008:	2100      	movs	r1, #0
 801700a:	0092      	lsls	r2, r2, #2
 801700c:	f004 fec8 	bl	801bda0 <memset>
 8017010:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017012:	2200      	movs	r2, #0
 8017014:	619a      	str	r2, [r3, #24]
 8017016:	6a20      	ldr	r0, [r4, #32]
 8017018:	b138      	cbz	r0, 801702a <rcl_wait_set_clear+0x5e>
 801701a:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 801701c:	2100      	movs	r1, #0
 801701e:	0092      	lsls	r2, r2, #2
 8017020:	f004 febe 	bl	801bda0 <memset>
 8017024:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017026:	2200      	movs	r2, #0
 8017028:	625a      	str	r2, [r3, #36]	@ 0x24
 801702a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801702c:	b138      	cbz	r0, 801703e <rcl_wait_set_clear+0x72>
 801702e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8017030:	2100      	movs	r1, #0
 8017032:	0092      	lsls	r2, r2, #2
 8017034:	f004 feb4 	bl	801bda0 <memset>
 8017038:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801703a:	2200      	movs	r2, #0
 801703c:	631a      	str	r2, [r3, #48]	@ 0x30
 801703e:	6920      	ldr	r0, [r4, #16]
 8017040:	b138      	cbz	r0, 8017052 <rcl_wait_set_clear+0x86>
 8017042:	6962      	ldr	r2, [r4, #20]
 8017044:	2100      	movs	r1, #0
 8017046:	0092      	lsls	r2, r2, #2
 8017048:	f004 feaa 	bl	801bda0 <memset>
 801704c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801704e:	2200      	movs	r2, #0
 8017050:	641a      	str	r2, [r3, #64]	@ 0x40
 8017052:	6898      	ldr	r0, [r3, #8]
 8017054:	b138      	cbz	r0, 8017066 <rcl_wait_set_clear+0x9a>
 8017056:	685a      	ldr	r2, [r3, #4]
 8017058:	2100      	movs	r1, #0
 801705a:	0092      	lsls	r2, r2, #2
 801705c:	f004 fea0 	bl	801bda0 <memset>
 8017060:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017062:	2200      	movs	r2, #0
 8017064:	605a      	str	r2, [r3, #4]
 8017066:	6958      	ldr	r0, [r3, #20]
 8017068:	b138      	cbz	r0, 801707a <rcl_wait_set_clear+0xae>
 801706a:	691a      	ldr	r2, [r3, #16]
 801706c:	2100      	movs	r1, #0
 801706e:	0092      	lsls	r2, r2, #2
 8017070:	f004 fe96 	bl	801bda0 <memset>
 8017074:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017076:	2200      	movs	r2, #0
 8017078:	611a      	str	r2, [r3, #16]
 801707a:	6a18      	ldr	r0, [r3, #32]
 801707c:	b138      	cbz	r0, 801708e <rcl_wait_set_clear+0xc2>
 801707e:	69da      	ldr	r2, [r3, #28]
 8017080:	2100      	movs	r1, #0
 8017082:	0092      	lsls	r2, r2, #2
 8017084:	f004 fe8c 	bl	801bda0 <memset>
 8017088:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801708a:	2200      	movs	r2, #0
 801708c:	61da      	str	r2, [r3, #28]
 801708e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8017090:	b138      	cbz	r0, 80170a2 <rcl_wait_set_clear+0xd6>
 8017092:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8017094:	2100      	movs	r1, #0
 8017096:	0092      	lsls	r2, r2, #2
 8017098:	f004 fe82 	bl	801bda0 <memset>
 801709c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801709e:	2200      	movs	r2, #0
 80170a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80170a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80170a4:	b140      	cbz	r0, 80170b8 <rcl_wait_set_clear+0xec>
 80170a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80170a8:	2100      	movs	r1, #0
 80170aa:	0092      	lsls	r2, r2, #2
 80170ac:	f004 fe78 	bl	801bda0 <memset>
 80170b0:	2300      	movs	r3, #0
 80170b2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80170b4:	4618      	mov	r0, r3
 80170b6:	6353      	str	r3, [r2, #52]	@ 0x34
 80170b8:	bd10      	pop	{r4, pc}
 80170ba:	200b      	movs	r0, #11
 80170bc:	4770      	bx	lr
 80170be:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80170c2:	bd10      	pop	{r4, pc}

080170c4 <rcl_wait_set_resize>:
 80170c4:	2800      	cmp	r0, #0
 80170c6:	f000 8180 	beq.w	80173ca <rcl_wait_set_resize+0x306>
 80170ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80170ce:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80170d0:	b083      	sub	sp, #12
 80170d2:	4605      	mov	r5, r0
 80170d4:	2c00      	cmp	r4, #0
 80170d6:	f000 817a 	beq.w	80173ce <rcl_wait_set_resize+0x30a>
 80170da:	f04f 0900 	mov.w	r9, #0
 80170de:	461f      	mov	r7, r3
 80170e0:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80170e4:	4688      	mov	r8, r1
 80170e6:	4616      	mov	r6, r2
 80170e8:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 80170ec:	f8c0 9004 	str.w	r9, [r0, #4]
 80170f0:	f8c4 9000 	str.w	r9, [r4]
 80170f4:	2900      	cmp	r1, #0
 80170f6:	f000 80bf 	beq.w	8017278 <rcl_wait_set_resize+0x1b4>
 80170fa:	008c      	lsls	r4, r1, #2
 80170fc:	4652      	mov	r2, sl
 80170fe:	6800      	ldr	r0, [r0, #0]
 8017100:	4621      	mov	r1, r4
 8017102:	9301      	str	r3, [sp, #4]
 8017104:	4798      	blx	r3
 8017106:	9b01      	ldr	r3, [sp, #4]
 8017108:	6028      	str	r0, [r5, #0]
 801710a:	2800      	cmp	r0, #0
 801710c:	f000 80f6 	beq.w	80172fc <rcl_wait_set_resize+0x238>
 8017110:	4622      	mov	r2, r4
 8017112:	4649      	mov	r1, r9
 8017114:	9301      	str	r3, [sp, #4]
 8017116:	f004 fe43 	bl	801bda0 <memset>
 801711a:	f8c5 8004 	str.w	r8, [r5, #4]
 801711e:	4652      	mov	r2, sl
 8017120:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 8017124:	4621      	mov	r1, r4
 8017126:	9b01      	ldr	r3, [sp, #4]
 8017128:	f8d8 0008 	ldr.w	r0, [r8, #8]
 801712c:	f8c8 9004 	str.w	r9, [r8, #4]
 8017130:	4798      	blx	r3
 8017132:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017134:	f8c8 0008 	str.w	r0, [r8, #8]
 8017138:	689b      	ldr	r3, [r3, #8]
 801713a:	2b00      	cmp	r3, #0
 801713c:	f000 814a 	beq.w	80173d4 <rcl_wait_set_resize+0x310>
 8017140:	4622      	mov	r2, r4
 8017142:	4649      	mov	r1, r9
 8017144:	4618      	mov	r0, r3
 8017146:	f004 fe2b 	bl	801bda0 <memset>
 801714a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801714c:	f04f 0800 	mov.w	r8, #0
 8017150:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017154:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8017158:	f8c5 800c 	str.w	r8, [r5, #12]
 801715c:	f8c4 800c 	str.w	r8, [r4, #12]
 8017160:	2e00      	cmp	r6, #0
 8017162:	f040 809b 	bne.w	801729c <rcl_wait_set_resize+0x1d8>
 8017166:	68a8      	ldr	r0, [r5, #8]
 8017168:	b128      	cbz	r0, 8017176 <rcl_wait_set_resize+0xb2>
 801716a:	4649      	mov	r1, r9
 801716c:	4790      	blx	r2
 801716e:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017170:	60ae      	str	r6, [r5, #8]
 8017172:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017176:	f04f 0800 	mov.w	r8, #0
 801717a:	19f6      	adds	r6, r6, r7
 801717c:	f8c4 8010 	str.w	r8, [r4, #16]
 8017180:	f040 80a2 	bne.w	80172c8 <rcl_wait_set_resize+0x204>
 8017184:	6960      	ldr	r0, [r4, #20]
 8017186:	b130      	cbz	r0, 8017196 <rcl_wait_set_resize+0xd2>
 8017188:	4649      	mov	r1, r9
 801718a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801718c:	4798      	blx	r3
 801718e:	6166      	str	r6, [r4, #20]
 8017190:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017192:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017196:	2600      	movs	r6, #0
 8017198:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 801719c:	616e      	str	r6, [r5, #20]
 801719e:	6426      	str	r6, [r4, #64]	@ 0x40
 80171a0:	2f00      	cmp	r7, #0
 80171a2:	f040 80af 	bne.w	8017304 <rcl_wait_set_resize+0x240>
 80171a6:	6928      	ldr	r0, [r5, #16]
 80171a8:	b138      	cbz	r0, 80171ba <rcl_wait_set_resize+0xf6>
 80171aa:	4649      	mov	r1, r9
 80171ac:	47d0      	blx	sl
 80171ae:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80171b0:	612f      	str	r7, [r5, #16]
 80171b2:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80171b6:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80171ba:	2600      	movs	r6, #0
 80171bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80171be:	61ee      	str	r6, [r5, #28]
 80171c0:	61a6      	str	r6, [r4, #24]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	f040 8093 	bne.w	80172ee <rcl_wait_set_resize+0x22a>
 80171c8:	69a8      	ldr	r0, [r5, #24]
 80171ca:	b120      	cbz	r0, 80171d6 <rcl_wait_set_resize+0x112>
 80171cc:	4649      	mov	r1, r9
 80171ce:	47d0      	blx	sl
 80171d0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80171d2:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80171d4:	61ab      	str	r3, [r5, #24]
 80171d6:	6a20      	ldr	r0, [r4, #32]
 80171d8:	b128      	cbz	r0, 80171e6 <rcl_wait_set_resize+0x122>
 80171da:	4649      	mov	r1, r9
 80171dc:	47d0      	blx	sl
 80171de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80171e0:	2300      	movs	r3, #0
 80171e2:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80171e6:	2600      	movs	r6, #0
 80171e8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80171ea:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 80171ec:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 80171f0:	626e      	str	r6, [r5, #36]	@ 0x24
 80171f2:	6266      	str	r6, [r4, #36]	@ 0x24
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	f000 8098 	beq.w	801732a <rcl_wait_set_resize+0x266>
 80171fa:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 80171fe:	463a      	mov	r2, r7
 8017200:	6a28      	ldr	r0, [r5, #32]
 8017202:	4651      	mov	r1, sl
 8017204:	47c8      	blx	r9
 8017206:	6228      	str	r0, [r5, #32]
 8017208:	2800      	cmp	r0, #0
 801720a:	d077      	beq.n	80172fc <rcl_wait_set_resize+0x238>
 801720c:	4652      	mov	r2, sl
 801720e:	4631      	mov	r1, r6
 8017210:	f004 fdc6 	bl	801bda0 <memset>
 8017214:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017216:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017218:	463a      	mov	r2, r7
 801721a:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801721c:	4651      	mov	r1, sl
 801721e:	626b      	str	r3, [r5, #36]	@ 0x24
 8017220:	62a6      	str	r6, [r4, #40]	@ 0x28
 8017222:	47c8      	blx	r9
 8017224:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017226:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8017228:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 801722a:	2c00      	cmp	r4, #0
 801722c:	f000 80f2 	beq.w	8017414 <rcl_wait_set_resize+0x350>
 8017230:	4620      	mov	r0, r4
 8017232:	4652      	mov	r2, sl
 8017234:	4631      	mov	r1, r6
 8017236:	f004 fdb3 	bl	801bda0 <memset>
 801723a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801723c:	2600      	movs	r6, #0
 801723e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017240:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8017242:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8017246:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8017248:	6326      	str	r6, [r4, #48]	@ 0x30
 801724a:	2b00      	cmp	r3, #0
 801724c:	f040 8097 	bne.w	801737e <rcl_wait_set_resize+0x2ba>
 8017250:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017252:	b120      	cbz	r0, 801725e <rcl_wait_set_resize+0x19a>
 8017254:	4639      	mov	r1, r7
 8017256:	47c0      	blx	r8
 8017258:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801725a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801725c:	62ab      	str	r3, [r5, #40]	@ 0x28
 801725e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8017260:	2800      	cmp	r0, #0
 8017262:	d04c      	beq.n	80172fe <rcl_wait_set_resize+0x23a>
 8017264:	4639      	mov	r1, r7
 8017266:	47c0      	blx	r8
 8017268:	2300      	movs	r3, #0
 801726a:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801726c:	4618      	mov	r0, r3
 801726e:	e9c2 330d 	strd	r3, r3, [r2, #52]	@ 0x34
 8017272:	b003      	add	sp, #12
 8017274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017278:	6800      	ldr	r0, [r0, #0]
 801727a:	b120      	cbz	r0, 8017286 <rcl_wait_set_resize+0x1c2>
 801727c:	4651      	mov	r1, sl
 801727e:	47d8      	blx	fp
 8017280:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017282:	f8c5 8000 	str.w	r8, [r5]
 8017286:	68a0      	ldr	r0, [r4, #8]
 8017288:	2800      	cmp	r0, #0
 801728a:	f43f af5f 	beq.w	801714c <rcl_wait_set_resize+0x88>
 801728e:	4651      	mov	r1, sl
 8017290:	47d8      	blx	fp
 8017292:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017294:	2300      	movs	r3, #0
 8017296:	e9c4 3301 	strd	r3, r3, [r4, #4]
 801729a:	e757      	b.n	801714c <rcl_wait_set_resize+0x88>
 801729c:	00b4      	lsls	r4, r6, #2
 801729e:	464a      	mov	r2, r9
 80172a0:	68a8      	ldr	r0, [r5, #8]
 80172a2:	4621      	mov	r1, r4
 80172a4:	4798      	blx	r3
 80172a6:	60a8      	str	r0, [r5, #8]
 80172a8:	b340      	cbz	r0, 80172fc <rcl_wait_set_resize+0x238>
 80172aa:	4622      	mov	r2, r4
 80172ac:	4641      	mov	r1, r8
 80172ae:	f004 fd77 	bl	801bda0 <memset>
 80172b2:	f04f 0800 	mov.w	r8, #0
 80172b6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80172b8:	60ee      	str	r6, [r5, #12]
 80172ba:	19f6      	adds	r6, r6, r7
 80172bc:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80172c0:	f8c4 8010 	str.w	r8, [r4, #16]
 80172c4:	f43f af5e 	beq.w	8017184 <rcl_wait_set_resize+0xc0>
 80172c8:	00b6      	lsls	r6, r6, #2
 80172ca:	464a      	mov	r2, r9
 80172cc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80172ce:	6960      	ldr	r0, [r4, #20]
 80172d0:	4631      	mov	r1, r6
 80172d2:	4798      	blx	r3
 80172d4:	4681      	mov	r9, r0
 80172d6:	6160      	str	r0, [r4, #20]
 80172d8:	2800      	cmp	r0, #0
 80172da:	f000 8084 	beq.w	80173e6 <rcl_wait_set_resize+0x322>
 80172de:	4632      	mov	r2, r6
 80172e0:	4641      	mov	r1, r8
 80172e2:	f004 fd5d 	bl	801bda0 <memset>
 80172e6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80172e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80172ec:	e753      	b.n	8017196 <rcl_wait_set_resize+0xd2>
 80172ee:	009c      	lsls	r4, r3, #2
 80172f0:	464a      	mov	r2, r9
 80172f2:	69a8      	ldr	r0, [r5, #24]
 80172f4:	4621      	mov	r1, r4
 80172f6:	47c0      	blx	r8
 80172f8:	61a8      	str	r0, [r5, #24]
 80172fa:	bb40      	cbnz	r0, 801734e <rcl_wait_set_resize+0x28a>
 80172fc:	200a      	movs	r0, #10
 80172fe:	b003      	add	sp, #12
 8017300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017304:	00bc      	lsls	r4, r7, #2
 8017306:	464a      	mov	r2, r9
 8017308:	6928      	ldr	r0, [r5, #16]
 801730a:	4621      	mov	r1, r4
 801730c:	47c0      	blx	r8
 801730e:	6128      	str	r0, [r5, #16]
 8017310:	2800      	cmp	r0, #0
 8017312:	d0f3      	beq.n	80172fc <rcl_wait_set_resize+0x238>
 8017314:	4622      	mov	r2, r4
 8017316:	4631      	mov	r1, r6
 8017318:	f004 fd42 	bl	801bda0 <memset>
 801731c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801731e:	616f      	str	r7, [r5, #20]
 8017320:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8017324:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8017328:	e747      	b.n	80171ba <rcl_wait_set_resize+0xf6>
 801732a:	6a28      	ldr	r0, [r5, #32]
 801732c:	b120      	cbz	r0, 8017338 <rcl_wait_set_resize+0x274>
 801732e:	4639      	mov	r1, r7
 8017330:	47c0      	blx	r8
 8017332:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8017334:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017336:	622b      	str	r3, [r5, #32]
 8017338:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801733a:	2800      	cmp	r0, #0
 801733c:	f43f af7e 	beq.w	801723c <rcl_wait_set_resize+0x178>
 8017340:	4639      	mov	r1, r7
 8017342:	47c0      	blx	r8
 8017344:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8017346:	2300      	movs	r3, #0
 8017348:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 801734c:	e776      	b.n	801723c <rcl_wait_set_resize+0x178>
 801734e:	4622      	mov	r2, r4
 8017350:	4631      	mov	r1, r6
 8017352:	f004 fd25 	bl	801bda0 <memset>
 8017356:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8017358:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801735a:	464a      	mov	r2, r9
 801735c:	6a38      	ldr	r0, [r7, #32]
 801735e:	4621      	mov	r1, r4
 8017360:	61eb      	str	r3, [r5, #28]
 8017362:	61fe      	str	r6, [r7, #28]
 8017364:	47c0      	blx	r8
 8017366:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017368:	6238      	str	r0, [r7, #32]
 801736a:	6a1f      	ldr	r7, [r3, #32]
 801736c:	2f00      	cmp	r7, #0
 801736e:	d04a      	beq.n	8017406 <rcl_wait_set_resize+0x342>
 8017370:	4622      	mov	r2, r4
 8017372:	4631      	mov	r1, r6
 8017374:	4638      	mov	r0, r7
 8017376:	f004 fd13 	bl	801bda0 <memset>
 801737a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801737c:	e733      	b.n	80171e6 <rcl_wait_set_resize+0x122>
 801737e:	009c      	lsls	r4, r3, #2
 8017380:	463a      	mov	r2, r7
 8017382:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017384:	4621      	mov	r1, r4
 8017386:	47c8      	blx	r9
 8017388:	62a8      	str	r0, [r5, #40]	@ 0x28
 801738a:	2800      	cmp	r0, #0
 801738c:	d0b6      	beq.n	80172fc <rcl_wait_set_resize+0x238>
 801738e:	4622      	mov	r2, r4
 8017390:	4631      	mov	r1, r6
 8017392:	f004 fd05 	bl	801bda0 <memset>
 8017396:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801739a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801739c:	463a      	mov	r2, r7
 801739e:	4621      	mov	r1, r4
 80173a0:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80173a4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80173a6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80173aa:	47c8      	blx	r9
 80173ac:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80173ae:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80173b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d034      	beq.n	8017422 <rcl_wait_set_resize+0x35e>
 80173b8:	4622      	mov	r2, r4
 80173ba:	4631      	mov	r1, r6
 80173bc:	4618      	mov	r0, r3
 80173be:	f004 fcef 	bl	801bda0 <memset>
 80173c2:	4630      	mov	r0, r6
 80173c4:	b003      	add	sp, #12
 80173c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80173ca:	200b      	movs	r0, #11
 80173cc:	4770      	bx	lr
 80173ce:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80173d2:	e794      	b.n	80172fe <rcl_wait_set_resize+0x23a>
 80173d4:	6828      	ldr	r0, [r5, #0]
 80173d6:	4651      	mov	r1, sl
 80173d8:	9301      	str	r3, [sp, #4]
 80173da:	47d8      	blx	fp
 80173dc:	9b01      	ldr	r3, [sp, #4]
 80173de:	200a      	movs	r0, #10
 80173e0:	e9c5 3300 	strd	r3, r3, [r5]
 80173e4:	e78b      	b.n	80172fe <rcl_wait_set_resize+0x23a>
 80173e6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80173e8:	68a8      	ldr	r0, [r5, #8]
 80173ea:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80173ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80173ee:	4798      	blx	r3
 80173f0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80173f2:	6928      	ldr	r0, [r5, #16]
 80173f4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80173f6:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80173f8:	e9c5 9902 	strd	r9, r9, [r5, #8]
 80173fc:	4790      	blx	r2
 80173fe:	200a      	movs	r0, #10
 8017400:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8017404:	e77b      	b.n	80172fe <rcl_wait_set_resize+0x23a>
 8017406:	69a8      	ldr	r0, [r5, #24]
 8017408:	4649      	mov	r1, r9
 801740a:	47d0      	blx	sl
 801740c:	200a      	movs	r0, #10
 801740e:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8017412:	e774      	b.n	80172fe <rcl_wait_set_resize+0x23a>
 8017414:	6a28      	ldr	r0, [r5, #32]
 8017416:	4639      	mov	r1, r7
 8017418:	47c0      	blx	r8
 801741a:	200a      	movs	r0, #10
 801741c:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8017420:	e76d      	b.n	80172fe <rcl_wait_set_resize+0x23a>
 8017422:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8017424:	4639      	mov	r1, r7
 8017426:	9301      	str	r3, [sp, #4]
 8017428:	47c0      	blx	r8
 801742a:	9b01      	ldr	r3, [sp, #4]
 801742c:	200a      	movs	r0, #10
 801742e:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8017432:	e764      	b.n	80172fe <rcl_wait_set_resize+0x23a>

08017434 <rcl_wait_set_init>:
 8017434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017438:	b085      	sub	sp, #20
 801743a:	4605      	mov	r5, r0
 801743c:	460e      	mov	r6, r1
 801743e:	4617      	mov	r7, r2
 8017440:	a812      	add	r0, sp, #72	@ 0x48
 8017442:	4698      	mov	r8, r3
 8017444:	f8dd 9044 	ldr.w	r9, [sp, #68]	@ 0x44
 8017448:	f7f8 f85a 	bl	800f500 <rcutils_allocator_is_valid>
 801744c:	2d00      	cmp	r5, #0
 801744e:	d072      	beq.n	8017536 <rcl_wait_set_init+0x102>
 8017450:	f080 0001 	eor.w	r0, r0, #1
 8017454:	b2c0      	uxtb	r0, r0
 8017456:	2800      	cmp	r0, #0
 8017458:	d16d      	bne.n	8017536 <rcl_wait_set_init+0x102>
 801745a:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 801745e:	f1ba 0f00 	cmp.w	sl, #0
 8017462:	d004      	beq.n	801746e <rcl_wait_set_init+0x3a>
 8017464:	2464      	movs	r4, #100	@ 0x64
 8017466:	4620      	mov	r0, r4
 8017468:	b005      	add	sp, #20
 801746a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801746e:	f1b9 0f00 	cmp.w	r9, #0
 8017472:	d060      	beq.n	8017536 <rcl_wait_set_init+0x102>
 8017474:	4648      	mov	r0, r9
 8017476:	f7fe faa3 	bl	80159c0 <rcl_context_is_valid>
 801747a:	2800      	cmp	r0, #0
 801747c:	d068      	beq.n	8017550 <rcl_wait_set_init+0x11c>
 801747e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8017480:	205c      	movs	r0, #92	@ 0x5c
 8017482:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8017484:	4798      	blx	r3
 8017486:	6328      	str	r0, [r5, #48]	@ 0x30
 8017488:	2800      	cmp	r0, #0
 801748a:	d063      	beq.n	8017554 <rcl_wait_set_init+0x120>
 801748c:	225c      	movs	r2, #92	@ 0x5c
 801748e:	4651      	mov	r1, sl
 8017490:	f004 fc86 	bl	801bda0 <memset>
 8017494:	ac12      	add	r4, sp, #72	@ 0x48
 8017496:	f8d5 b030 	ldr.w	fp, [r5, #48]	@ 0x30
 801749a:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	@ 0x3c
 801749e:	f10b 0c48 	add.w	ip, fp, #72	@ 0x48
 80174a2:	f8cb 9044 	str.w	r9, [fp, #68]	@ 0x44
 80174a6:	eb03 0e02 	add.w	lr, r3, r2
 80174aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80174ac:	f8d9 9000 	ldr.w	r9, [r9]
 80174b0:	449e      	add	lr, r3
 80174b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80174b4:	e9cb aa01 	strd	sl, sl, [fp, #4]
 80174b8:	e9cb aa04 	strd	sl, sl, [fp, #16]
 80174bc:	e9cb aa07 	strd	sl, sl, [fp, #28]
 80174c0:	e9cb aa0a 	strd	sl, sl, [fp, #40]	@ 0x28
 80174c4:	e9cb aa0d 	strd	sl, sl, [fp, #52]	@ 0x34
 80174c8:	44be      	add	lr, r7
 80174ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80174ce:	6823      	ldr	r3, [r4, #0]
 80174d0:	eb0e 0146 	add.w	r1, lr, r6, lsl #1
 80174d4:	f109 0028 	add.w	r0, r9, #40	@ 0x28
 80174d8:	f8cc 3000 	str.w	r3, [ip]
 80174dc:	f002 fa2a 	bl	8019934 <rmw_create_wait_set>
 80174e0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80174e2:	f8cb 003c 	str.w	r0, [fp, #60]	@ 0x3c
 80174e6:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80174e8:	b350      	cbz	r0, 8017540 <rcl_wait_set_init+0x10c>
 80174ea:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80174ec:	4643      	mov	r3, r8
 80174ee:	463a      	mov	r2, r7
 80174f0:	4631      	mov	r1, r6
 80174f2:	9402      	str	r4, [sp, #8]
 80174f4:	4628      	mov	r0, r5
 80174f6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80174f8:	9401      	str	r4, [sp, #4]
 80174fa:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80174fc:	9400      	str	r4, [sp, #0]
 80174fe:	f7ff fde1 	bl	80170c4 <rcl_wait_set_resize>
 8017502:	4604      	mov	r4, r0
 8017504:	2800      	cmp	r0, #0
 8017506:	d0ae      	beq.n	8017466 <rcl_wait_set_init+0x32>
 8017508:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801750a:	bb2b      	cbnz	r3, 8017558 <rcl_wait_set_init+0x124>
 801750c:	2600      	movs	r6, #0
 801750e:	4628      	mov	r0, r5
 8017510:	4633      	mov	r3, r6
 8017512:	4632      	mov	r2, r6
 8017514:	4631      	mov	r1, r6
 8017516:	9600      	str	r6, [sp, #0]
 8017518:	e9cd 6601 	strd	r6, r6, [sp, #4]
 801751c:	f7ff fdd2 	bl	80170c4 <rcl_wait_set_resize>
 8017520:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8017522:	2800      	cmp	r0, #0
 8017524:	d09f      	beq.n	8017466 <rcl_wait_set_init+0x32>
 8017526:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8017528:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 801752a:	4798      	blx	r3
 801752c:	4620      	mov	r0, r4
 801752e:	632e      	str	r6, [r5, #48]	@ 0x30
 8017530:	b005      	add	sp, #20
 8017532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017536:	240b      	movs	r4, #11
 8017538:	4620      	mov	r0, r4
 801753a:	b005      	add	sp, #20
 801753c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017540:	2401      	movs	r4, #1
 8017542:	f002 fa01 	bl	8019948 <rmw_destroy_wait_set>
 8017546:	2800      	cmp	r0, #0
 8017548:	bf18      	it	ne
 801754a:	f44f 7461 	movne.w	r4, #900	@ 0x384
 801754e:	e7dd      	b.n	801750c <rcl_wait_set_init+0xd8>
 8017550:	2465      	movs	r4, #101	@ 0x65
 8017552:	e788      	b.n	8017466 <rcl_wait_set_init+0x32>
 8017554:	240a      	movs	r4, #10
 8017556:	e786      	b.n	8017466 <rcl_wait_set_init+0x32>
 8017558:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801755a:	e7f2      	b.n	8017542 <rcl_wait_set_init+0x10e>

0801755c <rcl_wait_set_add_guard_condition>:
 801755c:	b318      	cbz	r0, 80175a6 <rcl_wait_set_add_guard_condition+0x4a>
 801755e:	b538      	push	{r3, r4, r5, lr}
 8017560:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017562:	4604      	mov	r4, r0
 8017564:	b30b      	cbz	r3, 80175aa <rcl_wait_set_add_guard_condition+0x4e>
 8017566:	b319      	cbz	r1, 80175b0 <rcl_wait_set_add_guard_condition+0x54>
 8017568:	68dd      	ldr	r5, [r3, #12]
 801756a:	68c0      	ldr	r0, [r0, #12]
 801756c:	4285      	cmp	r5, r0
 801756e:	d217      	bcs.n	80175a0 <rcl_wait_set_add_guard_condition+0x44>
 8017570:	1c68      	adds	r0, r5, #1
 8017572:	60d8      	str	r0, [r3, #12]
 8017574:	68a3      	ldr	r3, [r4, #8]
 8017576:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801757a:	b102      	cbz	r2, 801757e <rcl_wait_set_add_guard_condition+0x22>
 801757c:	6015      	str	r5, [r2, #0]
 801757e:	4608      	mov	r0, r1
 8017580:	f003 fdc2 	bl	801b108 <rcl_guard_condition_get_rmw_handle>
 8017584:	b150      	cbz	r0, 801759c <rcl_wait_set_add_guard_condition+0x40>
 8017586:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017588:	6842      	ldr	r2, [r0, #4]
 801758a:	2000      	movs	r0, #0
 801758c:	695b      	ldr	r3, [r3, #20]
 801758e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017592:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8017594:	6913      	ldr	r3, [r2, #16]
 8017596:	3301      	adds	r3, #1
 8017598:	6113      	str	r3, [r2, #16]
 801759a:	bd38      	pop	{r3, r4, r5, pc}
 801759c:	2001      	movs	r0, #1
 801759e:	bd38      	pop	{r3, r4, r5, pc}
 80175a0:	f240 3086 	movw	r0, #902	@ 0x386
 80175a4:	bd38      	pop	{r3, r4, r5, pc}
 80175a6:	200b      	movs	r0, #11
 80175a8:	4770      	bx	lr
 80175aa:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80175ae:	bd38      	pop	{r3, r4, r5, pc}
 80175b0:	200b      	movs	r0, #11
 80175b2:	bd38      	pop	{r3, r4, r5, pc}

080175b4 <rcl_wait_set_add_timer>:
 80175b4:	b328      	cbz	r0, 8017602 <rcl_wait_set_add_timer+0x4e>
 80175b6:	b538      	push	{r3, r4, r5, lr}
 80175b8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80175ba:	4604      	mov	r4, r0
 80175bc:	b31b      	cbz	r3, 8017606 <rcl_wait_set_add_timer+0x52>
 80175be:	b329      	cbz	r1, 801760c <rcl_wait_set_add_timer+0x58>
 80175c0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80175c2:	6965      	ldr	r5, [r4, #20]
 80175c4:	42a8      	cmp	r0, r5
 80175c6:	d219      	bcs.n	80175fc <rcl_wait_set_add_timer+0x48>
 80175c8:	1c45      	adds	r5, r0, #1
 80175ca:	641d      	str	r5, [r3, #64]	@ 0x40
 80175cc:	6923      	ldr	r3, [r4, #16]
 80175ce:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80175d2:	b102      	cbz	r2, 80175d6 <rcl_wait_set_add_timer+0x22>
 80175d4:	6010      	str	r0, [r2, #0]
 80175d6:	4608      	mov	r0, r1
 80175d8:	f7ff fb9a 	bl	8016d10 <rcl_timer_get_guard_condition>
 80175dc:	b168      	cbz	r0, 80175fa <rcl_wait_set_add_timer+0x46>
 80175de:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80175e0:	68e3      	ldr	r3, [r4, #12]
 80175e2:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 80175e4:	3b01      	subs	r3, #1
 80175e6:	441d      	add	r5, r3
 80175e8:	f003 fd8e 	bl	801b108 <rcl_guard_condition_get_rmw_handle>
 80175ec:	b180      	cbz	r0, 8017610 <rcl_wait_set_add_timer+0x5c>
 80175ee:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80175f0:	6842      	ldr	r2, [r0, #4]
 80175f2:	2000      	movs	r0, #0
 80175f4:	695b      	ldr	r3, [r3, #20]
 80175f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80175fa:	bd38      	pop	{r3, r4, r5, pc}
 80175fc:	f240 3086 	movw	r0, #902	@ 0x386
 8017600:	bd38      	pop	{r3, r4, r5, pc}
 8017602:	200b      	movs	r0, #11
 8017604:	4770      	bx	lr
 8017606:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801760a:	bd38      	pop	{r3, r4, r5, pc}
 801760c:	200b      	movs	r0, #11
 801760e:	bd38      	pop	{r3, r4, r5, pc}
 8017610:	2001      	movs	r0, #1
 8017612:	bd38      	pop	{r3, r4, r5, pc}

08017614 <rcl_wait_set_add_client>:
 8017614:	b318      	cbz	r0, 801765e <rcl_wait_set_add_client+0x4a>
 8017616:	b538      	push	{r3, r4, r5, lr}
 8017618:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801761a:	4604      	mov	r4, r0
 801761c:	b30b      	cbz	r3, 8017662 <rcl_wait_set_add_client+0x4e>
 801761e:	b319      	cbz	r1, 8017668 <rcl_wait_set_add_client+0x54>
 8017620:	699d      	ldr	r5, [r3, #24]
 8017622:	69c0      	ldr	r0, [r0, #28]
 8017624:	4285      	cmp	r5, r0
 8017626:	d217      	bcs.n	8017658 <rcl_wait_set_add_client+0x44>
 8017628:	1c68      	adds	r0, r5, #1
 801762a:	6198      	str	r0, [r3, #24]
 801762c:	69a3      	ldr	r3, [r4, #24]
 801762e:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 8017632:	b102      	cbz	r2, 8017636 <rcl_wait_set_add_client+0x22>
 8017634:	6015      	str	r5, [r2, #0]
 8017636:	4608      	mov	r0, r1
 8017638:	f7fe f914 	bl	8015864 <rcl_client_get_rmw_handle>
 801763c:	b150      	cbz	r0, 8017654 <rcl_wait_set_add_client+0x40>
 801763e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017640:	6842      	ldr	r2, [r0, #4]
 8017642:	2000      	movs	r0, #0
 8017644:	6a1b      	ldr	r3, [r3, #32]
 8017646:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801764a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801764c:	69d3      	ldr	r3, [r2, #28]
 801764e:	3301      	adds	r3, #1
 8017650:	61d3      	str	r3, [r2, #28]
 8017652:	bd38      	pop	{r3, r4, r5, pc}
 8017654:	2001      	movs	r0, #1
 8017656:	bd38      	pop	{r3, r4, r5, pc}
 8017658:	f240 3086 	movw	r0, #902	@ 0x386
 801765c:	bd38      	pop	{r3, r4, r5, pc}
 801765e:	200b      	movs	r0, #11
 8017660:	4770      	bx	lr
 8017662:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017666:	bd38      	pop	{r3, r4, r5, pc}
 8017668:	200b      	movs	r0, #11
 801766a:	bd38      	pop	{r3, r4, r5, pc}

0801766c <rcl_wait_set_add_service>:
 801766c:	b318      	cbz	r0, 80176b6 <rcl_wait_set_add_service+0x4a>
 801766e:	b538      	push	{r3, r4, r5, lr}
 8017670:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8017672:	4604      	mov	r4, r0
 8017674:	b30b      	cbz	r3, 80176ba <rcl_wait_set_add_service+0x4e>
 8017676:	b319      	cbz	r1, 80176c0 <rcl_wait_set_add_service+0x54>
 8017678:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801767a:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 801767c:	4285      	cmp	r5, r0
 801767e:	d217      	bcs.n	80176b0 <rcl_wait_set_add_service+0x44>
 8017680:	1c68      	adds	r0, r5, #1
 8017682:	6258      	str	r0, [r3, #36]	@ 0x24
 8017684:	6a23      	ldr	r3, [r4, #32]
 8017686:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
 801768a:	b102      	cbz	r2, 801768e <rcl_wait_set_add_service+0x22>
 801768c:	6015      	str	r5, [r2, #0]
 801768e:	4608      	mov	r0, r1
 8017690:	f7fe fea2 	bl	80163d8 <rcl_service_get_rmw_handle>
 8017694:	b150      	cbz	r0, 80176ac <rcl_wait_set_add_service+0x40>
 8017696:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8017698:	6842      	ldr	r2, [r0, #4]
 801769a:	2000      	movs	r0, #0
 801769c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801769e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80176a2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80176a4:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 80176a6:	3301      	adds	r3, #1
 80176a8:	6293      	str	r3, [r2, #40]	@ 0x28
 80176aa:	bd38      	pop	{r3, r4, r5, pc}
 80176ac:	2001      	movs	r0, #1
 80176ae:	bd38      	pop	{r3, r4, r5, pc}
 80176b0:	f240 3086 	movw	r0, #902	@ 0x386
 80176b4:	bd38      	pop	{r3, r4, r5, pc}
 80176b6:	200b      	movs	r0, #11
 80176b8:	4770      	bx	lr
 80176ba:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80176be:	bd38      	pop	{r3, r4, r5, pc}
 80176c0:	200b      	movs	r0, #11
 80176c2:	bd38      	pop	{r3, r4, r5, pc}
 80176c4:	0000      	movs	r0, r0
	...

080176c8 <rcl_wait>:
 80176c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176cc:	ed2d 8b02 	vpush	{d8}
 80176d0:	b08d      	sub	sp, #52	@ 0x34
 80176d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80176d6:	2800      	cmp	r0, #0
 80176d8:	f000 814f 	beq.w	801797a <rcl_wait+0x2b2>
 80176dc:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80176de:	4605      	mov	r5, r0
 80176e0:	2e00      	cmp	r6, #0
 80176e2:	f000 811a 	beq.w	801791a <rcl_wait+0x252>
 80176e6:	6843      	ldr	r3, [r0, #4]
 80176e8:	b983      	cbnz	r3, 801770c <rcl_wait+0x44>
 80176ea:	68eb      	ldr	r3, [r5, #12]
 80176ec:	b973      	cbnz	r3, 801770c <rcl_wait+0x44>
 80176ee:	696b      	ldr	r3, [r5, #20]
 80176f0:	b963      	cbnz	r3, 801770c <rcl_wait+0x44>
 80176f2:	69eb      	ldr	r3, [r5, #28]
 80176f4:	b953      	cbnz	r3, 801770c <rcl_wait+0x44>
 80176f6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80176f8:	b943      	cbnz	r3, 801770c <rcl_wait+0x44>
 80176fa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80176fc:	b933      	cbnz	r3, 801770c <rcl_wait+0x44>
 80176fe:	f240 3085 	movw	r0, #901	@ 0x385
 8017702:	b00d      	add	sp, #52	@ 0x34
 8017704:	ecbd 8b02 	vpop	{d8}
 8017708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801770c:	9b04      	ldr	r3, [sp, #16]
 801770e:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8017710:	2b01      	cmp	r3, #1
 8017712:	9b05      	ldr	r3, [sp, #20]
 8017714:	f173 0300 	sbcs.w	r3, r3, #0
 8017718:	f2c0 80f8 	blt.w	801790c <rcl_wait+0x244>
 801771c:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8017720:	2a00      	cmp	r2, #0
 8017722:	f000 810f 	beq.w	8017944 <rcl_wait+0x27c>
 8017726:	2400      	movs	r4, #0
 8017728:	4613      	mov	r3, r2
 801772a:	f240 3921 	movw	r9, #801	@ 0x321
 801772e:	4632      	mov	r2, r6
 8017730:	46a2      	mov	sl, r4
 8017732:	46a3      	mov	fp, r4
 8017734:	ed9f 8b98 	vldr	d8, [pc, #608]	@ 8017998 <rcl_wait+0x2d0>
 8017738:	e014      	b.n	8017764 <rcl_wait+0x9c>
 801773a:	2800      	cmp	r0, #0
 801773c:	d1e1      	bne.n	8017702 <rcl_wait+0x3a>
 801773e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017742:	4542      	cmp	r2, r8
 8017744:	eb73 0107 	sbcs.w	r1, r3, r7
 8017748:	da03      	bge.n	8017752 <rcl_wait+0x8a>
 801774a:	4690      	mov	r8, r2
 801774c:	461f      	mov	r7, r3
 801774e:	f04f 0b01 	mov.w	fp, #1
 8017752:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8017754:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8017756:	3401      	adds	r4, #1
 8017758:	f14a 0a00 	adc.w	sl, sl, #0
 801775c:	429c      	cmp	r4, r3
 801775e:	f17a 0100 	sbcs.w	r1, sl, #0
 8017762:	d228      	bcs.n	80177b6 <rcl_wait+0xee>
 8017764:	6928      	ldr	r0, [r5, #16]
 8017766:	a908      	add	r1, sp, #32
 8017768:	00a6      	lsls	r6, r4, #2
 801776a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801776e:	2800      	cmp	r0, #0
 8017770:	d0f1      	beq.n	8017756 <rcl_wait+0x8e>
 8017772:	68eb      	ldr	r3, [r5, #12]
 8017774:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8017778:	4423      	add	r3, r4
 801777a:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 801777e:	f1be 0f00 	cmp.w	lr, #0
 8017782:	d006      	beq.n	8017792 <rcl_wait+0xca>
 8017784:	6913      	ldr	r3, [r2, #16]
 8017786:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 801778a:	3301      	adds	r3, #1
 801778c:	6113      	str	r3, [r2, #16]
 801778e:	692b      	ldr	r3, [r5, #16]
 8017790:	5998      	ldr	r0, [r3, r6]
 8017792:	ed8d 8b08 	vstr	d8, [sp, #32]
 8017796:	f7ff fa89 	bl	8016cac <rcl_timer_get_time_until_next_call>
 801779a:	4548      	cmp	r0, r9
 801779c:	d1cd      	bne.n	801773a <rcl_wait+0x72>
 801779e:	692b      	ldr	r3, [r5, #16]
 80177a0:	2200      	movs	r2, #0
 80177a2:	3401      	adds	r4, #1
 80177a4:	519a      	str	r2, [r3, r6]
 80177a6:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80177a8:	f14a 0a00 	adc.w	sl, sl, #0
 80177ac:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80177ae:	429c      	cmp	r4, r3
 80177b0:	f17a 0100 	sbcs.w	r1, sl, #0
 80177b4:	d3d6      	bcc.n	8017764 <rcl_wait+0x9c>
 80177b6:	4659      	mov	r1, fp
 80177b8:	4616      	mov	r6, r2
 80177ba:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 80177be:	4313      	orrs	r3, r2
 80177c0:	f040 80b4 	bne.w	801792c <rcl_wait+0x264>
 80177c4:	2300      	movs	r3, #0
 80177c6:	2200      	movs	r2, #0
 80177c8:	460c      	mov	r4, r1
 80177ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80177ce:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80177d2:	ab08      	add	r3, sp, #32
 80177d4:	9302      	str	r3, [sp, #8]
 80177d6:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 80177da:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 80177dc:	f106 0110 	add.w	r1, r6, #16
 80177e0:	9300      	str	r3, [sp, #0]
 80177e2:	1d30      	adds	r0, r6, #4
 80177e4:	f106 031c 	add.w	r3, r6, #28
 80177e8:	9201      	str	r2, [sp, #4]
 80177ea:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 80177ee:	f001 ff3d 	bl	801966c <rmw_wait>
 80177f2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80177f4:	4680      	mov	r8, r0
 80177f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80177f8:	b1e2      	cbz	r2, 8017834 <rcl_wait+0x16c>
 80177fa:	f04f 0900 	mov.w	r9, #0
 80177fe:	464f      	mov	r7, r9
 8017800:	692a      	ldr	r2, [r5, #16]
 8017802:	f10d 011f 	add.w	r1, sp, #31
 8017806:	ea4f 0689 	mov.w	r6, r9, lsl #2
 801780a:	f852 0029 	ldr.w	r0, [r2, r9, lsl #2]
 801780e:	b160      	cbz	r0, 801782a <rcl_wait+0x162>
 8017810:	f88d 701f 	strb.w	r7, [sp, #31]
 8017814:	f7ff fa0e 	bl	8016c34 <rcl_timer_is_ready>
 8017818:	2800      	cmp	r0, #0
 801781a:	f47f af72 	bne.w	8017702 <rcl_wait+0x3a>
 801781e:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8017822:	b90b      	cbnz	r3, 8017828 <rcl_wait+0x160>
 8017824:	692a      	ldr	r2, [r5, #16]
 8017826:	5193      	str	r3, [r2, r6]
 8017828:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801782a:	f109 0901 	add.w	r9, r9, #1
 801782e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8017830:	454a      	cmp	r2, r9
 8017832:	d8e5      	bhi.n	8017800 <rcl_wait+0x138>
 8017834:	f038 0002 	bics.w	r0, r8, #2
 8017838:	d176      	bne.n	8017928 <rcl_wait+0x260>
 801783a:	686f      	ldr	r7, [r5, #4]
 801783c:	b17f      	cbz	r7, 801785e <rcl_wait+0x196>
 801783e:	4602      	mov	r2, r0
 8017840:	e002      	b.n	8017848 <rcl_wait+0x180>
 8017842:	3201      	adds	r2, #1
 8017844:	42ba      	cmp	r2, r7
 8017846:	d00a      	beq.n	801785e <rcl_wait+0x196>
 8017848:	6899      	ldr	r1, [r3, #8]
 801784a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801784e:	2900      	cmp	r1, #0
 8017850:	d1f7      	bne.n	8017842 <rcl_wait+0x17a>
 8017852:	682e      	ldr	r6, [r5, #0]
 8017854:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 8017858:	3201      	adds	r2, #1
 801785a:	42ba      	cmp	r2, r7
 801785c:	d1f4      	bne.n	8017848 <rcl_wait+0x180>
 801785e:	68ef      	ldr	r7, [r5, #12]
 8017860:	b17f      	cbz	r7, 8017882 <rcl_wait+0x1ba>
 8017862:	2200      	movs	r2, #0
 8017864:	e002      	b.n	801786c <rcl_wait+0x1a4>
 8017866:	3201      	adds	r2, #1
 8017868:	42ba      	cmp	r2, r7
 801786a:	d00a      	beq.n	8017882 <rcl_wait+0x1ba>
 801786c:	6959      	ldr	r1, [r3, #20]
 801786e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017872:	2900      	cmp	r1, #0
 8017874:	d1f7      	bne.n	8017866 <rcl_wait+0x19e>
 8017876:	68ae      	ldr	r6, [r5, #8]
 8017878:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 801787c:	3201      	adds	r2, #1
 801787e:	42ba      	cmp	r2, r7
 8017880:	d1f4      	bne.n	801786c <rcl_wait+0x1a4>
 8017882:	69ef      	ldr	r7, [r5, #28]
 8017884:	b17f      	cbz	r7, 80178a6 <rcl_wait+0x1de>
 8017886:	2200      	movs	r2, #0
 8017888:	e002      	b.n	8017890 <rcl_wait+0x1c8>
 801788a:	3201      	adds	r2, #1
 801788c:	42ba      	cmp	r2, r7
 801788e:	d00a      	beq.n	80178a6 <rcl_wait+0x1de>
 8017890:	6a19      	ldr	r1, [r3, #32]
 8017892:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8017896:	2900      	cmp	r1, #0
 8017898:	d1f7      	bne.n	801788a <rcl_wait+0x1c2>
 801789a:	69ae      	ldr	r6, [r5, #24]
 801789c:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80178a0:	3201      	adds	r2, #1
 80178a2:	42ba      	cmp	r2, r7
 80178a4:	d1f4      	bne.n	8017890 <rcl_wait+0x1c8>
 80178a6:	6a6f      	ldr	r7, [r5, #36]	@ 0x24
 80178a8:	b17f      	cbz	r7, 80178ca <rcl_wait+0x202>
 80178aa:	2200      	movs	r2, #0
 80178ac:	e002      	b.n	80178b4 <rcl_wait+0x1ec>
 80178ae:	3201      	adds	r2, #1
 80178b0:	42ba      	cmp	r2, r7
 80178b2:	d00a      	beq.n	80178ca <rcl_wait+0x202>
 80178b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80178b6:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80178ba:	2900      	cmp	r1, #0
 80178bc:	d1f7      	bne.n	80178ae <rcl_wait+0x1e6>
 80178be:	6a2e      	ldr	r6, [r5, #32]
 80178c0:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80178c4:	3201      	adds	r2, #1
 80178c6:	42ba      	cmp	r2, r7
 80178c8:	d1f4      	bne.n	80178b4 <rcl_wait+0x1ec>
 80178ca:	6aef      	ldr	r7, [r5, #44]	@ 0x2c
 80178cc:	b17f      	cbz	r7, 80178ee <rcl_wait+0x226>
 80178ce:	2200      	movs	r2, #0
 80178d0:	e002      	b.n	80178d8 <rcl_wait+0x210>
 80178d2:	3201      	adds	r2, #1
 80178d4:	42ba      	cmp	r2, r7
 80178d6:	d00a      	beq.n	80178ee <rcl_wait+0x226>
 80178d8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80178da:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80178de:	2900      	cmp	r1, #0
 80178e0:	d1f7      	bne.n	80178d2 <rcl_wait+0x20a>
 80178e2:	6aae      	ldr	r6, [r5, #40]	@ 0x28
 80178e4:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
 80178e8:	3201      	adds	r2, #1
 80178ea:	42ba      	cmp	r2, r7
 80178ec:	d1f4      	bne.n	80178d8 <rcl_wait+0x210>
 80178ee:	f1b8 0f02 	cmp.w	r8, #2
 80178f2:	f47f af06 	bne.w	8017702 <rcl_wait+0x3a>
 80178f6:	f084 0301 	eor.w	r3, r4, #1
 80178fa:	b2db      	uxtb	r3, r3
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	bf18      	it	ne
 8017900:	2002      	movne	r0, #2
 8017902:	b00d      	add	sp, #52	@ 0x34
 8017904:	ecbd 8b02 	vpop	{d8}
 8017908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801790c:	2a00      	cmp	r2, #0
 801790e:	d03a      	beq.n	8017986 <rcl_wait+0x2be>
 8017910:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8017914:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017918:	e705      	b.n	8017726 <rcl_wait+0x5e>
 801791a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801791e:	b00d      	add	sp, #52	@ 0x34
 8017920:	ecbd 8b02 	vpop	{d8}
 8017924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017928:	2001      	movs	r0, #1
 801792a:	e6ea      	b.n	8017702 <rcl_wait+0x3a>
 801792c:	9b04      	ldr	r3, [sp, #16]
 801792e:	460c      	mov	r4, r1
 8017930:	2b01      	cmp	r3, #1
 8017932:	9b05      	ldr	r3, [sp, #20]
 8017934:	f173 0300 	sbcs.w	r3, r3, #0
 8017938:	bfa8      	it	ge
 801793a:	f044 0401 	orrge.w	r4, r4, #1
 801793e:	b914      	cbnz	r4, 8017946 <rcl_wait+0x27e>
 8017940:	4623      	mov	r3, r4
 8017942:	e747      	b.n	80177d4 <rcl_wait+0x10c>
 8017944:	4611      	mov	r1, r2
 8017946:	2f00      	cmp	r7, #0
 8017948:	da02      	bge.n	8017950 <rcl_wait+0x288>
 801794a:	f04f 0800 	mov.w	r8, #0
 801794e:	4647      	mov	r7, r8
 8017950:	460c      	mov	r4, r1
 8017952:	4640      	mov	r0, r8
 8017954:	4639      	mov	r1, r7
 8017956:	a312      	add	r3, pc, #72	@ (adr r3, 80179a0 <rcl_wait+0x2d8>)
 8017958:	e9d3 2300 	ldrd	r2, r3, [r3]
 801795c:	f7e8 fd28 	bl	80003b0 <__aeabi_ldivmod>
 8017960:	a30f      	add	r3, pc, #60	@ (adr r3, 80179a0 <rcl_wait+0x2d8>)
 8017962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017966:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801796a:	4640      	mov	r0, r8
 801796c:	4639      	mov	r1, r7
 801796e:	f7e8 fd1f 	bl	80003b0 <__aeabi_ldivmod>
 8017972:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8017976:	ab08      	add	r3, sp, #32
 8017978:	e72c      	b.n	80177d4 <rcl_wait+0x10c>
 801797a:	200b      	movs	r0, #11
 801797c:	b00d      	add	sp, #52	@ 0x34
 801797e:	ecbd 8b02 	vpop	{d8}
 8017982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017986:	4611      	mov	r1, r2
 8017988:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801798c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8017990:	e713      	b.n	80177ba <rcl_wait+0xf2>
 8017992:	bf00      	nop
 8017994:	f3af 8000 	nop.w
 8017998:	ffffffff 	.word	0xffffffff
 801799c:	7fffffff 	.word	0x7fffffff
 80179a0:	3b9aca00 	.word	0x3b9aca00
 80179a4:	00000000 	.word	0x00000000

080179a8 <rcl_action_take_goal_response>:
 80179a8:	2800      	cmp	r0, #0
 80179aa:	d039      	beq.n	8017a20 <rcl_action_take_goal_response+0x78>
 80179ac:	b570      	push	{r4, r5, r6, lr}
 80179ae:	4604      	mov	r4, r0
 80179b0:	6800      	ldr	r0, [r0, #0]
 80179b2:	b380      	cbz	r0, 8017a16 <rcl_action_take_goal_response+0x6e>
 80179b4:	460e      	mov	r6, r1
 80179b6:	4615      	mov	r5, r2
 80179b8:	f7fd ffda 	bl	8015970 <rcl_client_is_valid>
 80179bc:	b330      	cbz	r0, 8017a0c <rcl_action_take_goal_response+0x64>
 80179be:	6820      	ldr	r0, [r4, #0]
 80179c0:	3004      	adds	r0, #4
 80179c2:	f7fd ffd5 	bl	8015970 <rcl_client_is_valid>
 80179c6:	b308      	cbz	r0, 8017a0c <rcl_action_take_goal_response+0x64>
 80179c8:	6820      	ldr	r0, [r4, #0]
 80179ca:	3008      	adds	r0, #8
 80179cc:	f7fd ffd0 	bl	8015970 <rcl_client_is_valid>
 80179d0:	b1e0      	cbz	r0, 8017a0c <rcl_action_take_goal_response+0x64>
 80179d2:	6820      	ldr	r0, [r4, #0]
 80179d4:	300c      	adds	r0, #12
 80179d6:	f7fe fdc3 	bl	8016560 <rcl_subscription_is_valid>
 80179da:	b1b8      	cbz	r0, 8017a0c <rcl_action_take_goal_response+0x64>
 80179dc:	6820      	ldr	r0, [r4, #0]
 80179de:	3010      	adds	r0, #16
 80179e0:	f7fe fdbe 	bl	8016560 <rcl_subscription_is_valid>
 80179e4:	b190      	cbz	r0, 8017a0c <rcl_action_take_goal_response+0x64>
 80179e6:	b1cd      	cbz	r5, 8017a1c <rcl_action_take_goal_response+0x74>
 80179e8:	b1c6      	cbz	r6, 8017a1c <rcl_action_take_goal_response+0x74>
 80179ea:	462a      	mov	r2, r5
 80179ec:	4631      	mov	r1, r6
 80179ee:	6820      	ldr	r0, [r4, #0]
 80179f0:	f7fd ff76 	bl	80158e0 <rcl_take_response>
 80179f4:	b148      	cbz	r0, 8017a0a <rcl_action_take_goal_response+0x62>
 80179f6:	280a      	cmp	r0, #10
 80179f8:	d007      	beq.n	8017a0a <rcl_action_take_goal_response+0x62>
 80179fa:	f240 12f5 	movw	r2, #501	@ 0x1f5
 80179fe:	f640 0337 	movw	r3, #2103	@ 0x837
 8017a02:	4290      	cmp	r0, r2
 8017a04:	bf0c      	ite	eq
 8017a06:	4618      	moveq	r0, r3
 8017a08:	2001      	movne	r0, #1
 8017a0a:	bd70      	pop	{r4, r5, r6, pc}
 8017a0c:	f7f7 fd9c 	bl	800f548 <rcutils_reset_error>
 8017a10:	f640 0036 	movw	r0, #2102	@ 0x836
 8017a14:	bd70      	pop	{r4, r5, r6, pc}
 8017a16:	f640 0036 	movw	r0, #2102	@ 0x836
 8017a1a:	bd70      	pop	{r4, r5, r6, pc}
 8017a1c:	200b      	movs	r0, #11
 8017a1e:	bd70      	pop	{r4, r5, r6, pc}
 8017a20:	f640 0036 	movw	r0, #2102	@ 0x836
 8017a24:	4770      	bx	lr
 8017a26:	bf00      	nop

08017a28 <rcl_action_send_result_request>:
 8017a28:	b390      	cbz	r0, 8017a90 <rcl_action_send_result_request+0x68>
 8017a2a:	b570      	push	{r4, r5, r6, lr}
 8017a2c:	4604      	mov	r4, r0
 8017a2e:	6800      	ldr	r0, [r0, #0]
 8017a30:	b348      	cbz	r0, 8017a86 <rcl_action_send_result_request+0x5e>
 8017a32:	460e      	mov	r6, r1
 8017a34:	4615      	mov	r5, r2
 8017a36:	f7fd ff9b 	bl	8015970 <rcl_client_is_valid>
 8017a3a:	b1f8      	cbz	r0, 8017a7c <rcl_action_send_result_request+0x54>
 8017a3c:	6820      	ldr	r0, [r4, #0]
 8017a3e:	3004      	adds	r0, #4
 8017a40:	f7fd ff96 	bl	8015970 <rcl_client_is_valid>
 8017a44:	b1d0      	cbz	r0, 8017a7c <rcl_action_send_result_request+0x54>
 8017a46:	6820      	ldr	r0, [r4, #0]
 8017a48:	3008      	adds	r0, #8
 8017a4a:	f7fd ff91 	bl	8015970 <rcl_client_is_valid>
 8017a4e:	b1a8      	cbz	r0, 8017a7c <rcl_action_send_result_request+0x54>
 8017a50:	6820      	ldr	r0, [r4, #0]
 8017a52:	300c      	adds	r0, #12
 8017a54:	f7fe fd84 	bl	8016560 <rcl_subscription_is_valid>
 8017a58:	b180      	cbz	r0, 8017a7c <rcl_action_send_result_request+0x54>
 8017a5a:	6820      	ldr	r0, [r4, #0]
 8017a5c:	3010      	adds	r0, #16
 8017a5e:	f7fe fd7f 	bl	8016560 <rcl_subscription_is_valid>
 8017a62:	b158      	cbz	r0, 8017a7c <rcl_action_send_result_request+0x54>
 8017a64:	b195      	cbz	r5, 8017a8c <rcl_action_send_result_request+0x64>
 8017a66:	b18e      	cbz	r6, 8017a8c <rcl_action_send_result_request+0x64>
 8017a68:	6820      	ldr	r0, [r4, #0]
 8017a6a:	462a      	mov	r2, r5
 8017a6c:	4631      	mov	r1, r6
 8017a6e:	3008      	adds	r0, #8
 8017a70:	f7fd fefe 	bl	8015870 <rcl_send_request>
 8017a74:	3800      	subs	r0, #0
 8017a76:	bf18      	it	ne
 8017a78:	2001      	movne	r0, #1
 8017a7a:	bd70      	pop	{r4, r5, r6, pc}
 8017a7c:	f7f7 fd64 	bl	800f548 <rcutils_reset_error>
 8017a80:	f640 0036 	movw	r0, #2102	@ 0x836
 8017a84:	bd70      	pop	{r4, r5, r6, pc}
 8017a86:	f640 0036 	movw	r0, #2102	@ 0x836
 8017a8a:	bd70      	pop	{r4, r5, r6, pc}
 8017a8c:	200b      	movs	r0, #11
 8017a8e:	bd70      	pop	{r4, r5, r6, pc}
 8017a90:	f640 0036 	movw	r0, #2102	@ 0x836
 8017a94:	4770      	bx	lr
 8017a96:	bf00      	nop

08017a98 <rcl_action_take_result_response>:
 8017a98:	2800      	cmp	r0, #0
 8017a9a:	d03a      	beq.n	8017b12 <rcl_action_take_result_response+0x7a>
 8017a9c:	b570      	push	{r4, r5, r6, lr}
 8017a9e:	4604      	mov	r4, r0
 8017aa0:	6800      	ldr	r0, [r0, #0]
 8017aa2:	b388      	cbz	r0, 8017b08 <rcl_action_take_result_response+0x70>
 8017aa4:	460e      	mov	r6, r1
 8017aa6:	4615      	mov	r5, r2
 8017aa8:	f7fd ff62 	bl	8015970 <rcl_client_is_valid>
 8017aac:	b338      	cbz	r0, 8017afe <rcl_action_take_result_response+0x66>
 8017aae:	6820      	ldr	r0, [r4, #0]
 8017ab0:	3004      	adds	r0, #4
 8017ab2:	f7fd ff5d 	bl	8015970 <rcl_client_is_valid>
 8017ab6:	b310      	cbz	r0, 8017afe <rcl_action_take_result_response+0x66>
 8017ab8:	6820      	ldr	r0, [r4, #0]
 8017aba:	3008      	adds	r0, #8
 8017abc:	f7fd ff58 	bl	8015970 <rcl_client_is_valid>
 8017ac0:	b1e8      	cbz	r0, 8017afe <rcl_action_take_result_response+0x66>
 8017ac2:	6820      	ldr	r0, [r4, #0]
 8017ac4:	300c      	adds	r0, #12
 8017ac6:	f7fe fd4b 	bl	8016560 <rcl_subscription_is_valid>
 8017aca:	b1c0      	cbz	r0, 8017afe <rcl_action_take_result_response+0x66>
 8017acc:	6820      	ldr	r0, [r4, #0]
 8017ace:	3010      	adds	r0, #16
 8017ad0:	f7fe fd46 	bl	8016560 <rcl_subscription_is_valid>
 8017ad4:	b198      	cbz	r0, 8017afe <rcl_action_take_result_response+0x66>
 8017ad6:	b1d5      	cbz	r5, 8017b0e <rcl_action_take_result_response+0x76>
 8017ad8:	b1ce      	cbz	r6, 8017b0e <rcl_action_take_result_response+0x76>
 8017ada:	6820      	ldr	r0, [r4, #0]
 8017adc:	462a      	mov	r2, r5
 8017ade:	4631      	mov	r1, r6
 8017ae0:	3008      	adds	r0, #8
 8017ae2:	f7fd fefd 	bl	80158e0 <rcl_take_response>
 8017ae6:	b148      	cbz	r0, 8017afc <rcl_action_take_result_response+0x64>
 8017ae8:	280a      	cmp	r0, #10
 8017aea:	d007      	beq.n	8017afc <rcl_action_take_result_response+0x64>
 8017aec:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017af0:	f640 0337 	movw	r3, #2103	@ 0x837
 8017af4:	4290      	cmp	r0, r2
 8017af6:	bf0c      	ite	eq
 8017af8:	4618      	moveq	r0, r3
 8017afa:	2001      	movne	r0, #1
 8017afc:	bd70      	pop	{r4, r5, r6, pc}
 8017afe:	f7f7 fd23 	bl	800f548 <rcutils_reset_error>
 8017b02:	f640 0036 	movw	r0, #2102	@ 0x836
 8017b06:	bd70      	pop	{r4, r5, r6, pc}
 8017b08:	f640 0036 	movw	r0, #2102	@ 0x836
 8017b0c:	bd70      	pop	{r4, r5, r6, pc}
 8017b0e:	200b      	movs	r0, #11
 8017b10:	bd70      	pop	{r4, r5, r6, pc}
 8017b12:	f640 0036 	movw	r0, #2102	@ 0x836
 8017b16:	4770      	bx	lr

08017b18 <rcl_action_take_cancel_response>:
 8017b18:	2800      	cmp	r0, #0
 8017b1a:	d03a      	beq.n	8017b92 <rcl_action_take_cancel_response+0x7a>
 8017b1c:	b570      	push	{r4, r5, r6, lr}
 8017b1e:	4604      	mov	r4, r0
 8017b20:	6800      	ldr	r0, [r0, #0]
 8017b22:	b388      	cbz	r0, 8017b88 <rcl_action_take_cancel_response+0x70>
 8017b24:	460e      	mov	r6, r1
 8017b26:	4615      	mov	r5, r2
 8017b28:	f7fd ff22 	bl	8015970 <rcl_client_is_valid>
 8017b2c:	b338      	cbz	r0, 8017b7e <rcl_action_take_cancel_response+0x66>
 8017b2e:	6820      	ldr	r0, [r4, #0]
 8017b30:	3004      	adds	r0, #4
 8017b32:	f7fd ff1d 	bl	8015970 <rcl_client_is_valid>
 8017b36:	b310      	cbz	r0, 8017b7e <rcl_action_take_cancel_response+0x66>
 8017b38:	6820      	ldr	r0, [r4, #0]
 8017b3a:	3008      	adds	r0, #8
 8017b3c:	f7fd ff18 	bl	8015970 <rcl_client_is_valid>
 8017b40:	b1e8      	cbz	r0, 8017b7e <rcl_action_take_cancel_response+0x66>
 8017b42:	6820      	ldr	r0, [r4, #0]
 8017b44:	300c      	adds	r0, #12
 8017b46:	f7fe fd0b 	bl	8016560 <rcl_subscription_is_valid>
 8017b4a:	b1c0      	cbz	r0, 8017b7e <rcl_action_take_cancel_response+0x66>
 8017b4c:	6820      	ldr	r0, [r4, #0]
 8017b4e:	3010      	adds	r0, #16
 8017b50:	f7fe fd06 	bl	8016560 <rcl_subscription_is_valid>
 8017b54:	b198      	cbz	r0, 8017b7e <rcl_action_take_cancel_response+0x66>
 8017b56:	b1d5      	cbz	r5, 8017b8e <rcl_action_take_cancel_response+0x76>
 8017b58:	b1ce      	cbz	r6, 8017b8e <rcl_action_take_cancel_response+0x76>
 8017b5a:	6820      	ldr	r0, [r4, #0]
 8017b5c:	462a      	mov	r2, r5
 8017b5e:	4631      	mov	r1, r6
 8017b60:	3004      	adds	r0, #4
 8017b62:	f7fd febd 	bl	80158e0 <rcl_take_response>
 8017b66:	b148      	cbz	r0, 8017b7c <rcl_action_take_cancel_response+0x64>
 8017b68:	280a      	cmp	r0, #10
 8017b6a:	d007      	beq.n	8017b7c <rcl_action_take_cancel_response+0x64>
 8017b6c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8017b70:	f640 0337 	movw	r3, #2103	@ 0x837
 8017b74:	4290      	cmp	r0, r2
 8017b76:	bf0c      	ite	eq
 8017b78:	4618      	moveq	r0, r3
 8017b7a:	2001      	movne	r0, #1
 8017b7c:	bd70      	pop	{r4, r5, r6, pc}
 8017b7e:	f7f7 fce3 	bl	800f548 <rcutils_reset_error>
 8017b82:	f640 0036 	movw	r0, #2102	@ 0x836
 8017b86:	bd70      	pop	{r4, r5, r6, pc}
 8017b88:	f640 0036 	movw	r0, #2102	@ 0x836
 8017b8c:	bd70      	pop	{r4, r5, r6, pc}
 8017b8e:	200b      	movs	r0, #11
 8017b90:	bd70      	pop	{r4, r5, r6, pc}
 8017b92:	f640 0036 	movw	r0, #2102	@ 0x836
 8017b96:	4770      	bx	lr

08017b98 <rcl_action_take_feedback>:
 8017b98:	2800      	cmp	r0, #0
 8017b9a:	d038      	beq.n	8017c0e <rcl_action_take_feedback+0x76>
 8017b9c:	b530      	push	{r4, r5, lr}
 8017b9e:	4604      	mov	r4, r0
 8017ba0:	6800      	ldr	r0, [r0, #0]
 8017ba2:	b091      	sub	sp, #68	@ 0x44
 8017ba4:	b378      	cbz	r0, 8017c06 <rcl_action_take_feedback+0x6e>
 8017ba6:	460d      	mov	r5, r1
 8017ba8:	f7fd fee2 	bl	8015970 <rcl_client_is_valid>
 8017bac:	b328      	cbz	r0, 8017bfa <rcl_action_take_feedback+0x62>
 8017bae:	6820      	ldr	r0, [r4, #0]
 8017bb0:	3004      	adds	r0, #4
 8017bb2:	f7fd fedd 	bl	8015970 <rcl_client_is_valid>
 8017bb6:	b300      	cbz	r0, 8017bfa <rcl_action_take_feedback+0x62>
 8017bb8:	6820      	ldr	r0, [r4, #0]
 8017bba:	3008      	adds	r0, #8
 8017bbc:	f7fd fed8 	bl	8015970 <rcl_client_is_valid>
 8017bc0:	b1d8      	cbz	r0, 8017bfa <rcl_action_take_feedback+0x62>
 8017bc2:	6820      	ldr	r0, [r4, #0]
 8017bc4:	300c      	adds	r0, #12
 8017bc6:	f7fe fccb 	bl	8016560 <rcl_subscription_is_valid>
 8017bca:	b1b0      	cbz	r0, 8017bfa <rcl_action_take_feedback+0x62>
 8017bcc:	6820      	ldr	r0, [r4, #0]
 8017bce:	3010      	adds	r0, #16
 8017bd0:	f7fe fcc6 	bl	8016560 <rcl_subscription_is_valid>
 8017bd4:	b188      	cbz	r0, 8017bfa <rcl_action_take_feedback+0x62>
 8017bd6:	b1ed      	cbz	r5, 8017c14 <rcl_action_take_feedback+0x7c>
 8017bd8:	6820      	ldr	r0, [r4, #0]
 8017bda:	2300      	movs	r3, #0
 8017bdc:	466a      	mov	r2, sp
 8017bde:	4629      	mov	r1, r5
 8017be0:	300c      	adds	r0, #12
 8017be2:	f7fe fc61 	bl	80164a8 <rcl_take>
 8017be6:	b160      	cbz	r0, 8017c02 <rcl_action_take_feedback+0x6a>
 8017be8:	f240 1391 	movw	r3, #401	@ 0x191
 8017bec:	4298      	cmp	r0, r3
 8017bee:	d014      	beq.n	8017c1a <rcl_action_take_feedback+0x82>
 8017bf0:	280a      	cmp	r0, #10
 8017bf2:	bf18      	it	ne
 8017bf4:	2001      	movne	r0, #1
 8017bf6:	b011      	add	sp, #68	@ 0x44
 8017bf8:	bd30      	pop	{r4, r5, pc}
 8017bfa:	f7f7 fca5 	bl	800f548 <rcutils_reset_error>
 8017bfe:	f640 0036 	movw	r0, #2102	@ 0x836
 8017c02:	b011      	add	sp, #68	@ 0x44
 8017c04:	bd30      	pop	{r4, r5, pc}
 8017c06:	f640 0036 	movw	r0, #2102	@ 0x836
 8017c0a:	b011      	add	sp, #68	@ 0x44
 8017c0c:	bd30      	pop	{r4, r5, pc}
 8017c0e:	f640 0036 	movw	r0, #2102	@ 0x836
 8017c12:	4770      	bx	lr
 8017c14:	200b      	movs	r0, #11
 8017c16:	b011      	add	sp, #68	@ 0x44
 8017c18:	bd30      	pop	{r4, r5, pc}
 8017c1a:	f640 0037 	movw	r0, #2103	@ 0x837
 8017c1e:	e7f0      	b.n	8017c02 <rcl_action_take_feedback+0x6a>

08017c20 <rcl_action_wait_set_add_action_client>:
 8017c20:	2800      	cmp	r0, #0
 8017c22:	d048      	beq.n	8017cb6 <rcl_action_wait_set_add_action_client+0x96>
 8017c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c26:	460c      	mov	r4, r1
 8017c28:	2900      	cmp	r1, #0
 8017c2a:	d03c      	beq.n	8017ca6 <rcl_action_wait_set_add_action_client+0x86>
 8017c2c:	4605      	mov	r5, r0
 8017c2e:	6808      	ldr	r0, [r1, #0]
 8017c30:	2800      	cmp	r0, #0
 8017c32:	d038      	beq.n	8017ca6 <rcl_action_wait_set_add_action_client+0x86>
 8017c34:	4617      	mov	r7, r2
 8017c36:	461e      	mov	r6, r3
 8017c38:	f7fd fe9a 	bl	8015970 <rcl_client_is_valid>
 8017c3c:	b3b0      	cbz	r0, 8017cac <rcl_action_wait_set_add_action_client+0x8c>
 8017c3e:	6820      	ldr	r0, [r4, #0]
 8017c40:	3004      	adds	r0, #4
 8017c42:	f7fd fe95 	bl	8015970 <rcl_client_is_valid>
 8017c46:	b388      	cbz	r0, 8017cac <rcl_action_wait_set_add_action_client+0x8c>
 8017c48:	6820      	ldr	r0, [r4, #0]
 8017c4a:	3008      	adds	r0, #8
 8017c4c:	f7fd fe90 	bl	8015970 <rcl_client_is_valid>
 8017c50:	b360      	cbz	r0, 8017cac <rcl_action_wait_set_add_action_client+0x8c>
 8017c52:	6820      	ldr	r0, [r4, #0]
 8017c54:	300c      	adds	r0, #12
 8017c56:	f7fe fc83 	bl	8016560 <rcl_subscription_is_valid>
 8017c5a:	b338      	cbz	r0, 8017cac <rcl_action_wait_set_add_action_client+0x8c>
 8017c5c:	6820      	ldr	r0, [r4, #0]
 8017c5e:	3010      	adds	r0, #16
 8017c60:	f7fe fc7e 	bl	8016560 <rcl_subscription_is_valid>
 8017c64:	b310      	cbz	r0, 8017cac <rcl_action_wait_set_add_action_client+0x8c>
 8017c66:	6821      	ldr	r1, [r4, #0]
 8017c68:	4628      	mov	r0, r5
 8017c6a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 8017c6e:	f7ff fcd1 	bl	8017614 <rcl_wait_set_add_client>
 8017c72:	b9b8      	cbnz	r0, 8017ca4 <rcl_action_wait_set_add_action_client+0x84>
 8017c74:	6821      	ldr	r1, [r4, #0]
 8017c76:	4628      	mov	r0, r5
 8017c78:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 8017c7c:	3104      	adds	r1, #4
 8017c7e:	f7ff fcc9 	bl	8017614 <rcl_wait_set_add_client>
 8017c82:	b978      	cbnz	r0, 8017ca4 <rcl_action_wait_set_add_action_client+0x84>
 8017c84:	6821      	ldr	r1, [r4, #0]
 8017c86:	4628      	mov	r0, r5
 8017c88:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 8017c8c:	3108      	adds	r1, #8
 8017c8e:	f7ff fcc1 	bl	8017614 <rcl_wait_set_add_client>
 8017c92:	b938      	cbnz	r0, 8017ca4 <rcl_action_wait_set_add_action_client+0x84>
 8017c94:	6821      	ldr	r1, [r4, #0]
 8017c96:	4628      	mov	r0, r5
 8017c98:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 8017c9c:	310c      	adds	r1, #12
 8017c9e:	f7ff f969 	bl	8016f74 <rcl_wait_set_add_subscription>
 8017ca2:	b158      	cbz	r0, 8017cbc <rcl_action_wait_set_add_action_client+0x9c>
 8017ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ca6:	f640 0036 	movw	r0, #2102	@ 0x836
 8017caa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cac:	f7f7 fc4c 	bl	800f548 <rcutils_reset_error>
 8017cb0:	f640 0036 	movw	r0, #2102	@ 0x836
 8017cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cb6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017cba:	4770      	bx	lr
 8017cbc:	6821      	ldr	r1, [r4, #0]
 8017cbe:	4628      	mov	r0, r5
 8017cc0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 8017cc4:	3110      	adds	r1, #16
 8017cc6:	f7ff f955 	bl	8016f74 <rcl_wait_set_add_subscription>
 8017cca:	2800      	cmp	r0, #0
 8017ccc:	d1ea      	bne.n	8017ca4 <rcl_action_wait_set_add_action_client+0x84>
 8017cce:	b11f      	cbz	r7, 8017cd8 <rcl_action_wait_set_add_action_client+0xb8>
 8017cd0:	6823      	ldr	r3, [r4, #0]
 8017cd2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 8017cd6:	603b      	str	r3, [r7, #0]
 8017cd8:	2e00      	cmp	r6, #0
 8017cda:	d0e3      	beq.n	8017ca4 <rcl_action_wait_set_add_action_client+0x84>
 8017cdc:	6823      	ldr	r3, [r4, #0]
 8017cde:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 8017ce2:	6033      	str	r3, [r6, #0]
 8017ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017ce6:	bf00      	nop

08017ce8 <rcl_action_client_wait_set_get_entities_ready>:
 8017ce8:	2800      	cmp	r0, #0
 8017cea:	d050      	beq.n	8017d8e <rcl_action_client_wait_set_get_entities_ready+0xa6>
 8017cec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017cf0:	460c      	mov	r4, r1
 8017cf2:	2900      	cmp	r1, #0
 8017cf4:	d03e      	beq.n	8017d74 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8017cf6:	4605      	mov	r5, r0
 8017cf8:	6808      	ldr	r0, [r1, #0]
 8017cfa:	2800      	cmp	r0, #0
 8017cfc:	d03a      	beq.n	8017d74 <rcl_action_client_wait_set_get_entities_ready+0x8c>
 8017cfe:	4616      	mov	r6, r2
 8017d00:	461f      	mov	r7, r3
 8017d02:	f7fd fe35 	bl	8015970 <rcl_client_is_valid>
 8017d06:	2800      	cmp	r0, #0
 8017d08:	d038      	beq.n	8017d7c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017d0a:	6820      	ldr	r0, [r4, #0]
 8017d0c:	3004      	adds	r0, #4
 8017d0e:	f7fd fe2f 	bl	8015970 <rcl_client_is_valid>
 8017d12:	2800      	cmp	r0, #0
 8017d14:	d032      	beq.n	8017d7c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017d16:	6820      	ldr	r0, [r4, #0]
 8017d18:	3008      	adds	r0, #8
 8017d1a:	f7fd fe29 	bl	8015970 <rcl_client_is_valid>
 8017d1e:	b368      	cbz	r0, 8017d7c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017d20:	6820      	ldr	r0, [r4, #0]
 8017d22:	300c      	adds	r0, #12
 8017d24:	f7fe fc1c 	bl	8016560 <rcl_subscription_is_valid>
 8017d28:	b340      	cbz	r0, 8017d7c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017d2a:	6820      	ldr	r0, [r4, #0]
 8017d2c:	3010      	adds	r0, #16
 8017d2e:	f7fe fc17 	bl	8016560 <rcl_subscription_is_valid>
 8017d32:	b318      	cbz	r0, 8017d7c <rcl_action_client_wait_set_get_entities_ready+0x94>
 8017d34:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	@ 0x24
 8017d38:	2a00      	cmp	r2, #0
 8017d3a:	bf18      	it	ne
 8017d3c:	2b00      	cmpne	r3, #0
 8017d3e:	9b08      	ldr	r3, [sp, #32]
 8017d40:	bf0c      	ite	eq
 8017d42:	2101      	moveq	r1, #1
 8017d44:	2100      	movne	r1, #0
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	bf08      	it	eq
 8017d4a:	f041 0101 	orreq.w	r1, r1, #1
 8017d4e:	2f00      	cmp	r7, #0
 8017d50:	bf08      	it	eq
 8017d52:	f041 0101 	orreq.w	r1, r1, #1
 8017d56:	b9b9      	cbnz	r1, 8017d88 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017d58:	b1b6      	cbz	r6, 8017d88 <rcl_action_client_wait_set_get_entities_ready+0xa0>
 8017d5a:	6823      	ldr	r3, [r4, #0]
 8017d5c:	686c      	ldr	r4, [r5, #4]
 8017d5e:	e9d3 2174 	ldrd	r2, r1, [r3, #464]	@ 0x1d0
 8017d62:	428a      	cmp	r2, r1
 8017d64:	4610      	mov	r0, r2
 8017d66:	bf38      	it	cc
 8017d68:	4608      	movcc	r0, r1
 8017d6a:	4284      	cmp	r4, r0
 8017d6c:	d812      	bhi.n	8017d94 <rcl_action_client_wait_set_get_entities_ready+0xac>
 8017d6e:	2001      	movs	r0, #1
 8017d70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d74:	f640 0036 	movw	r0, #2102	@ 0x836
 8017d78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d7c:	f7f7 fbe4 	bl	800f548 <rcutils_reset_error>
 8017d80:	f640 0036 	movw	r0, #2102	@ 0x836
 8017d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d88:	200b      	movs	r0, #11
 8017d8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d8e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8017d92:	4770      	bx	lr
 8017d94:	e9d3 8e71 	ldrd	r8, lr, [r3, #452]	@ 0x1c4
 8017d98:	f8d3 c1cc 	ldr.w	ip, [r3, #460]	@ 0x1cc
 8017d9c:	45f0      	cmp	r8, lr
 8017d9e:	4640      	mov	r0, r8
 8017da0:	69ec      	ldr	r4, [r5, #28]
 8017da2:	bf38      	it	cc
 8017da4:	4670      	movcc	r0, lr
 8017da6:	4560      	cmp	r0, ip
 8017da8:	bf38      	it	cc
 8017daa:	4660      	movcc	r0, ip
 8017dac:	4284      	cmp	r4, r0
 8017dae:	d9de      	bls.n	8017d6e <rcl_action_client_wait_set_get_entities_ready+0x86>
 8017db0:	f8d5 9018 	ldr.w	r9, [r5, #24]
 8017db4:	682d      	ldr	r5, [r5, #0]
 8017db6:	f859 0028 	ldr.w	r0, [r9, r8, lsl #2]
 8017dba:	f855 4021 	ldr.w	r4, [r5, r1, lsl #2]
 8017dbe:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8017dc2:	1a18      	subs	r0, r3, r0
 8017dc4:	f859 202c 	ldr.w	r2, [r9, ip, lsl #2]
 8017dc8:	f103 0c0c 	add.w	ip, r3, #12
 8017dcc:	f859 102e 	ldr.w	r1, [r9, lr, lsl #2]
 8017dd0:	fab0 f080 	clz	r0, r0
 8017dd4:	eba5 050c 	sub.w	r5, r5, ip
 8017dd8:	0940      	lsrs	r0, r0, #5
 8017dda:	fab5 f585 	clz	r5, r5
 8017dde:	096d      	lsrs	r5, r5, #5
 8017de0:	7035      	strb	r5, [r6, #0]
 8017de2:	f103 0510 	add.w	r5, r3, #16
 8017de6:	1b64      	subs	r4, r4, r5
 8017de8:	9d08      	ldr	r5, [sp, #32]
 8017dea:	fab4 f484 	clz	r4, r4
 8017dee:	0964      	lsrs	r4, r4, #5
 8017df0:	703c      	strb	r4, [r7, #0]
 8017df2:	1d1c      	adds	r4, r3, #4
 8017df4:	3308      	adds	r3, #8
 8017df6:	7028      	strb	r0, [r5, #0]
 8017df8:	1b09      	subs	r1, r1, r4
 8017dfa:	2000      	movs	r0, #0
 8017dfc:	1ad3      	subs	r3, r2, r3
 8017dfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e00:	fab1 f181 	clz	r1, r1
 8017e04:	fab3 f383 	clz	r3, r3
 8017e08:	0949      	lsrs	r1, r1, #5
 8017e0a:	095b      	lsrs	r3, r3, #5
 8017e0c:	7011      	strb	r1, [r2, #0]
 8017e0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8017e10:	7013      	strb	r3, [r2, #0]
 8017e12:	e7b1      	b.n	8017d78 <rcl_action_client_wait_set_get_entities_ready+0x90>

08017e14 <rcl_action_take_goal_request>:
 8017e14:	2800      	cmp	r0, #0
 8017e16:	d039      	beq.n	8017e8c <rcl_action_take_goal_request+0x78>
 8017e18:	b570      	push	{r4, r5, r6, lr}
 8017e1a:	4604      	mov	r4, r0
 8017e1c:	6800      	ldr	r0, [r0, #0]
 8017e1e:	b380      	cbz	r0, 8017e82 <rcl_action_take_goal_request+0x6e>
 8017e20:	460e      	mov	r6, r1
 8017e22:	4615      	mov	r5, r2
 8017e24:	f7fe fb36 	bl	8016494 <rcl_service_is_valid>
 8017e28:	b330      	cbz	r0, 8017e78 <rcl_action_take_goal_request+0x64>
 8017e2a:	6820      	ldr	r0, [r4, #0]
 8017e2c:	3004      	adds	r0, #4
 8017e2e:	f7fe fb31 	bl	8016494 <rcl_service_is_valid>
 8017e32:	b308      	cbz	r0, 8017e78 <rcl_action_take_goal_request+0x64>
 8017e34:	6820      	ldr	r0, [r4, #0]
 8017e36:	3008      	adds	r0, #8
 8017e38:	f7fe fb2c 	bl	8016494 <rcl_service_is_valid>
 8017e3c:	b1e0      	cbz	r0, 8017e78 <rcl_action_take_goal_request+0x64>
 8017e3e:	6820      	ldr	r0, [r4, #0]
 8017e40:	300c      	adds	r0, #12
 8017e42:	f7f6 fbed 	bl	800e620 <rcl_publisher_is_valid>
 8017e46:	b1b8      	cbz	r0, 8017e78 <rcl_action_take_goal_request+0x64>
 8017e48:	6820      	ldr	r0, [r4, #0]
 8017e4a:	3010      	adds	r0, #16
 8017e4c:	f7f6 fbe8 	bl	800e620 <rcl_publisher_is_valid>
 8017e50:	b190      	cbz	r0, 8017e78 <rcl_action_take_goal_request+0x64>
 8017e52:	b1cd      	cbz	r5, 8017e88 <rcl_action_take_goal_request+0x74>
 8017e54:	b1c6      	cbz	r6, 8017e88 <rcl_action_take_goal_request+0x74>
 8017e56:	462a      	mov	r2, r5
 8017e58:	4631      	mov	r1, r6
 8017e5a:	6820      	ldr	r0, [r4, #0]
 8017e5c:	f7fe fac2 	bl	80163e4 <rcl_take_request>
 8017e60:	b148      	cbz	r0, 8017e76 <rcl_action_take_goal_request+0x62>
 8017e62:	280a      	cmp	r0, #10
 8017e64:	d007      	beq.n	8017e76 <rcl_action_take_goal_request+0x62>
 8017e66:	f240 2259 	movw	r2, #601	@ 0x259
 8017e6a:	f640 0399 	movw	r3, #2201	@ 0x899
 8017e6e:	4290      	cmp	r0, r2
 8017e70:	bf0c      	ite	eq
 8017e72:	4618      	moveq	r0, r3
 8017e74:	2001      	movne	r0, #1
 8017e76:	bd70      	pop	{r4, r5, r6, pc}
 8017e78:	f7f7 fb66 	bl	800f548 <rcutils_reset_error>
 8017e7c:	f640 0098 	movw	r0, #2200	@ 0x898
 8017e80:	bd70      	pop	{r4, r5, r6, pc}
 8017e82:	f640 0098 	movw	r0, #2200	@ 0x898
 8017e86:	bd70      	pop	{r4, r5, r6, pc}
 8017e88:	200b      	movs	r0, #11
 8017e8a:	bd70      	pop	{r4, r5, r6, pc}
 8017e8c:	f640 0098 	movw	r0, #2200	@ 0x898
 8017e90:	4770      	bx	lr
 8017e92:	bf00      	nop

08017e94 <rcl_action_send_goal_response>:
 8017e94:	b390      	cbz	r0, 8017efc <rcl_action_send_goal_response+0x68>
 8017e96:	b570      	push	{r4, r5, r6, lr}
 8017e98:	4604      	mov	r4, r0
 8017e9a:	6800      	ldr	r0, [r0, #0]
 8017e9c:	b348      	cbz	r0, 8017ef2 <rcl_action_send_goal_response+0x5e>
 8017e9e:	460e      	mov	r6, r1
 8017ea0:	4615      	mov	r5, r2
 8017ea2:	f7fe faf7 	bl	8016494 <rcl_service_is_valid>
 8017ea6:	b1f8      	cbz	r0, 8017ee8 <rcl_action_send_goal_response+0x54>
 8017ea8:	6820      	ldr	r0, [r4, #0]
 8017eaa:	3004      	adds	r0, #4
 8017eac:	f7fe faf2 	bl	8016494 <rcl_service_is_valid>
 8017eb0:	b1d0      	cbz	r0, 8017ee8 <rcl_action_send_goal_response+0x54>
 8017eb2:	6820      	ldr	r0, [r4, #0]
 8017eb4:	3008      	adds	r0, #8
 8017eb6:	f7fe faed 	bl	8016494 <rcl_service_is_valid>
 8017eba:	b1a8      	cbz	r0, 8017ee8 <rcl_action_send_goal_response+0x54>
 8017ebc:	6820      	ldr	r0, [r4, #0]
 8017ebe:	300c      	adds	r0, #12
 8017ec0:	f7f6 fbae 	bl	800e620 <rcl_publisher_is_valid>
 8017ec4:	b180      	cbz	r0, 8017ee8 <rcl_action_send_goal_response+0x54>
 8017ec6:	6820      	ldr	r0, [r4, #0]
 8017ec8:	3010      	adds	r0, #16
 8017eca:	f7f6 fba9 	bl	800e620 <rcl_publisher_is_valid>
 8017ece:	b158      	cbz	r0, 8017ee8 <rcl_action_send_goal_response+0x54>
 8017ed0:	b195      	cbz	r5, 8017ef8 <rcl_action_send_goal_response+0x64>
 8017ed2:	b18e      	cbz	r6, 8017ef8 <rcl_action_send_goal_response+0x64>
 8017ed4:	462a      	mov	r2, r5
 8017ed6:	4631      	mov	r1, r6
 8017ed8:	6820      	ldr	r0, [r4, #0]
 8017eda:	f7fe fac3 	bl	8016464 <rcl_send_response>
 8017ede:	b110      	cbz	r0, 8017ee6 <rcl_action_send_goal_response+0x52>
 8017ee0:	2802      	cmp	r0, #2
 8017ee2:	bf18      	it	ne
 8017ee4:	2001      	movne	r0, #1
 8017ee6:	bd70      	pop	{r4, r5, r6, pc}
 8017ee8:	f7f7 fb2e 	bl	800f548 <rcutils_reset_error>
 8017eec:	f640 0098 	movw	r0, #2200	@ 0x898
 8017ef0:	bd70      	pop	{r4, r5, r6, pc}
 8017ef2:	f640 0098 	movw	r0, #2200	@ 0x898
 8017ef6:	bd70      	pop	{r4, r5, r6, pc}
 8017ef8:	200b      	movs	r0, #11
 8017efa:	bd70      	pop	{r4, r5, r6, pc}
 8017efc:	f640 0098 	movw	r0, #2200	@ 0x898
 8017f00:	4770      	bx	lr
 8017f02:	bf00      	nop

08017f04 <rcl_action_take_result_request>:
 8017f04:	2800      	cmp	r0, #0
 8017f06:	d03a      	beq.n	8017f7e <rcl_action_take_result_request+0x7a>
 8017f08:	b570      	push	{r4, r5, r6, lr}
 8017f0a:	4604      	mov	r4, r0
 8017f0c:	6800      	ldr	r0, [r0, #0]
 8017f0e:	b388      	cbz	r0, 8017f74 <rcl_action_take_result_request+0x70>
 8017f10:	460e      	mov	r6, r1
 8017f12:	4615      	mov	r5, r2
 8017f14:	f7fe fabe 	bl	8016494 <rcl_service_is_valid>
 8017f18:	b338      	cbz	r0, 8017f6a <rcl_action_take_result_request+0x66>
 8017f1a:	6820      	ldr	r0, [r4, #0]
 8017f1c:	3004      	adds	r0, #4
 8017f1e:	f7fe fab9 	bl	8016494 <rcl_service_is_valid>
 8017f22:	b310      	cbz	r0, 8017f6a <rcl_action_take_result_request+0x66>
 8017f24:	6820      	ldr	r0, [r4, #0]
 8017f26:	3008      	adds	r0, #8
 8017f28:	f7fe fab4 	bl	8016494 <rcl_service_is_valid>
 8017f2c:	b1e8      	cbz	r0, 8017f6a <rcl_action_take_result_request+0x66>
 8017f2e:	6820      	ldr	r0, [r4, #0]
 8017f30:	300c      	adds	r0, #12
 8017f32:	f7f6 fb75 	bl	800e620 <rcl_publisher_is_valid>
 8017f36:	b1c0      	cbz	r0, 8017f6a <rcl_action_take_result_request+0x66>
 8017f38:	6820      	ldr	r0, [r4, #0]
 8017f3a:	3010      	adds	r0, #16
 8017f3c:	f7f6 fb70 	bl	800e620 <rcl_publisher_is_valid>
 8017f40:	b198      	cbz	r0, 8017f6a <rcl_action_take_result_request+0x66>
 8017f42:	b1d5      	cbz	r5, 8017f7a <rcl_action_take_result_request+0x76>
 8017f44:	b1ce      	cbz	r6, 8017f7a <rcl_action_take_result_request+0x76>
 8017f46:	6820      	ldr	r0, [r4, #0]
 8017f48:	462a      	mov	r2, r5
 8017f4a:	4631      	mov	r1, r6
 8017f4c:	3008      	adds	r0, #8
 8017f4e:	f7fe fa49 	bl	80163e4 <rcl_take_request>
 8017f52:	b148      	cbz	r0, 8017f68 <rcl_action_take_result_request+0x64>
 8017f54:	280a      	cmp	r0, #10
 8017f56:	d007      	beq.n	8017f68 <rcl_action_take_result_request+0x64>
 8017f58:	f240 2259 	movw	r2, #601	@ 0x259
 8017f5c:	f640 0399 	movw	r3, #2201	@ 0x899
 8017f60:	4290      	cmp	r0, r2
 8017f62:	bf0c      	ite	eq
 8017f64:	4618      	moveq	r0, r3
 8017f66:	2001      	movne	r0, #1
 8017f68:	bd70      	pop	{r4, r5, r6, pc}
 8017f6a:	f7f7 faed 	bl	800f548 <rcutils_reset_error>
 8017f6e:	f640 0098 	movw	r0, #2200	@ 0x898
 8017f72:	bd70      	pop	{r4, r5, r6, pc}
 8017f74:	f640 0098 	movw	r0, #2200	@ 0x898
 8017f78:	bd70      	pop	{r4, r5, r6, pc}
 8017f7a:	200b      	movs	r0, #11
 8017f7c:	bd70      	pop	{r4, r5, r6, pc}
 8017f7e:	f640 0098 	movw	r0, #2200	@ 0x898
 8017f82:	4770      	bx	lr

08017f84 <rcl_action_take_cancel_request>:
 8017f84:	2800      	cmp	r0, #0
 8017f86:	d03a      	beq.n	8017ffe <rcl_action_take_cancel_request+0x7a>
 8017f88:	b570      	push	{r4, r5, r6, lr}
 8017f8a:	4604      	mov	r4, r0
 8017f8c:	6800      	ldr	r0, [r0, #0]
 8017f8e:	b388      	cbz	r0, 8017ff4 <rcl_action_take_cancel_request+0x70>
 8017f90:	460e      	mov	r6, r1
 8017f92:	4615      	mov	r5, r2
 8017f94:	f7fe fa7e 	bl	8016494 <rcl_service_is_valid>
 8017f98:	b338      	cbz	r0, 8017fea <rcl_action_take_cancel_request+0x66>
 8017f9a:	6820      	ldr	r0, [r4, #0]
 8017f9c:	3004      	adds	r0, #4
 8017f9e:	f7fe fa79 	bl	8016494 <rcl_service_is_valid>
 8017fa2:	b310      	cbz	r0, 8017fea <rcl_action_take_cancel_request+0x66>
 8017fa4:	6820      	ldr	r0, [r4, #0]
 8017fa6:	3008      	adds	r0, #8
 8017fa8:	f7fe fa74 	bl	8016494 <rcl_service_is_valid>
 8017fac:	b1e8      	cbz	r0, 8017fea <rcl_action_take_cancel_request+0x66>
 8017fae:	6820      	ldr	r0, [r4, #0]
 8017fb0:	300c      	adds	r0, #12
 8017fb2:	f7f6 fb35 	bl	800e620 <rcl_publisher_is_valid>
 8017fb6:	b1c0      	cbz	r0, 8017fea <rcl_action_take_cancel_request+0x66>
 8017fb8:	6820      	ldr	r0, [r4, #0]
 8017fba:	3010      	adds	r0, #16
 8017fbc:	f7f6 fb30 	bl	800e620 <rcl_publisher_is_valid>
 8017fc0:	b198      	cbz	r0, 8017fea <rcl_action_take_cancel_request+0x66>
 8017fc2:	b1d5      	cbz	r5, 8017ffa <rcl_action_take_cancel_request+0x76>
 8017fc4:	b1ce      	cbz	r6, 8017ffa <rcl_action_take_cancel_request+0x76>
 8017fc6:	6820      	ldr	r0, [r4, #0]
 8017fc8:	462a      	mov	r2, r5
 8017fca:	4631      	mov	r1, r6
 8017fcc:	3004      	adds	r0, #4
 8017fce:	f7fe fa09 	bl	80163e4 <rcl_take_request>
 8017fd2:	b148      	cbz	r0, 8017fe8 <rcl_action_take_cancel_request+0x64>
 8017fd4:	280a      	cmp	r0, #10
 8017fd6:	d007      	beq.n	8017fe8 <rcl_action_take_cancel_request+0x64>
 8017fd8:	f240 2259 	movw	r2, #601	@ 0x259
 8017fdc:	f640 0399 	movw	r3, #2201	@ 0x899
 8017fe0:	4290      	cmp	r0, r2
 8017fe2:	bf0c      	ite	eq
 8017fe4:	4618      	moveq	r0, r3
 8017fe6:	2001      	movne	r0, #1
 8017fe8:	bd70      	pop	{r4, r5, r6, pc}
 8017fea:	f7f7 faad 	bl	800f548 <rcutils_reset_error>
 8017fee:	f640 0098 	movw	r0, #2200	@ 0x898
 8017ff2:	bd70      	pop	{r4, r5, r6, pc}
 8017ff4:	f640 0098 	movw	r0, #2200	@ 0x898
 8017ff8:	bd70      	pop	{r4, r5, r6, pc}
 8017ffa:	200b      	movs	r0, #11
 8017ffc:	bd70      	pop	{r4, r5, r6, pc}
 8017ffe:	f640 0098 	movw	r0, #2200	@ 0x898
 8018002:	4770      	bx	lr

08018004 <rcl_action_send_cancel_response>:
 8018004:	b398      	cbz	r0, 801806e <rcl_action_send_cancel_response+0x6a>
 8018006:	b570      	push	{r4, r5, r6, lr}
 8018008:	4604      	mov	r4, r0
 801800a:	6800      	ldr	r0, [r0, #0]
 801800c:	b350      	cbz	r0, 8018064 <rcl_action_send_cancel_response+0x60>
 801800e:	460e      	mov	r6, r1
 8018010:	4615      	mov	r5, r2
 8018012:	f7fe fa3f 	bl	8016494 <rcl_service_is_valid>
 8018016:	b300      	cbz	r0, 801805a <rcl_action_send_cancel_response+0x56>
 8018018:	6820      	ldr	r0, [r4, #0]
 801801a:	3004      	adds	r0, #4
 801801c:	f7fe fa3a 	bl	8016494 <rcl_service_is_valid>
 8018020:	b1d8      	cbz	r0, 801805a <rcl_action_send_cancel_response+0x56>
 8018022:	6820      	ldr	r0, [r4, #0]
 8018024:	3008      	adds	r0, #8
 8018026:	f7fe fa35 	bl	8016494 <rcl_service_is_valid>
 801802a:	b1b0      	cbz	r0, 801805a <rcl_action_send_cancel_response+0x56>
 801802c:	6820      	ldr	r0, [r4, #0]
 801802e:	300c      	adds	r0, #12
 8018030:	f7f6 faf6 	bl	800e620 <rcl_publisher_is_valid>
 8018034:	b188      	cbz	r0, 801805a <rcl_action_send_cancel_response+0x56>
 8018036:	6820      	ldr	r0, [r4, #0]
 8018038:	3010      	adds	r0, #16
 801803a:	f7f6 faf1 	bl	800e620 <rcl_publisher_is_valid>
 801803e:	b160      	cbz	r0, 801805a <rcl_action_send_cancel_response+0x56>
 8018040:	b19d      	cbz	r5, 801806a <rcl_action_send_cancel_response+0x66>
 8018042:	b196      	cbz	r6, 801806a <rcl_action_send_cancel_response+0x66>
 8018044:	6820      	ldr	r0, [r4, #0]
 8018046:	462a      	mov	r2, r5
 8018048:	4631      	mov	r1, r6
 801804a:	3004      	adds	r0, #4
 801804c:	f7fe fa0a 	bl	8016464 <rcl_send_response>
 8018050:	b110      	cbz	r0, 8018058 <rcl_action_send_cancel_response+0x54>
 8018052:	2802      	cmp	r0, #2
 8018054:	bf18      	it	ne
 8018056:	2001      	movne	r0, #1
 8018058:	bd70      	pop	{r4, r5, r6, pc}
 801805a:	f7f7 fa75 	bl	800f548 <rcutils_reset_error>
 801805e:	f640 0098 	movw	r0, #2200	@ 0x898
 8018062:	bd70      	pop	{r4, r5, r6, pc}
 8018064:	f640 0098 	movw	r0, #2200	@ 0x898
 8018068:	bd70      	pop	{r4, r5, r6, pc}
 801806a:	200b      	movs	r0, #11
 801806c:	bd70      	pop	{r4, r5, r6, pc}
 801806e:	f640 0098 	movw	r0, #2200	@ 0x898
 8018072:	4770      	bx	lr

08018074 <rcl_action_wait_set_add_action_server>:
 8018074:	2800      	cmp	r0, #0
 8018076:	d04d      	beq.n	8018114 <rcl_action_wait_set_add_action_server+0xa0>
 8018078:	b570      	push	{r4, r5, r6, lr}
 801807a:	460c      	mov	r4, r1
 801807c:	b159      	cbz	r1, 8018096 <rcl_action_wait_set_add_action_server+0x22>
 801807e:	4605      	mov	r5, r0
 8018080:	6808      	ldr	r0, [r1, #0]
 8018082:	b140      	cbz	r0, 8018096 <rcl_action_wait_set_add_action_server+0x22>
 8018084:	4616      	mov	r6, r2
 8018086:	f7fe fa05 	bl	8016494 <rcl_service_is_valid>
 801808a:	b120      	cbz	r0, 8018096 <rcl_action_wait_set_add_action_server+0x22>
 801808c:	6820      	ldr	r0, [r4, #0]
 801808e:	3004      	adds	r0, #4
 8018090:	f7fe fa00 	bl	8016494 <rcl_service_is_valid>
 8018094:	b910      	cbnz	r0, 801809c <rcl_action_wait_set_add_action_server+0x28>
 8018096:	f640 0098 	movw	r0, #2200	@ 0x898
 801809a:	bd70      	pop	{r4, r5, r6, pc}
 801809c:	6820      	ldr	r0, [r4, #0]
 801809e:	3008      	adds	r0, #8
 80180a0:	f7fe f9f8 	bl	8016494 <rcl_service_is_valid>
 80180a4:	2800      	cmp	r0, #0
 80180a6:	d0f6      	beq.n	8018096 <rcl_action_wait_set_add_action_server+0x22>
 80180a8:	6820      	ldr	r0, [r4, #0]
 80180aa:	300c      	adds	r0, #12
 80180ac:	f7f6 fad0 	bl	800e650 <rcl_publisher_is_valid_except_context>
 80180b0:	2800      	cmp	r0, #0
 80180b2:	d0f0      	beq.n	8018096 <rcl_action_wait_set_add_action_server+0x22>
 80180b4:	6820      	ldr	r0, [r4, #0]
 80180b6:	3010      	adds	r0, #16
 80180b8:	f7f6 faca 	bl	800e650 <rcl_publisher_is_valid_except_context>
 80180bc:	2800      	cmp	r0, #0
 80180be:	d0ea      	beq.n	8018096 <rcl_action_wait_set_add_action_server+0x22>
 80180c0:	6821      	ldr	r1, [r4, #0]
 80180c2:	4628      	mov	r0, r5
 80180c4:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80180c8:	f7ff fad0 	bl	801766c <rcl_wait_set_add_service>
 80180cc:	2800      	cmp	r0, #0
 80180ce:	d1e4      	bne.n	801809a <rcl_action_wait_set_add_action_server+0x26>
 80180d0:	6821      	ldr	r1, [r4, #0]
 80180d2:	4628      	mov	r0, r5
 80180d4:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80180d8:	3104      	adds	r1, #4
 80180da:	f7ff fac7 	bl	801766c <rcl_wait_set_add_service>
 80180de:	2800      	cmp	r0, #0
 80180e0:	d1db      	bne.n	801809a <rcl_action_wait_set_add_action_server+0x26>
 80180e2:	6821      	ldr	r1, [r4, #0]
 80180e4:	4628      	mov	r0, r5
 80180e6:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80180ea:	3108      	adds	r1, #8
 80180ec:	f7ff fabe 	bl	801766c <rcl_wait_set_add_service>
 80180f0:	2800      	cmp	r0, #0
 80180f2:	d1d2      	bne.n	801809a <rcl_action_wait_set_add_action_server+0x26>
 80180f4:	6821      	ldr	r1, [r4, #0]
 80180f6:	4628      	mov	r0, r5
 80180f8:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 80180fc:	3114      	adds	r1, #20
 80180fe:	f7ff fa59 	bl	80175b4 <rcl_wait_set_add_timer>
 8018102:	2800      	cmp	r0, #0
 8018104:	d1c9      	bne.n	801809a <rcl_action_wait_set_add_action_server+0x26>
 8018106:	2e00      	cmp	r6, #0
 8018108:	d0c7      	beq.n	801809a <rcl_action_wait_set_add_action_server+0x26>
 801810a:	6823      	ldr	r3, [r4, #0]
 801810c:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 8018110:	6033      	str	r3, [r6, #0]
 8018112:	bd70      	pop	{r4, r5, r6, pc}
 8018114:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8018118:	4770      	bx	lr
 801811a:	bf00      	nop

0801811c <rcl_action_server_wait_set_get_entities_ready>:
 801811c:	2800      	cmp	r0, #0
 801811e:	d067      	beq.n	80181f0 <rcl_action_server_wait_set_get_entities_ready+0xd4>
 8018120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018124:	460c      	mov	r4, r1
 8018126:	b161      	cbz	r1, 8018142 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018128:	4605      	mov	r5, r0
 801812a:	6808      	ldr	r0, [r1, #0]
 801812c:	b148      	cbz	r0, 8018142 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801812e:	4616      	mov	r6, r2
 8018130:	4698      	mov	r8, r3
 8018132:	f7fe f9af 	bl	8016494 <rcl_service_is_valid>
 8018136:	b120      	cbz	r0, 8018142 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018138:	6820      	ldr	r0, [r4, #0]
 801813a:	3004      	adds	r0, #4
 801813c:	f7fe f9aa 	bl	8016494 <rcl_service_is_valid>
 8018140:	b918      	cbnz	r0, 801814a <rcl_action_server_wait_set_get_entities_ready+0x2e>
 8018142:	f640 0098 	movw	r0, #2200	@ 0x898
 8018146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801814a:	6820      	ldr	r0, [r4, #0]
 801814c:	3008      	adds	r0, #8
 801814e:	f7fe f9a1 	bl	8016494 <rcl_service_is_valid>
 8018152:	2800      	cmp	r0, #0
 8018154:	d0f5      	beq.n	8018142 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018156:	6820      	ldr	r0, [r4, #0]
 8018158:	300c      	adds	r0, #12
 801815a:	f7f6 fa79 	bl	800e650 <rcl_publisher_is_valid_except_context>
 801815e:	2800      	cmp	r0, #0
 8018160:	d0ef      	beq.n	8018142 <rcl_action_server_wait_set_get_entities_ready+0x26>
 8018162:	6820      	ldr	r0, [r4, #0]
 8018164:	3010      	adds	r0, #16
 8018166:	f7f6 fa73 	bl	800e650 <rcl_publisher_is_valid_except_context>
 801816a:	2800      	cmp	r0, #0
 801816c:	d0e9      	beq.n	8018142 <rcl_action_server_wait_set_get_entities_ready+0x26>
 801816e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018172:	2a00      	cmp	r2, #0
 8018174:	bf18      	it	ne
 8018176:	2b00      	cmpne	r3, #0
 8018178:	bf0c      	ite	eq
 801817a:	2101      	moveq	r1, #1
 801817c:	2100      	movne	r1, #0
 801817e:	f1b8 0f00 	cmp.w	r8, #0
 8018182:	bf08      	it	eq
 8018184:	f041 0101 	orreq.w	r1, r1, #1
 8018188:	bba9      	cbnz	r1, 80181f6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801818a:	b3a6      	cbz	r6, 80181f6 <rcl_action_server_wait_set_get_entities_ready+0xda>
 801818c:	6821      	ldr	r1, [r4, #0]
 801818e:	2000      	movs	r0, #0
 8018190:	692c      	ldr	r4, [r5, #16]
 8018192:	f8d1 21e8 	ldr.w	r2, [r1, #488]	@ 0x1e8
 8018196:	6a2f      	ldr	r7, [r5, #32]
 8018198:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801819c:	f8d1 41dc 	ldr.w	r4, [r1, #476]	@ 0x1dc
 80181a0:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 80181a4:	f857 4024 	ldr.w	r4, [r7, r4, lsl #2]
 80181a8:	f857 5023 	ldr.w	r5, [r7, r3, lsl #2]
 80181ac:	1a64      	subs	r4, r4, r1
 80181ae:	f8d1 31e4 	ldr.w	r3, [r1, #484]	@ 0x1e4
 80181b2:	fab4 f484 	clz	r4, r4
 80181b6:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 80181ba:	0964      	lsrs	r4, r4, #5
 80181bc:	7034      	strb	r4, [r6, #0]
 80181be:	1d0c      	adds	r4, r1, #4
 80181c0:	1b2c      	subs	r4, r5, r4
 80181c2:	fab4 f484 	clz	r4, r4
 80181c6:	0964      	lsrs	r4, r4, #5
 80181c8:	f888 4000 	strb.w	r4, [r8]
 80181cc:	f101 0408 	add.w	r4, r1, #8
 80181d0:	1b1b      	subs	r3, r3, r4
 80181d2:	9c06      	ldr	r4, [sp, #24]
 80181d4:	fab3 f383 	clz	r3, r3
 80181d8:	095b      	lsrs	r3, r3, #5
 80181da:	7023      	strb	r3, [r4, #0]
 80181dc:	f101 0314 	add.w	r3, r1, #20
 80181e0:	1ad3      	subs	r3, r2, r3
 80181e2:	9a07      	ldr	r2, [sp, #28]
 80181e4:	fab3 f383 	clz	r3, r3
 80181e8:	095b      	lsrs	r3, r3, #5
 80181ea:	7013      	strb	r3, [r2, #0]
 80181ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80181f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80181f4:	4770      	bx	lr
 80181f6:	200b      	movs	r0, #11
 80181f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080181fc <_execute_event_handler>:
 80181fc:	2002      	movs	r0, #2
 80181fe:	4770      	bx	lr

08018200 <_cancel_goal_event_handler>:
 8018200:	2003      	movs	r0, #3
 8018202:	4770      	bx	lr

08018204 <_succeed_event_handler>:
 8018204:	2004      	movs	r0, #4
 8018206:	4770      	bx	lr

08018208 <_abort_event_handler>:
 8018208:	2006      	movs	r0, #6
 801820a:	4770      	bx	lr

0801820c <_canceled_event_handler>:
 801820c:	2005      	movs	r0, #5
 801820e:	4770      	bx	lr

08018210 <rcl_action_transition_goal_state>:
 8018210:	b2c2      	uxtb	r2, r0
 8018212:	2a06      	cmp	r2, #6
 8018214:	d810      	bhi.n	8018238 <rcl_action_transition_goal_state+0x28>
 8018216:	2904      	cmp	r1, #4
 8018218:	d80e      	bhi.n	8018238 <rcl_action_transition_goal_state+0x28>
 801821a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801821e:	b410      	push	{r4}
 8018220:	1853      	adds	r3, r2, r1
 8018222:	4c06      	ldr	r4, [pc, #24]	@ (801823c <rcl_action_transition_goal_state+0x2c>)
 8018224:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8018228:	b113      	cbz	r3, 8018230 <rcl_action_transition_goal_state+0x20>
 801822a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801822e:	4718      	bx	r3
 8018230:	2000      	movs	r0, #0
 8018232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018236:	4770      	bx	lr
 8018238:	2000      	movs	r0, #0
 801823a:	4770      	bx	lr
 801823c:	0801d34c 	.word	0x0801d34c

08018240 <rcl_action_get_zero_initialized_cancel_response>:
 8018240:	b510      	push	{r4, lr}
 8018242:	4c07      	ldr	r4, [pc, #28]	@ (8018260 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8018244:	4686      	mov	lr, r0
 8018246:	4684      	mov	ip, r0
 8018248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801824a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801824e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8018250:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018254:	6823      	ldr	r3, [r4, #0]
 8018256:	4670      	mov	r0, lr
 8018258:	f8cc 3000 	str.w	r3, [ip]
 801825c:	bd10      	pop	{r4, pc}
 801825e:	bf00      	nop
 8018260:	0801d3d8 	.word	0x0801d3d8

08018264 <rclc_action_send_result_request>:
 8018264:	b1d0      	cbz	r0, 801829c <rclc_action_send_result_request+0x38>
 8018266:	4684      	mov	ip, r0
 8018268:	f8d0 0009 	ldr.w	r0, [r0, #9]
 801826c:	b500      	push	{lr}
 801826e:	b087      	sub	sp, #28
 8018270:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8018274:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8018278:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801827c:	f10d 0e08 	add.w	lr, sp, #8
 8018280:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8018284:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8018288:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801828c:	a902      	add	r1, sp, #8
 801828e:	3010      	adds	r0, #16
 8018290:	f7ff fbca 	bl	8017a28 <rcl_action_send_result_request>
 8018294:	b920      	cbnz	r0, 80182a0 <rclc_action_send_result_request+0x3c>
 8018296:	b007      	add	sp, #28
 8018298:	f85d fb04 	ldr.w	pc, [sp], #4
 801829c:	200b      	movs	r0, #11
 801829e:	4770      	bx	lr
 80182a0:	9001      	str	r0, [sp, #4]
 80182a2:	f7f7 f951 	bl	800f548 <rcutils_reset_error>
 80182a6:	9801      	ldr	r0, [sp, #4]
 80182a8:	b007      	add	sp, #28
 80182aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80182ae:	bf00      	nop

080182b0 <rclc_action_take_goal_handle>:
 80182b0:	b160      	cbz	r0, 80182cc <rclc_action_take_goal_handle+0x1c>
 80182b2:	6883      	ldr	r3, [r0, #8]
 80182b4:	b143      	cbz	r3, 80182c8 <rclc_action_take_goal_handle+0x18>
 80182b6:	6819      	ldr	r1, [r3, #0]
 80182b8:	2200      	movs	r2, #0
 80182ba:	6081      	str	r1, [r0, #8]
 80182bc:	721a      	strb	r2, [r3, #8]
 80182be:	68c1      	ldr	r1, [r0, #12]
 80182c0:	621a      	str	r2, [r3, #32]
 80182c2:	849a      	strh	r2, [r3, #36]	@ 0x24
 80182c4:	6019      	str	r1, [r3, #0]
 80182c6:	60c3      	str	r3, [r0, #12]
 80182c8:	4618      	mov	r0, r3
 80182ca:	4770      	bx	lr
 80182cc:	4603      	mov	r3, r0
 80182ce:	e7fb      	b.n	80182c8 <rclc_action_take_goal_handle+0x18>

080182d0 <rclc_action_remove_used_goal_handle>:
 80182d0:	b180      	cbz	r0, 80182f4 <rclc_action_remove_used_goal_handle+0x24>
 80182d2:	b179      	cbz	r1, 80182f4 <rclc_action_remove_used_goal_handle+0x24>
 80182d4:	68c3      	ldr	r3, [r0, #12]
 80182d6:	4299      	cmp	r1, r3
 80182d8:	d00d      	beq.n	80182f6 <rclc_action_remove_used_goal_handle+0x26>
 80182da:	b12b      	cbz	r3, 80182e8 <rclc_action_remove_used_goal_handle+0x18>
 80182dc:	681a      	ldr	r2, [r3, #0]
 80182de:	4291      	cmp	r1, r2
 80182e0:	d003      	beq.n	80182ea <rclc_action_remove_used_goal_handle+0x1a>
 80182e2:	4613      	mov	r3, r2
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d1f9      	bne.n	80182dc <rclc_action_remove_used_goal_handle+0xc>
 80182e8:	4770      	bx	lr
 80182ea:	680a      	ldr	r2, [r1, #0]
 80182ec:	601a      	str	r2, [r3, #0]
 80182ee:	6883      	ldr	r3, [r0, #8]
 80182f0:	600b      	str	r3, [r1, #0]
 80182f2:	6081      	str	r1, [r0, #8]
 80182f4:	4770      	bx	lr
 80182f6:	680b      	ldr	r3, [r1, #0]
 80182f8:	60c3      	str	r3, [r0, #12]
 80182fa:	e7f8      	b.n	80182ee <rclc_action_remove_used_goal_handle+0x1e>

080182fc <rclc_action_find_goal_handle_by_uuid>:
 80182fc:	b538      	push	{r3, r4, r5, lr}
 80182fe:	b181      	cbz	r1, 8018322 <rclc_action_find_goal_handle_by_uuid+0x26>
 8018300:	b178      	cbz	r0, 8018322 <rclc_action_find_goal_handle_by_uuid+0x26>
 8018302:	68c4      	ldr	r4, [r0, #12]
 8018304:	460d      	mov	r5, r1
 8018306:	b914      	cbnz	r4, 801830e <rclc_action_find_goal_handle_by_uuid+0x12>
 8018308:	e009      	b.n	801831e <rclc_action_find_goal_handle_by_uuid+0x22>
 801830a:	6824      	ldr	r4, [r4, #0]
 801830c:	b13c      	cbz	r4, 801831e <rclc_action_find_goal_handle_by_uuid+0x22>
 801830e:	f104 0009 	add.w	r0, r4, #9
 8018312:	2210      	movs	r2, #16
 8018314:	4629      	mov	r1, r5
 8018316:	f003 fd19 	bl	801bd4c <memcmp>
 801831a:	2800      	cmp	r0, #0
 801831c:	d1f5      	bne.n	801830a <rclc_action_find_goal_handle_by_uuid+0xe>
 801831e:	4620      	mov	r0, r4
 8018320:	bd38      	pop	{r3, r4, r5, pc}
 8018322:	2400      	movs	r4, #0
 8018324:	4620      	mov	r0, r4
 8018326:	bd38      	pop	{r3, r4, r5, pc}

08018328 <rclc_action_find_first_handle_by_status>:
 8018328:	b140      	cbz	r0, 801833c <rclc_action_find_first_handle_by_status+0x14>
 801832a:	68c0      	ldr	r0, [r0, #12]
 801832c:	b910      	cbnz	r0, 8018334 <rclc_action_find_first_handle_by_status+0xc>
 801832e:	e005      	b.n	801833c <rclc_action_find_first_handle_by_status+0x14>
 8018330:	6800      	ldr	r0, [r0, #0]
 8018332:	b118      	cbz	r0, 801833c <rclc_action_find_first_handle_by_status+0x14>
 8018334:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018338:	428b      	cmp	r3, r1
 801833a:	d1f9      	bne.n	8018330 <rclc_action_find_first_handle_by_status+0x8>
 801833c:	4770      	bx	lr
 801833e:	bf00      	nop

08018340 <rclc_action_find_first_terminated_handle>:
 8018340:	b140      	cbz	r0, 8018354 <rclc_action_find_first_terminated_handle+0x14>
 8018342:	68c0      	ldr	r0, [r0, #12]
 8018344:	b910      	cbnz	r0, 801834c <rclc_action_find_first_terminated_handle+0xc>
 8018346:	e005      	b.n	8018354 <rclc_action_find_first_terminated_handle+0x14>
 8018348:	6800      	ldr	r0, [r0, #0]
 801834a:	b118      	cbz	r0, 8018354 <rclc_action_find_first_terminated_handle+0x14>
 801834c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8018350:	2b03      	cmp	r3, #3
 8018352:	ddf9      	ble.n	8018348 <rclc_action_find_first_terminated_handle+0x8>
 8018354:	4770      	bx	lr
 8018356:	bf00      	nop

08018358 <rclc_action_find_handle_by_goal_request_sequence_number>:
 8018358:	b170      	cbz	r0, 8018378 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801835a:	68c0      	ldr	r0, [r0, #12]
 801835c:	b160      	cbz	r0, 8018378 <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801835e:	b410      	push	{r4}
 8018360:	e001      	b.n	8018366 <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8018362:	6800      	ldr	r0, [r0, #0]
 8018364:	b128      	cbz	r0, 8018372 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 8018366:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801836a:	4299      	cmp	r1, r3
 801836c:	bf08      	it	eq
 801836e:	4294      	cmpeq	r4, r2
 8018370:	d1f7      	bne.n	8018362 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8018372:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018376:	4770      	bx	lr
 8018378:	4770      	bx	lr
 801837a:	bf00      	nop

0801837c <rclc_action_find_handle_by_result_request_sequence_number>:
 801837c:	b170      	cbz	r0, 801839c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 801837e:	68c0      	ldr	r0, [r0, #12]
 8018380:	b160      	cbz	r0, 801839c <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8018382:	b410      	push	{r4}
 8018384:	e001      	b.n	801838a <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 8018386:	6800      	ldr	r0, [r0, #0]
 8018388:	b128      	cbz	r0, 8018396 <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801838a:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 801838e:	4299      	cmp	r1, r3
 8018390:	bf08      	it	eq
 8018392:	4294      	cmpeq	r4, r2
 8018394:	d1f7      	bne.n	8018386 <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 8018396:	f85d 4b04 	ldr.w	r4, [sp], #4
 801839a:	4770      	bx	lr
 801839c:	4770      	bx	lr
 801839e:	bf00      	nop

080183a0 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 80183a0:	b170      	cbz	r0, 80183c0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80183a2:	68c0      	ldr	r0, [r0, #12]
 80183a4:	b160      	cbz	r0, 80183c0 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 80183a6:	b410      	push	{r4}
 80183a8:	e001      	b.n	80183ae <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 80183aa:	6800      	ldr	r0, [r0, #0]
 80183ac:	b128      	cbz	r0, 80183ba <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80183ae:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80183b2:	4299      	cmp	r1, r3
 80183b4:	bf08      	it	eq
 80183b6:	4294      	cmpeq	r4, r2
 80183b8:	d1f7      	bne.n	80183aa <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80183ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80183be:	4770      	bx	lr
 80183c0:	4770      	bx	lr
 80183c2:	bf00      	nop

080183c4 <rclc_action_find_first_handle_with_goal_response>:
 80183c4:	b140      	cbz	r0, 80183d8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80183c6:	68c0      	ldr	r0, [r0, #12]
 80183c8:	b910      	cbnz	r0, 80183d0 <rclc_action_find_first_handle_with_goal_response+0xc>
 80183ca:	e005      	b.n	80183d8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80183cc:	6800      	ldr	r0, [r0, #0]
 80183ce:	b118      	cbz	r0, 80183d8 <rclc_action_find_first_handle_with_goal_response+0x14>
 80183d0:	f890 3020 	ldrb.w	r3, [r0, #32]
 80183d4:	2b00      	cmp	r3, #0
 80183d6:	d0f9      	beq.n	80183cc <rclc_action_find_first_handle_with_goal_response+0x8>
 80183d8:	4770      	bx	lr
 80183da:	bf00      	nop

080183dc <rclc_action_find_first_handle_with_result_response>:
 80183dc:	b140      	cbz	r0, 80183f0 <rclc_action_find_first_handle_with_result_response+0x14>
 80183de:	68c0      	ldr	r0, [r0, #12]
 80183e0:	b910      	cbnz	r0, 80183e8 <rclc_action_find_first_handle_with_result_response+0xc>
 80183e2:	e005      	b.n	80183f0 <rclc_action_find_first_handle_with_result_response+0x14>
 80183e4:	6800      	ldr	r0, [r0, #0]
 80183e6:	b118      	cbz	r0, 80183f0 <rclc_action_find_first_handle_with_result_response+0x14>
 80183e8:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d0f9      	beq.n	80183e4 <rclc_action_find_first_handle_with_result_response+0x8>
 80183f0:	4770      	bx	lr
 80183f2:	bf00      	nop

080183f4 <rclc_action_server_response_goal_request>:
 80183f4:	b198      	cbz	r0, 801841e <rclc_action_server_response_goal_request+0x2a>
 80183f6:	2200      	movs	r2, #0
 80183f8:	460b      	mov	r3, r1
 80183fa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80183fe:	b510      	push	{r4, lr}
 8018400:	6844      	ldr	r4, [r0, #4]
 8018402:	b086      	sub	sp, #24
 8018404:	f104 0010 	add.w	r0, r4, #16
 8018408:	9205      	str	r2, [sp, #20]
 801840a:	e9cd 2203 	strd	r2, r2, [sp, #12]
 801840e:	aa03      	add	r2, sp, #12
 8018410:	f88d 300c 	strb.w	r3, [sp, #12]
 8018414:	f7ff fd3e 	bl	8017e94 <rcl_action_send_goal_response>
 8018418:	b918      	cbnz	r0, 8018422 <rclc_action_server_response_goal_request+0x2e>
 801841a:	b006      	add	sp, #24
 801841c:	bd10      	pop	{r4, pc}
 801841e:	200b      	movs	r0, #11
 8018420:	4770      	bx	lr
 8018422:	9001      	str	r0, [sp, #4]
 8018424:	f7f7 f890 	bl	800f548 <rcutils_reset_error>
 8018428:	9801      	ldr	r0, [sp, #4]
 801842a:	b006      	add	sp, #24
 801842c:	bd10      	pop	{r4, pc}
 801842e:	bf00      	nop

08018430 <rclc_action_server_goal_cancel_accept>:
 8018430:	b310      	cbz	r0, 8018478 <rclc_action_server_goal_cancel_accept+0x48>
 8018432:	b510      	push	{r4, lr}
 8018434:	b090      	sub	sp, #64	@ 0x40
 8018436:	4604      	mov	r4, r0
 8018438:	a806      	add	r0, sp, #24
 801843a:	f7ff ff01 	bl	8018240 <rcl_action_get_zero_initialized_cancel_response>
 801843e:	2300      	movs	r3, #0
 8018440:	f8d4 0009 	ldr.w	r0, [r4, #9]
 8018444:	46ec      	mov	ip, sp
 8018446:	f8d4 100d 	ldr.w	r1, [r4, #13]
 801844a:	f8d4 2011 	ldr.w	r2, [r4, #17]
 801844e:	f88d 3018 	strb.w	r3, [sp, #24]
 8018452:	f8d4 3015 	ldr.w	r3, [r4, #21]
 8018456:	f8cd d01c 	str.w	sp, [sp, #28]
 801845a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801845e:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8018480 <rclc_action_server_goal_cancel_accept+0x50>
 8018462:	6860      	ldr	r0, [r4, #4]
 8018464:	aa06      	add	r2, sp, #24
 8018466:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 801846a:	3010      	adds	r0, #16
 801846c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8018470:	f7ff fdc8 	bl	8018004 <rcl_action_send_cancel_response>
 8018474:	b010      	add	sp, #64	@ 0x40
 8018476:	bd10      	pop	{r4, pc}
 8018478:	200b      	movs	r0, #11
 801847a:	4770      	bx	lr
 801847c:	f3af 8000 	nop.w
 8018480:	00000001 	.word	0x00000001
 8018484:	00000001 	.word	0x00000001

08018488 <rclc_action_server_goal_cancel_reject>:
 8018488:	b082      	sub	sp, #8
 801848a:	b530      	push	{r4, r5, lr}
 801848c:	b08b      	sub	sp, #44	@ 0x2c
 801848e:	ac0e      	add	r4, sp, #56	@ 0x38
 8018490:	e884 000c 	stmia.w	r4, {r2, r3}
 8018494:	b188      	cbz	r0, 80184ba <rclc_action_server_goal_cancel_reject+0x32>
 8018496:	4604      	mov	r4, r0
 8018498:	a801      	add	r0, sp, #4
 801849a:	460d      	mov	r5, r1
 801849c:	f7ff fed0 	bl	8018240 <rcl_action_get_zero_initialized_cancel_response>
 80184a0:	aa01      	add	r2, sp, #4
 80184a2:	a90e      	add	r1, sp, #56	@ 0x38
 80184a4:	f104 0010 	add.w	r0, r4, #16
 80184a8:	f88d 5004 	strb.w	r5, [sp, #4]
 80184ac:	f7ff fdaa 	bl	8018004 <rcl_action_send_cancel_response>
 80184b0:	b00b      	add	sp, #44	@ 0x2c
 80184b2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184b6:	b002      	add	sp, #8
 80184b8:	4770      	bx	lr
 80184ba:	200b      	movs	r0, #11
 80184bc:	b00b      	add	sp, #44	@ 0x2c
 80184be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80184c2:	b002      	add	sp, #8
 80184c4:	4770      	bx	lr
 80184c6:	bf00      	nop

080184c8 <__atomic_load_8>:
 80184c8:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80184cc:	4a16      	ldr	r2, [pc, #88]	@ (8018528 <__atomic_load_8+0x60>)
 80184ce:	4b17      	ldr	r3, [pc, #92]	@ (801852c <__atomic_load_8+0x64>)
 80184d0:	f04f 0c01 	mov.w	ip, #1
 80184d4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80184d8:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80184dc:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80184e0:	fb02 f101 	mul.w	r1, r2, r1
 80184e4:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80184e8:	fba3 2301 	umull	r2, r3, r3, r1
 80184ec:	091b      	lsrs	r3, r3, #4
 80184ee:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80184f2:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80184f6:	b4d0      	push	{r4, r6, r7}
 80184f8:	1ac9      	subs	r1, r1, r3
 80184fa:	4c0d      	ldr	r4, [pc, #52]	@ (8018530 <__atomic_load_8+0x68>)
 80184fc:	1862      	adds	r2, r4, r1
 80184fe:	e8d2 3f4f 	ldrexb	r3, [r2]
 8018502:	e8c2 cf46 	strexb	r6, ip, [r2]
 8018506:	2e00      	cmp	r6, #0
 8018508:	d1f9      	bne.n	80184fe <__atomic_load_8+0x36>
 801850a:	b2db      	uxtb	r3, r3
 801850c:	f3bf 8f5b 	dmb	ish
 8018510:	2b00      	cmp	r3, #0
 8018512:	d1f4      	bne.n	80184fe <__atomic_load_8+0x36>
 8018514:	e9d0 6700 	ldrd	r6, r7, [r0]
 8018518:	f3bf 8f5b 	dmb	ish
 801851c:	5463      	strb	r3, [r4, r1]
 801851e:	4630      	mov	r0, r6
 8018520:	4639      	mov	r1, r7
 8018522:	bcd0      	pop	{r4, r6, r7}
 8018524:	4770      	bx	lr
 8018526:	bf00      	nop
 8018528:	27d4eb2d 	.word	0x27d4eb2d
 801852c:	b21642c9 	.word	0xb21642c9
 8018530:	24012f7c 	.word	0x24012f7c

08018534 <__atomic_store_8>:
 8018534:	b570      	push	{r4, r5, r6, lr}
 8018536:	ea80 4e10 	eor.w	lr, r0, r0, lsr #16
 801853a:	4916      	ldr	r1, [pc, #88]	@ (8018594 <__atomic_store_8+0x60>)
 801853c:	4c16      	ldr	r4, [pc, #88]	@ (8018598 <__atomic_store_8+0x64>)
 801853e:	f08e 0e3d 	eor.w	lr, lr, #61	@ 0x3d
 8018542:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
 8018546:	ea8e 1e1e 	eor.w	lr, lr, lr, lsr #4
 801854a:	fb01 fe0e 	mul.w	lr, r1, lr
 801854e:	4913      	ldr	r1, [pc, #76]	@ (801859c <__atomic_store_8+0x68>)
 8018550:	ea8e 3ede 	eor.w	lr, lr, lr, lsr #15
 8018554:	fba1 510e 	umull	r5, r1, r1, lr
 8018558:	f04f 0501 	mov.w	r5, #1
 801855c:	0909      	lsrs	r1, r1, #4
 801855e:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8018562:	ebc1 01cc 	rsb	r1, r1, ip, lsl #3
 8018566:	ebae 0e01 	sub.w	lr, lr, r1
 801856a:	eb04 0c0e 	add.w	ip, r4, lr
 801856e:	e8dc 1f4f 	ldrexb	r1, [ip]
 8018572:	e8cc 5f46 	strexb	r6, r5, [ip]
 8018576:	2e00      	cmp	r6, #0
 8018578:	d1f9      	bne.n	801856e <__atomic_store_8+0x3a>
 801857a:	b2c9      	uxtb	r1, r1
 801857c:	f3bf 8f5b 	dmb	ish
 8018580:	2900      	cmp	r1, #0
 8018582:	d1f4      	bne.n	801856e <__atomic_store_8+0x3a>
 8018584:	e9c0 2300 	strd	r2, r3, [r0]
 8018588:	f3bf 8f5b 	dmb	ish
 801858c:	f804 100e 	strb.w	r1, [r4, lr]
 8018590:	bd70      	pop	{r4, r5, r6, pc}
 8018592:	bf00      	nop
 8018594:	27d4eb2d 	.word	0x27d4eb2d
 8018598:	24012f7c 	.word	0x24012f7c
 801859c:	b21642c9 	.word	0xb21642c9

080185a0 <__atomic_exchange_8>:
 80185a0:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 80185a4:	4917      	ldr	r1, [pc, #92]	@ (8018604 <__atomic_exchange_8+0x64>)
 80185a6:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 80185aa:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 80185ae:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 80185b2:	fb01 fc0c 	mul.w	ip, r1, ip
 80185b6:	4914      	ldr	r1, [pc, #80]	@ (8018608 <__atomic_exchange_8+0x68>)
 80185b8:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 80185bc:	b570      	push	{r4, r5, r6, lr}
 80185be:	4686      	mov	lr, r0
 80185c0:	fba1 010c 	umull	r0, r1, r1, ip
 80185c4:	4d11      	ldr	r5, [pc, #68]	@ (801860c <__atomic_exchange_8+0x6c>)
 80185c6:	f04f 0001 	mov.w	r0, #1
 80185ca:	0909      	lsrs	r1, r1, #4
 80185cc:	eb01 0441 	add.w	r4, r1, r1, lsl #1
 80185d0:	ebc1 01c4 	rsb	r1, r1, r4, lsl #3
 80185d4:	ebac 0c01 	sub.w	ip, ip, r1
 80185d8:	eb05 010c 	add.w	r1, r5, ip
 80185dc:	e8d1 4f4f 	ldrexb	r4, [r1]
 80185e0:	e8c1 0f46 	strexb	r6, r0, [r1]
 80185e4:	2e00      	cmp	r6, #0
 80185e6:	d1f9      	bne.n	80185dc <__atomic_exchange_8+0x3c>
 80185e8:	b2e4      	uxtb	r4, r4
 80185ea:	f3bf 8f5b 	dmb	ish
 80185ee:	2c00      	cmp	r4, #0
 80185f0:	d1f4      	bne.n	80185dc <__atomic_exchange_8+0x3c>
 80185f2:	e9de 0100 	ldrd	r0, r1, [lr]
 80185f6:	e9ce 2300 	strd	r2, r3, [lr]
 80185fa:	f3bf 8f5b 	dmb	ish
 80185fe:	f805 400c 	strb.w	r4, [r5, ip]
 8018602:	bd70      	pop	{r4, r5, r6, pc}
 8018604:	27d4eb2d 	.word	0x27d4eb2d
 8018608:	b21642c9 	.word	0xb21642c9
 801860c:	24012f7c 	.word	0x24012f7c

08018610 <rcutils_get_env>:
 8018610:	b168      	cbz	r0, 801862e <rcutils_get_env+0x1e>
 8018612:	b510      	push	{r4, lr}
 8018614:	460c      	mov	r4, r1
 8018616:	b129      	cbz	r1, 8018624 <rcutils_get_env+0x14>
 8018618:	f002 ff06 	bl	801b428 <getenv>
 801861c:	b120      	cbz	r0, 8018628 <rcutils_get_env+0x18>
 801861e:	6020      	str	r0, [r4, #0]
 8018620:	2000      	movs	r0, #0
 8018622:	bd10      	pop	{r4, pc}
 8018624:	4803      	ldr	r0, [pc, #12]	@ (8018634 <rcutils_get_env+0x24>)
 8018626:	bd10      	pop	{r4, pc}
 8018628:	4b03      	ldr	r3, [pc, #12]	@ (8018638 <rcutils_get_env+0x28>)
 801862a:	6023      	str	r3, [r4, #0]
 801862c:	bd10      	pop	{r4, pc}
 801862e:	4803      	ldr	r0, [pc, #12]	@ (801863c <rcutils_get_env+0x2c>)
 8018630:	4770      	bx	lr
 8018632:	bf00      	nop
 8018634:	0801d418 	.word	0x0801d418
 8018638:	0801d850 	.word	0x0801d850
 801863c:	0801d3fc 	.word	0x0801d3fc

08018640 <rcutils_is_directory>:
 8018640:	2000      	movs	r0, #0
 8018642:	4770      	bx	lr

08018644 <rcutils_join_path>:
 8018644:	b082      	sub	sp, #8
 8018646:	2000      	movs	r0, #0
 8018648:	e88d 000c 	stmia.w	sp, {r2, r3}
 801864c:	b002      	add	sp, #8
 801864e:	4770      	bx	lr

08018650 <rcutils_to_native_path>:
 8018650:	b084      	sub	sp, #16
 8018652:	2000      	movs	r0, #0
 8018654:	f10d 0c04 	add.w	ip, sp, #4
 8018658:	b004      	add	sp, #16
 801865a:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
 801865e:	4770      	bx	lr

08018660 <rcutils_format_string_limit>:
 8018660:	b40f      	push	{r0, r1, r2, r3}
 8018662:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018664:	b083      	sub	sp, #12
 8018666:	ac08      	add	r4, sp, #32
 8018668:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 801866a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801866e:	b326      	cbz	r6, 80186ba <rcutils_format_string_limit+0x5a>
 8018670:	a808      	add	r0, sp, #32
 8018672:	f7f6 ff45 	bl	800f500 <rcutils_allocator_is_valid>
 8018676:	b300      	cbz	r0, 80186ba <rcutils_format_string_limit+0x5a>
 8018678:	2100      	movs	r1, #0
 801867a:	ab0f      	add	r3, sp, #60	@ 0x3c
 801867c:	4632      	mov	r2, r6
 801867e:	4608      	mov	r0, r1
 8018680:	e9cd 3300 	strd	r3, r3, [sp]
 8018684:	f000 f906 	bl	8018894 <rcutils_vsnprintf>
 8018688:	1c43      	adds	r3, r0, #1
 801868a:	4605      	mov	r5, r0
 801868c:	d015      	beq.n	80186ba <rcutils_format_string_limit+0x5a>
 801868e:	1c47      	adds	r7, r0, #1
 8018690:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018692:	429f      	cmp	r7, r3
 8018694:	d901      	bls.n	801869a <rcutils_format_string_limit+0x3a>
 8018696:	1e5d      	subs	r5, r3, #1
 8018698:	461f      	mov	r7, r3
 801869a:	9b08      	ldr	r3, [sp, #32]
 801869c:	4638      	mov	r0, r7
 801869e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80186a0:	4798      	blx	r3
 80186a2:	4604      	mov	r4, r0
 80186a4:	b148      	cbz	r0, 80186ba <rcutils_format_string_limit+0x5a>
 80186a6:	4632      	mov	r2, r6
 80186a8:	4639      	mov	r1, r7
 80186aa:	9b01      	ldr	r3, [sp, #4]
 80186ac:	f000 f8f2 	bl	8018894 <rcutils_vsnprintf>
 80186b0:	2800      	cmp	r0, #0
 80186b2:	db09      	blt.n	80186c8 <rcutils_format_string_limit+0x68>
 80186b4:	2300      	movs	r3, #0
 80186b6:	5563      	strb	r3, [r4, r5]
 80186b8:	e000      	b.n	80186bc <rcutils_format_string_limit+0x5c>
 80186ba:	2400      	movs	r4, #0
 80186bc:	4620      	mov	r0, r4
 80186be:	b003      	add	sp, #12
 80186c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80186c4:	b004      	add	sp, #16
 80186c6:	4770      	bx	lr
 80186c8:	4620      	mov	r0, r4
 80186ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80186cc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80186ce:	2400      	movs	r4, #0
 80186d0:	4798      	blx	r3
 80186d2:	e7f3      	b.n	80186bc <rcutils_format_string_limit+0x5c>

080186d4 <rcutils_repl_str>:
 80186d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186d8:	ed2d 8b02 	vpush	{d8}
 80186dc:	b087      	sub	sp, #28
 80186de:	2600      	movs	r6, #0
 80186e0:	4680      	mov	r8, r0
 80186e2:	468a      	mov	sl, r1
 80186e4:	9000      	str	r0, [sp, #0]
 80186e6:	4608      	mov	r0, r1
 80186e8:	ee08 2a10 	vmov	s16, r2
 80186ec:	4699      	mov	r9, r3
 80186ee:	2510      	movs	r5, #16
 80186f0:	f7e7 fe00 	bl	80002f4 <strlen>
 80186f4:	4637      	mov	r7, r6
 80186f6:	46b3      	mov	fp, r6
 80186f8:	9001      	str	r0, [sp, #4]
 80186fa:	e01e      	b.n	801873a <rcutils_repl_str+0x66>
 80186fc:	f10b 0b01 	add.w	fp, fp, #1
 8018700:	9b01      	ldr	r3, [sp, #4]
 8018702:	455e      	cmp	r6, fp
 8018704:	eb04 0803 	add.w	r8, r4, r3
 8018708:	d211      	bcs.n	801872e <rcutils_repl_str+0x5a>
 801870a:	442e      	add	r6, r5
 801870c:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8018710:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8018714:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018718:	00b1      	lsls	r1, r6, #2
 801871a:	4798      	blx	r3
 801871c:	2800      	cmp	r0, #0
 801871e:	f000 8088 	beq.w	8018832 <rcutils_repl_str+0x15e>
 8018722:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8018726:	4607      	mov	r7, r0
 8018728:	bf28      	it	cs
 801872a:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 801872e:	9a00      	ldr	r2, [sp, #0]
 8018730:	eb07 038b 	add.w	r3, r7, fp, lsl #2
 8018734:	1aa4      	subs	r4, r4, r2
 8018736:	f843 4c04 	str.w	r4, [r3, #-4]
 801873a:	4651      	mov	r1, sl
 801873c:	4640      	mov	r0, r8
 801873e:	f003 fb56 	bl	801bdee <strstr>
 8018742:	4604      	mov	r4, r0
 8018744:	4638      	mov	r0, r7
 8018746:	2c00      	cmp	r4, #0
 8018748:	d1d8      	bne.n	80186fc <rcutils_repl_str+0x28>
 801874a:	4640      	mov	r0, r8
 801874c:	f7e7 fdd2 	bl	80002f4 <strlen>
 8018750:	9b00      	ldr	r3, [sp, #0]
 8018752:	eba8 0803 	sub.w	r8, r8, r3
 8018756:	eb08 0400 	add.w	r4, r8, r0
 801875a:	9402      	str	r4, [sp, #8]
 801875c:	f1bb 0f00 	cmp.w	fp, #0
 8018760:	d045      	beq.n	80187ee <rcutils_repl_str+0x11a>
 8018762:	ee18 0a10 	vmov	r0, s16
 8018766:	f7e7 fdc5 	bl	80002f4 <strlen>
 801876a:	9a01      	ldr	r2, [sp, #4]
 801876c:	4606      	mov	r6, r0
 801876e:	f8d9 3000 	ldr.w	r3, [r9]
 8018772:	1a82      	subs	r2, r0, r2
 8018774:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018778:	fb0b 4202 	mla	r2, fp, r2, r4
 801877c:	1c50      	adds	r0, r2, #1
 801877e:	9205      	str	r2, [sp, #20]
 8018780:	4798      	blx	r3
 8018782:	4682      	mov	sl, r0
 8018784:	2800      	cmp	r0, #0
 8018786:	d054      	beq.n	8018832 <rcutils_repl_str+0x15e>
 8018788:	683a      	ldr	r2, [r7, #0]
 801878a:	463d      	mov	r5, r7
 801878c:	9900      	ldr	r1, [sp, #0]
 801878e:	2401      	movs	r4, #1
 8018790:	f003 fbcf 	bl	801bf32 <memcpy>
 8018794:	683b      	ldr	r3, [r7, #0]
 8018796:	e9cd 7a03 	strd	r7, sl, [sp, #12]
 801879a:	eb0a 0803 	add.w	r8, sl, r3
 801879e:	ee18 7a10 	vmov	r7, s16
 80187a2:	f8dd a000 	ldr.w	sl, [sp]
 80187a6:	f8cd 9000 	str.w	r9, [sp]
 80187aa:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80187ae:	4632      	mov	r2, r6
 80187b0:	4639      	mov	r1, r7
 80187b2:	4640      	mov	r0, r8
 80187b4:	44b0      	add	r8, r6
 80187b6:	f003 fbbc 	bl	801bf32 <memcpy>
 80187ba:	f855 2b04 	ldr.w	r2, [r5], #4
 80187be:	45a3      	cmp	fp, r4
 80187c0:	444a      	add	r2, r9
 80187c2:	eb0a 0102 	add.w	r1, sl, r2
 80187c6:	d02a      	beq.n	801881e <rcutils_repl_str+0x14a>
 80187c8:	6828      	ldr	r0, [r5, #0]
 80187ca:	1a82      	subs	r2, r0, r2
 80187cc:	4640      	mov	r0, r8
 80187ce:	4490      	add	r8, r2
 80187d0:	f003 fbaf 	bl	801bf32 <memcpy>
 80187d4:	1c62      	adds	r2, r4, #1
 80187d6:	45a3      	cmp	fp, r4
 80187d8:	4614      	mov	r4, r2
 80187da:	d8e8      	bhi.n	80187ae <rcutils_repl_str+0xda>
 80187dc:	f8dd 9000 	ldr.w	r9, [sp]
 80187e0:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 80187e4:	2300      	movs	r3, #0
 80187e6:	9a05      	ldr	r2, [sp, #20]
 80187e8:	f80a 3002 	strb.w	r3, [sl, r2]
 80187ec:	e00b      	b.n	8018806 <rcutils_repl_str+0x132>
 80187ee:	4620      	mov	r0, r4
 80187f0:	f8d9 3000 	ldr.w	r3, [r9]
 80187f4:	f8d9 1010 	ldr.w	r1, [r9, #16]
 80187f8:	3001      	adds	r0, #1
 80187fa:	4798      	blx	r3
 80187fc:	4682      	mov	sl, r0
 80187fe:	b110      	cbz	r0, 8018806 <rcutils_repl_str+0x132>
 8018800:	9900      	ldr	r1, [sp, #0]
 8018802:	f003 fb8e 	bl	801bf22 <strcpy>
 8018806:	4638      	mov	r0, r7
 8018808:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801880c:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8018810:	4798      	blx	r3
 8018812:	4650      	mov	r0, sl
 8018814:	b007      	add	sp, #28
 8018816:	ecbd 8b02 	vpop	{d8}
 801881a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801881e:	9b02      	ldr	r3, [sp, #8]
 8018820:	4640      	mov	r0, r8
 8018822:	f8dd 9000 	ldr.w	r9, [sp]
 8018826:	1a9a      	subs	r2, r3, r2
 8018828:	e9dd 7a03 	ldrd	r7, sl, [sp, #12]
 801882c:	f003 fb81 	bl	801bf32 <memcpy>
 8018830:	e7d8      	b.n	80187e4 <rcutils_repl_str+0x110>
 8018832:	f04f 0a00 	mov.w	sl, #0
 8018836:	e7e6      	b.n	8018806 <rcutils_repl_str+0x132>

08018838 <rcutils_snprintf>:
 8018838:	b40c      	push	{r2, r3}
 801883a:	b530      	push	{r4, r5, lr}
 801883c:	b083      	sub	sp, #12
 801883e:	ab06      	add	r3, sp, #24
 8018840:	f853 2b04 	ldr.w	r2, [r3], #4
 8018844:	9301      	str	r3, [sp, #4]
 8018846:	b1e2      	cbz	r2, 8018882 <rcutils_snprintf+0x4a>
 8018848:	fab0 f480 	clz	r4, r0
 801884c:	fab1 f581 	clz	r5, r1
 8018850:	ea50 0c01 	orrs.w	ip, r0, r1
 8018854:	ea4f 1454 	mov.w	r4, r4, lsr #5
 8018858:	ea4f 1555 	mov.w	r5, r5, lsr #5
 801885c:	d008      	beq.n	8018870 <rcutils_snprintf+0x38>
 801885e:	b984      	cbnz	r4, 8018882 <rcutils_snprintf+0x4a>
 8018860:	b97d      	cbnz	r5, 8018882 <rcutils_snprintf+0x4a>
 8018862:	f003 f9d1 	bl	801bc08 <vsniprintf>
 8018866:	b003      	add	sp, #12
 8018868:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801886c:	b002      	add	sp, #8
 801886e:	4770      	bx	lr
 8018870:	4661      	mov	r1, ip
 8018872:	4660      	mov	r0, ip
 8018874:	f003 f9c8 	bl	801bc08 <vsniprintf>
 8018878:	b003      	add	sp, #12
 801887a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801887e:	b002      	add	sp, #8
 8018880:	4770      	bx	lr
 8018882:	f003 fb21 	bl	801bec8 <__errno>
 8018886:	2216      	movs	r2, #22
 8018888:	4603      	mov	r3, r0
 801888a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801888e:	601a      	str	r2, [r3, #0]
 8018890:	e7e9      	b.n	8018866 <rcutils_snprintf+0x2e>
 8018892:	bf00      	nop

08018894 <rcutils_vsnprintf>:
 8018894:	b570      	push	{r4, r5, r6, lr}
 8018896:	b1b2      	cbz	r2, 80188c6 <rcutils_vsnprintf+0x32>
 8018898:	fab0 f480 	clz	r4, r0
 801889c:	fab1 f581 	clz	r5, r1
 80188a0:	ea50 0c01 	orrs.w	ip, r0, r1
 80188a4:	ea4f 1454 	mov.w	r4, r4, lsr #5
 80188a8:	ea4f 1555 	mov.w	r5, r5, lsr #5
 80188ac:	d005      	beq.n	80188ba <rcutils_vsnprintf+0x26>
 80188ae:	b954      	cbnz	r4, 80188c6 <rcutils_vsnprintf+0x32>
 80188b0:	b94d      	cbnz	r5, 80188c6 <rcutils_vsnprintf+0x32>
 80188b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80188b6:	f003 b9a7 	b.w	801bc08 <vsniprintf>
 80188ba:	4661      	mov	r1, ip
 80188bc:	4660      	mov	r0, ip
 80188be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80188c2:	f003 b9a1 	b.w	801bc08 <vsniprintf>
 80188c6:	f003 faff 	bl	801bec8 <__errno>
 80188ca:	2316      	movs	r3, #22
 80188cc:	6003      	str	r3, [r0, #0]
 80188ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80188d2:	bd70      	pop	{r4, r5, r6, pc}

080188d4 <rcutils_strdup>:
 80188d4:	b084      	sub	sp, #16
 80188d6:	b570      	push	{r4, r5, r6, lr}
 80188d8:	b082      	sub	sp, #8
 80188da:	4605      	mov	r5, r0
 80188dc:	ac07      	add	r4, sp, #28
 80188de:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 80188e2:	b1b0      	cbz	r0, 8018912 <rcutils_strdup+0x3e>
 80188e4:	f7e7 fd06 	bl	80002f4 <strlen>
 80188e8:	1c42      	adds	r2, r0, #1
 80188ea:	9b07      	ldr	r3, [sp, #28]
 80188ec:	4606      	mov	r6, r0
 80188ee:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80188f0:	4610      	mov	r0, r2
 80188f2:	9201      	str	r2, [sp, #4]
 80188f4:	4798      	blx	r3
 80188f6:	4604      	mov	r4, r0
 80188f8:	b128      	cbz	r0, 8018906 <rcutils_strdup+0x32>
 80188fa:	9a01      	ldr	r2, [sp, #4]
 80188fc:	4629      	mov	r1, r5
 80188fe:	f003 fb18 	bl	801bf32 <memcpy>
 8018902:	2300      	movs	r3, #0
 8018904:	55a3      	strb	r3, [r4, r6]
 8018906:	4620      	mov	r0, r4
 8018908:	b002      	add	sp, #8
 801890a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801890e:	b004      	add	sp, #16
 8018910:	4770      	bx	lr
 8018912:	4604      	mov	r4, r0
 8018914:	e7f7      	b.n	8018906 <rcutils_strdup+0x32>
 8018916:	bf00      	nop

08018918 <rcutils_strndup>:
 8018918:	b082      	sub	sp, #8
 801891a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801891c:	ac06      	add	r4, sp, #24
 801891e:	4605      	mov	r5, r0
 8018920:	e884 000c 	stmia.w	r4, {r2, r3}
 8018924:	b188      	cbz	r0, 801894a <rcutils_strndup+0x32>
 8018926:	1c4f      	adds	r7, r1, #1
 8018928:	460e      	mov	r6, r1
 801892a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801892c:	4638      	mov	r0, r7
 801892e:	4790      	blx	r2
 8018930:	4604      	mov	r4, r0
 8018932:	b128      	cbz	r0, 8018940 <rcutils_strndup+0x28>
 8018934:	463a      	mov	r2, r7
 8018936:	4629      	mov	r1, r5
 8018938:	f003 fafb 	bl	801bf32 <memcpy>
 801893c:	2300      	movs	r3, #0
 801893e:	55a3      	strb	r3, [r4, r6]
 8018940:	4620      	mov	r0, r4
 8018942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018946:	b002      	add	sp, #8
 8018948:	4770      	bx	lr
 801894a:	4604      	mov	r4, r0
 801894c:	e7f8      	b.n	8018940 <rcutils_strndup+0x28>
 801894e:	bf00      	nop

08018950 <rcutils_get_zero_initialized_string_map>:
 8018950:	2000      	movs	r0, #0
 8018952:	4b01      	ldr	r3, [pc, #4]	@ (8018958 <rcutils_get_zero_initialized_string_map+0x8>)
 8018954:	6018      	str	r0, [r3, #0]
 8018956:	4770      	bx	lr
 8018958:	24012f94 	.word	0x24012f94

0801895c <rcutils_string_map_reserve>:
 801895c:	2800      	cmp	r0, #0
 801895e:	d05e      	beq.n	8018a1e <rcutils_string_map_reserve+0xc2>
 8018960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018964:	460c      	mov	r4, r1
 8018966:	6801      	ldr	r1, [r0, #0]
 8018968:	b082      	sub	sp, #8
 801896a:	4605      	mov	r5, r0
 801896c:	b129      	cbz	r1, 801897a <rcutils_string_map_reserve+0x1e>
 801896e:	68cb      	ldr	r3, [r1, #12]
 8018970:	42a3      	cmp	r3, r4
 8018972:	d906      	bls.n	8018982 <rcutils_string_map_reserve+0x26>
 8018974:	461c      	mov	r4, r3
 8018976:	2900      	cmp	r1, #0
 8018978:	d1f9      	bne.n	801896e <rcutils_string_map_reserve+0x12>
 801897a:	201f      	movs	r0, #31
 801897c:	b002      	add	sp, #8
 801897e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018982:	688b      	ldr	r3, [r1, #8]
 8018984:	42a3      	cmp	r3, r4
 8018986:	d046      	beq.n	8018a16 <rcutils_string_map_reserve+0xba>
 8018988:	6a0e      	ldr	r6, [r1, #32]
 801898a:	2c00      	cmp	r4, #0
 801898c:	d033      	beq.n	80189f6 <rcutils_string_map_reserve+0x9a>
 801898e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018992:	d242      	bcs.n	8018a1a <rcutils_string_map_reserve+0xbe>
 8018994:	00a7      	lsls	r7, r4, #2
 8018996:	f8d1 8018 	ldr.w	r8, [r1, #24]
 801899a:	6808      	ldr	r0, [r1, #0]
 801899c:	4632      	mov	r2, r6
 801899e:	4639      	mov	r1, r7
 80189a0:	47c0      	blx	r8
 80189a2:	2800      	cmp	r0, #0
 80189a4:	d039      	beq.n	8018a1a <rcutils_string_map_reserve+0xbe>
 80189a6:	682b      	ldr	r3, [r5, #0]
 80189a8:	4632      	mov	r2, r6
 80189aa:	4639      	mov	r1, r7
 80189ac:	6018      	str	r0, [r3, #0]
 80189ae:	6858      	ldr	r0, [r3, #4]
 80189b0:	47c0      	blx	r8
 80189b2:	2800      	cmp	r0, #0
 80189b4:	d031      	beq.n	8018a1a <rcutils_string_map_reserve+0xbe>
 80189b6:	682d      	ldr	r5, [r5, #0]
 80189b8:	68ab      	ldr	r3, [r5, #8]
 80189ba:	6068      	str	r0, [r5, #4]
 80189bc:	42a3      	cmp	r3, r4
 80189be:	d225      	bcs.n	8018a0c <rcutils_string_map_reserve+0xb0>
 80189c0:	682a      	ldr	r2, [r5, #0]
 80189c2:	eb00 0c07 	add.w	ip, r0, r7
 80189c6:	0099      	lsls	r1, r3, #2
 80189c8:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 80189cc:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 80189d0:	45e6      	cmp	lr, ip
 80189d2:	d203      	bcs.n	80189dc <rcutils_string_map_reserve+0x80>
 80189d4:	eb02 0c07 	add.w	ip, r2, r7
 80189d8:	4566      	cmp	r6, ip
 80189da:	d322      	bcc.n	8018a22 <rcutils_string_map_reserve+0xc6>
 80189dc:	1ae3      	subs	r3, r4, r3
 80189de:	4670      	mov	r0, lr
 80189e0:	2100      	movs	r1, #0
 80189e2:	009a      	lsls	r2, r3, #2
 80189e4:	9201      	str	r2, [sp, #4]
 80189e6:	f003 f9db 	bl	801bda0 <memset>
 80189ea:	9a01      	ldr	r2, [sp, #4]
 80189ec:	2100      	movs	r1, #0
 80189ee:	4630      	mov	r0, r6
 80189f0:	f003 f9d6 	bl	801bda0 <memset>
 80189f4:	e00a      	b.n	8018a0c <rcutils_string_map_reserve+0xb0>
 80189f6:	694f      	ldr	r7, [r1, #20]
 80189f8:	6808      	ldr	r0, [r1, #0]
 80189fa:	4631      	mov	r1, r6
 80189fc:	47b8      	blx	r7
 80189fe:	682b      	ldr	r3, [r5, #0]
 8018a00:	4631      	mov	r1, r6
 8018a02:	6858      	ldr	r0, [r3, #4]
 8018a04:	601c      	str	r4, [r3, #0]
 8018a06:	47b8      	blx	r7
 8018a08:	682d      	ldr	r5, [r5, #0]
 8018a0a:	606c      	str	r4, [r5, #4]
 8018a0c:	2000      	movs	r0, #0
 8018a0e:	60ac      	str	r4, [r5, #8]
 8018a10:	b002      	add	sp, #8
 8018a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018a16:	2000      	movs	r0, #0
 8018a18:	e7b0      	b.n	801897c <rcutils_string_map_reserve+0x20>
 8018a1a:	200a      	movs	r0, #10
 8018a1c:	e7ae      	b.n	801897c <rcutils_string_map_reserve+0x20>
 8018a1e:	200b      	movs	r0, #11
 8018a20:	4770      	bx	lr
 8018a22:	1f0b      	subs	r3, r1, #4
 8018a24:	4418      	add	r0, r3
 8018a26:	4413      	add	r3, r2
 8018a28:	3a04      	subs	r2, #4
 8018a2a:	4417      	add	r7, r2
 8018a2c:	2200      	movs	r2, #0
 8018a2e:	f843 2f04 	str.w	r2, [r3, #4]!
 8018a32:	42bb      	cmp	r3, r7
 8018a34:	f840 2f04 	str.w	r2, [r0, #4]!
 8018a38:	d1f9      	bne.n	8018a2e <rcutils_string_map_reserve+0xd2>
 8018a3a:	e7e7      	b.n	8018a0c <rcutils_string_map_reserve+0xb0>

08018a3c <rcutils_string_map_init>:
 8018a3c:	b082      	sub	sp, #8
 8018a3e:	b570      	push	{r4, r5, r6, lr}
 8018a40:	ac04      	add	r4, sp, #16
 8018a42:	e884 000c 	stmia.w	r4, {r2, r3}
 8018a46:	b380      	cbz	r0, 8018aaa <rcutils_string_map_init+0x6e>
 8018a48:	6806      	ldr	r6, [r0, #0]
 8018a4a:	4604      	mov	r4, r0
 8018a4c:	b12e      	cbz	r6, 8018a5a <rcutils_string_map_init+0x1e>
 8018a4e:	251e      	movs	r5, #30
 8018a50:	4628      	mov	r0, r5
 8018a52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018a56:	b002      	add	sp, #8
 8018a58:	4770      	bx	lr
 8018a5a:	a804      	add	r0, sp, #16
 8018a5c:	460d      	mov	r5, r1
 8018a5e:	f7f6 fd4f 	bl	800f500 <rcutils_allocator_is_valid>
 8018a62:	b310      	cbz	r0, 8018aaa <rcutils_string_map_init+0x6e>
 8018a64:	9b04      	ldr	r3, [sp, #16]
 8018a66:	2024      	movs	r0, #36	@ 0x24
 8018a68:	9908      	ldr	r1, [sp, #32]
 8018a6a:	4798      	blx	r3
 8018a6c:	6020      	str	r0, [r4, #0]
 8018a6e:	b310      	cbz	r0, 8018ab6 <rcutils_string_map_init+0x7a>
 8018a70:	f10d 0e10 	add.w	lr, sp, #16
 8018a74:	f100 0c10 	add.w	ip, r0, #16
 8018a78:	e9c0 6600 	strd	r6, r6, [r0]
 8018a7c:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8018a80:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8018a84:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8018a88:	f8de 3000 	ldr.w	r3, [lr]
 8018a8c:	4629      	mov	r1, r5
 8018a8e:	4620      	mov	r0, r4
 8018a90:	f8cc 3000 	str.w	r3, [ip]
 8018a94:	f7ff ff62 	bl	801895c <rcutils_string_map_reserve>
 8018a98:	4605      	mov	r5, r0
 8018a9a:	2800      	cmp	r0, #0
 8018a9c:	d0d8      	beq.n	8018a50 <rcutils_string_map_init+0x14>
 8018a9e:	9b05      	ldr	r3, [sp, #20]
 8018aa0:	9908      	ldr	r1, [sp, #32]
 8018aa2:	6820      	ldr	r0, [r4, #0]
 8018aa4:	4798      	blx	r3
 8018aa6:	6026      	str	r6, [r4, #0]
 8018aa8:	e7d2      	b.n	8018a50 <rcutils_string_map_init+0x14>
 8018aaa:	250b      	movs	r5, #11
 8018aac:	4628      	mov	r0, r5
 8018aae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018ab2:	b002      	add	sp, #8
 8018ab4:	4770      	bx	lr
 8018ab6:	250a      	movs	r5, #10
 8018ab8:	e7ca      	b.n	8018a50 <rcutils_string_map_init+0x14>
 8018aba:	bf00      	nop

08018abc <rcutils_string_map_fini>:
 8018abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018ac0:	b082      	sub	sp, #8
 8018ac2:	2800      	cmp	r0, #0
 8018ac4:	d03a      	beq.n	8018b3c <rcutils_string_map_fini+0x80>
 8018ac6:	6804      	ldr	r4, [r0, #0]
 8018ac8:	4606      	mov	r6, r0
 8018aca:	2c00      	cmp	r4, #0
 8018acc:	d032      	beq.n	8018b34 <rcutils_string_map_fini+0x78>
 8018ace:	68a3      	ldr	r3, [r4, #8]
 8018ad0:	b32b      	cbz	r3, 8018b1e <rcutils_string_map_fini+0x62>
 8018ad2:	2500      	movs	r5, #0
 8018ad4:	6822      	ldr	r2, [r4, #0]
 8018ad6:	462f      	mov	r7, r5
 8018ad8:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018adc:	b1e0      	cbz	r0, 8018b18 <rcutils_string_map_fini+0x5c>
 8018ade:	6a21      	ldr	r1, [r4, #32]
 8018ae0:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8018ae4:	9101      	str	r1, [sp, #4]
 8018ae6:	47c0      	blx	r8
 8018ae8:	9901      	ldr	r1, [sp, #4]
 8018aea:	e9d4 3200 	ldrd	r3, r2, [r4]
 8018aee:	f843 7025 	str.w	r7, [r3, r5, lsl #2]
 8018af2:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018af6:	47c0      	blx	r8
 8018af8:	68e3      	ldr	r3, [r4, #12]
 8018afa:	6862      	ldr	r2, [r4, #4]
 8018afc:	3b01      	subs	r3, #1
 8018afe:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8018b02:	3501      	adds	r5, #1
 8018b04:	60e3      	str	r3, [r4, #12]
 8018b06:	6834      	ldr	r4, [r6, #0]
 8018b08:	68a3      	ldr	r3, [r4, #8]
 8018b0a:	429d      	cmp	r5, r3
 8018b0c:	d207      	bcs.n	8018b1e <rcutils_string_map_fini+0x62>
 8018b0e:	6822      	ldr	r2, [r4, #0]
 8018b10:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8018b14:	2800      	cmp	r0, #0
 8018b16:	d1e2      	bne.n	8018ade <rcutils_string_map_fini+0x22>
 8018b18:	3501      	adds	r5, #1
 8018b1a:	429d      	cmp	r5, r3
 8018b1c:	d3dc      	bcc.n	8018ad8 <rcutils_string_map_fini+0x1c>
 8018b1e:	2100      	movs	r1, #0
 8018b20:	4630      	mov	r0, r6
 8018b22:	f7ff ff1b 	bl	801895c <rcutils_string_map_reserve>
 8018b26:	4604      	mov	r4, r0
 8018b28:	b920      	cbnz	r0, 8018b34 <rcutils_string_map_fini+0x78>
 8018b2a:	6830      	ldr	r0, [r6, #0]
 8018b2c:	6943      	ldr	r3, [r0, #20]
 8018b2e:	6a01      	ldr	r1, [r0, #32]
 8018b30:	4798      	blx	r3
 8018b32:	6034      	str	r4, [r6, #0]
 8018b34:	4620      	mov	r0, r4
 8018b36:	b002      	add	sp, #8
 8018b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b3c:	240b      	movs	r4, #11
 8018b3e:	4620      	mov	r0, r4
 8018b40:	b002      	add	sp, #8
 8018b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018b46:	bf00      	nop

08018b48 <rcutils_string_map_getn>:
 8018b48:	b378      	cbz	r0, 8018baa <rcutils_string_map_getn+0x62>
 8018b4a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b4e:	f8d0 b000 	ldr.w	fp, [r0]
 8018b52:	f1bb 0f00 	cmp.w	fp, #0
 8018b56:	d01f      	beq.n	8018b98 <rcutils_string_map_getn+0x50>
 8018b58:	fab1 f481 	clz	r4, r1
 8018b5c:	4688      	mov	r8, r1
 8018b5e:	0964      	lsrs	r4, r4, #5
 8018b60:	b1d1      	cbz	r1, 8018b98 <rcutils_string_map_getn+0x50>
 8018b62:	f8db 7008 	ldr.w	r7, [fp, #8]
 8018b66:	f8db 6000 	ldr.w	r6, [fp]
 8018b6a:	b1af      	cbz	r7, 8018b98 <rcutils_string_map_getn+0x50>
 8018b6c:	4691      	mov	r9, r2
 8018b6e:	3e04      	subs	r6, #4
 8018b70:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8018b74:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8018b78:	3401      	adds	r4, #1
 8018b7a:	4628      	mov	r0, r5
 8018b7c:	b155      	cbz	r5, 8018b94 <rcutils_string_map_getn+0x4c>
 8018b7e:	f7e7 fbb9 	bl	80002f4 <strlen>
 8018b82:	4602      	mov	r2, r0
 8018b84:	4629      	mov	r1, r5
 8018b86:	4640      	mov	r0, r8
 8018b88:	454a      	cmp	r2, r9
 8018b8a:	bf38      	it	cc
 8018b8c:	464a      	movcc	r2, r9
 8018b8e:	f003 f91c 	bl	801bdca <strncmp>
 8018b92:	b120      	cbz	r0, 8018b9e <rcutils_string_map_getn+0x56>
 8018b94:	42a7      	cmp	r7, r4
 8018b96:	d1eb      	bne.n	8018b70 <rcutils_string_map_getn+0x28>
 8018b98:	2000      	movs	r0, #0
 8018b9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b9e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8018ba2:	f853 000a 	ldr.w	r0, [r3, sl]
 8018ba6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018baa:	4770      	bx	lr
 8018bac:	0000      	movs	r0, r0
	...

08018bb0 <rmw_get_zero_initialized_context>:
 8018bb0:	b510      	push	{r4, lr}
 8018bb2:	4604      	mov	r4, r0
 8018bb4:	3010      	adds	r0, #16
 8018bb6:	f7f6 fd2f 	bl	800f618 <rmw_get_zero_initialized_init_options>
 8018bba:	2300      	movs	r3, #0
 8018bbc:	4620      	mov	r0, r4
 8018bbe:	60a3      	str	r3, [r4, #8]
 8018bc0:	64a3      	str	r3, [r4, #72]	@ 0x48
 8018bc2:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8018bc4:	ed9f 7b02 	vldr	d7, [pc, #8]	@ 8018bd0 <rmw_get_zero_initialized_context+0x20>
 8018bc8:	ed84 7b00 	vstr	d7, [r4]
 8018bcc:	bd10      	pop	{r4, pc}
 8018bce:	bf00      	nop
	...

08018bd8 <rmw_time_equal>:
 8018bd8:	b4f0      	push	{r4, r5, r6, r7}
 8018bda:	b084      	sub	sp, #16
 8018bdc:	ac04      	add	r4, sp, #16
 8018bde:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018be2:	4603      	mov	r3, r0
 8018be4:	4925      	ldr	r1, [pc, #148]	@ (8018c7c <rmw_time_equal+0xa4>)
 8018be6:	9d01      	ldr	r5, [sp, #4]
 8018be8:	4610      	mov	r0, r2
 8018bea:	4299      	cmp	r1, r3
 8018bec:	f04f 0202 	mov.w	r2, #2
 8018bf0:	9e03      	ldr	r6, [sp, #12]
 8018bf2:	41aa      	sbcs	r2, r5
 8018bf4:	d330      	bcc.n	8018c58 <rmw_time_equal+0x80>
 8018bf6:	4c22      	ldr	r4, [pc, #136]	@ (8018c80 <rmw_time_equal+0xa8>)
 8018bf8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018bfc:	fba3 3204 	umull	r3, r2, r3, r4
 8018c00:	fb04 2205 	mla	r2, r4, r5, r2
 8018c04:	43dd      	mvns	r5, r3
 8018c06:	1a8c      	subs	r4, r1, r2
 8018c08:	4285      	cmp	r5, r0
 8018c0a:	41b4      	sbcs	r4, r6
 8018c0c:	d332      	bcc.n	8018c74 <rmw_time_equal+0x9c>
 8018c0e:	eb10 0c03 	adds.w	ip, r0, r3
 8018c12:	eb42 0106 	adc.w	r1, r2, r6
 8018c16:	4819      	ldr	r0, [pc, #100]	@ (8018c7c <rmw_time_equal+0xa4>)
 8018c18:	2202      	movs	r2, #2
 8018c1a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018c1c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8018c1e:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 8018c22:	4298      	cmp	r0, r3
 8018c24:	41b2      	sbcs	r2, r6
 8018c26:	d31c      	bcc.n	8018c62 <rmw_time_equal+0x8a>
 8018c28:	4c15      	ldr	r4, [pc, #84]	@ (8018c80 <rmw_time_equal+0xa8>)
 8018c2a:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8018c2e:	fba3 3204 	umull	r3, r2, r3, r4
 8018c32:	fb04 2206 	mla	r2, r4, r6, r2
 8018c36:	43de      	mvns	r6, r3
 8018c38:	1a84      	subs	r4, r0, r2
 8018c3a:	42ae      	cmp	r6, r5
 8018c3c:	41bc      	sbcs	r4, r7
 8018c3e:	d315      	bcc.n	8018c6c <rmw_time_equal+0x94>
 8018c40:	195b      	adds	r3, r3, r5
 8018c42:	eb42 0207 	adc.w	r2, r2, r7
 8018c46:	428a      	cmp	r2, r1
 8018c48:	bf08      	it	eq
 8018c4a:	4563      	cmpeq	r3, ip
 8018c4c:	bf0c      	ite	eq
 8018c4e:	2001      	moveq	r0, #1
 8018c50:	2000      	movne	r0, #0
 8018c52:	b004      	add	sp, #16
 8018c54:	bcf0      	pop	{r4, r5, r6, r7}
 8018c56:	4770      	bx	lr
 8018c58:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018c5c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018c60:	e7d9      	b.n	8018c16 <rmw_time_equal+0x3e>
 8018c62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018c66:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8018c6a:	e7ec      	b.n	8018c46 <rmw_time_equal+0x6e>
 8018c6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8018c70:	4602      	mov	r2, r0
 8018c72:	e7e8      	b.n	8018c46 <rmw_time_equal+0x6e>
 8018c74:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8018c78:	e7cd      	b.n	8018c16 <rmw_time_equal+0x3e>
 8018c7a:	bf00      	nop
 8018c7c:	25c17d04 	.word	0x25c17d04
 8018c80:	3b9aca00 	.word	0x3b9aca00

08018c84 <rmw_time_total_nsec>:
 8018c84:	b470      	push	{r4, r5, r6}
 8018c86:	b085      	sub	sp, #20
 8018c88:	ac04      	add	r4, sp, #16
 8018c8a:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8018c8e:	4603      	mov	r3, r0
 8018c90:	4913      	ldr	r1, [pc, #76]	@ (8018ce0 <rmw_time_total_nsec+0x5c>)
 8018c92:	9d01      	ldr	r5, [sp, #4]
 8018c94:	4610      	mov	r0, r2
 8018c96:	4299      	cmp	r1, r3
 8018c98:	f04f 0202 	mov.w	r2, #2
 8018c9c:	9e03      	ldr	r6, [sp, #12]
 8018c9e:	41aa      	sbcs	r2, r5
 8018ca0:	d311      	bcc.n	8018cc6 <rmw_time_total_nsec+0x42>
 8018ca2:	4c10      	ldr	r4, [pc, #64]	@ (8018ce4 <rmw_time_total_nsec+0x60>)
 8018ca4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018ca8:	fba3 3204 	umull	r3, r2, r3, r4
 8018cac:	fb04 2205 	mla	r2, r4, r5, r2
 8018cb0:	43dd      	mvns	r5, r3
 8018cb2:	1a8c      	subs	r4, r1, r2
 8018cb4:	4285      	cmp	r5, r0
 8018cb6:	41b4      	sbcs	r4, r6
 8018cb8:	d30c      	bcc.n	8018cd4 <rmw_time_total_nsec+0x50>
 8018cba:	1818      	adds	r0, r3, r0
 8018cbc:	eb42 0106 	adc.w	r1, r2, r6
 8018cc0:	b005      	add	sp, #20
 8018cc2:	bc70      	pop	{r4, r5, r6}
 8018cc4:	4770      	bx	lr
 8018cc6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018cca:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8018cce:	b005      	add	sp, #20
 8018cd0:	bc70      	pop	{r4, r5, r6}
 8018cd2:	4770      	bx	lr
 8018cd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018cd8:	b005      	add	sp, #20
 8018cda:	bc70      	pop	{r4, r5, r6}
 8018cdc:	4770      	bx	lr
 8018cde:	bf00      	nop
 8018ce0:	25c17d04 	.word	0x25c17d04
 8018ce4:	3b9aca00 	.word	0x3b9aca00

08018ce8 <rmw_get_zero_initialized_message_info>:
 8018ce8:	b510      	push	{r4, lr}
 8018cea:	4604      	mov	r4, r0
 8018cec:	2240      	movs	r2, #64	@ 0x40
 8018cee:	2100      	movs	r1, #0
 8018cf0:	f003 f856 	bl	801bda0 <memset>
 8018cf4:	4620      	mov	r0, r4
 8018cf6:	bd10      	pop	{r4, pc}

08018cf8 <rmw_validate_full_topic_name>:
 8018cf8:	2800      	cmp	r0, #0
 8018cfa:	d05d      	beq.n	8018db8 <rmw_validate_full_topic_name+0xc0>
 8018cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d00:	460d      	mov	r5, r1
 8018d02:	2900      	cmp	r1, #0
 8018d04:	d05a      	beq.n	8018dbc <rmw_validate_full_topic_name+0xc4>
 8018d06:	4604      	mov	r4, r0
 8018d08:	4616      	mov	r6, r2
 8018d0a:	f7e7 faf3 	bl	80002f4 <strlen>
 8018d0e:	b150      	cbz	r0, 8018d26 <rmw_validate_full_topic_name+0x2e>
 8018d10:	7823      	ldrb	r3, [r4, #0]
 8018d12:	2b2f      	cmp	r3, #47	@ 0x2f
 8018d14:	d00e      	beq.n	8018d34 <rmw_validate_full_topic_name+0x3c>
 8018d16:	2302      	movs	r3, #2
 8018d18:	602b      	str	r3, [r5, #0]
 8018d1a:	b146      	cbz	r6, 8018d2e <rmw_validate_full_topic_name+0x36>
 8018d1c:	2300      	movs	r3, #0
 8018d1e:	4618      	mov	r0, r3
 8018d20:	6033      	str	r3, [r6, #0]
 8018d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d26:	2301      	movs	r3, #1
 8018d28:	602b      	str	r3, [r5, #0]
 8018d2a:	2e00      	cmp	r6, #0
 8018d2c:	d1f6      	bne.n	8018d1c <rmw_validate_full_topic_name+0x24>
 8018d2e:	2000      	movs	r0, #0
 8018d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018d34:	1e43      	subs	r3, r0, #1
 8018d36:	5ce2      	ldrb	r2, [r4, r3]
 8018d38:	2a2f      	cmp	r2, #47	@ 0x2f
 8018d3a:	d041      	beq.n	8018dc0 <rmw_validate_full_topic_name+0xc8>
 8018d3c:	1e62      	subs	r2, r4, #1
 8018d3e:	f1c4 0e01 	rsb	lr, r4, #1
 8018d42:	eb02 0800 	add.w	r8, r2, r0
 8018d46:	eb0e 0702 	add.w	r7, lr, r2
 8018d4a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8018d4e:	f023 0120 	bic.w	r1, r3, #32
 8018d52:	f1a3 0c2f 	sub.w	ip, r3, #47	@ 0x2f
 8018d56:	3941      	subs	r1, #65	@ 0x41
 8018d58:	2919      	cmp	r1, #25
 8018d5a:	d90f      	bls.n	8018d7c <rmw_validate_full_topic_name+0x84>
 8018d5c:	f1bc 0f0a 	cmp.w	ip, #10
 8018d60:	d90c      	bls.n	8018d7c <rmw_validate_full_topic_name+0x84>
 8018d62:	f1a3 035f 	sub.w	r3, r3, #95	@ 0x5f
 8018d66:	fab3 f383 	clz	r3, r3
 8018d6a:	095b      	lsrs	r3, r3, #5
 8018d6c:	b933      	cbnz	r3, 8018d7c <rmw_validate_full_topic_name+0x84>
 8018d6e:	2204      	movs	r2, #4
 8018d70:	602a      	str	r2, [r5, #0]
 8018d72:	2e00      	cmp	r6, #0
 8018d74:	d0db      	beq.n	8018d2e <rmw_validate_full_topic_name+0x36>
 8018d76:	4618      	mov	r0, r3
 8018d78:	6037      	str	r7, [r6, #0]
 8018d7a:	e7d2      	b.n	8018d22 <rmw_validate_full_topic_name+0x2a>
 8018d7c:	4542      	cmp	r2, r8
 8018d7e:	d1e2      	bne.n	8018d46 <rmw_validate_full_topic_name+0x4e>
 8018d80:	2301      	movs	r3, #1
 8018d82:	4f1a      	ldr	r7, [pc, #104]	@ (8018dec <rmw_validate_full_topic_name+0xf4>)
 8018d84:	e004      	b.n	8018d90 <rmw_validate_full_topic_name+0x98>
 8018d86:	4298      	cmp	r0, r3
 8018d88:	f104 0401 	add.w	r4, r4, #1
 8018d8c:	4613      	mov	r3, r2
 8018d8e:	d91c      	bls.n	8018dca <rmw_validate_full_topic_name+0xd2>
 8018d90:	4298      	cmp	r0, r3
 8018d92:	f103 0201 	add.w	r2, r3, #1
 8018d96:	d0f6      	beq.n	8018d86 <rmw_validate_full_topic_name+0x8e>
 8018d98:	7821      	ldrb	r1, [r4, #0]
 8018d9a:	292f      	cmp	r1, #47	@ 0x2f
 8018d9c:	d1f3      	bne.n	8018d86 <rmw_validate_full_topic_name+0x8e>
 8018d9e:	7861      	ldrb	r1, [r4, #1]
 8018da0:	292f      	cmp	r1, #47	@ 0x2f
 8018da2:	d01e      	beq.n	8018de2 <rmw_validate_full_topic_name+0xea>
 8018da4:	5dc9      	ldrb	r1, [r1, r7]
 8018da6:	0749      	lsls	r1, r1, #29
 8018da8:	d5ed      	bpl.n	8018d86 <rmw_validate_full_topic_name+0x8e>
 8018daa:	2206      	movs	r2, #6
 8018dac:	602a      	str	r2, [r5, #0]
 8018dae:	2e00      	cmp	r6, #0
 8018db0:	d0bd      	beq.n	8018d2e <rmw_validate_full_topic_name+0x36>
 8018db2:	2000      	movs	r0, #0
 8018db4:	6033      	str	r3, [r6, #0]
 8018db6:	e7b4      	b.n	8018d22 <rmw_validate_full_topic_name+0x2a>
 8018db8:	200b      	movs	r0, #11
 8018dba:	4770      	bx	lr
 8018dbc:	200b      	movs	r0, #11
 8018dbe:	e7b0      	b.n	8018d22 <rmw_validate_full_topic_name+0x2a>
 8018dc0:	2203      	movs	r2, #3
 8018dc2:	602a      	str	r2, [r5, #0]
 8018dc4:	2e00      	cmp	r6, #0
 8018dc6:	d1f4      	bne.n	8018db2 <rmw_validate_full_topic_name+0xba>
 8018dc8:	e7b1      	b.n	8018d2e <rmw_validate_full_topic_name+0x36>
 8018dca:	28f7      	cmp	r0, #247	@ 0xf7
 8018dcc:	d803      	bhi.n	8018dd6 <rmw_validate_full_topic_name+0xde>
 8018dce:	2300      	movs	r3, #0
 8018dd0:	4618      	mov	r0, r3
 8018dd2:	602b      	str	r3, [r5, #0]
 8018dd4:	e7a5      	b.n	8018d22 <rmw_validate_full_topic_name+0x2a>
 8018dd6:	2307      	movs	r3, #7
 8018dd8:	602b      	str	r3, [r5, #0]
 8018dda:	2e00      	cmp	r6, #0
 8018ddc:	d0a7      	beq.n	8018d2e <rmw_validate_full_topic_name+0x36>
 8018dde:	23f6      	movs	r3, #246	@ 0xf6
 8018de0:	e7e7      	b.n	8018db2 <rmw_validate_full_topic_name+0xba>
 8018de2:	2205      	movs	r2, #5
 8018de4:	602a      	str	r2, [r5, #0]
 8018de6:	2e00      	cmp	r6, #0
 8018de8:	d1e3      	bne.n	8018db2 <rmw_validate_full_topic_name+0xba>
 8018dea:	e7a0      	b.n	8018d2e <rmw_validate_full_topic_name+0x36>
 8018dec:	0801d966 	.word	0x0801d966

08018df0 <rmw_validate_namespace_with_size>:
 8018df0:	2800      	cmp	r0, #0
 8018df2:	d043      	beq.n	8018e7c <rmw_validate_namespace_with_size+0x8c>
 8018df4:	b570      	push	{r4, r5, r6, lr}
 8018df6:	4614      	mov	r4, r2
 8018df8:	b0c2      	sub	sp, #264	@ 0x108
 8018dfa:	b32a      	cbz	r2, 8018e48 <rmw_validate_namespace_with_size+0x58>
 8018dfc:	2901      	cmp	r1, #1
 8018dfe:	460d      	mov	r5, r1
 8018e00:	461e      	mov	r6, r3
 8018e02:	d102      	bne.n	8018e0a <rmw_validate_namespace_with_size+0x1a>
 8018e04:	7803      	ldrb	r3, [r0, #0]
 8018e06:	2b2f      	cmp	r3, #47	@ 0x2f
 8018e08:	d012      	beq.n	8018e30 <rmw_validate_namespace_with_size+0x40>
 8018e0a:	aa01      	add	r2, sp, #4
 8018e0c:	4669      	mov	r1, sp
 8018e0e:	f7ff ff73 	bl	8018cf8 <rmw_validate_full_topic_name>
 8018e12:	b980      	cbnz	r0, 8018e36 <rmw_validate_namespace_with_size+0x46>
 8018e14:	9a00      	ldr	r2, [sp, #0]
 8018e16:	b14a      	cbz	r2, 8018e2c <rmw_validate_namespace_with_size+0x3c>
 8018e18:	2a07      	cmp	r2, #7
 8018e1a:	d007      	beq.n	8018e2c <rmw_validate_namespace_with_size+0x3c>
 8018e1c:	1e53      	subs	r3, r2, #1
 8018e1e:	2b05      	cmp	r3, #5
 8018e20:	d82e      	bhi.n	8018e80 <rmw_validate_namespace_with_size+0x90>
 8018e22:	e8df f003 	tbb	[pc, r3]
 8018e26:	1f1c      	.short	0x1f1c
 8018e28:	14282522 	.word	0x14282522
 8018e2c:	2df5      	cmp	r5, #245	@ 0xf5
 8018e2e:	d804      	bhi.n	8018e3a <rmw_validate_namespace_with_size+0x4a>
 8018e30:	2300      	movs	r3, #0
 8018e32:	4618      	mov	r0, r3
 8018e34:	6023      	str	r3, [r4, #0]
 8018e36:	b042      	add	sp, #264	@ 0x108
 8018e38:	bd70      	pop	{r4, r5, r6, pc}
 8018e3a:	2307      	movs	r3, #7
 8018e3c:	6023      	str	r3, [r4, #0]
 8018e3e:	2e00      	cmp	r6, #0
 8018e40:	d0f9      	beq.n	8018e36 <rmw_validate_namespace_with_size+0x46>
 8018e42:	23f4      	movs	r3, #244	@ 0xf4
 8018e44:	6033      	str	r3, [r6, #0]
 8018e46:	e7f6      	b.n	8018e36 <rmw_validate_namespace_with_size+0x46>
 8018e48:	200b      	movs	r0, #11
 8018e4a:	b042      	add	sp, #264	@ 0x108
 8018e4c:	bd70      	pop	{r4, r5, r6, pc}
 8018e4e:	2306      	movs	r3, #6
 8018e50:	6023      	str	r3, [r4, #0]
 8018e52:	2e00      	cmp	r6, #0
 8018e54:	d0ef      	beq.n	8018e36 <rmw_validate_namespace_with_size+0x46>
 8018e56:	9b01      	ldr	r3, [sp, #4]
 8018e58:	6033      	str	r3, [r6, #0]
 8018e5a:	b042      	add	sp, #264	@ 0x108
 8018e5c:	bd70      	pop	{r4, r5, r6, pc}
 8018e5e:	2301      	movs	r3, #1
 8018e60:	6023      	str	r3, [r4, #0]
 8018e62:	e7f6      	b.n	8018e52 <rmw_validate_namespace_with_size+0x62>
 8018e64:	2302      	movs	r3, #2
 8018e66:	6023      	str	r3, [r4, #0]
 8018e68:	e7f3      	b.n	8018e52 <rmw_validate_namespace_with_size+0x62>
 8018e6a:	2303      	movs	r3, #3
 8018e6c:	6023      	str	r3, [r4, #0]
 8018e6e:	e7f0      	b.n	8018e52 <rmw_validate_namespace_with_size+0x62>
 8018e70:	2304      	movs	r3, #4
 8018e72:	6023      	str	r3, [r4, #0]
 8018e74:	e7ed      	b.n	8018e52 <rmw_validate_namespace_with_size+0x62>
 8018e76:	2305      	movs	r3, #5
 8018e78:	6023      	str	r3, [r4, #0]
 8018e7a:	e7ea      	b.n	8018e52 <rmw_validate_namespace_with_size+0x62>
 8018e7c:	200b      	movs	r0, #11
 8018e7e:	4770      	bx	lr
 8018e80:	4613      	mov	r3, r2
 8018e82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8018e86:	4a03      	ldr	r2, [pc, #12]	@ (8018e94 <rmw_validate_namespace_with_size+0xa4>)
 8018e88:	a802      	add	r0, sp, #8
 8018e8a:	f7ff fcd5 	bl	8018838 <rcutils_snprintf>
 8018e8e:	2001      	movs	r0, #1
 8018e90:	e7d1      	b.n	8018e36 <rmw_validate_namespace_with_size+0x46>
 8018e92:	bf00      	nop
 8018e94:	0801d434 	.word	0x0801d434

08018e98 <rmw_validate_namespace>:
 8018e98:	b168      	cbz	r0, 8018eb6 <rmw_validate_namespace+0x1e>
 8018e9a:	b570      	push	{r4, r5, r6, lr}
 8018e9c:	460d      	mov	r5, r1
 8018e9e:	4616      	mov	r6, r2
 8018ea0:	4604      	mov	r4, r0
 8018ea2:	f7e7 fa27 	bl	80002f4 <strlen>
 8018ea6:	4633      	mov	r3, r6
 8018ea8:	4601      	mov	r1, r0
 8018eaa:	462a      	mov	r2, r5
 8018eac:	4620      	mov	r0, r4
 8018eae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018eb2:	f7ff bf9d 	b.w	8018df0 <rmw_validate_namespace_with_size>
 8018eb6:	200b      	movs	r0, #11
 8018eb8:	4770      	bx	lr
 8018eba:	bf00      	nop

08018ebc <rmw_namespace_validation_result_string>:
 8018ebc:	2807      	cmp	r0, #7
 8018ebe:	d803      	bhi.n	8018ec8 <rmw_namespace_validation_result_string+0xc>
 8018ec0:	4b02      	ldr	r3, [pc, #8]	@ (8018ecc <rmw_namespace_validation_result_string+0x10>)
 8018ec2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018ec6:	4770      	bx	lr
 8018ec8:	4801      	ldr	r0, [pc, #4]	@ (8018ed0 <rmw_namespace_validation_result_string+0x14>)
 8018eca:	4770      	bx	lr
 8018ecc:	0801d62c 	.word	0x0801d62c
 8018ed0:	0801d484 	.word	0x0801d484

08018ed4 <rmw_validate_node_name>:
 8018ed4:	2800      	cmp	r0, #0
 8018ed6:	d042      	beq.n	8018f5e <rmw_validate_node_name+0x8a>
 8018ed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018edc:	460d      	mov	r5, r1
 8018ede:	2900      	cmp	r1, #0
 8018ee0:	d03f      	beq.n	8018f62 <rmw_validate_node_name+0x8e>
 8018ee2:	4604      	mov	r4, r0
 8018ee4:	4616      	mov	r6, r2
 8018ee6:	f7e7 fa05 	bl	80002f4 <strlen>
 8018eea:	b310      	cbz	r0, 8018f32 <rmw_validate_node_name+0x5e>
 8018eec:	1e63      	subs	r3, r4, #1
 8018eee:	f1c4 0101 	rsb	r1, r4, #1
 8018ef2:	eb03 0800 	add.w	r8, r3, r0
 8018ef6:	18cf      	adds	r7, r1, r3
 8018ef8:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8018efc:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8018f00:	f02e 0c20 	bic.w	ip, lr, #32
 8018f04:	2a09      	cmp	r2, #9
 8018f06:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8018f0a:	d905      	bls.n	8018f18 <rmw_validate_node_name+0x44>
 8018f0c:	f1bc 0f19 	cmp.w	ip, #25
 8018f10:	d902      	bls.n	8018f18 <rmw_validate_node_name+0x44>
 8018f12:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 8018f16:	d114      	bne.n	8018f42 <rmw_validate_node_name+0x6e>
 8018f18:	4598      	cmp	r8, r3
 8018f1a:	d1ec      	bne.n	8018ef6 <rmw_validate_node_name+0x22>
 8018f1c:	7822      	ldrb	r2, [r4, #0]
 8018f1e:	4b16      	ldr	r3, [pc, #88]	@ (8018f78 <rmw_validate_node_name+0xa4>)
 8018f20:	5cd3      	ldrb	r3, [r2, r3]
 8018f22:	f013 0304 	ands.w	r3, r3, #4
 8018f26:	d113      	bne.n	8018f50 <rmw_validate_node_name+0x7c>
 8018f28:	28ff      	cmp	r0, #255	@ 0xff
 8018f2a:	d81c      	bhi.n	8018f66 <rmw_validate_node_name+0x92>
 8018f2c:	4618      	mov	r0, r3
 8018f2e:	602b      	str	r3, [r5, #0]
 8018f30:	e00c      	b.n	8018f4c <rmw_validate_node_name+0x78>
 8018f32:	2301      	movs	r3, #1
 8018f34:	602b      	str	r3, [r5, #0]
 8018f36:	b17e      	cbz	r6, 8018f58 <rmw_validate_node_name+0x84>
 8018f38:	2300      	movs	r3, #0
 8018f3a:	4618      	mov	r0, r3
 8018f3c:	6033      	str	r3, [r6, #0]
 8018f3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f42:	2302      	movs	r3, #2
 8018f44:	602b      	str	r3, [r5, #0]
 8018f46:	b13e      	cbz	r6, 8018f58 <rmw_validate_node_name+0x84>
 8018f48:	2000      	movs	r0, #0
 8018f4a:	6037      	str	r7, [r6, #0]
 8018f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f50:	2303      	movs	r3, #3
 8018f52:	602b      	str	r3, [r5, #0]
 8018f54:	2e00      	cmp	r6, #0
 8018f56:	d1ef      	bne.n	8018f38 <rmw_validate_node_name+0x64>
 8018f58:	2000      	movs	r0, #0
 8018f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018f5e:	200b      	movs	r0, #11
 8018f60:	4770      	bx	lr
 8018f62:	200b      	movs	r0, #11
 8018f64:	e7f2      	b.n	8018f4c <rmw_validate_node_name+0x78>
 8018f66:	2204      	movs	r2, #4
 8018f68:	602a      	str	r2, [r5, #0]
 8018f6a:	2e00      	cmp	r6, #0
 8018f6c:	d0f4      	beq.n	8018f58 <rmw_validate_node_name+0x84>
 8018f6e:	22fe      	movs	r2, #254	@ 0xfe
 8018f70:	4618      	mov	r0, r3
 8018f72:	6032      	str	r2, [r6, #0]
 8018f74:	e7ea      	b.n	8018f4c <rmw_validate_node_name+0x78>
 8018f76:	bf00      	nop
 8018f78:	0801d966 	.word	0x0801d966

08018f7c <rmw_node_name_validation_result_string>:
 8018f7c:	2804      	cmp	r0, #4
 8018f7e:	d803      	bhi.n	8018f88 <rmw_node_name_validation_result_string+0xc>
 8018f80:	4b02      	ldr	r3, [pc, #8]	@ (8018f8c <rmw_node_name_validation_result_string+0x10>)
 8018f82:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018f86:	4770      	bx	lr
 8018f88:	4801      	ldr	r0, [pc, #4]	@ (8018f90 <rmw_node_name_validation_result_string+0x14>)
 8018f8a:	4770      	bx	lr
 8018f8c:	0801d738 	.word	0x0801d738
 8018f90:	0801d64c 	.word	0x0801d64c

08018f94 <on_status>:
 8018f94:	b082      	sub	sp, #8
 8018f96:	b002      	add	sp, #8
 8018f98:	4770      	bx	lr
 8018f9a:	bf00      	nop

08018f9c <on_topic>:
 8018f9c:	4a23      	ldr	r2, [pc, #140]	@ (801902c <on_topic+0x90>)
 8018f9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018fa2:	6812      	ldr	r2, [r2, #0]
 8018fa4:	b094      	sub	sp, #80	@ 0x50
 8018fa6:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8018fa8:	f8bd 506c 	ldrh.w	r5, [sp, #108]	@ 0x6c
 8018fac:	9113      	str	r1, [sp, #76]	@ 0x4c
 8018fae:	9312      	str	r3, [sp, #72]	@ 0x48
 8018fb0:	b3c2      	cbz	r2, 8019024 <on_topic+0x88>
 8018fb2:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 8018fb6:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 8018fba:	e001      	b.n	8018fc0 <on_topic+0x24>
 8018fbc:	6852      	ldr	r2, [r2, #4]
 8018fbe:	b38a      	cbz	r2, 8019024 <on_topic+0x88>
 8018fc0:	6894      	ldr	r4, [r2, #8]
 8018fc2:	8aa3      	ldrh	r3, [r4, #20]
 8018fc4:	428b      	cmp	r3, r1
 8018fc6:	d1f9      	bne.n	8018fbc <on_topic+0x20>
 8018fc8:	7da3      	ldrb	r3, [r4, #22]
 8018fca:	4283      	cmp	r3, r0
 8018fcc:	d1f6      	bne.n	8018fbc <on_topic+0x20>
 8018fce:	2248      	movs	r2, #72	@ 0x48
 8018fd0:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8018fd4:	4668      	mov	r0, sp
 8018fd6:	f002 ffac 	bl	801bf32 <memcpy>
 8018fda:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8018fde:	4620      	mov	r0, r4
 8018fe0:	cb0c      	ldmia	r3, {r2, r3}
 8018fe2:	f7f7 fb33 	bl	801064c <rmw_uxrce_get_static_input_buffer_for_entity>
 8018fe6:	4607      	mov	r7, r0
 8018fe8:	b1e0      	cbz	r0, 8019024 <on_topic+0x88>
 8018fea:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8018fee:	462a      	mov	r2, r5
 8018ff0:	4630      	mov	r0, r6
 8018ff2:	f108 0110 	add.w	r1, r8, #16
 8018ff6:	f000 ff53 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8018ffa:	b930      	cbnz	r0, 801900a <on_topic+0x6e>
 8018ffc:	4639      	mov	r1, r7
 8018ffe:	480c      	ldr	r0, [pc, #48]	@ (8019030 <on_topic+0x94>)
 8019000:	b014      	add	sp, #80	@ 0x50
 8019002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019006:	f000 b8bd 	b.w	8019184 <put_memory>
 801900a:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 801900e:	f8c8 5810 	str.w	r5, [r8, #2064]	@ 0x810
 8019012:	f7f7 f919 	bl	8010248 <rmw_uros_epoch_nanos>
 8019016:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801901a:	2305      	movs	r3, #5
 801901c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019020:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 8019024:	b014      	add	sp, #80	@ 0x50
 8019026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801902a:	bf00      	nop
 801902c:	24012f44 	.word	0x24012f44
 8019030:	24012f34 	.word	0x24012f34

08019034 <on_request>:
 8019034:	4824      	ldr	r0, [pc, #144]	@ (80190c8 <on_request+0x94>)
 8019036:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801903a:	6800      	ldr	r0, [r0, #0]
 801903c:	b094      	sub	sp, #80	@ 0x50
 801903e:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8019040:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 8019044:	9113      	str	r1, [sp, #76]	@ 0x4c
 8019046:	2800      	cmp	r0, #0
 8019048:	d03b      	beq.n	80190c2 <on_request+0x8e>
 801904a:	461d      	mov	r5, r3
 801904c:	e001      	b.n	8019052 <on_request+0x1e>
 801904e:	6840      	ldr	r0, [r0, #4]
 8019050:	b3b8      	cbz	r0, 80190c2 <on_request+0x8e>
 8019052:	6884      	ldr	r4, [r0, #8]
 8019054:	8b21      	ldrh	r1, [r4, #24]
 8019056:	4291      	cmp	r1, r2
 8019058:	d1f9      	bne.n	801904e <on_request+0x1a>
 801905a:	2248      	movs	r2, #72	@ 0x48
 801905c:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 8019060:	4668      	mov	r0, sp
 8019062:	f002 ff66 	bl	801bf32 <memcpy>
 8019066:	f104 0320 	add.w	r3, r4, #32
 801906a:	4620      	mov	r0, r4
 801906c:	cb0c      	ldmia	r3, {r2, r3}
 801906e:	f7f7 faed 	bl	801064c <rmw_uxrce_get_static_input_buffer_for_entity>
 8019072:	4680      	mov	r8, r0
 8019074:	b328      	cbz	r0, 80190c2 <on_request+0x8e>
 8019076:	4630      	mov	r0, r6
 8019078:	f8d8 6008 	ldr.w	r6, [r8, #8]
 801907c:	463a      	mov	r2, r7
 801907e:	f106 0110 	add.w	r1, r6, #16
 8019082:	f000 ff0d 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8019086:	b930      	cbnz	r0, 8019096 <on_request+0x62>
 8019088:	4641      	mov	r1, r8
 801908a:	4810      	ldr	r0, [pc, #64]	@ (80190cc <on_request+0x98>)
 801908c:	b014      	add	sp, #80	@ 0x50
 801908e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019092:	f000 b877 	b.w	8019184 <put_memory>
 8019096:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019098:	f606 0c28 	addw	ip, r6, #2088	@ 0x828
 801909c:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 80190a0:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 80190a4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80190a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80190ac:	e88c 0003 	stmia.w	ip, {r0, r1}
 80190b0:	f7f7 f8ca 	bl	8010248 <rmw_uros_epoch_nanos>
 80190b4:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 80190b8:	2303      	movs	r3, #3
 80190ba:	e942 0102 	strd	r0, r1, [r2, #-8]
 80190be:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 80190c2:	b014      	add	sp, #80	@ 0x50
 80190c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80190c8:	24012f14 	.word	0x24012f14
 80190cc:	24012f34 	.word	0x24012f34

080190d0 <on_reply>:
 80190d0:	4822      	ldr	r0, [pc, #136]	@ (801915c <on_reply+0x8c>)
 80190d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80190d6:	6800      	ldr	r0, [r0, #0]
 80190d8:	b094      	sub	sp, #80	@ 0x50
 80190da:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 80190dc:	f8bd 706c 	ldrh.w	r7, [sp, #108]	@ 0x6c
 80190e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80190e2:	b3b8      	cbz	r0, 8019154 <on_reply+0x84>
 80190e4:	461d      	mov	r5, r3
 80190e6:	e001      	b.n	80190ec <on_reply+0x1c>
 80190e8:	6840      	ldr	r0, [r0, #4]
 80190ea:	b398      	cbz	r0, 8019154 <on_reply+0x84>
 80190ec:	6884      	ldr	r4, [r0, #8]
 80190ee:	8b21      	ldrh	r1, [r4, #24]
 80190f0:	4291      	cmp	r1, r2
 80190f2:	d1f9      	bne.n	80190e8 <on_reply+0x18>
 80190f4:	2248      	movs	r2, #72	@ 0x48
 80190f6:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80190fa:	4668      	mov	r0, sp
 80190fc:	f002 ff19 	bl	801bf32 <memcpy>
 8019100:	f104 0320 	add.w	r3, r4, #32
 8019104:	4620      	mov	r0, r4
 8019106:	cb0c      	ldmia	r3, {r2, r3}
 8019108:	f7f7 faa0 	bl	801064c <rmw_uxrce_get_static_input_buffer_for_entity>
 801910c:	4680      	mov	r8, r0
 801910e:	b308      	cbz	r0, 8019154 <on_reply+0x84>
 8019110:	4630      	mov	r0, r6
 8019112:	f8d8 6008 	ldr.w	r6, [r8, #8]
 8019116:	463a      	mov	r2, r7
 8019118:	f106 0110 	add.w	r1, r6, #16
 801911c:	f000 fec0 	bl	8019ea0 <ucdr_deserialize_array_uint8_t>
 8019120:	b930      	cbnz	r0, 8019130 <on_reply+0x60>
 8019122:	4641      	mov	r1, r8
 8019124:	480e      	ldr	r0, [pc, #56]	@ (8019160 <on_reply+0x90>)
 8019126:	b014      	add	sp, #80	@ 0x50
 8019128:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801912c:	f000 b82a 	b.w	8019184 <put_memory>
 8019130:	2200      	movs	r2, #0
 8019132:	f8c6 4814 	str.w	r4, [r6, #2068]	@ 0x814
 8019136:	f8c6 7810 	str.w	r7, [r6, #2064]	@ 0x810
 801913a:	f8c6 282c 	str.w	r2, [r6, #2092]	@ 0x82c
 801913e:	f8c6 5828 	str.w	r5, [r6, #2088]	@ 0x828
 8019142:	f7f7 f881 	bl	8010248 <rmw_uros_epoch_nanos>
 8019146:	f506 6202 	add.w	r2, r6, #2080	@ 0x820
 801914a:	2304      	movs	r3, #4
 801914c:	e942 0102 	strd	r0, r1, [r2, #-8]
 8019150:	f886 3820 	strb.w	r3, [r6, #2080]	@ 0x820
 8019154:	b014      	add	sp, #80	@ 0x50
 8019156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801915a:	bf00      	nop
 801915c:	2400e624 	.word	0x2400e624
 8019160:	24012f34 	.word	0x24012f34

08019164 <get_memory>:
 8019164:	4603      	mov	r3, r0
 8019166:	6840      	ldr	r0, [r0, #4]
 8019168:	b158      	cbz	r0, 8019182 <get_memory+0x1e>
 801916a:	6842      	ldr	r2, [r0, #4]
 801916c:	605a      	str	r2, [r3, #4]
 801916e:	b10a      	cbz	r2, 8019174 <get_memory+0x10>
 8019170:	2100      	movs	r1, #0
 8019172:	6011      	str	r1, [r2, #0]
 8019174:	681a      	ldr	r2, [r3, #0]
 8019176:	6042      	str	r2, [r0, #4]
 8019178:	b102      	cbz	r2, 801917c <get_memory+0x18>
 801917a:	6010      	str	r0, [r2, #0]
 801917c:	2200      	movs	r2, #0
 801917e:	6002      	str	r2, [r0, #0]
 8019180:	6018      	str	r0, [r3, #0]
 8019182:	4770      	bx	lr

08019184 <put_memory>:
 8019184:	680b      	ldr	r3, [r1, #0]
 8019186:	b10b      	cbz	r3, 801918c <put_memory+0x8>
 8019188:	684a      	ldr	r2, [r1, #4]
 801918a:	605a      	str	r2, [r3, #4]
 801918c:	684a      	ldr	r2, [r1, #4]
 801918e:	b102      	cbz	r2, 8019192 <put_memory+0xe>
 8019190:	6013      	str	r3, [r2, #0]
 8019192:	6803      	ldr	r3, [r0, #0]
 8019194:	428b      	cmp	r3, r1
 8019196:	6843      	ldr	r3, [r0, #4]
 8019198:	bf08      	it	eq
 801919a:	6002      	streq	r2, [r0, #0]
 801919c:	604b      	str	r3, [r1, #4]
 801919e:	b103      	cbz	r3, 80191a2 <put_memory+0x1e>
 80191a0:	6019      	str	r1, [r3, #0]
 80191a2:	2300      	movs	r3, #0
 80191a4:	600b      	str	r3, [r1, #0]
 80191a6:	6041      	str	r1, [r0, #4]
 80191a8:	4770      	bx	lr
 80191aa:	bf00      	nop

080191ac <rmw_destroy_client>:
 80191ac:	b570      	push	{r4, r5, r6, lr}
 80191ae:	b128      	cbz	r0, 80191bc <rmw_destroy_client+0x10>
 80191b0:	4604      	mov	r4, r0
 80191b2:	6800      	ldr	r0, [r0, #0]
 80191b4:	460d      	mov	r5, r1
 80191b6:	f7f7 fbc3 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 80191ba:	b910      	cbnz	r0, 80191c2 <rmw_destroy_client+0x16>
 80191bc:	2401      	movs	r4, #1
 80191be:	4620      	mov	r0, r4
 80191c0:	bd70      	pop	{r4, r5, r6, pc}
 80191c2:	6863      	ldr	r3, [r4, #4]
 80191c4:	2b00      	cmp	r3, #0
 80191c6:	d0f9      	beq.n	80191bc <rmw_destroy_client+0x10>
 80191c8:	2d00      	cmp	r5, #0
 80191ca:	d0f7      	beq.n	80191bc <rmw_destroy_client+0x10>
 80191cc:	6828      	ldr	r0, [r5, #0]
 80191ce:	f7f7 fbb7 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 80191d2:	2800      	cmp	r0, #0
 80191d4:	d0f2      	beq.n	80191bc <rmw_destroy_client+0x10>
 80191d6:	686e      	ldr	r6, [r5, #4]
 80191d8:	2e00      	cmp	r6, #0
 80191da:	d0ef      	beq.n	80191bc <rmw_destroy_client+0x10>
 80191dc:	6864      	ldr	r4, [r4, #4]
 80191de:	6932      	ldr	r2, [r6, #16]
 80191e0:	6920      	ldr	r0, [r4, #16]
 80191e2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80191e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80191ea:	6819      	ldr	r1, [r3, #0]
 80191ec:	f7f9 f9f0 	bl	80125d0 <uxr_buffer_cancel_data>
 80191f0:	4602      	mov	r2, r0
 80191f2:	6920      	ldr	r0, [r4, #16]
 80191f4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 80191f8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80191fc:	f7f7 fb26 	bl	801084c <run_xrce_session>
 8019200:	6920      	ldr	r0, [r4, #16]
 8019202:	6932      	ldr	r2, [r6, #16]
 8019204:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8019208:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801920c:	6819      	ldr	r1, [r3, #0]
 801920e:	f7f8 ff97 	bl	8012140 <uxr_buffer_delete_entity>
 8019212:	4602      	mov	r2, r0
 8019214:	6920      	ldr	r0, [r4, #16]
 8019216:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801921a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801921e:	f7f7 fb15 	bl	801084c <run_xrce_session>
 8019222:	4603      	mov	r3, r0
 8019224:	4628      	mov	r0, r5
 8019226:	2b00      	cmp	r3, #0
 8019228:	bf14      	ite	ne
 801922a:	2400      	movne	r4, #0
 801922c:	2402      	moveq	r4, #2
 801922e:	f7f7 f9eb 	bl	8010608 <rmw_uxrce_fini_client_memory>
 8019232:	e7c4      	b.n	80191be <rmw_destroy_client+0x12>

08019234 <rmw_get_implementation_identifier>:
 8019234:	4b01      	ldr	r3, [pc, #4]	@ (801923c <rmw_get_implementation_identifier+0x8>)
 8019236:	6818      	ldr	r0, [r3, #0]
 8019238:	4770      	bx	lr
 801923a:	bf00      	nop
 801923c:	0801d764 	.word	0x0801d764

08019240 <create_topic>:
 8019240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019244:	4605      	mov	r5, r0
 8019246:	b084      	sub	sp, #16
 8019248:	4822      	ldr	r0, [pc, #136]	@ (80192d4 <create_topic+0x94>)
 801924a:	460f      	mov	r7, r1
 801924c:	4616      	mov	r6, r2
 801924e:	f7ff ff89 	bl	8019164 <get_memory>
 8019252:	4604      	mov	r4, r0
 8019254:	2800      	cmp	r0, #0
 8019256:	d039      	beq.n	80192cc <create_topic+0x8c>
 8019258:	692b      	ldr	r3, [r5, #16]
 801925a:	2102      	movs	r1, #2
 801925c:	6884      	ldr	r4, [r0, #8]
 801925e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019262:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 80192dc <create_topic+0x9c>
 8019266:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 801926a:	1c42      	adds	r2, r0, #1
 801926c:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8019270:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 8019274:	f7f9 f97c 	bl	8012570 <uxr_object_id>
 8019278:	223c      	movs	r2, #60	@ 0x3c
 801927a:	6120      	str	r0, [r4, #16]
 801927c:	4641      	mov	r1, r8
 801927e:	4638      	mov	r0, r7
 8019280:	f7f7 fb46 	bl	8010910 <generate_topic_name>
 8019284:	b1f0      	cbz	r0, 80192c4 <create_topic+0x84>
 8019286:	4f14      	ldr	r7, [pc, #80]	@ (80192d8 <create_topic+0x98>)
 8019288:	4630      	mov	r0, r6
 801928a:	2264      	movs	r2, #100	@ 0x64
 801928c:	4639      	mov	r1, r7
 801928e:	f7f7 fb11 	bl	80108b4 <generate_type_name>
 8019292:	b1b8      	cbz	r0, 80192c4 <create_topic+0x84>
 8019294:	6928      	ldr	r0, [r5, #16]
 8019296:	2106      	movs	r1, #6
 8019298:	696b      	ldr	r3, [r5, #20]
 801929a:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 801929e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80192a2:	f8cd 8000 	str.w	r8, [sp]
 80192a6:	e9cd 7101 	strd	r7, r1, [sp, #4]
 80192aa:	6811      	ldr	r1, [r2, #0]
 80192ac:	6922      	ldr	r2, [r4, #16]
 80192ae:	f7f8 ffc5 	bl	801223c <uxr_buffer_create_topic_bin>
 80192b2:	4602      	mov	r2, r0
 80192b4:	6928      	ldr	r0, [r5, #16]
 80192b6:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 80192ba:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 80192be:	f7f7 fac5 	bl	801084c <run_xrce_session>
 80192c2:	b918      	cbnz	r0, 80192cc <create_topic+0x8c>
 80192c4:	4620      	mov	r0, r4
 80192c6:	2400      	movs	r4, #0
 80192c8:	f7f7 f9b4 	bl	8010634 <rmw_uxrce_fini_topic_memory>
 80192cc:	4620      	mov	r0, r4
 80192ce:	b004      	add	sp, #16
 80192d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80192d4:	24012f54 	.word	0x24012f54
 80192d8:	24012fd4 	.word	0x24012fd4
 80192dc:	24012f98 	.word	0x24012f98

080192e0 <destroy_topic>:
 80192e0:	b538      	push	{r3, r4, r5, lr}
 80192e2:	6985      	ldr	r5, [r0, #24]
 80192e4:	b1dd      	cbz	r5, 801931e <destroy_topic+0x3e>
 80192e6:	4604      	mov	r4, r0
 80192e8:	6928      	ldr	r0, [r5, #16]
 80192ea:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 80192ee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80192f2:	6922      	ldr	r2, [r4, #16]
 80192f4:	6819      	ldr	r1, [r3, #0]
 80192f6:	f7f8 ff23 	bl	8012140 <uxr_buffer_delete_entity>
 80192fa:	4602      	mov	r2, r0
 80192fc:	6928      	ldr	r0, [r5, #16]
 80192fe:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8019302:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8019306:	f7f7 faa1 	bl	801084c <run_xrce_session>
 801930a:	4603      	mov	r3, r0
 801930c:	4620      	mov	r0, r4
 801930e:	2b00      	cmp	r3, #0
 8019310:	bf14      	ite	ne
 8019312:	2400      	movne	r4, #0
 8019314:	2402      	moveq	r4, #2
 8019316:	f7f7 f98d 	bl	8010634 <rmw_uxrce_fini_topic_memory>
 801931a:	4620      	mov	r0, r4
 801931c:	bd38      	pop	{r3, r4, r5, pc}
 801931e:	2401      	movs	r4, #1
 8019320:	4620      	mov	r0, r4
 8019322:	bd38      	pop	{r3, r4, r5, pc}

08019324 <rmw_send_request>:
 8019324:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019328:	4604      	mov	r4, r0
 801932a:	6800      	ldr	r0, [r0, #0]
 801932c:	b08b      	sub	sp, #44	@ 0x2c
 801932e:	460e      	mov	r6, r1
 8019330:	4615      	mov	r5, r2
 8019332:	b128      	cbz	r0, 8019340 <rmw_send_request+0x1c>
 8019334:	4b21      	ldr	r3, [pc, #132]	@ (80193bc <rmw_send_request+0x98>)
 8019336:	6819      	ldr	r1, [r3, #0]
 8019338:	f7e6 ffd2 	bl	80002e0 <strcmp>
 801933c:	2800      	cmp	r0, #0
 801933e:	d139      	bne.n	80193b4 <rmw_send_request+0x90>
 8019340:	6864      	ldr	r4, [r4, #4]
 8019342:	2700      	movs	r7, #0
 8019344:	6963      	ldr	r3, [r4, #20]
 8019346:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 801934a:	689b      	ldr	r3, [r3, #8]
 801934c:	4798      	blx	r3
 801934e:	f8d0 9004 	ldr.w	r9, [r0, #4]
 8019352:	4630      	mov	r0, r6
 8019354:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019358:	4798      	blx	r3
 801935a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 801935e:	9000      	str	r0, [sp, #0]
 8019360:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 8019364:	6922      	ldr	r2, [r4, #16]
 8019366:	ab02      	add	r3, sp, #8
 8019368:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 801936a:	f7fb f9d1 	bl	8014710 <uxr_prepare_output_stream>
 801936e:	e9c5 0700 	strd	r0, r7, [r5]
 8019372:	b198      	cbz	r0, 801939c <rmw_send_request+0x78>
 8019374:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8019378:	a902      	add	r1, sp, #8
 801937a:	4630      	mov	r0, r6
 801937c:	4798      	blx	r3
 801937e:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8019382:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8019386:	2b01      	cmp	r3, #1
 8019388:	d00c      	beq.n	80193a4 <rmw_send_request+0x80>
 801938a:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 801938c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019390:	f7f9 feee 	bl	8013170 <uxr_run_session_until_confirm_delivery>
 8019394:	4638      	mov	r0, r7
 8019396:	b00b      	add	sp, #44	@ 0x2c
 8019398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801939c:	2001      	movs	r0, #1
 801939e:	b00b      	add	sp, #44	@ 0x2c
 80193a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80193a8:	f7f9 fb28 	bl	80129fc <uxr_flash_output_streams>
 80193ac:	4638      	mov	r0, r7
 80193ae:	b00b      	add	sp, #44	@ 0x2c
 80193b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193b4:	200c      	movs	r0, #12
 80193b6:	b00b      	add	sp, #44	@ 0x2c
 80193b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80193bc:	0801d764 	.word	0x0801d764

080193c0 <rmw_take_request>:
 80193c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80193c4:	4605      	mov	r5, r0
 80193c6:	6800      	ldr	r0, [r0, #0]
 80193c8:	b089      	sub	sp, #36	@ 0x24
 80193ca:	460c      	mov	r4, r1
 80193cc:	4690      	mov	r8, r2
 80193ce:	461e      	mov	r6, r3
 80193d0:	b128      	cbz	r0, 80193de <rmw_take_request+0x1e>
 80193d2:	4b28      	ldr	r3, [pc, #160]	@ (8019474 <rmw_take_request+0xb4>)
 80193d4:	6819      	ldr	r1, [r3, #0]
 80193d6:	f7e6 ff83 	bl	80002e0 <strcmp>
 80193da:	2800      	cmp	r0, #0
 80193dc:	d146      	bne.n	801946c <rmw_take_request+0xac>
 80193de:	b10e      	cbz	r6, 80193e4 <rmw_take_request+0x24>
 80193e0:	2300      	movs	r3, #0
 80193e2:	7033      	strb	r3, [r6, #0]
 80193e4:	f8d5 9004 	ldr.w	r9, [r5, #4]
 80193e8:	f7f7 f9b2 	bl	8010750 <rmw_uxrce_clean_expired_static_input_buffer>
 80193ec:	4648      	mov	r0, r9
 80193ee:	f7f7 f987 	bl	8010700 <rmw_uxrce_find_static_input_buffer_by_owner>
 80193f2:	4607      	mov	r7, r0
 80193f4:	b3b0      	cbz	r0, 8019464 <rmw_take_request+0xa4>
 80193f6:	6885      	ldr	r5, [r0, #8]
 80193f8:	f8d5 2838 	ldr.w	r2, [r5, #2104]	@ 0x838
 80193fc:	f8d5 383c 	ldr.w	r3, [r5, #2108]	@ 0x83c
 8019400:	e9c4 3208 	strd	r3, r2, [r4, #32]
 8019404:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 8019408:	7423      	strb	r3, [r4, #16]
 801940a:	f8b5 2834 	ldrh.w	r2, [r5, #2100]	@ 0x834
 801940e:	f895 3836 	ldrb.w	r3, [r5, #2102]	@ 0x836
 8019412:	f8a4 2011 	strh.w	r2, [r4, #17]
 8019416:	74e3      	strb	r3, [r4, #19]
 8019418:	f8d5 1828 	ldr.w	r1, [r5, #2088]	@ 0x828
 801941c:	f8d5 282c 	ldr.w	r2, [r5, #2092]	@ 0x82c
 8019420:	f8d5 3830 	ldr.w	r3, [r5, #2096]	@ 0x830
 8019424:	6161      	str	r1, [r4, #20]
 8019426:	61a2      	str	r2, [r4, #24]
 8019428:	61e3      	str	r3, [r4, #28]
 801942a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801942e:	689b      	ldr	r3, [r3, #8]
 8019430:	4798      	blx	r3
 8019432:	6844      	ldr	r4, [r0, #4]
 8019434:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 8019438:	f105 0110 	add.w	r1, r5, #16
 801943c:	4668      	mov	r0, sp
 801943e:	f7f8 fd87 	bl	8011f50 <ucdr_init_buffer>
 8019442:	4641      	mov	r1, r8
 8019444:	68e3      	ldr	r3, [r4, #12]
 8019446:	4668      	mov	r0, sp
 8019448:	4798      	blx	r3
 801944a:	4639      	mov	r1, r7
 801944c:	4604      	mov	r4, r0
 801944e:	480a      	ldr	r0, [pc, #40]	@ (8019478 <rmw_take_request+0xb8>)
 8019450:	f7ff fe98 	bl	8019184 <put_memory>
 8019454:	b106      	cbz	r6, 8019458 <rmw_take_request+0x98>
 8019456:	7034      	strb	r4, [r6, #0]
 8019458:	f084 0001 	eor.w	r0, r4, #1
 801945c:	b2c0      	uxtb	r0, r0
 801945e:	b009      	add	sp, #36	@ 0x24
 8019460:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019464:	2001      	movs	r0, #1
 8019466:	b009      	add	sp, #36	@ 0x24
 8019468:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801946c:	200c      	movs	r0, #12
 801946e:	b009      	add	sp, #36	@ 0x24
 8019470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019474:	0801d764 	.word	0x0801d764
 8019478:	24012f34 	.word	0x24012f34

0801947c <rmw_send_response>:
 801947c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801947e:	4605      	mov	r5, r0
 8019480:	6800      	ldr	r0, [r0, #0]
 8019482:	b091      	sub	sp, #68	@ 0x44
 8019484:	460c      	mov	r4, r1
 8019486:	4616      	mov	r6, r2
 8019488:	b128      	cbz	r0, 8019496 <rmw_send_response+0x1a>
 801948a:	4b29      	ldr	r3, [pc, #164]	@ (8019530 <rmw_send_response+0xb4>)
 801948c:	6819      	ldr	r1, [r3, #0]
 801948e:	f7e6 ff27 	bl	80002e0 <strcmp>
 8019492:	2800      	cmp	r0, #0
 8019494:	d141      	bne.n	801951a <rmw_send_response+0x9e>
 8019496:	686d      	ldr	r5, [r5, #4]
 8019498:	68a1      	ldr	r1, [r4, #8]
 801949a:	6860      	ldr	r0, [r4, #4]
 801949c:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801949e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80194a2:	9307      	str	r3, [sp, #28]
 80194a4:	4623      	mov	r3, r4
 80194a6:	9206      	str	r2, [sp, #24]
 80194a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80194ac:	789b      	ldrb	r3, [r3, #2]
 80194ae:	f88d 2017 	strb.w	r2, [sp, #23]
 80194b2:	f88d 3016 	strb.w	r3, [sp, #22]
 80194b6:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 80194ba:	68e2      	ldr	r2, [r4, #12]
 80194bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80194c0:	ab02      	add	r3, sp, #8
 80194c2:	696c      	ldr	r4, [r5, #20]
 80194c4:	c307      	stmia	r3!, {r0, r1, r2}
 80194c6:	68e3      	ldr	r3, [r4, #12]
 80194c8:	4798      	blx	r3
 80194ca:	6844      	ldr	r4, [r0, #4]
 80194cc:	4630      	mov	r0, r6
 80194ce:	6923      	ldr	r3, [r4, #16]
 80194d0:	4798      	blx	r3
 80194d2:	f100 0318 	add.w	r3, r0, #24
 80194d6:	6938      	ldr	r0, [r7, #16]
 80194d8:	9300      	str	r3, [sp, #0]
 80194da:	ab08      	add	r3, sp, #32
 80194dc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80194e0:	692a      	ldr	r2, [r5, #16]
 80194e2:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 80194e4:	f7fb f914 	bl	8014710 <uxr_prepare_output_stream>
 80194e8:	b910      	cbnz	r0, 80194f0 <rmw_send_response+0x74>
 80194ea:	2001      	movs	r0, #1
 80194ec:	b011      	add	sp, #68	@ 0x44
 80194ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80194f0:	a902      	add	r1, sp, #8
 80194f2:	a808      	add	r0, sp, #32
 80194f4:	f7fc f966 	bl	80157c4 <uxr_serialize_SampleIdentity>
 80194f8:	68a3      	ldr	r3, [r4, #8]
 80194fa:	a908      	add	r1, sp, #32
 80194fc:	4630      	mov	r0, r6
 80194fe:	4798      	blx	r3
 8019500:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8019504:	6938      	ldr	r0, [r7, #16]
 8019506:	2b01      	cmp	r3, #1
 8019508:	d00a      	beq.n	8019520 <rmw_send_response+0xa4>
 801950a:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 801950c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019510:	f7f9 fe2e 	bl	8013170 <uxr_run_session_until_confirm_delivery>
 8019514:	2000      	movs	r0, #0
 8019516:	b011      	add	sp, #68	@ 0x44
 8019518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801951a:	200c      	movs	r0, #12
 801951c:	b011      	add	sp, #68	@ 0x44
 801951e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019520:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019524:	f7f9 fa6a 	bl	80129fc <uxr_flash_output_streams>
 8019528:	2000      	movs	r0, #0
 801952a:	b011      	add	sp, #68	@ 0x44
 801952c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801952e:	bf00      	nop
 8019530:	0801d764 	.word	0x0801d764

08019534 <rmw_take_response>:
 8019534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019538:	4604      	mov	r4, r0
 801953a:	6800      	ldr	r0, [r0, #0]
 801953c:	b088      	sub	sp, #32
 801953e:	460f      	mov	r7, r1
 8019540:	4690      	mov	r8, r2
 8019542:	461d      	mov	r5, r3
 8019544:	b120      	cbz	r0, 8019550 <rmw_take_response+0x1c>
 8019546:	4b1d      	ldr	r3, [pc, #116]	@ (80195bc <rmw_take_response+0x88>)
 8019548:	6819      	ldr	r1, [r3, #0]
 801954a:	f7e6 fec9 	bl	80002e0 <strcmp>
 801954e:	bb68      	cbnz	r0, 80195ac <rmw_take_response+0x78>
 8019550:	b10d      	cbz	r5, 8019556 <rmw_take_response+0x22>
 8019552:	2300      	movs	r3, #0
 8019554:	702b      	strb	r3, [r5, #0]
 8019556:	6864      	ldr	r4, [r4, #4]
 8019558:	f7f7 f8fa 	bl	8010750 <rmw_uxrce_clean_expired_static_input_buffer>
 801955c:	4620      	mov	r0, r4
 801955e:	f7f7 f8cf 	bl	8010700 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019562:	4606      	mov	r6, r0
 8019564:	b330      	cbz	r0, 80195b4 <rmw_take_response+0x80>
 8019566:	6963      	ldr	r3, [r4, #20]
 8019568:	6884      	ldr	r4, [r0, #8]
 801956a:	68db      	ldr	r3, [r3, #12]
 801956c:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 8019570:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 8019574:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8019578:	4798      	blx	r3
 801957a:	6847      	ldr	r7, [r0, #4]
 801957c:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8019580:	f104 0110 	add.w	r1, r4, #16
 8019584:	4668      	mov	r0, sp
 8019586:	f7f8 fce3 	bl	8011f50 <ucdr_init_buffer>
 801958a:	4641      	mov	r1, r8
 801958c:	68fb      	ldr	r3, [r7, #12]
 801958e:	4668      	mov	r0, sp
 8019590:	4798      	blx	r3
 8019592:	4631      	mov	r1, r6
 8019594:	4604      	mov	r4, r0
 8019596:	480a      	ldr	r0, [pc, #40]	@ (80195c0 <rmw_take_response+0x8c>)
 8019598:	f7ff fdf4 	bl	8019184 <put_memory>
 801959c:	b105      	cbz	r5, 80195a0 <rmw_take_response+0x6c>
 801959e:	702c      	strb	r4, [r5, #0]
 80195a0:	f084 0001 	eor.w	r0, r4, #1
 80195a4:	b2c0      	uxtb	r0, r0
 80195a6:	b008      	add	sp, #32
 80195a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195ac:	200c      	movs	r0, #12
 80195ae:	b008      	add	sp, #32
 80195b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195b4:	2001      	movs	r0, #1
 80195b6:	b008      	add	sp, #32
 80195b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80195bc:	0801d764 	.word	0x0801d764
 80195c0:	24012f34 	.word	0x24012f34

080195c4 <rmw_take_with_info>:
 80195c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80195c6:	4604      	mov	r4, r0
 80195c8:	6800      	ldr	r0, [r0, #0]
 80195ca:	b089      	sub	sp, #36	@ 0x24
 80195cc:	460f      	mov	r7, r1
 80195ce:	4615      	mov	r5, r2
 80195d0:	b128      	cbz	r0, 80195de <rmw_take_with_info+0x1a>
 80195d2:	4b24      	ldr	r3, [pc, #144]	@ (8019664 <rmw_take_with_info+0xa0>)
 80195d4:	6819      	ldr	r1, [r3, #0]
 80195d6:	f7e6 fe83 	bl	80002e0 <strcmp>
 80195da:	2800      	cmp	r0, #0
 80195dc:	d13e      	bne.n	801965c <rmw_take_with_info+0x98>
 80195de:	b305      	cbz	r5, 8019622 <rmw_take_with_info+0x5e>
 80195e0:	2300      	movs	r3, #0
 80195e2:	6864      	ldr	r4, [r4, #4]
 80195e4:	702b      	strb	r3, [r5, #0]
 80195e6:	f7f7 f8b3 	bl	8010750 <rmw_uxrce_clean_expired_static_input_buffer>
 80195ea:	4620      	mov	r0, r4
 80195ec:	f7f7 f888 	bl	8010700 <rmw_uxrce_find_static_input_buffer_by_owner>
 80195f0:	4606      	mov	r6, r0
 80195f2:	b1f0      	cbz	r0, 8019632 <rmw_take_with_info+0x6e>
 80195f4:	6881      	ldr	r1, [r0, #8]
 80195f6:	4668      	mov	r0, sp
 80195f8:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 80195fc:	3110      	adds	r1, #16
 80195fe:	f7f8 fca7 	bl	8011f50 <ucdr_init_buffer>
 8019602:	69a3      	ldr	r3, [r4, #24]
 8019604:	4639      	mov	r1, r7
 8019606:	4668      	mov	r0, sp
 8019608:	68db      	ldr	r3, [r3, #12]
 801960a:	4798      	blx	r3
 801960c:	4604      	mov	r4, r0
 801960e:	4631      	mov	r1, r6
 8019610:	4815      	ldr	r0, [pc, #84]	@ (8019668 <rmw_take_with_info+0xa4>)
 8019612:	f7ff fdb7 	bl	8019184 <put_memory>
 8019616:	702c      	strb	r4, [r5, #0]
 8019618:	f084 0001 	eor.w	r0, r4, #1
 801961c:	b2c0      	uxtb	r0, r0
 801961e:	b009      	add	sp, #36	@ 0x24
 8019620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019622:	6864      	ldr	r4, [r4, #4]
 8019624:	f7f7 f894 	bl	8010750 <rmw_uxrce_clean_expired_static_input_buffer>
 8019628:	4620      	mov	r0, r4
 801962a:	f7f7 f869 	bl	8010700 <rmw_uxrce_find_static_input_buffer_by_owner>
 801962e:	4605      	mov	r5, r0
 8019630:	b910      	cbnz	r0, 8019638 <rmw_take_with_info+0x74>
 8019632:	2001      	movs	r0, #1
 8019634:	b009      	add	sp, #36	@ 0x24
 8019636:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019638:	68a9      	ldr	r1, [r5, #8]
 801963a:	4668      	mov	r0, sp
 801963c:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8019640:	3110      	adds	r1, #16
 8019642:	f7f8 fc85 	bl	8011f50 <ucdr_init_buffer>
 8019646:	69a3      	ldr	r3, [r4, #24]
 8019648:	4639      	mov	r1, r7
 801964a:	4668      	mov	r0, sp
 801964c:	68db      	ldr	r3, [r3, #12]
 801964e:	4798      	blx	r3
 8019650:	4629      	mov	r1, r5
 8019652:	4604      	mov	r4, r0
 8019654:	4804      	ldr	r0, [pc, #16]	@ (8019668 <rmw_take_with_info+0xa4>)
 8019656:	f7ff fd95 	bl	8019184 <put_memory>
 801965a:	e7dd      	b.n	8019618 <rmw_take_with_info+0x54>
 801965c:	200c      	movs	r0, #12
 801965e:	b009      	add	sp, #36	@ 0x24
 8019660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019662:	bf00      	nop
 8019664:	0801d764 	.word	0x0801d764
 8019668:	24012f34 	.word	0x24012f34

0801966c <rmw_wait>:
 801966c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019670:	4698      	mov	r8, r3
 8019672:	ea40 0301 	orr.w	r3, r0, r1
 8019676:	b089      	sub	sp, #36	@ 0x24
 8019678:	ea48 0303 	orr.w	r3, r8, r3
 801967c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801967e:	4313      	orrs	r3, r2
 8019680:	f000 8106 	beq.w	8019890 <rmw_wait+0x224>
 8019684:	4605      	mov	r5, r0
 8019686:	460e      	mov	r6, r1
 8019688:	4691      	mov	r9, r2
 801968a:	b16c      	cbz	r4, 80196a8 <rmw_wait+0x3c>
 801968c:	4ba6      	ldr	r3, [pc, #664]	@ (8019928 <rmw_wait+0x2bc>)
 801968e:	af04      	add	r7, sp, #16
 8019690:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8019692:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8019696:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 801969a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 801969e:	f7ff fa9b 	bl	8018bd8 <rmw_time_equal>
 80196a2:	2800      	cmp	r0, #0
 80196a4:	f000 810b 	beq.w	80198be <rmw_wait+0x252>
 80196a8:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80196ac:	f7f7 f850 	bl	8010750 <rmw_uxrce_clean_expired_static_input_buffer>
 80196b0:	4b9e      	ldr	r3, [pc, #632]	@ (801992c <rmw_wait+0x2c0>)
 80196b2:	681c      	ldr	r4, [r3, #0]
 80196b4:	b14c      	cbz	r4, 80196ca <rmw_wait+0x5e>
 80196b6:	4623      	mov	r3, r4
 80196b8:	2100      	movs	r1, #0
 80196ba:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 80196be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80196c2:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d1f7      	bne.n	80196ba <rmw_wait+0x4e>
 80196ca:	f1b9 0f00 	cmp.w	r9, #0
 80196ce:	d011      	beq.n	80196f4 <rmw_wait+0x88>
 80196d0:	f8d9 1000 	ldr.w	r1, [r9]
 80196d4:	b171      	cbz	r1, 80196f4 <rmw_wait+0x88>
 80196d6:	f8d9 c004 	ldr.w	ip, [r9, #4]
 80196da:	2300      	movs	r3, #0
 80196dc:	2001      	movs	r0, #1
 80196de:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 80196e2:	3301      	adds	r3, #1
 80196e4:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 80196e6:	4299      	cmp	r1, r3
 80196e8:	6912      	ldr	r2, [r2, #16]
 80196ea:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80196ee:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 80196f2:	d1f4      	bne.n	80196de <rmw_wait+0x72>
 80196f4:	f1b8 0f00 	cmp.w	r8, #0
 80196f8:	d011      	beq.n	801971e <rmw_wait+0xb2>
 80196fa:	f8d8 1000 	ldr.w	r1, [r8]
 80196fe:	b171      	cbz	r1, 801971e <rmw_wait+0xb2>
 8019700:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8019704:	2300      	movs	r3, #0
 8019706:	2001      	movs	r0, #1
 8019708:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801970c:	3301      	adds	r3, #1
 801970e:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8019710:	4299      	cmp	r1, r3
 8019712:	6912      	ldr	r2, [r2, #16]
 8019714:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8019718:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 801971c:	d1f4      	bne.n	8019708 <rmw_wait+0x9c>
 801971e:	b185      	cbz	r5, 8019742 <rmw_wait+0xd6>
 8019720:	6829      	ldr	r1, [r5, #0]
 8019722:	b171      	cbz	r1, 8019742 <rmw_wait+0xd6>
 8019724:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8019728:	2300      	movs	r3, #0
 801972a:	2001      	movs	r0, #1
 801972c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8019730:	3301      	adds	r3, #1
 8019732:	6a12      	ldr	r2, [r2, #32]
 8019734:	4299      	cmp	r1, r3
 8019736:	6912      	ldr	r2, [r2, #16]
 8019738:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801973c:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8019740:	d1f4      	bne.n	801972c <rmw_wait+0xc0>
 8019742:	b344      	cbz	r4, 8019796 <rmw_wait+0x12a>
 8019744:	4622      	mov	r2, r4
 8019746:	2300      	movs	r3, #0
 8019748:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 801974c:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8019750:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8019754:	440b      	add	r3, r1
 8019756:	b2db      	uxtb	r3, r3
 8019758:	2a00      	cmp	r2, #0
 801975a:	d1f5      	bne.n	8019748 <rmw_wait+0xdc>
 801975c:	2b00      	cmp	r3, #0
 801975e:	d05f      	beq.n	8019820 <rmw_wait+0x1b4>
 8019760:	1c7a      	adds	r2, r7, #1
 8019762:	d00d      	beq.n	8019780 <rmw_wait+0x114>
 8019764:	ee07 7a90 	vmov	s15, r7
 8019768:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801976c:	ee07 3a90 	vmov	s15, r3
 8019770:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8019774:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8019778:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 801977c:	ee17 7a90 	vmov	r7, s15
 8019780:	68a0      	ldr	r0, [r4, #8]
 8019782:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8019786:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 801978a:	2b00      	cmp	r3, #0
 801978c:	f040 808d 	bne.w	80198aa <rmw_wait+0x23e>
 8019790:	6864      	ldr	r4, [r4, #4]
 8019792:	2c00      	cmp	r4, #0
 8019794:	d1f4      	bne.n	8019780 <rmw_wait+0x114>
 8019796:	f1b9 0f00 	cmp.w	r9, #0
 801979a:	f000 80a1 	beq.w	80198e0 <rmw_wait+0x274>
 801979e:	f8d9 7000 	ldr.w	r7, [r9]
 80197a2:	2f00      	cmp	r7, #0
 80197a4:	f000 80a4 	beq.w	80198f0 <rmw_wait+0x284>
 80197a8:	2400      	movs	r4, #0
 80197aa:	4627      	mov	r7, r4
 80197ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80197b0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80197b4:	f7f6 ffa4 	bl	8010700 <rmw_uxrce_find_static_input_buffer_by_owner>
 80197b8:	2800      	cmp	r0, #0
 80197ba:	d03b      	beq.n	8019834 <rmw_wait+0x1c8>
 80197bc:	3401      	adds	r4, #1
 80197be:	f8d9 3000 	ldr.w	r3, [r9]
 80197c2:	2701      	movs	r7, #1
 80197c4:	42a3      	cmp	r3, r4
 80197c6:	d8f1      	bhi.n	80197ac <rmw_wait+0x140>
 80197c8:	2701      	movs	r7, #1
 80197ca:	f1b8 0f00 	cmp.w	r8, #0
 80197ce:	d010      	beq.n	80197f2 <rmw_wait+0x186>
 80197d0:	f8d8 3000 	ldr.w	r3, [r8]
 80197d4:	b16b      	cbz	r3, 80197f2 <rmw_wait+0x186>
 80197d6:	2400      	movs	r4, #0
 80197d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80197dc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80197e0:	f7f6 ff8e 	bl	8010700 <rmw_uxrce_find_static_input_buffer_by_owner>
 80197e4:	b370      	cbz	r0, 8019844 <rmw_wait+0x1d8>
 80197e6:	3401      	adds	r4, #1
 80197e8:	f8d8 3000 	ldr.w	r3, [r8]
 80197ec:	2701      	movs	r7, #1
 80197ee:	42a3      	cmp	r3, r4
 80197f0:	d8f2      	bhi.n	80197d8 <rmw_wait+0x16c>
 80197f2:	2d00      	cmp	r5, #0
 80197f4:	d035      	beq.n	8019862 <rmw_wait+0x1f6>
 80197f6:	682b      	ldr	r3, [r5, #0]
 80197f8:	b39b      	cbz	r3, 8019862 <rmw_wait+0x1f6>
 80197fa:	2400      	movs	r4, #0
 80197fc:	686b      	ldr	r3, [r5, #4]
 80197fe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8019802:	f7f6 ff7d 	bl	8010700 <rmw_uxrce_find_static_input_buffer_by_owner>
 8019806:	b328      	cbz	r0, 8019854 <rmw_wait+0x1e8>
 8019808:	3401      	adds	r4, #1
 801980a:	682b      	ldr	r3, [r5, #0]
 801980c:	2701      	movs	r7, #1
 801980e:	42a3      	cmp	r3, r4
 8019810:	d8f4      	bhi.n	80197fc <rmw_wait+0x190>
 8019812:	2e00      	cmp	r6, #0
 8019814:	d03c      	beq.n	8019890 <rmw_wait+0x224>
 8019816:	6834      	ldr	r4, [r6, #0]
 8019818:	2c00      	cmp	r4, #0
 801981a:	d039      	beq.n	8019890 <rmw_wait+0x224>
 801981c:	2701      	movs	r7, #1
 801981e:	e023      	b.n	8019868 <rmw_wait+0x1fc>
 8019820:	68a0      	ldr	r0, [r4, #8]
 8019822:	2100      	movs	r1, #0
 8019824:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8019828:	f7f9 fc68 	bl	80130fc <uxr_run_session_timeout>
 801982c:	6864      	ldr	r4, [r4, #4]
 801982e:	2c00      	cmp	r4, #0
 8019830:	d1f6      	bne.n	8019820 <rmw_wait+0x1b4>
 8019832:	e7b0      	b.n	8019796 <rmw_wait+0x12a>
 8019834:	e9d9 3200 	ldrd	r3, r2, [r9]
 8019838:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801983c:	3401      	adds	r4, #1
 801983e:	42a3      	cmp	r3, r4
 8019840:	d8b4      	bhi.n	80197ac <rmw_wait+0x140>
 8019842:	e7c2      	b.n	80197ca <rmw_wait+0x15e>
 8019844:	e9d8 3200 	ldrd	r3, r2, [r8]
 8019848:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801984c:	3401      	adds	r4, #1
 801984e:	429c      	cmp	r4, r3
 8019850:	d3c2      	bcc.n	80197d8 <rmw_wait+0x16c>
 8019852:	e7ce      	b.n	80197f2 <rmw_wait+0x186>
 8019854:	e9d5 3200 	ldrd	r3, r2, [r5]
 8019858:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 801985c:	3401      	adds	r4, #1
 801985e:	42a3      	cmp	r3, r4
 8019860:	d8cc      	bhi.n	80197fc <rmw_wait+0x190>
 8019862:	b1a6      	cbz	r6, 801988e <rmw_wait+0x222>
 8019864:	6834      	ldr	r4, [r6, #0]
 8019866:	b194      	cbz	r4, 801988e <rmw_wait+0x222>
 8019868:	2300      	movs	r3, #0
 801986a:	461d      	mov	r5, r3
 801986c:	e004      	b.n	8019878 <rmw_wait+0x20c>
 801986e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8019872:	3301      	adds	r3, #1
 8019874:	42a3      	cmp	r3, r4
 8019876:	d00a      	beq.n	801988e <rmw_wait+0x222>
 8019878:	6870      	ldr	r0, [r6, #4]
 801987a:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 801987e:	7c0a      	ldrb	r2, [r1, #16]
 8019880:	2a00      	cmp	r2, #0
 8019882:	d0f4      	beq.n	801986e <rmw_wait+0x202>
 8019884:	3301      	adds	r3, #1
 8019886:	4617      	mov	r7, r2
 8019888:	740d      	strb	r5, [r1, #16]
 801988a:	42a3      	cmp	r3, r4
 801988c:	d1f4      	bne.n	8019878 <rmw_wait+0x20c>
 801988e:	b147      	cbz	r7, 80198a2 <rmw_wait+0x236>
 8019890:	2000      	movs	r0, #0
 8019892:	b009      	add	sp, #36	@ 0x24
 8019894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019898:	b11e      	cbz	r6, 80198a2 <rmw_wait+0x236>
 801989a:	6834      	ldr	r4, [r6, #0]
 801989c:	462f      	mov	r7, r5
 801989e:	2c00      	cmp	r4, #0
 80198a0:	d1e2      	bne.n	8019868 <rmw_wait+0x1fc>
 80198a2:	2002      	movs	r0, #2
 80198a4:	b009      	add	sp, #36	@ 0x24
 80198a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80198aa:	4639      	mov	r1, r7
 80198ac:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80198b0:	f7f9 fc3e 	bl	8013130 <uxr_run_session_until_data>
 80198b4:	6864      	ldr	r4, [r4, #4]
 80198b6:	2c00      	cmp	r4, #0
 80198b8:	f47f af62 	bne.w	8019780 <rmw_wait+0x114>
 80198bc:	e76b      	b.n	8019796 <rmw_wait+0x12a>
 80198be:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80198c2:	f7ff f9df 	bl	8018c84 <rmw_time_total_nsec>
 80198c6:	2300      	movs	r3, #0
 80198c8:	4a19      	ldr	r2, [pc, #100]	@ (8019930 <rmw_wait+0x2c4>)
 80198ca:	f7e6 fdc1 	bl	8000450 <__aeabi_uldivmod>
 80198ce:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 80198d2:	4607      	mov	r7, r0
 80198d4:	f171 0300 	sbcs.w	r3, r1, #0
 80198d8:	bfa8      	it	ge
 80198da:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 80198de:	e6e5      	b.n	80196ac <rmw_wait+0x40>
 80198e0:	f1b8 0f00 	cmp.w	r8, #0
 80198e4:	d00f      	beq.n	8019906 <rmw_wait+0x29a>
 80198e6:	f8d8 3000 	ldr.w	r3, [r8]
 80198ea:	b193      	cbz	r3, 8019912 <rmw_wait+0x2a6>
 80198ec:	464f      	mov	r7, r9
 80198ee:	e772      	b.n	80197d6 <rmw_wait+0x16a>
 80198f0:	f1b8 0f00 	cmp.w	r8, #0
 80198f4:	d007      	beq.n	8019906 <rmw_wait+0x29a>
 80198f6:	f8d8 3000 	ldr.w	r3, [r8]
 80198fa:	2b00      	cmp	r3, #0
 80198fc:	f47f af6b 	bne.w	80197d6 <rmw_wait+0x16a>
 8019900:	b155      	cbz	r5, 8019918 <rmw_wait+0x2ac>
 8019902:	461f      	mov	r7, r3
 8019904:	e777      	b.n	80197f6 <rmw_wait+0x18a>
 8019906:	2d00      	cmp	r5, #0
 8019908:	d0c6      	beq.n	8019898 <rmw_wait+0x22c>
 801990a:	682b      	ldr	r3, [r5, #0]
 801990c:	b143      	cbz	r3, 8019920 <rmw_wait+0x2b4>
 801990e:	4647      	mov	r7, r8
 8019910:	e773      	b.n	80197fa <rmw_wait+0x18e>
 8019912:	b10d      	cbz	r5, 8019918 <rmw_wait+0x2ac>
 8019914:	464f      	mov	r7, r9
 8019916:	e76e      	b.n	80197f6 <rmw_wait+0x18a>
 8019918:	462f      	mov	r7, r5
 801991a:	2e00      	cmp	r6, #0
 801991c:	d1a2      	bne.n	8019864 <rmw_wait+0x1f8>
 801991e:	e7c0      	b.n	80198a2 <rmw_wait+0x236>
 8019920:	4647      	mov	r7, r8
 8019922:	2e00      	cmp	r6, #0
 8019924:	d19e      	bne.n	8019864 <rmw_wait+0x1f8>
 8019926:	e7bc      	b.n	80198a2 <rmw_wait+0x236>
 8019928:	0801cc48 	.word	0x0801cc48
 801992c:	24012f24 	.word	0x24012f24
 8019930:	000f4240 	.word	0x000f4240

08019934 <rmw_create_wait_set>:
 8019934:	b508      	push	{r3, lr}
 8019936:	4803      	ldr	r0, [pc, #12]	@ (8019944 <rmw_create_wait_set+0x10>)
 8019938:	f7ff fc14 	bl	8019164 <get_memory>
 801993c:	b108      	cbz	r0, 8019942 <rmw_create_wait_set+0xe>
 801993e:	6880      	ldr	r0, [r0, #8]
 8019940:	3010      	adds	r0, #16
 8019942:	bd08      	pop	{r3, pc}
 8019944:	24012f64 	.word	0x24012f64

08019948 <rmw_destroy_wait_set>:
 8019948:	b508      	push	{r3, lr}
 801994a:	4b08      	ldr	r3, [pc, #32]	@ (801996c <rmw_destroy_wait_set+0x24>)
 801994c:	6819      	ldr	r1, [r3, #0]
 801994e:	b911      	cbnz	r1, 8019956 <rmw_destroy_wait_set+0xe>
 8019950:	e00a      	b.n	8019968 <rmw_destroy_wait_set+0x20>
 8019952:	6849      	ldr	r1, [r1, #4]
 8019954:	b141      	cbz	r1, 8019968 <rmw_destroy_wait_set+0x20>
 8019956:	688b      	ldr	r3, [r1, #8]
 8019958:	3310      	adds	r3, #16
 801995a:	4298      	cmp	r0, r3
 801995c:	d1f9      	bne.n	8019952 <rmw_destroy_wait_set+0xa>
 801995e:	4803      	ldr	r0, [pc, #12]	@ (801996c <rmw_destroy_wait_set+0x24>)
 8019960:	f7ff fc10 	bl	8019184 <put_memory>
 8019964:	2000      	movs	r0, #0
 8019966:	bd08      	pop	{r3, pc}
 8019968:	2001      	movs	r0, #1
 801996a:	bd08      	pop	{r3, pc}
 801996c:	24012f64 	.word	0x24012f64

08019970 <rosidl_runtime_c__float__Sequence__init>:
 8019970:	b530      	push	{r4, r5, lr}
 8019972:	4604      	mov	r4, r0
 8019974:	b087      	sub	sp, #28
 8019976:	b130      	cbz	r0, 8019986 <rosidl_runtime_c__float__Sequence__init+0x16>
 8019978:	460d      	mov	r5, r1
 801997a:	b931      	cbnz	r1, 801998a <rosidl_runtime_c__float__Sequence__init+0x1a>
 801997c:	460b      	mov	r3, r1
 801997e:	2001      	movs	r0, #1
 8019980:	60a5      	str	r5, [r4, #8]
 8019982:	e9c4 3500 	strd	r3, r5, [r4]
 8019986:	b007      	add	sp, #28
 8019988:	bd30      	pop	{r4, r5, pc}
 801998a:	a801      	add	r0, sp, #4
 801998c:	f7f5 fdaa 	bl	800f4e4 <rcutils_get_default_allocator>
 8019990:	9b01      	ldr	r3, [sp, #4]
 8019992:	9905      	ldr	r1, [sp, #20]
 8019994:	00a8      	lsls	r0, r5, #2
 8019996:	4798      	blx	r3
 8019998:	4603      	mov	r3, r0
 801999a:	2800      	cmp	r0, #0
 801999c:	d1ef      	bne.n	801997e <rosidl_runtime_c__float__Sequence__init+0xe>
 801999e:	e7f2      	b.n	8019986 <rosidl_runtime_c__float__Sequence__init+0x16>

080199a0 <rosidl_runtime_c__float__Sequence__fini>:
 80199a0:	b188      	cbz	r0, 80199c6 <rosidl_runtime_c__float__Sequence__fini+0x26>
 80199a2:	6803      	ldr	r3, [r0, #0]
 80199a4:	b510      	push	{r4, lr}
 80199a6:	4604      	mov	r4, r0
 80199a8:	b086      	sub	sp, #24
 80199aa:	b153      	cbz	r3, 80199c2 <rosidl_runtime_c__float__Sequence__fini+0x22>
 80199ac:	a801      	add	r0, sp, #4
 80199ae:	f7f5 fd99 	bl	800f4e4 <rcutils_get_default_allocator>
 80199b2:	9b02      	ldr	r3, [sp, #8]
 80199b4:	9905      	ldr	r1, [sp, #20]
 80199b6:	6820      	ldr	r0, [r4, #0]
 80199b8:	4798      	blx	r3
 80199ba:	2300      	movs	r3, #0
 80199bc:	e9c4 3300 	strd	r3, r3, [r4]
 80199c0:	60a3      	str	r3, [r4, #8]
 80199c2:	b006      	add	sp, #24
 80199c4:	bd10      	pop	{r4, pc}
 80199c6:	4770      	bx	lr

080199c8 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80199c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80199cc:	6805      	ldr	r5, [r0, #0]
 80199ce:	4604      	mov	r4, r0
 80199d0:	460e      	mov	r6, r1
 80199d2:	4628      	mov	r0, r5
 80199d4:	f7e6 fc84 	bl	80002e0 <strcmp>
 80199d8:	b1c8      	cbz	r0, 8019a0e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80199da:	4b11      	ldr	r3, [pc, #68]	@ (8019a20 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	429d      	cmp	r5, r3
 80199e0:	d112      	bne.n	8019a08 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80199e2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80199e6:	f8d8 4000 	ldr.w	r4, [r8]
 80199ea:	b16c      	cbz	r4, 8019a08 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80199ec:	f8d8 5008 	ldr.w	r5, [r8, #8]
 80199f0:	2700      	movs	r7, #0
 80199f2:	3d04      	subs	r5, #4
 80199f4:	4631      	mov	r1, r6
 80199f6:	f855 0f04 	ldr.w	r0, [r5, #4]!
 80199fa:	f7e6 fc71 	bl	80002e0 <strcmp>
 80199fe:	00bb      	lsls	r3, r7, #2
 8019a00:	b140      	cbz	r0, 8019a14 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8019a02:	3701      	adds	r7, #1
 8019a04:	42bc      	cmp	r4, r7
 8019a06:	d1f5      	bne.n	80199f4 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 8019a08:	2000      	movs	r0, #0
 8019a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a0e:	4620      	mov	r0, r4
 8019a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019a14:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8019a18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019a1c:	58d3      	ldr	r3, [r2, r3]
 8019a1e:	4718      	bx	r3
 8019a20:	240001b4 	.word	0x240001b4

08019a24 <std_msgs__msg__Float32MultiArray__init>:
 8019a24:	b570      	push	{r4, r5, r6, lr}
 8019a26:	4605      	mov	r5, r0
 8019a28:	b1b0      	cbz	r0, 8019a58 <std_msgs__msg__Float32MultiArray__init+0x34>
 8019a2a:	f000 f8b3 	bl	8019b94 <std_msgs__msg__MultiArrayLayout__init>
 8019a2e:	4604      	mov	r4, r0
 8019a30:	b148      	cbz	r0, 8019a46 <std_msgs__msg__Float32MultiArray__init+0x22>
 8019a32:	f105 0610 	add.w	r6, r5, #16
 8019a36:	2100      	movs	r1, #0
 8019a38:	4630      	mov	r0, r6
 8019a3a:	f7ff ff99 	bl	8019970 <rosidl_runtime_c__float__Sequence__init>
 8019a3e:	4604      	mov	r4, r0
 8019a40:	b168      	cbz	r0, 8019a5e <std_msgs__msg__Float32MultiArray__init+0x3a>
 8019a42:	4620      	mov	r0, r4
 8019a44:	bd70      	pop	{r4, r5, r6, pc}
 8019a46:	4628      	mov	r0, r5
 8019a48:	f000 f8b6 	bl	8019bb8 <std_msgs__msg__MultiArrayLayout__fini>
 8019a4c:	f105 0010 	add.w	r0, r5, #16
 8019a50:	f7ff ffa6 	bl	80199a0 <rosidl_runtime_c__float__Sequence__fini>
 8019a54:	4620      	mov	r0, r4
 8019a56:	bd70      	pop	{r4, r5, r6, pc}
 8019a58:	4604      	mov	r4, r0
 8019a5a:	4620      	mov	r0, r4
 8019a5c:	bd70      	pop	{r4, r5, r6, pc}
 8019a5e:	4628      	mov	r0, r5
 8019a60:	f000 f8aa 	bl	8019bb8 <std_msgs__msg__MultiArrayLayout__fini>
 8019a64:	4630      	mov	r0, r6
 8019a66:	f7ff ff9b 	bl	80199a0 <rosidl_runtime_c__float__Sequence__fini>
 8019a6a:	e7ea      	b.n	8019a42 <std_msgs__msg__Float32MultiArray__init+0x1e>

08019a6c <std_msgs__msg__Float32MultiArray__fini>:
 8019a6c:	b148      	cbz	r0, 8019a82 <std_msgs__msg__Float32MultiArray__fini+0x16>
 8019a6e:	b510      	push	{r4, lr}
 8019a70:	4604      	mov	r4, r0
 8019a72:	f000 f8a1 	bl	8019bb8 <std_msgs__msg__MultiArrayLayout__fini>
 8019a76:	f104 0010 	add.w	r0, r4, #16
 8019a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019a7e:	f7ff bf8f 	b.w	80199a0 <rosidl_runtime_c__float__Sequence__fini>
 8019a82:	4770      	bx	lr

08019a84 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>:
 8019a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a88:	b086      	sub	sp, #24
 8019a8a:	4689      	mov	r9, r1
 8019a8c:	4682      	mov	sl, r0
 8019a8e:	a801      	add	r0, sp, #4
 8019a90:	f7f5 fd28 	bl	800f4e4 <rcutils_get_default_allocator>
 8019a94:	f1b9 0f00 	cmp.w	r9, #0
 8019a98:	d02e      	beq.n	8019af8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x74>
 8019a9a:	2114      	movs	r1, #20
 8019a9c:	4648      	mov	r0, r9
 8019a9e:	e9dd 3804 	ldrd	r3, r8, [sp, #16]
 8019aa2:	4642      	mov	r2, r8
 8019aa4:	4798      	blx	r3
 8019aa6:	4607      	mov	r7, r0
 8019aa8:	b380      	cbz	r0, 8019b0c <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x88>
 8019aaa:	4606      	mov	r6, r0
 8019aac:	2400      	movs	r4, #0
 8019aae:	e003      	b.n	8019ab8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x34>
 8019ab0:	3401      	adds	r4, #1
 8019ab2:	3614      	adds	r6, #20
 8019ab4:	45a1      	cmp	r9, r4
 8019ab6:	d020      	beq.n	8019afa <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 8019ab8:	4630      	mov	r0, r6
 8019aba:	f001 fc29 	bl	801b310 <rosidl_runtime_c__String__init>
 8019abe:	4605      	mov	r5, r0
 8019ac0:	2800      	cmp	r0, #0
 8019ac2:	d1f5      	bne.n	8019ab0 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x2c>
 8019ac4:	4630      	mov	r0, r6
 8019ac6:	f001 fc39 	bl	801b33c <rosidl_runtime_c__String__fini>
 8019aca:	45a1      	cmp	r9, r4
 8019acc:	d915      	bls.n	8019afa <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x76>
 8019ace:	b15c      	cbz	r4, 8019ae8 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x64>
 8019ad0:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8019ad4:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8019ad8:	3c14      	subs	r4, #20
 8019ada:	4620      	mov	r0, r4
 8019adc:	f001 fc2e 	bl	801b33c <rosidl_runtime_c__String__fini>
 8019ae0:	42a7      	cmp	r7, r4
 8019ae2:	f1a4 0414 	sub.w	r4, r4, #20
 8019ae6:	d1f8      	bne.n	8019ada <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x56>
 8019ae8:	4638      	mov	r0, r7
 8019aea:	9b02      	ldr	r3, [sp, #8]
 8019aec:	4641      	mov	r1, r8
 8019aee:	4798      	blx	r3
 8019af0:	4628      	mov	r0, r5
 8019af2:	b006      	add	sp, #24
 8019af4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019af8:	464f      	mov	r7, r9
 8019afa:	2501      	movs	r5, #1
 8019afc:	f8ca 9008 	str.w	r9, [sl, #8]
 8019b00:	e9ca 7900 	strd	r7, r9, [sl]
 8019b04:	4628      	mov	r0, r5
 8019b06:	b006      	add	sp, #24
 8019b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b0c:	4605      	mov	r5, r0
 8019b0e:	e7f9      	b.n	8019b04 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0+0x80>

08019b10 <std_msgs__msg__MultiArrayDimension__init>:
 8019b10:	b538      	push	{r3, r4, r5, lr}
 8019b12:	4604      	mov	r4, r0
 8019b14:	b128      	cbz	r0, 8019b22 <std_msgs__msg__MultiArrayDimension__init+0x12>
 8019b16:	f001 fbfb 	bl	801b310 <rosidl_runtime_c__String__init>
 8019b1a:	4605      	mov	r5, r0
 8019b1c:	b120      	cbz	r0, 8019b28 <std_msgs__msg__MultiArrayDimension__init+0x18>
 8019b1e:	4628      	mov	r0, r5
 8019b20:	bd38      	pop	{r3, r4, r5, pc}
 8019b22:	4605      	mov	r5, r0
 8019b24:	4628      	mov	r0, r5
 8019b26:	bd38      	pop	{r3, r4, r5, pc}
 8019b28:	4620      	mov	r0, r4
 8019b2a:	f001 fc07 	bl	801b33c <rosidl_runtime_c__String__fini>
 8019b2e:	4628      	mov	r0, r5
 8019b30:	bd38      	pop	{r3, r4, r5, pc}
 8019b32:	bf00      	nop

08019b34 <std_msgs__msg__MultiArrayDimension__fini>:
 8019b34:	b108      	cbz	r0, 8019b3a <std_msgs__msg__MultiArrayDimension__fini+0x6>
 8019b36:	f001 bc01 	b.w	801b33c <rosidl_runtime_c__String__fini>
 8019b3a:	4770      	bx	lr

08019b3c <std_msgs__msg__MultiArrayDimension__Sequence__init>:
 8019b3c:	b108      	cbz	r0, 8019b42 <std_msgs__msg__MultiArrayDimension__Sequence__init+0x6>
 8019b3e:	f7ff bfa1 	b.w	8019a84 <std_msgs__msg__MultiArrayDimension__Sequence__init.part.0>
 8019b42:	4770      	bx	lr

08019b44 <std_msgs__msg__MultiArrayDimension__Sequence__fini>:
 8019b44:	b320      	cbz	r0, 8019b90 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x4c>
 8019b46:	b530      	push	{r4, r5, lr}
 8019b48:	b087      	sub	sp, #28
 8019b4a:	4605      	mov	r5, r0
 8019b4c:	a801      	add	r0, sp, #4
 8019b4e:	f7f5 fcc9 	bl	800f4e4 <rcutils_get_default_allocator>
 8019b52:	682a      	ldr	r2, [r5, #0]
 8019b54:	b1b2      	cbz	r2, 8019b84 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x40>
 8019b56:	68a9      	ldr	r1, [r5, #8]
 8019b58:	b161      	cbz	r1, 8019b74 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8019b5a:	2400      	movs	r4, #0
 8019b5c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8019b60:	eb12 0083 	adds.w	r0, r2, r3, lsl #2
 8019b64:	d010      	beq.n	8019b88 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x44>
 8019b66:	f001 fbe9 	bl	801b33c <rosidl_runtime_c__String__fini>
 8019b6a:	3401      	adds	r4, #1
 8019b6c:	68a9      	ldr	r1, [r5, #8]
 8019b6e:	682a      	ldr	r2, [r5, #0]
 8019b70:	428c      	cmp	r4, r1
 8019b72:	d3f3      	bcc.n	8019b5c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8019b74:	9b02      	ldr	r3, [sp, #8]
 8019b76:	4610      	mov	r0, r2
 8019b78:	9905      	ldr	r1, [sp, #20]
 8019b7a:	4798      	blx	r3
 8019b7c:	2300      	movs	r3, #0
 8019b7e:	e9c5 3300 	strd	r3, r3, [r5]
 8019b82:	60ab      	str	r3, [r5, #8]
 8019b84:	b007      	add	sp, #28
 8019b86:	bd30      	pop	{r4, r5, pc}
 8019b88:	3401      	adds	r4, #1
 8019b8a:	428c      	cmp	r4, r1
 8019b8c:	d3e6      	bcc.n	8019b5c <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x18>
 8019b8e:	e7f1      	b.n	8019b74 <std_msgs__msg__MultiArrayDimension__Sequence__fini+0x30>
 8019b90:	4770      	bx	lr
 8019b92:	bf00      	nop

08019b94 <std_msgs__msg__MultiArrayLayout__init>:
 8019b94:	b538      	push	{r3, r4, r5, lr}
 8019b96:	4604      	mov	r4, r0
 8019b98:	b130      	cbz	r0, 8019ba8 <std_msgs__msg__MultiArrayLayout__init+0x14>
 8019b9a:	2100      	movs	r1, #0
 8019b9c:	f7ff ffce 	bl	8019b3c <std_msgs__msg__MultiArrayDimension__Sequence__init>
 8019ba0:	4605      	mov	r5, r0
 8019ba2:	b120      	cbz	r0, 8019bae <std_msgs__msg__MultiArrayLayout__init+0x1a>
 8019ba4:	4628      	mov	r0, r5
 8019ba6:	bd38      	pop	{r3, r4, r5, pc}
 8019ba8:	4605      	mov	r5, r0
 8019baa:	4628      	mov	r0, r5
 8019bac:	bd38      	pop	{r3, r4, r5, pc}
 8019bae:	4620      	mov	r0, r4
 8019bb0:	f7ff ffc8 	bl	8019b44 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8019bb4:	4628      	mov	r0, r5
 8019bb6:	bd38      	pop	{r3, r4, r5, pc}

08019bb8 <std_msgs__msg__MultiArrayLayout__fini>:
 8019bb8:	b108      	cbz	r0, 8019bbe <std_msgs__msg__MultiArrayLayout__fini+0x6>
 8019bba:	f7ff bfc3 	b.w	8019b44 <std_msgs__msg__MultiArrayDimension__Sequence__fini>
 8019bbe:	4770      	bx	lr

08019bc0 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_init_function>:
 8019bc0:	f7ff bfa6 	b.w	8019b10 <std_msgs__msg__MultiArrayDimension__init>

08019bc4 <std_msgs__msg__MultiArrayDimension__rosidl_typesupport_introspection_c__MultiArrayDimension_fini_function>:
 8019bc4:	f7ff bfb6 	b.w	8019b34 <std_msgs__msg__MultiArrayDimension__fini>

08019bc8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8019bc8:	4b04      	ldr	r3, [pc, #16]	@ (8019bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019bca:	681a      	ldr	r2, [r3, #0]
 8019bcc:	b10a      	cbz	r2, 8019bd2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0xa>
 8019bce:	4803      	ldr	r0, [pc, #12]	@ (8019bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019bd0:	4770      	bx	lr
 8019bd2:	4a03      	ldr	r2, [pc, #12]	@ (8019be0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x18>)
 8019bd4:	4801      	ldr	r0, [pc, #4]	@ (8019bdc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x14>)
 8019bd6:	6812      	ldr	r2, [r2, #0]
 8019bd8:	601a      	str	r2, [r3, #0]
 8019bda:	4770      	bx	lr
 8019bdc:	24000270 	.word	0x24000270
 8019be0:	240001b8 	.word	0x240001b8

08019be4 <_MultiArrayDimension__cdr_serialize>:
 8019be4:	b1d0      	cbz	r0, 8019c1c <_MultiArrayDimension__cdr_serialize+0x38>
 8019be6:	b570      	push	{r4, r5, r6, lr}
 8019be8:	6806      	ldr	r6, [r0, #0]
 8019bea:	4604      	mov	r4, r0
 8019bec:	460d      	mov	r5, r1
 8019bee:	b196      	cbz	r6, 8019c16 <_MultiArrayDimension__cdr_serialize+0x32>
 8019bf0:	4630      	mov	r0, r6
 8019bf2:	f7e6 fb7f 	bl	80002f4 <strlen>
 8019bf6:	1c42      	adds	r2, r0, #1
 8019bf8:	4631      	mov	r1, r6
 8019bfa:	6060      	str	r0, [r4, #4]
 8019bfc:	4628      	mov	r0, r5
 8019bfe:	f7f8 fa1b 	bl	8012038 <ucdr_serialize_sequence_char>
 8019c02:	68e1      	ldr	r1, [r4, #12]
 8019c04:	4628      	mov	r0, r5
 8019c06:	f7f7 fadd 	bl	80111c4 <ucdr_serialize_uint32_t>
 8019c0a:	6921      	ldr	r1, [r4, #16]
 8019c0c:	4628      	mov	r0, r5
 8019c0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c12:	f7f7 bad7 	b.w	80111c4 <ucdr_serialize_uint32_t>
 8019c16:	4632      	mov	r2, r6
 8019c18:	4630      	mov	r0, r6
 8019c1a:	e7ed      	b.n	8019bf8 <_MultiArrayDimension__cdr_serialize+0x14>
 8019c1c:	4770      	bx	lr
 8019c1e:	bf00      	nop

08019c20 <get_serialized_size_std_msgs__msg__MultiArrayDimension>:
 8019c20:	b570      	push	{r4, r5, r6, lr}
 8019c22:	4604      	mov	r4, r0
 8019c24:	b1b0      	cbz	r0, 8019c54 <get_serialized_size_std_msgs__msg__MultiArrayDimension+0x34>
 8019c26:	460d      	mov	r5, r1
 8019c28:	2104      	movs	r1, #4
 8019c2a:	4628      	mov	r0, r5
 8019c2c:	f7f8 f994 	bl	8011f58 <ucdr_alignment>
 8019c30:	6866      	ldr	r6, [r4, #4]
 8019c32:	1d6b      	adds	r3, r5, #5
 8019c34:	2104      	movs	r1, #4
 8019c36:	f1c5 0504 	rsb	r5, r5, #4
 8019c3a:	4433      	add	r3, r6
 8019c3c:	181e      	adds	r6, r3, r0
 8019c3e:	4630      	mov	r0, r6
 8019c40:	f7f8 f98a 	bl	8011f58 <ucdr_alignment>
 8019c44:	2104      	movs	r1, #4
 8019c46:	1844      	adds	r4, r0, r1
 8019c48:	4434      	add	r4, r6
 8019c4a:	4620      	mov	r0, r4
 8019c4c:	f7f8 f984 	bl	8011f58 <ucdr_alignment>
 8019c50:	4428      	add	r0, r5
 8019c52:	4420      	add	r0, r4
 8019c54:	bd70      	pop	{r4, r5, r6, pc}
 8019c56:	bf00      	nop

08019c58 <_MultiArrayDimension__cdr_deserialize>:
 8019c58:	b570      	push	{r4, r5, r6, lr}
 8019c5a:	460c      	mov	r4, r1
 8019c5c:	b082      	sub	sp, #8
 8019c5e:	b1d9      	cbz	r1, 8019c98 <_MultiArrayDimension__cdr_deserialize+0x40>
 8019c60:	688e      	ldr	r6, [r1, #8]
 8019c62:	ab01      	add	r3, sp, #4
 8019c64:	6809      	ldr	r1, [r1, #0]
 8019c66:	4605      	mov	r5, r0
 8019c68:	4632      	mov	r2, r6
 8019c6a:	f7f8 f9f7 	bl	801205c <ucdr_deserialize_sequence_char>
 8019c6e:	9b01      	ldr	r3, [sp, #4]
 8019c70:	b970      	cbnz	r0, 8019c90 <_MultiArrayDimension__cdr_deserialize+0x38>
 8019c72:	429e      	cmp	r6, r3
 8019c74:	d313      	bcc.n	8019c9e <_MultiArrayDimension__cdr_deserialize+0x46>
 8019c76:	f104 010c 	add.w	r1, r4, #12
 8019c7a:	4628      	mov	r0, r5
 8019c7c:	f7f7 fbd2 	bl	8011424 <ucdr_deserialize_uint32_t>
 8019c80:	f104 0110 	add.w	r1, r4, #16
 8019c84:	4628      	mov	r0, r5
 8019c86:	b002      	add	sp, #8
 8019c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8019c8c:	f7f7 bbca 	b.w	8011424 <ucdr_deserialize_uint32_t>
 8019c90:	b103      	cbz	r3, 8019c94 <_MultiArrayDimension__cdr_deserialize+0x3c>
 8019c92:	3b01      	subs	r3, #1
 8019c94:	6063      	str	r3, [r4, #4]
 8019c96:	e7ee      	b.n	8019c76 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8019c98:	4608      	mov	r0, r1
 8019c9a:	b002      	add	sp, #8
 8019c9c:	bd70      	pop	{r4, r5, r6, pc}
 8019c9e:	2101      	movs	r1, #1
 8019ca0:	75a8      	strb	r0, [r5, #22]
 8019ca2:	7569      	strb	r1, [r5, #21]
 8019ca4:	6060      	str	r0, [r4, #4]
 8019ca6:	4628      	mov	r0, r5
 8019ca8:	f7f8 f96e 	bl	8011f88 <ucdr_align_to>
 8019cac:	9901      	ldr	r1, [sp, #4]
 8019cae:	4628      	mov	r0, r5
 8019cb0:	f7f8 f9a2 	bl	8011ff8 <ucdr_advance_buffer>
 8019cb4:	e7df      	b.n	8019c76 <_MultiArrayDimension__cdr_deserialize+0x1e>
 8019cb6:	bf00      	nop

08019cb8 <_MultiArrayDimension__max_serialized_size>:
 8019cb8:	b510      	push	{r4, lr}
 8019cba:	2104      	movs	r1, #4
 8019cbc:	2000      	movs	r0, #0
 8019cbe:	f7f8 f94b 	bl	8011f58 <ucdr_alignment>
 8019cc2:	2104      	movs	r1, #4
 8019cc4:	1844      	adds	r4, r0, r1
 8019cc6:	4620      	mov	r0, r4
 8019cc8:	f7f8 f946 	bl	8011f58 <ucdr_alignment>
 8019ccc:	3004      	adds	r0, #4
 8019cce:	4420      	add	r0, r4
 8019cd0:	bd10      	pop	{r4, pc}
 8019cd2:	bf00      	nop

08019cd4 <_MultiArrayDimension__get_serialized_size>:
 8019cd4:	b510      	push	{r4, lr}
 8019cd6:	4604      	mov	r4, r0
 8019cd8:	b190      	cbz	r0, 8019d00 <_MultiArrayDimension__get_serialized_size+0x2c>
 8019cda:	2104      	movs	r1, #4
 8019cdc:	2000      	movs	r0, #0
 8019cde:	f7f8 f93b 	bl	8011f58 <ucdr_alignment>
 8019ce2:	6863      	ldr	r3, [r4, #4]
 8019ce4:	2104      	movs	r1, #4
 8019ce6:	3305      	adds	r3, #5
 8019ce8:	181c      	adds	r4, r3, r0
 8019cea:	4620      	mov	r0, r4
 8019cec:	f7f8 f934 	bl	8011f58 <ucdr_alignment>
 8019cf0:	2104      	movs	r1, #4
 8019cf2:	4408      	add	r0, r1
 8019cf4:	4404      	add	r4, r0
 8019cf6:	4620      	mov	r0, r4
 8019cf8:	f7f8 f92e 	bl	8011f58 <ucdr_alignment>
 8019cfc:	3004      	adds	r0, #4
 8019cfe:	4420      	add	r0, r4
 8019d00:	bd10      	pop	{r4, pc}
 8019d02:	bf00      	nop

08019d04 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension>:
 8019d04:	4800      	ldr	r0, [pc, #0]	@ (8019d08 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__MultiArrayDimension+0x4>)
 8019d06:	4770      	bx	lr
 8019d08:	2400027c 	.word	0x2400027c

08019d0c <ucdr_serialize_endian_array_char>:
 8019d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d10:	4619      	mov	r1, r3
 8019d12:	461f      	mov	r7, r3
 8019d14:	4605      	mov	r5, r0
 8019d16:	4690      	mov	r8, r2
 8019d18:	f7f8 f8c6 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8019d1c:	b9e0      	cbnz	r0, 8019d58 <ucdr_serialize_endian_array_char+0x4c>
 8019d1e:	463e      	mov	r6, r7
 8019d20:	e00b      	b.n	8019d3a <ucdr_serialize_endian_array_char+0x2e>
 8019d22:	4441      	add	r1, r8
 8019d24:	68a8      	ldr	r0, [r5, #8]
 8019d26:	4622      	mov	r2, r4
 8019d28:	1b36      	subs	r6, r6, r4
 8019d2a:	f002 f902 	bl	801bf32 <memcpy>
 8019d2e:	68ab      	ldr	r3, [r5, #8]
 8019d30:	6928      	ldr	r0, [r5, #16]
 8019d32:	4423      	add	r3, r4
 8019d34:	4420      	add	r0, r4
 8019d36:	60ab      	str	r3, [r5, #8]
 8019d38:	6128      	str	r0, [r5, #16]
 8019d3a:	4631      	mov	r1, r6
 8019d3c:	2201      	movs	r2, #1
 8019d3e:	4628      	mov	r0, r5
 8019d40:	f7f8 f93c 	bl	8011fbc <ucdr_check_final_buffer_behavior_array>
 8019d44:	1bb9      	subs	r1, r7, r6
 8019d46:	4604      	mov	r4, r0
 8019d48:	2800      	cmp	r0, #0
 8019d4a:	d1ea      	bne.n	8019d22 <ucdr_serialize_endian_array_char+0x16>
 8019d4c:	2301      	movs	r3, #1
 8019d4e:	7da8      	ldrb	r0, [r5, #22]
 8019d50:	756b      	strb	r3, [r5, #21]
 8019d52:	4058      	eors	r0, r3
 8019d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d58:	463a      	mov	r2, r7
 8019d5a:	4641      	mov	r1, r8
 8019d5c:	68a8      	ldr	r0, [r5, #8]
 8019d5e:	f002 f8e8 	bl	801bf32 <memcpy>
 8019d62:	68aa      	ldr	r2, [r5, #8]
 8019d64:	692b      	ldr	r3, [r5, #16]
 8019d66:	443a      	add	r2, r7
 8019d68:	443b      	add	r3, r7
 8019d6a:	60aa      	str	r2, [r5, #8]
 8019d6c:	612b      	str	r3, [r5, #16]
 8019d6e:	e7ed      	b.n	8019d4c <ucdr_serialize_endian_array_char+0x40>

08019d70 <ucdr_deserialize_endian_array_char>:
 8019d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019d74:	4619      	mov	r1, r3
 8019d76:	461f      	mov	r7, r3
 8019d78:	4605      	mov	r5, r0
 8019d7a:	4690      	mov	r8, r2
 8019d7c:	f7f8 f894 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8019d80:	b9e8      	cbnz	r0, 8019dbe <ucdr_deserialize_endian_array_char+0x4e>
 8019d82:	463e      	mov	r6, r7
 8019d84:	e00c      	b.n	8019da0 <ucdr_deserialize_endian_array_char+0x30>
 8019d86:	eb08 0003 	add.w	r0, r8, r3
 8019d8a:	68a9      	ldr	r1, [r5, #8]
 8019d8c:	4622      	mov	r2, r4
 8019d8e:	1b36      	subs	r6, r6, r4
 8019d90:	f002 f8cf 	bl	801bf32 <memcpy>
 8019d94:	68ab      	ldr	r3, [r5, #8]
 8019d96:	6928      	ldr	r0, [r5, #16]
 8019d98:	4423      	add	r3, r4
 8019d9a:	4420      	add	r0, r4
 8019d9c:	60ab      	str	r3, [r5, #8]
 8019d9e:	6128      	str	r0, [r5, #16]
 8019da0:	4631      	mov	r1, r6
 8019da2:	2201      	movs	r2, #1
 8019da4:	4628      	mov	r0, r5
 8019da6:	f7f8 f909 	bl	8011fbc <ucdr_check_final_buffer_behavior_array>
 8019daa:	1bbb      	subs	r3, r7, r6
 8019dac:	4604      	mov	r4, r0
 8019dae:	2800      	cmp	r0, #0
 8019db0:	d1e9      	bne.n	8019d86 <ucdr_deserialize_endian_array_char+0x16>
 8019db2:	2301      	movs	r3, #1
 8019db4:	7da8      	ldrb	r0, [r5, #22]
 8019db6:	756b      	strb	r3, [r5, #21]
 8019db8:	4058      	eors	r0, r3
 8019dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019dbe:	463a      	mov	r2, r7
 8019dc0:	68a9      	ldr	r1, [r5, #8]
 8019dc2:	4640      	mov	r0, r8
 8019dc4:	f002 f8b5 	bl	801bf32 <memcpy>
 8019dc8:	68aa      	ldr	r2, [r5, #8]
 8019dca:	692b      	ldr	r3, [r5, #16]
 8019dcc:	443a      	add	r2, r7
 8019dce:	443b      	add	r3, r7
 8019dd0:	60aa      	str	r2, [r5, #8]
 8019dd2:	612b      	str	r3, [r5, #16]
 8019dd4:	e7ed      	b.n	8019db2 <ucdr_deserialize_endian_array_char+0x42>
 8019dd6:	bf00      	nop

08019dd8 <ucdr_serialize_array_uint8_t>:
 8019dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ddc:	4688      	mov	r8, r1
 8019dde:	4611      	mov	r1, r2
 8019de0:	4617      	mov	r7, r2
 8019de2:	4605      	mov	r5, r0
 8019de4:	f7f8 f860 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8019de8:	b9e0      	cbnz	r0, 8019e24 <ucdr_serialize_array_uint8_t+0x4c>
 8019dea:	463e      	mov	r6, r7
 8019dec:	e00b      	b.n	8019e06 <ucdr_serialize_array_uint8_t+0x2e>
 8019dee:	4441      	add	r1, r8
 8019df0:	68a8      	ldr	r0, [r5, #8]
 8019df2:	4622      	mov	r2, r4
 8019df4:	1b36      	subs	r6, r6, r4
 8019df6:	f002 f89c 	bl	801bf32 <memcpy>
 8019dfa:	68ab      	ldr	r3, [r5, #8]
 8019dfc:	6928      	ldr	r0, [r5, #16]
 8019dfe:	4423      	add	r3, r4
 8019e00:	4420      	add	r0, r4
 8019e02:	60ab      	str	r3, [r5, #8]
 8019e04:	6128      	str	r0, [r5, #16]
 8019e06:	4631      	mov	r1, r6
 8019e08:	2201      	movs	r2, #1
 8019e0a:	4628      	mov	r0, r5
 8019e0c:	f7f8 f8d6 	bl	8011fbc <ucdr_check_final_buffer_behavior_array>
 8019e10:	1bb9      	subs	r1, r7, r6
 8019e12:	4604      	mov	r4, r0
 8019e14:	2800      	cmp	r0, #0
 8019e16:	d1ea      	bne.n	8019dee <ucdr_serialize_array_uint8_t+0x16>
 8019e18:	2301      	movs	r3, #1
 8019e1a:	7da8      	ldrb	r0, [r5, #22]
 8019e1c:	756b      	strb	r3, [r5, #21]
 8019e1e:	4058      	eors	r0, r3
 8019e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e24:	463a      	mov	r2, r7
 8019e26:	4641      	mov	r1, r8
 8019e28:	68a8      	ldr	r0, [r5, #8]
 8019e2a:	f002 f882 	bl	801bf32 <memcpy>
 8019e2e:	68aa      	ldr	r2, [r5, #8]
 8019e30:	692b      	ldr	r3, [r5, #16]
 8019e32:	443a      	add	r2, r7
 8019e34:	443b      	add	r3, r7
 8019e36:	60aa      	str	r2, [r5, #8]
 8019e38:	612b      	str	r3, [r5, #16]
 8019e3a:	e7ed      	b.n	8019e18 <ucdr_serialize_array_uint8_t+0x40>

08019e3c <ucdr_serialize_endian_array_uint8_t>:
 8019e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e40:	4619      	mov	r1, r3
 8019e42:	461f      	mov	r7, r3
 8019e44:	4605      	mov	r5, r0
 8019e46:	4690      	mov	r8, r2
 8019e48:	f7f8 f82e 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8019e4c:	b9e0      	cbnz	r0, 8019e88 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8019e4e:	463e      	mov	r6, r7
 8019e50:	e00b      	b.n	8019e6a <ucdr_serialize_endian_array_uint8_t+0x2e>
 8019e52:	4441      	add	r1, r8
 8019e54:	68a8      	ldr	r0, [r5, #8]
 8019e56:	4622      	mov	r2, r4
 8019e58:	1b36      	subs	r6, r6, r4
 8019e5a:	f002 f86a 	bl	801bf32 <memcpy>
 8019e5e:	68ab      	ldr	r3, [r5, #8]
 8019e60:	6928      	ldr	r0, [r5, #16]
 8019e62:	4423      	add	r3, r4
 8019e64:	4420      	add	r0, r4
 8019e66:	60ab      	str	r3, [r5, #8]
 8019e68:	6128      	str	r0, [r5, #16]
 8019e6a:	4631      	mov	r1, r6
 8019e6c:	2201      	movs	r2, #1
 8019e6e:	4628      	mov	r0, r5
 8019e70:	f7f8 f8a4 	bl	8011fbc <ucdr_check_final_buffer_behavior_array>
 8019e74:	1bb9      	subs	r1, r7, r6
 8019e76:	4604      	mov	r4, r0
 8019e78:	2800      	cmp	r0, #0
 8019e7a:	d1ea      	bne.n	8019e52 <ucdr_serialize_endian_array_uint8_t+0x16>
 8019e7c:	2301      	movs	r3, #1
 8019e7e:	7da8      	ldrb	r0, [r5, #22]
 8019e80:	756b      	strb	r3, [r5, #21]
 8019e82:	4058      	eors	r0, r3
 8019e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019e88:	463a      	mov	r2, r7
 8019e8a:	4641      	mov	r1, r8
 8019e8c:	68a8      	ldr	r0, [r5, #8]
 8019e8e:	f002 f850 	bl	801bf32 <memcpy>
 8019e92:	68aa      	ldr	r2, [r5, #8]
 8019e94:	692b      	ldr	r3, [r5, #16]
 8019e96:	443a      	add	r2, r7
 8019e98:	443b      	add	r3, r7
 8019e9a:	60aa      	str	r2, [r5, #8]
 8019e9c:	612b      	str	r3, [r5, #16]
 8019e9e:	e7ed      	b.n	8019e7c <ucdr_serialize_endian_array_uint8_t+0x40>

08019ea0 <ucdr_deserialize_array_uint8_t>:
 8019ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ea4:	4688      	mov	r8, r1
 8019ea6:	4611      	mov	r1, r2
 8019ea8:	4617      	mov	r7, r2
 8019eaa:	4605      	mov	r5, r0
 8019eac:	f7f7 fffc 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8019eb0:	b9e8      	cbnz	r0, 8019eee <ucdr_deserialize_array_uint8_t+0x4e>
 8019eb2:	463e      	mov	r6, r7
 8019eb4:	e00c      	b.n	8019ed0 <ucdr_deserialize_array_uint8_t+0x30>
 8019eb6:	eb08 0003 	add.w	r0, r8, r3
 8019eba:	68a9      	ldr	r1, [r5, #8]
 8019ebc:	4622      	mov	r2, r4
 8019ebe:	1b36      	subs	r6, r6, r4
 8019ec0:	f002 f837 	bl	801bf32 <memcpy>
 8019ec4:	68ab      	ldr	r3, [r5, #8]
 8019ec6:	6928      	ldr	r0, [r5, #16]
 8019ec8:	4423      	add	r3, r4
 8019eca:	4420      	add	r0, r4
 8019ecc:	60ab      	str	r3, [r5, #8]
 8019ece:	6128      	str	r0, [r5, #16]
 8019ed0:	4631      	mov	r1, r6
 8019ed2:	2201      	movs	r2, #1
 8019ed4:	4628      	mov	r0, r5
 8019ed6:	f7f8 f871 	bl	8011fbc <ucdr_check_final_buffer_behavior_array>
 8019eda:	1bbb      	subs	r3, r7, r6
 8019edc:	4604      	mov	r4, r0
 8019ede:	2800      	cmp	r0, #0
 8019ee0:	d1e9      	bne.n	8019eb6 <ucdr_deserialize_array_uint8_t+0x16>
 8019ee2:	2301      	movs	r3, #1
 8019ee4:	7da8      	ldrb	r0, [r5, #22]
 8019ee6:	756b      	strb	r3, [r5, #21]
 8019ee8:	4058      	eors	r0, r3
 8019eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019eee:	463a      	mov	r2, r7
 8019ef0:	68a9      	ldr	r1, [r5, #8]
 8019ef2:	4640      	mov	r0, r8
 8019ef4:	f002 f81d 	bl	801bf32 <memcpy>
 8019ef8:	68aa      	ldr	r2, [r5, #8]
 8019efa:	692b      	ldr	r3, [r5, #16]
 8019efc:	443a      	add	r2, r7
 8019efe:	443b      	add	r3, r7
 8019f00:	60aa      	str	r2, [r5, #8]
 8019f02:	612b      	str	r3, [r5, #16]
 8019f04:	e7ed      	b.n	8019ee2 <ucdr_deserialize_array_uint8_t+0x42>
 8019f06:	bf00      	nop

08019f08 <ucdr_deserialize_endian_array_uint8_t>:
 8019f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f0c:	4619      	mov	r1, r3
 8019f0e:	461f      	mov	r7, r3
 8019f10:	4605      	mov	r5, r0
 8019f12:	4690      	mov	r8, r2
 8019f14:	f7f7 ffc8 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8019f18:	b9e8      	cbnz	r0, 8019f56 <ucdr_deserialize_endian_array_uint8_t+0x4e>
 8019f1a:	463e      	mov	r6, r7
 8019f1c:	e00c      	b.n	8019f38 <ucdr_deserialize_endian_array_uint8_t+0x30>
 8019f1e:	eb08 0003 	add.w	r0, r8, r3
 8019f22:	68a9      	ldr	r1, [r5, #8]
 8019f24:	4622      	mov	r2, r4
 8019f26:	1b36      	subs	r6, r6, r4
 8019f28:	f002 f803 	bl	801bf32 <memcpy>
 8019f2c:	68ab      	ldr	r3, [r5, #8]
 8019f2e:	6928      	ldr	r0, [r5, #16]
 8019f30:	4423      	add	r3, r4
 8019f32:	4420      	add	r0, r4
 8019f34:	60ab      	str	r3, [r5, #8]
 8019f36:	6128      	str	r0, [r5, #16]
 8019f38:	4631      	mov	r1, r6
 8019f3a:	2201      	movs	r2, #1
 8019f3c:	4628      	mov	r0, r5
 8019f3e:	f7f8 f83d 	bl	8011fbc <ucdr_check_final_buffer_behavior_array>
 8019f42:	1bbb      	subs	r3, r7, r6
 8019f44:	4604      	mov	r4, r0
 8019f46:	2800      	cmp	r0, #0
 8019f48:	d1e9      	bne.n	8019f1e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8019f4a:	2301      	movs	r3, #1
 8019f4c:	7da8      	ldrb	r0, [r5, #22]
 8019f4e:	756b      	strb	r3, [r5, #21]
 8019f50:	4058      	eors	r0, r3
 8019f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019f56:	463a      	mov	r2, r7
 8019f58:	68a9      	ldr	r1, [r5, #8]
 8019f5a:	4640      	mov	r0, r8
 8019f5c:	f001 ffe9 	bl	801bf32 <memcpy>
 8019f60:	68aa      	ldr	r2, [r5, #8]
 8019f62:	692b      	ldr	r3, [r5, #16]
 8019f64:	443a      	add	r2, r7
 8019f66:	443b      	add	r3, r7
 8019f68:	60aa      	str	r2, [r5, #8]
 8019f6a:	612b      	str	r3, [r5, #16]
 8019f6c:	e7ed      	b.n	8019f4a <ucdr_deserialize_endian_array_uint8_t+0x42>
 8019f6e:	bf00      	nop

08019f70 <ucdr_serialize_endian_array_float>:
 8019f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019f74:	4604      	mov	r4, r0
 8019f76:	4688      	mov	r8, r1
 8019f78:	2104      	movs	r1, #4
 8019f7a:	4616      	mov	r6, r2
 8019f7c:	461f      	mov	r7, r3
 8019f7e:	f7f7 fff3 	bl	8011f68 <ucdr_buffer_alignment>
 8019f82:	4601      	mov	r1, r0
 8019f84:	4620      	mov	r0, r4
 8019f86:	7d65      	ldrb	r5, [r4, #21]
 8019f88:	f7f8 f836 	bl	8011ff8 <ucdr_advance_buffer>
 8019f8c:	f1b8 0f01 	cmp.w	r8, #1
 8019f90:	7565      	strb	r5, [r4, #21]
 8019f92:	d00f      	beq.n	8019fb4 <ucdr_serialize_endian_array_float+0x44>
 8019f94:	b14f      	cbz	r7, 8019faa <ucdr_serialize_endian_array_float+0x3a>
 8019f96:	2500      	movs	r5, #0
 8019f98:	3501      	adds	r5, #1
 8019f9a:	ecb6 0a01 	vldmia	r6!, {s0}
 8019f9e:	4641      	mov	r1, r8
 8019fa0:	4620      	mov	r0, r4
 8019fa2:	f7f7 fe51 	bl	8011c48 <ucdr_serialize_endian_float>
 8019fa6:	42af      	cmp	r7, r5
 8019fa8:	d1f6      	bne.n	8019f98 <ucdr_serialize_endian_array_float+0x28>
 8019faa:	7da0      	ldrb	r0, [r4, #22]
 8019fac:	f080 0001 	eor.w	r0, r0, #1
 8019fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019fb4:	00bf      	lsls	r7, r7, #2
 8019fb6:	4620      	mov	r0, r4
 8019fb8:	4639      	mov	r1, r7
 8019fba:	f7f7 ff75 	bl	8011ea8 <ucdr_check_buffer_available_for>
 8019fbe:	b9f8      	cbnz	r0, 801a000 <ucdr_serialize_endian_array_float+0x90>
 8019fc0:	46b8      	mov	r8, r7
 8019fc2:	e00c      	b.n	8019fde <ucdr_serialize_endian_array_float+0x6e>
 8019fc4:	462a      	mov	r2, r5
 8019fc6:	4431      	add	r1, r6
 8019fc8:	68a0      	ldr	r0, [r4, #8]
 8019fca:	eba8 0805 	sub.w	r8, r8, r5
 8019fce:	f001 ffb0 	bl	801bf32 <memcpy>
 8019fd2:	68a2      	ldr	r2, [r4, #8]
 8019fd4:	6923      	ldr	r3, [r4, #16]
 8019fd6:	442a      	add	r2, r5
 8019fd8:	442b      	add	r3, r5
 8019fda:	60a2      	str	r2, [r4, #8]
 8019fdc:	6123      	str	r3, [r4, #16]
 8019fde:	4641      	mov	r1, r8
 8019fe0:	2204      	movs	r2, #4
 8019fe2:	4620      	mov	r0, r4
 8019fe4:	f7f7 ffea 	bl	8011fbc <ucdr_check_final_buffer_behavior_array>
 8019fe8:	eba7 0108 	sub.w	r1, r7, r8
 8019fec:	4605      	mov	r5, r0
 8019fee:	2800      	cmp	r0, #0
 8019ff0:	d1e8      	bne.n	8019fc4 <ucdr_serialize_endian_array_float+0x54>
 8019ff2:	2304      	movs	r3, #4
 8019ff4:	7da0      	ldrb	r0, [r4, #22]
 8019ff6:	7563      	strb	r3, [r4, #21]
 8019ff8:	f080 0001 	eor.w	r0, r0, #1
 8019ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a000:	463a      	mov	r2, r7
 801a002:	4631      	mov	r1, r6
 801a004:	68a0      	ldr	r0, [r4, #8]
 801a006:	f001 ff94 	bl	801bf32 <memcpy>
 801a00a:	68a2      	ldr	r2, [r4, #8]
 801a00c:	6923      	ldr	r3, [r4, #16]
 801a00e:	443a      	add	r2, r7
 801a010:	441f      	add	r7, r3
 801a012:	60a2      	str	r2, [r4, #8]
 801a014:	6127      	str	r7, [r4, #16]
 801a016:	e7ec      	b.n	8019ff2 <ucdr_serialize_endian_array_float+0x82>

0801a018 <ucdr_deserialize_endian_array_float>:
 801a018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a01c:	4605      	mov	r5, r0
 801a01e:	4688      	mov	r8, r1
 801a020:	2104      	movs	r1, #4
 801a022:	4614      	mov	r4, r2
 801a024:	461f      	mov	r7, r3
 801a026:	f7f7 ff9f 	bl	8011f68 <ucdr_buffer_alignment>
 801a02a:	4601      	mov	r1, r0
 801a02c:	4628      	mov	r0, r5
 801a02e:	7d6e      	ldrb	r6, [r5, #21]
 801a030:	f7f7 ffe2 	bl	8011ff8 <ucdr_advance_buffer>
 801a034:	f1b8 0f01 	cmp.w	r8, #1
 801a038:	756e      	strb	r6, [r5, #21]
 801a03a:	d010      	beq.n	801a05e <ucdr_deserialize_endian_array_float+0x46>
 801a03c:	b157      	cbz	r7, 801a054 <ucdr_deserialize_endian_array_float+0x3c>
 801a03e:	2600      	movs	r6, #0
 801a040:	3601      	adds	r6, #1
 801a042:	4622      	mov	r2, r4
 801a044:	4641      	mov	r1, r8
 801a046:	4628      	mov	r0, r5
 801a048:	f7f7 fe98 	bl	8011d7c <ucdr_deserialize_endian_float>
 801a04c:	42b7      	cmp	r7, r6
 801a04e:	f104 0404 	add.w	r4, r4, #4
 801a052:	d1f5      	bne.n	801a040 <ucdr_deserialize_endian_array_float+0x28>
 801a054:	7da8      	ldrb	r0, [r5, #22]
 801a056:	f080 0001 	eor.w	r0, r0, #1
 801a05a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a05e:	00bf      	lsls	r7, r7, #2
 801a060:	4628      	mov	r0, r5
 801a062:	4639      	mov	r1, r7
 801a064:	f7f7 ff20 	bl	8011ea8 <ucdr_check_buffer_available_for>
 801a068:	b9f8      	cbnz	r0, 801a0aa <ucdr_deserialize_endian_array_float+0x92>
 801a06a:	46b8      	mov	r8, r7
 801a06c:	e00c      	b.n	801a088 <ucdr_deserialize_endian_array_float+0x70>
 801a06e:	18e0      	adds	r0, r4, r3
 801a070:	4632      	mov	r2, r6
 801a072:	68a9      	ldr	r1, [r5, #8]
 801a074:	eba8 0806 	sub.w	r8, r8, r6
 801a078:	f001 ff5b 	bl	801bf32 <memcpy>
 801a07c:	68aa      	ldr	r2, [r5, #8]
 801a07e:	692b      	ldr	r3, [r5, #16]
 801a080:	4432      	add	r2, r6
 801a082:	4433      	add	r3, r6
 801a084:	60aa      	str	r2, [r5, #8]
 801a086:	612b      	str	r3, [r5, #16]
 801a088:	4641      	mov	r1, r8
 801a08a:	2204      	movs	r2, #4
 801a08c:	4628      	mov	r0, r5
 801a08e:	f7f7 ff95 	bl	8011fbc <ucdr_check_final_buffer_behavior_array>
 801a092:	eba7 0308 	sub.w	r3, r7, r8
 801a096:	4606      	mov	r6, r0
 801a098:	2800      	cmp	r0, #0
 801a09a:	d1e8      	bne.n	801a06e <ucdr_deserialize_endian_array_float+0x56>
 801a09c:	2304      	movs	r3, #4
 801a09e:	7da8      	ldrb	r0, [r5, #22]
 801a0a0:	756b      	strb	r3, [r5, #21]
 801a0a2:	f080 0001 	eor.w	r0, r0, #1
 801a0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a0aa:	463a      	mov	r2, r7
 801a0ac:	68a9      	ldr	r1, [r5, #8]
 801a0ae:	4620      	mov	r0, r4
 801a0b0:	f001 ff3f 	bl	801bf32 <memcpy>
 801a0b4:	68aa      	ldr	r2, [r5, #8]
 801a0b6:	692b      	ldr	r3, [r5, #16]
 801a0b8:	443a      	add	r2, r7
 801a0ba:	441f      	add	r7, r3
 801a0bc:	60aa      	str	r2, [r5, #8]
 801a0be:	612f      	str	r7, [r5, #16]
 801a0c0:	e7ec      	b.n	801a09c <ucdr_deserialize_endian_array_float+0x84>
 801a0c2:	bf00      	nop

0801a0c4 <ucdr_serialize_string>:
 801a0c4:	b510      	push	{r4, lr}
 801a0c6:	b082      	sub	sp, #8
 801a0c8:	4604      	mov	r4, r0
 801a0ca:	4608      	mov	r0, r1
 801a0cc:	9101      	str	r1, [sp, #4]
 801a0ce:	f7e6 f911 	bl	80002f4 <strlen>
 801a0d2:	4602      	mov	r2, r0
 801a0d4:	9901      	ldr	r1, [sp, #4]
 801a0d6:	4620      	mov	r0, r4
 801a0d8:	3201      	adds	r2, #1
 801a0da:	b002      	add	sp, #8
 801a0dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0e0:	f7f7 bfaa 	b.w	8012038 <ucdr_serialize_sequence_char>

0801a0e4 <ucdr_deserialize_string>:
 801a0e4:	b500      	push	{lr}
 801a0e6:	b083      	sub	sp, #12
 801a0e8:	ab01      	add	r3, sp, #4
 801a0ea:	f7f7 ffb7 	bl	801205c <ucdr_deserialize_sequence_char>
 801a0ee:	b003      	add	sp, #12
 801a0f0:	f85d fb04 	ldr.w	pc, [sp], #4

0801a0f4 <uxr_init_input_best_effort_stream>:
 801a0f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a0f8:	8003      	strh	r3, [r0, #0]
 801a0fa:	4770      	bx	lr

0801a0fc <uxr_reset_input_best_effort_stream>:
 801a0fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a100:	8003      	strh	r3, [r0, #0]
 801a102:	4770      	bx	lr

0801a104 <uxr_receive_best_effort_message>:
 801a104:	b538      	push	{r3, r4, r5, lr}
 801a106:	4604      	mov	r4, r0
 801a108:	8800      	ldrh	r0, [r0, #0]
 801a10a:	460d      	mov	r5, r1
 801a10c:	f000 fd44 	bl	801ab98 <uxr_seq_num_cmp>
 801a110:	4603      	mov	r3, r0
 801a112:	0fc0      	lsrs	r0, r0, #31
 801a114:	2b00      	cmp	r3, #0
 801a116:	bfb8      	it	lt
 801a118:	8025      	strhlt	r5, [r4, #0]
 801a11a:	bd38      	pop	{r3, r4, r5, pc}

0801a11c <on_full_input_buffer>:
 801a11c:	b570      	push	{r4, r5, r6, lr}
 801a11e:	460c      	mov	r4, r1
 801a120:	4605      	mov	r5, r0
 801a122:	8908      	ldrh	r0, [r1, #8]
 801a124:	682b      	ldr	r3, [r5, #0]
 801a126:	7d26      	ldrb	r6, [r4, #20]
 801a128:	e9d1 1200 	ldrd	r1, r2, [r1]
 801a12c:	fbb2 f2f0 	udiv	r2, r2, r0
 801a130:	eba3 0c01 	sub.w	ip, r3, r1
 801a134:	fbbc fcf2 	udiv	ip, ip, r2
 801a138:	f10c 0c01 	add.w	ip, ip, #1
 801a13c:	fa1f f38c 	uxth.w	r3, ip
 801a140:	fbb3 fcf0 	udiv	ip, r3, r0
 801a144:	fb00 331c 	mls	r3, r0, ip, r3
 801a148:	b29b      	uxth	r3, r3
 801a14a:	fb02 f303 	mul.w	r3, r2, r3
 801a14e:	1d18      	adds	r0, r3, #4
 801a150:	4408      	add	r0, r1
 801a152:	f850 2c04 	ldr.w	r2, [r0, #-4]
 801a156:	b116      	cbz	r6, 801a15e <on_full_input_buffer+0x42>
 801a158:	2600      	movs	r6, #0
 801a15a:	f840 6c04 	str.w	r6, [r0, #-4]
 801a15e:	2a03      	cmp	r2, #3
 801a160:	d801      	bhi.n	801a166 <on_full_input_buffer+0x4a>
 801a162:	2001      	movs	r0, #1
 801a164:	bd70      	pop	{r4, r5, r6, pc}
 801a166:	3308      	adds	r3, #8
 801a168:	4628      	mov	r0, r5
 801a16a:	3a04      	subs	r2, #4
 801a16c:	4419      	add	r1, r3
 801a16e:	692b      	ldr	r3, [r5, #16]
 801a170:	f7f7 fee6 	bl	8011f40 <ucdr_init_buffer_origin>
 801a174:	4628      	mov	r0, r5
 801a176:	4622      	mov	r2, r4
 801a178:	4902      	ldr	r1, [pc, #8]	@ (801a184 <on_full_input_buffer+0x68>)
 801a17a:	f7f7 febd 	bl	8011ef8 <ucdr_set_on_full_buffer_callback>
 801a17e:	2000      	movs	r0, #0
 801a180:	bd70      	pop	{r4, r5, r6, pc}
 801a182:	bf00      	nop
 801a184:	0801a11d 	.word	0x0801a11d

0801a188 <uxr_init_input_reliable_stream>:
 801a188:	b510      	push	{r4, lr}
 801a18a:	e9c0 1200 	strd	r1, r2, [r0]
 801a18e:	2400      	movs	r4, #0
 801a190:	9a02      	ldr	r2, [sp, #8]
 801a192:	8103      	strh	r3, [r0, #8]
 801a194:	6102      	str	r2, [r0, #16]
 801a196:	7504      	strb	r4, [r0, #20]
 801a198:	b1c3      	cbz	r3, 801a1cc <uxr_init_input_reliable_stream+0x44>
 801a19a:	600c      	str	r4, [r1, #0]
 801a19c:	8901      	ldrh	r1, [r0, #8]
 801a19e:	2901      	cmp	r1, #1
 801a1a0:	d914      	bls.n	801a1cc <uxr_init_input_reliable_stream+0x44>
 801a1a2:	f04f 0c01 	mov.w	ip, #1
 801a1a6:	6843      	ldr	r3, [r0, #4]
 801a1a8:	f10c 0e01 	add.w	lr, ip, #1
 801a1ac:	fbbc f2f1 	udiv	r2, ip, r1
 801a1b0:	fbb3 f3f1 	udiv	r3, r3, r1
 801a1b4:	fb01 c212 	mls	r2, r1, r2, ip
 801a1b8:	fa1f fc8e 	uxth.w	ip, lr
 801a1bc:	b292      	uxth	r2, r2
 801a1be:	fb02 f303 	mul.w	r3, r2, r3
 801a1c2:	6802      	ldr	r2, [r0, #0]
 801a1c4:	50d4      	str	r4, [r2, r3]
 801a1c6:	8901      	ldrh	r1, [r0, #8]
 801a1c8:	4561      	cmp	r1, ip
 801a1ca:	d8ec      	bhi.n	801a1a6 <uxr_init_input_reliable_stream+0x1e>
 801a1cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a1d0:	60c3      	str	r3, [r0, #12]
 801a1d2:	bd10      	pop	{r4, pc}

0801a1d4 <uxr_reset_input_reliable_stream>:
 801a1d4:	8901      	ldrh	r1, [r0, #8]
 801a1d6:	b1d9      	cbz	r1, 801a210 <uxr_reset_input_reliable_stream+0x3c>
 801a1d8:	b510      	push	{r4, lr}
 801a1da:	f04f 0e00 	mov.w	lr, #0
 801a1de:	46f4      	mov	ip, lr
 801a1e0:	4674      	mov	r4, lr
 801a1e2:	6843      	ldr	r3, [r0, #4]
 801a1e4:	f10e 0e01 	add.w	lr, lr, #1
 801a1e8:	fbbc f2f1 	udiv	r2, ip, r1
 801a1ec:	fbb3 f3f1 	udiv	r3, r3, r1
 801a1f0:	fb01 c212 	mls	r2, r1, r2, ip
 801a1f4:	fa1f fc8e 	uxth.w	ip, lr
 801a1f8:	b292      	uxth	r2, r2
 801a1fa:	fb02 f303 	mul.w	r3, r2, r3
 801a1fe:	6802      	ldr	r2, [r0, #0]
 801a200:	50d4      	str	r4, [r2, r3]
 801a202:	8901      	ldrh	r1, [r0, #8]
 801a204:	4561      	cmp	r1, ip
 801a206:	d8ec      	bhi.n	801a1e2 <uxr_reset_input_reliable_stream+0xe>
 801a208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a20c:	60c3      	str	r3, [r0, #12]
 801a20e:	bd10      	pop	{r4, pc}
 801a210:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801a214:	60c3      	str	r3, [r0, #12]
 801a216:	4770      	bx	lr

0801a218 <uxr_receive_reliable_message>:
 801a218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a21c:	4604      	mov	r4, r0
 801a21e:	460d      	mov	r5, r1
 801a220:	8901      	ldrh	r1, [r0, #8]
 801a222:	4617      	mov	r7, r2
 801a224:	8980      	ldrh	r0, [r0, #12]
 801a226:	4698      	mov	r8, r3
 801a228:	f000 fcae 	bl	801ab88 <uxr_seq_num_add>
 801a22c:	4629      	mov	r1, r5
 801a22e:	4606      	mov	r6, r0
 801a230:	89a0      	ldrh	r0, [r4, #12]
 801a232:	f000 fcb1 	bl	801ab98 <uxr_seq_num_cmp>
 801a236:	2800      	cmp	r0, #0
 801a238:	db0a      	blt.n	801a250 <uxr_receive_reliable_message+0x38>
 801a23a:	2600      	movs	r6, #0
 801a23c:	4629      	mov	r1, r5
 801a23e:	89e0      	ldrh	r0, [r4, #14]
 801a240:	f000 fcaa 	bl	801ab98 <uxr_seq_num_cmp>
 801a244:	2800      	cmp	r0, #0
 801a246:	da00      	bge.n	801a24a <uxr_receive_reliable_message+0x32>
 801a248:	81e5      	strh	r5, [r4, #14]
 801a24a:	4630      	mov	r0, r6
 801a24c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a250:	4630      	mov	r0, r6
 801a252:	4629      	mov	r1, r5
 801a254:	f000 fca0 	bl	801ab98 <uxr_seq_num_cmp>
 801a258:	2800      	cmp	r0, #0
 801a25a:	dbee      	blt.n	801a23a <uxr_receive_reliable_message+0x22>
 801a25c:	6923      	ldr	r3, [r4, #16]
 801a25e:	4638      	mov	r0, r7
 801a260:	4798      	blx	r3
 801a262:	4681      	mov	r9, r0
 801a264:	2101      	movs	r1, #1
 801a266:	89a0      	ldrh	r0, [r4, #12]
 801a268:	f000 fc8e 	bl	801ab88 <uxr_seq_num_add>
 801a26c:	f1b9 0f00 	cmp.w	r9, #0
 801a270:	bf08      	it	eq
 801a272:	4285      	cmpeq	r5, r0
 801a274:	bf0c      	ite	eq
 801a276:	2601      	moveq	r6, #1
 801a278:	2600      	movne	r6, #0
 801a27a:	d104      	bne.n	801a286 <uxr_receive_reliable_message+0x6e>
 801a27c:	2300      	movs	r3, #0
 801a27e:	9a08      	ldr	r2, [sp, #32]
 801a280:	81a0      	strh	r0, [r4, #12]
 801a282:	7013      	strb	r3, [r2, #0]
 801a284:	e7da      	b.n	801a23c <uxr_receive_reliable_message+0x24>
 801a286:	8922      	ldrh	r2, [r4, #8]
 801a288:	6863      	ldr	r3, [r4, #4]
 801a28a:	fbb5 f0f2 	udiv	r0, r5, r2
 801a28e:	fbb3 f3f2 	udiv	r3, r3, r2
 801a292:	fb02 5010 	mls	r0, r2, r0, r5
 801a296:	b280      	uxth	r0, r0
 801a298:	fb03 f000 	mul.w	r0, r3, r0
 801a29c:	6823      	ldr	r3, [r4, #0]
 801a29e:	3004      	adds	r0, #4
 801a2a0:	4418      	add	r0, r3
 801a2a2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	d1c7      	bne.n	801a23a <uxr_receive_reliable_message+0x22>
 801a2aa:	4639      	mov	r1, r7
 801a2ac:	4642      	mov	r2, r8
 801a2ae:	f001 fe40 	bl	801bf32 <memcpy>
 801a2b2:	8921      	ldrh	r1, [r4, #8]
 801a2b4:	6863      	ldr	r3, [r4, #4]
 801a2b6:	fbb5 f2f1 	udiv	r2, r5, r1
 801a2ba:	fbb3 f3f1 	udiv	r3, r3, r1
 801a2be:	fb01 5212 	mls	r2, r1, r2, r5
 801a2c2:	b292      	uxth	r2, r2
 801a2c4:	fb02 f303 	mul.w	r3, r2, r3
 801a2c8:	6822      	ldr	r2, [r4, #0]
 801a2ca:	f842 8003 	str.w	r8, [r2, r3]
 801a2ce:	2301      	movs	r3, #1
 801a2d0:	9a08      	ldr	r2, [sp, #32]
 801a2d2:	7013      	strb	r3, [r2, #0]
 801a2d4:	f1b9 0f00 	cmp.w	r9, #0
 801a2d8:	d0af      	beq.n	801a23a <uxr_receive_reliable_message+0x22>
 801a2da:	89a6      	ldrh	r6, [r4, #12]
 801a2dc:	2101      	movs	r1, #1
 801a2de:	4630      	mov	r0, r6
 801a2e0:	f000 fc52 	bl	801ab88 <uxr_seq_num_add>
 801a2e4:	8921      	ldrh	r1, [r4, #8]
 801a2e6:	6863      	ldr	r3, [r4, #4]
 801a2e8:	4606      	mov	r6, r0
 801a2ea:	fbb0 f2f1 	udiv	r2, r0, r1
 801a2ee:	fbb3 f3f1 	udiv	r3, r3, r1
 801a2f2:	fb01 0212 	mls	r2, r1, r2, r0
 801a2f6:	6820      	ldr	r0, [r4, #0]
 801a2f8:	b292      	uxth	r2, r2
 801a2fa:	fb02 f303 	mul.w	r3, r2, r3
 801a2fe:	3304      	adds	r3, #4
 801a300:	4418      	add	r0, r3
 801a302:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d097      	beq.n	801a23a <uxr_receive_reliable_message+0x22>
 801a30a:	6923      	ldr	r3, [r4, #16]
 801a30c:	4798      	blx	r3
 801a30e:	2802      	cmp	r0, #2
 801a310:	d002      	beq.n	801a318 <uxr_receive_reliable_message+0x100>
 801a312:	2801      	cmp	r0, #1
 801a314:	d0e2      	beq.n	801a2dc <uxr_receive_reliable_message+0xc4>
 801a316:	e790      	b.n	801a23a <uxr_receive_reliable_message+0x22>
 801a318:	2601      	movs	r6, #1
 801a31a:	e78f      	b.n	801a23c <uxr_receive_reliable_message+0x24>

0801a31c <uxr_next_input_reliable_buffer_available>:
 801a31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a320:	4604      	mov	r4, r0
 801a322:	460f      	mov	r7, r1
 801a324:	8980      	ldrh	r0, [r0, #12]
 801a326:	2101      	movs	r1, #1
 801a328:	4690      	mov	r8, r2
 801a32a:	f000 fc2d 	bl	801ab88 <uxr_seq_num_add>
 801a32e:	8922      	ldrh	r2, [r4, #8]
 801a330:	6866      	ldr	r6, [r4, #4]
 801a332:	fbb0 f3f2 	udiv	r3, r0, r2
 801a336:	fbb6 f6f2 	udiv	r6, r6, r2
 801a33a:	fb02 0313 	mls	r3, r2, r3, r0
 801a33e:	b29b      	uxth	r3, r3
 801a340:	fb03 f606 	mul.w	r6, r3, r6
 801a344:	6823      	ldr	r3, [r4, #0]
 801a346:	3604      	adds	r6, #4
 801a348:	441e      	add	r6, r3
 801a34a:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801a34e:	f1b9 0f00 	cmp.w	r9, #0
 801a352:	d023      	beq.n	801a39c <uxr_next_input_reliable_buffer_available+0x80>
 801a354:	4605      	mov	r5, r0
 801a356:	6923      	ldr	r3, [r4, #16]
 801a358:	4630      	mov	r0, r6
 801a35a:	4798      	blx	r3
 801a35c:	4682      	mov	sl, r0
 801a35e:	b300      	cbz	r0, 801a3a2 <uxr_next_input_reliable_buffer_available+0x86>
 801a360:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 801a364:	2101      	movs	r1, #1
 801a366:	4650      	mov	r0, sl
 801a368:	f000 fc0e 	bl	801ab88 <uxr_seq_num_add>
 801a36c:	8921      	ldrh	r1, [r4, #8]
 801a36e:	4682      	mov	sl, r0
 801a370:	6863      	ldr	r3, [r4, #4]
 801a372:	6820      	ldr	r0, [r4, #0]
 801a374:	fbba f2f1 	udiv	r2, sl, r1
 801a378:	fbb3 f3f1 	udiv	r3, r3, r1
 801a37c:	fb01 a212 	mls	r2, r1, r2, sl
 801a380:	b292      	uxth	r2, r2
 801a382:	fb02 f303 	mul.w	r3, r2, r3
 801a386:	3304      	adds	r3, #4
 801a388:	4418      	add	r0, r3
 801a38a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801a38e:	b12b      	cbz	r3, 801a39c <uxr_next_input_reliable_buffer_available+0x80>
 801a390:	6923      	ldr	r3, [r4, #16]
 801a392:	4798      	blx	r3
 801a394:	2802      	cmp	r0, #2
 801a396:	d01b      	beq.n	801a3d0 <uxr_next_input_reliable_buffer_available+0xb4>
 801a398:	2801      	cmp	r0, #1
 801a39a:	d0e3      	beq.n	801a364 <uxr_next_input_reliable_buffer_available+0x48>
 801a39c:	2000      	movs	r0, #0
 801a39e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3a2:	464a      	mov	r2, r9
 801a3a4:	4631      	mov	r1, r6
 801a3a6:	4638      	mov	r0, r7
 801a3a8:	f7f7 fdd2 	bl	8011f50 <ucdr_init_buffer>
 801a3ac:	8921      	ldrh	r1, [r4, #8]
 801a3ae:	6863      	ldr	r3, [r4, #4]
 801a3b0:	2001      	movs	r0, #1
 801a3b2:	fbb5 f2f1 	udiv	r2, r5, r1
 801a3b6:	fbb3 f3f1 	udiv	r3, r3, r1
 801a3ba:	fb01 5212 	mls	r2, r1, r2, r5
 801a3be:	b292      	uxth	r2, r2
 801a3c0:	fb02 f303 	mul.w	r3, r2, r3
 801a3c4:	6822      	ldr	r2, [r4, #0]
 801a3c6:	f842 a003 	str.w	sl, [r2, r3]
 801a3ca:	81a5      	strh	r5, [r4, #12]
 801a3cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a3d0:	8920      	ldrh	r0, [r4, #8]
 801a3d2:	eb06 0108 	add.w	r1, r6, r8
 801a3d6:	6863      	ldr	r3, [r4, #4]
 801a3d8:	eba9 0208 	sub.w	r2, r9, r8
 801a3dc:	fbb5 f6f0 	udiv	r6, r5, r0
 801a3e0:	fbb3 f3f0 	udiv	r3, r3, r0
 801a3e4:	fb00 5516 	mls	r5, r0, r6, r5
 801a3e8:	2000      	movs	r0, #0
 801a3ea:	b2ad      	uxth	r5, r5
 801a3ec:	fb03 f505 	mul.w	r5, r3, r5
 801a3f0:	6823      	ldr	r3, [r4, #0]
 801a3f2:	5158      	str	r0, [r3, r5]
 801a3f4:	4638      	mov	r0, r7
 801a3f6:	f7f7 fdab 	bl	8011f50 <ucdr_init_buffer>
 801a3fa:	4638      	mov	r0, r7
 801a3fc:	4622      	mov	r2, r4
 801a3fe:	4903      	ldr	r1, [pc, #12]	@ (801a40c <uxr_next_input_reliable_buffer_available+0xf0>)
 801a400:	f7f7 fd7a 	bl	8011ef8 <ucdr_set_on_full_buffer_callback>
 801a404:	2001      	movs	r0, #1
 801a406:	f8a4 a00c 	strh.w	sl, [r4, #12]
 801a40a:	e7c8      	b.n	801a39e <uxr_next_input_reliable_buffer_available+0x82>
 801a40c:	0801a11d 	.word	0x0801a11d

0801a410 <uxr_process_heartbeat>:
 801a410:	b538      	push	{r3, r4, r5, lr}
 801a412:	4611      	mov	r1, r2
 801a414:	4604      	mov	r4, r0
 801a416:	89c0      	ldrh	r0, [r0, #14]
 801a418:	4615      	mov	r5, r2
 801a41a:	f000 fbbd 	bl	801ab98 <uxr_seq_num_cmp>
 801a41e:	2800      	cmp	r0, #0
 801a420:	bfb8      	it	lt
 801a422:	81e5      	strhlt	r5, [r4, #14]
 801a424:	bd38      	pop	{r3, r4, r5, pc}
 801a426:	bf00      	nop

0801a428 <uxr_compute_acknack>:
 801a428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a42c:	8903      	ldrh	r3, [r0, #8]
 801a42e:	4604      	mov	r4, r0
 801a430:	460f      	mov	r7, r1
 801a432:	8985      	ldrh	r5, [r0, #12]
 801a434:	b1db      	cbz	r3, 801a46e <uxr_compute_acknack+0x46>
 801a436:	4628      	mov	r0, r5
 801a438:	2601      	movs	r6, #1
 801a43a:	e004      	b.n	801a446 <uxr_compute_acknack+0x1e>
 801a43c:	4566      	cmp	r6, ip
 801a43e:	f106 0601 	add.w	r6, r6, #1
 801a442:	d214      	bcs.n	801a46e <uxr_compute_acknack+0x46>
 801a444:	89a0      	ldrh	r0, [r4, #12]
 801a446:	b2b1      	uxth	r1, r6
 801a448:	f000 fb9e 	bl	801ab88 <uxr_seq_num_add>
 801a44c:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a450:	fbb0 f2fc 	udiv	r2, r0, ip
 801a454:	e9d4 1300 	ldrd	r1, r3, [r4]
 801a458:	fb0c 0212 	mls	r2, ip, r2, r0
 801a45c:	fbb3 f3fc 	udiv	r3, r3, ip
 801a460:	b292      	uxth	r2, r2
 801a462:	fb02 f303 	mul.w	r3, r2, r3
 801a466:	58cb      	ldr	r3, [r1, r3]
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d1e7      	bne.n	801a43c <uxr_compute_acknack+0x14>
 801a46c:	4605      	mov	r5, r0
 801a46e:	803d      	strh	r5, [r7, #0]
 801a470:	2101      	movs	r1, #1
 801a472:	89e6      	ldrh	r6, [r4, #14]
 801a474:	4628      	mov	r0, r5
 801a476:	f000 fb8b 	bl	801ab90 <uxr_seq_num_sub>
 801a47a:	4601      	mov	r1, r0
 801a47c:	4630      	mov	r0, r6
 801a47e:	f000 fb87 	bl	801ab90 <uxr_seq_num_sub>
 801a482:	4606      	mov	r6, r0
 801a484:	b328      	cbz	r0, 801a4d2 <uxr_compute_acknack+0xaa>
 801a486:	f04f 0900 	mov.w	r9, #0
 801a48a:	f04f 0801 	mov.w	r8, #1
 801a48e:	464d      	mov	r5, r9
 801a490:	fa1f f189 	uxth.w	r1, r9
 801a494:	8838      	ldrh	r0, [r7, #0]
 801a496:	f000 fb77 	bl	801ab88 <uxr_seq_num_add>
 801a49a:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801a49e:	6861      	ldr	r1, [r4, #4]
 801a4a0:	fa08 fe09 	lsl.w	lr, r8, r9
 801a4a4:	6822      	ldr	r2, [r4, #0]
 801a4a6:	f109 0901 	add.w	r9, r9, #1
 801a4aa:	ea4e 0e05 	orr.w	lr, lr, r5
 801a4ae:	fbb0 f3fc 	udiv	r3, r0, ip
 801a4b2:	fbb1 f1fc 	udiv	r1, r1, ip
 801a4b6:	fb03 001c 	mls	r0, r3, ip, r0
 801a4ba:	b283      	uxth	r3, r0
 801a4bc:	fb01 f303 	mul.w	r3, r1, r3
 801a4c0:	58d3      	ldr	r3, [r2, r3]
 801a4c2:	b90b      	cbnz	r3, 801a4c8 <uxr_compute_acknack+0xa0>
 801a4c4:	fa1f f58e 	uxth.w	r5, lr
 801a4c8:	454e      	cmp	r6, r9
 801a4ca:	d1e1      	bne.n	801a490 <uxr_compute_acknack+0x68>
 801a4cc:	4628      	mov	r0, r5
 801a4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a4d2:	4605      	mov	r5, r0
 801a4d4:	4628      	mov	r0, r5
 801a4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a4da:	bf00      	nop

0801a4dc <uxr_init_output_best_effort_stream>:
 801a4dc:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 801a4e0:	6001      	str	r1, [r0, #0]
 801a4e2:	7303      	strb	r3, [r0, #12]
 801a4e4:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801a4e8:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801a4ec:	4770      	bx	lr
 801a4ee:	bf00      	nop

0801a4f0 <uxr_reset_output_best_effort_stream>:
 801a4f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a4f4:	7b03      	ldrb	r3, [r0, #12]
 801a4f6:	81c2      	strh	r2, [r0, #14]
 801a4f8:	6043      	str	r3, [r0, #4]
 801a4fa:	4770      	bx	lr

0801a4fc <uxr_prepare_best_effort_buffer_to_write>:
 801a4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a4fe:	4604      	mov	r4, r0
 801a500:	b083      	sub	sp, #12
 801a502:	6840      	ldr	r0, [r0, #4]
 801a504:	460d      	mov	r5, r1
 801a506:	4616      	mov	r6, r2
 801a508:	f7fa f840 	bl	801458c <uxr_submessage_padding>
 801a50c:	6863      	ldr	r3, [r4, #4]
 801a50e:	4418      	add	r0, r3
 801a510:	68a3      	ldr	r3, [r4, #8]
 801a512:	1942      	adds	r2, r0, r5
 801a514:	4293      	cmp	r3, r2
 801a516:	bf2c      	ite	cs
 801a518:	2701      	movcs	r7, #1
 801a51a:	2700      	movcc	r7, #0
 801a51c:	d202      	bcs.n	801a524 <uxr_prepare_best_effort_buffer_to_write+0x28>
 801a51e:	4638      	mov	r0, r7
 801a520:	b003      	add	sp, #12
 801a522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a524:	9000      	str	r0, [sp, #0]
 801a526:	2300      	movs	r3, #0
 801a528:	4630      	mov	r0, r6
 801a52a:	6821      	ldr	r1, [r4, #0]
 801a52c:	f7f7 fcfe 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 801a530:	6861      	ldr	r1, [r4, #4]
 801a532:	4638      	mov	r0, r7
 801a534:	4429      	add	r1, r5
 801a536:	6061      	str	r1, [r4, #4]
 801a538:	b003      	add	sp, #12
 801a53a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801a53c <uxr_prepare_best_effort_buffer_to_send>:
 801a53c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a540:	4604      	mov	r4, r0
 801a542:	461d      	mov	r5, r3
 801a544:	6840      	ldr	r0, [r0, #4]
 801a546:	7b23      	ldrb	r3, [r4, #12]
 801a548:	4298      	cmp	r0, r3
 801a54a:	bf8c      	ite	hi
 801a54c:	2601      	movhi	r6, #1
 801a54e:	2600      	movls	r6, #0
 801a550:	d802      	bhi.n	801a558 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 801a552:	4630      	mov	r0, r6
 801a554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a558:	4688      	mov	r8, r1
 801a55a:	89e0      	ldrh	r0, [r4, #14]
 801a55c:	2101      	movs	r1, #1
 801a55e:	4617      	mov	r7, r2
 801a560:	f000 fb12 	bl	801ab88 <uxr_seq_num_add>
 801a564:	6823      	ldr	r3, [r4, #0]
 801a566:	81e0      	strh	r0, [r4, #14]
 801a568:	8028      	strh	r0, [r5, #0]
 801a56a:	4630      	mov	r0, r6
 801a56c:	f8c8 3000 	str.w	r3, [r8]
 801a570:	6863      	ldr	r3, [r4, #4]
 801a572:	603b      	str	r3, [r7, #0]
 801a574:	7b23      	ldrb	r3, [r4, #12]
 801a576:	6063      	str	r3, [r4, #4]
 801a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801a57c <on_full_output_buffer>:
 801a57c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a57e:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801a582:	460c      	mov	r4, r1
 801a584:	6803      	ldr	r3, [r0, #0]
 801a586:	4605      	mov	r5, r0
 801a588:	7b26      	ldrb	r6, [r4, #12]
 801a58a:	e9d1 1200 	ldrd	r1, r2, [r1]
 801a58e:	fbb2 f2fc 	udiv	r2, r2, ip
 801a592:	eba3 0e01 	sub.w	lr, r3, r1
 801a596:	6903      	ldr	r3, [r0, #16]
 801a598:	fbbe fef2 	udiv	lr, lr, r2
 801a59c:	f10e 0e01 	add.w	lr, lr, #1
 801a5a0:	fa1f fe8e 	uxth.w	lr, lr
 801a5a4:	fbbe f7fc 	udiv	r7, lr, ip
 801a5a8:	fb0c ec17 	mls	ip, ip, r7, lr
 801a5ac:	fa1f fc8c 	uxth.w	ip, ip
 801a5b0:	fb02 fc0c 	mul.w	ip, r2, ip
 801a5b4:	f851 200c 	ldr.w	r2, [r1, ip]
 801a5b8:	44b4      	add	ip, r6
 801a5ba:	1b92      	subs	r2, r2, r6
 801a5bc:	f10c 0c08 	add.w	ip, ip, #8
 801a5c0:	3a04      	subs	r2, #4
 801a5c2:	4461      	add	r1, ip
 801a5c4:	f7f7 fcbc 	bl	8011f40 <ucdr_init_buffer_origin>
 801a5c8:	4628      	mov	r0, r5
 801a5ca:	4622      	mov	r2, r4
 801a5cc:	4902      	ldr	r1, [pc, #8]	@ (801a5d8 <on_full_output_buffer+0x5c>)
 801a5ce:	f7f7 fc93 	bl	8011ef8 <ucdr_set_on_full_buffer_callback>
 801a5d2:	2000      	movs	r0, #0
 801a5d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5d6:	bf00      	nop
 801a5d8:	0801a57d 	.word	0x0801a57d

0801a5dc <uxr_init_output_reliable_stream>:
 801a5dc:	b530      	push	{r4, r5, lr}
 801a5de:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801a5e2:	8103      	strh	r3, [r0, #8]
 801a5e4:	7304      	strb	r4, [r0, #12]
 801a5e6:	e9c0 1200 	strd	r1, r2, [r0]
 801a5ea:	b1e3      	cbz	r3, 801a626 <uxr_init_output_reliable_stream+0x4a>
 801a5ec:	600c      	str	r4, [r1, #0]
 801a5ee:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a5f2:	f1bc 0f01 	cmp.w	ip, #1
 801a5f6:	d916      	bls.n	801a626 <uxr_init_output_reliable_stream+0x4a>
 801a5f8:	f04f 0e01 	mov.w	lr, #1
 801a5fc:	6843      	ldr	r3, [r0, #4]
 801a5fe:	f10e 0501 	add.w	r5, lr, #1
 801a602:	7b04      	ldrb	r4, [r0, #12]
 801a604:	6801      	ldr	r1, [r0, #0]
 801a606:	fbbe f2fc 	udiv	r2, lr, ip
 801a60a:	fbb3 f3fc 	udiv	r3, r3, ip
 801a60e:	fb0c e212 	mls	r2, ip, r2, lr
 801a612:	fa1f fe85 	uxth.w	lr, r5
 801a616:	b292      	uxth	r2, r2
 801a618:	fb02 f303 	mul.w	r3, r2, r3
 801a61c:	50cc      	str	r4, [r1, r3]
 801a61e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801a622:	45f4      	cmp	ip, lr
 801a624:	d8ea      	bhi.n	801a5fc <uxr_init_output_reliable_stream+0x20>
 801a626:	4b07      	ldr	r3, [pc, #28]	@ (801a644 <uxr_init_output_reliable_stream+0x68>)
 801a628:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a62c:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801a630:	f06f 4500 	mvn.w	r5, #2147483648	@ 0x80000000
 801a634:	f8c0 300e 	str.w	r3, [r0, #14]
 801a638:	2300      	movs	r3, #0
 801a63a:	8242      	strh	r2, [r0, #18]
 801a63c:	8403      	strh	r3, [r0, #32]
 801a63e:	e9c0 4506 	strd	r4, r5, [r0, #24]
 801a642:	bd30      	pop	{r4, r5, pc}
 801a644:	ffff0000 	.word	0xffff0000

0801a648 <uxr_reset_output_reliable_stream>:
 801a648:	8901      	ldrh	r1, [r0, #8]
 801a64a:	b510      	push	{r4, lr}
 801a64c:	b1b1      	cbz	r1, 801a67c <uxr_reset_output_reliable_stream+0x34>
 801a64e:	f04f 0e00 	mov.w	lr, #0
 801a652:	46f4      	mov	ip, lr
 801a654:	6843      	ldr	r3, [r0, #4]
 801a656:	f10e 0e01 	add.w	lr, lr, #1
 801a65a:	7b04      	ldrb	r4, [r0, #12]
 801a65c:	fbbc f2f1 	udiv	r2, ip, r1
 801a660:	fbb3 f3f1 	udiv	r3, r3, r1
 801a664:	fb01 c212 	mls	r2, r1, r2, ip
 801a668:	fa1f fc8e 	uxth.w	ip, lr
 801a66c:	b292      	uxth	r2, r2
 801a66e:	fb02 f303 	mul.w	r3, r2, r3
 801a672:	6802      	ldr	r2, [r0, #0]
 801a674:	50d4      	str	r4, [r2, r3]
 801a676:	8901      	ldrh	r1, [r0, #8]
 801a678:	4561      	cmp	r1, ip
 801a67a:	d8eb      	bhi.n	801a654 <uxr_reset_output_reliable_stream+0xc>
 801a67c:	4b08      	ldr	r3, [pc, #32]	@ (801a6a0 <uxr_reset_output_reliable_stream+0x58>)
 801a67e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801a682:	ed9f 7b05 	vldr	d7, [pc, #20]	@ 801a698 <uxr_reset_output_reliable_stream+0x50>
 801a686:	f8c0 300e 	str.w	r3, [r0, #14]
 801a68a:	2300      	movs	r3, #0
 801a68c:	8242      	strh	r2, [r0, #18]
 801a68e:	8403      	strh	r3, [r0, #32]
 801a690:	ed80 7b06 	vstr	d7, [r0, #24]
 801a694:	bd10      	pop	{r4, pc}
 801a696:	bf00      	nop
 801a698:	ffffffff 	.word	0xffffffff
 801a69c:	7fffffff 	.word	0x7fffffff
 801a6a0:	ffff0000 	.word	0xffff0000

0801a6a4 <uxr_prepare_reliable_buffer_to_write>:
 801a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6a8:	4604      	mov	r4, r0
 801a6aa:	b091      	sub	sp, #68	@ 0x44
 801a6ac:	8900      	ldrh	r0, [r0, #8]
 801a6ae:	468b      	mov	fp, r1
 801a6b0:	89e6      	ldrh	r6, [r4, #14]
 801a6b2:	9204      	str	r2, [sp, #16]
 801a6b4:	6865      	ldr	r5, [r4, #4]
 801a6b6:	6823      	ldr	r3, [r4, #0]
 801a6b8:	f894 900c 	ldrb.w	r9, [r4, #12]
 801a6bc:	fbb6 f2f0 	udiv	r2, r6, r0
 801a6c0:	fbb5 f5f0 	udiv	r5, r5, r0
 801a6c4:	fb00 6212 	mls	r2, r0, r2, r6
 801a6c8:	1f2f      	subs	r7, r5, #4
 801a6ca:	b292      	uxth	r2, r2
 801a6cc:	fb05 3202 	mla	r2, r5, r2, r3
 801a6d0:	1d11      	adds	r1, r2, #4
 801a6d2:	f8d2 8000 	ldr.w	r8, [r2]
 801a6d6:	9103      	str	r1, [sp, #12]
 801a6d8:	2800      	cmp	r0, #0
 801a6da:	f000 814a 	beq.w	801a972 <uxr_prepare_reliable_buffer_to_write+0x2ce>
 801a6de:	f04f 0c00 	mov.w	ip, #0
 801a6e2:	46e2      	mov	sl, ip
 801a6e4:	4661      	mov	r1, ip
 801a6e6:	f10c 0c01 	add.w	ip, ip, #1
 801a6ea:	fbb1 f2f0 	udiv	r2, r1, r0
 801a6ee:	fb00 1212 	mls	r2, r0, r2, r1
 801a6f2:	fa1f f18c 	uxth.w	r1, ip
 801a6f6:	b292      	uxth	r2, r2
 801a6f8:	fb05 f202 	mul.w	r2, r5, r2
 801a6fc:	589a      	ldr	r2, [r3, r2]
 801a6fe:	454a      	cmp	r2, r9
 801a700:	d103      	bne.n	801a70a <uxr_prepare_reliable_buffer_to_write+0x66>
 801a702:	f10a 0a01 	add.w	sl, sl, #1
 801a706:	fa1f fa8a 	uxth.w	sl, sl
 801a70a:	4281      	cmp	r1, r0
 801a70c:	d3eb      	bcc.n	801a6e6 <uxr_prepare_reliable_buffer_to_write+0x42>
 801a70e:	4640      	mov	r0, r8
 801a710:	2104      	movs	r1, #4
 801a712:	f8cd a014 	str.w	sl, [sp, #20]
 801a716:	f7f7 fc1f 	bl	8011f58 <ucdr_alignment>
 801a71a:	4480      	add	r8, r0
 801a71c:	eb08 020b 	add.w	r2, r8, fp
 801a720:	42ba      	cmp	r2, r7
 801a722:	f240 80ca 	bls.w	801a8ba <uxr_prepare_reliable_buffer_to_write+0x216>
 801a726:	7b22      	ldrb	r2, [r4, #12]
 801a728:	445a      	add	r2, fp
 801a72a:	42ba      	cmp	r2, r7
 801a72c:	f240 80b2 	bls.w	801a894 <uxr_prepare_reliable_buffer_to_write+0x1f0>
 801a730:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801a734:	b2bb      	uxth	r3, r7
 801a736:	eba2 0209 	sub.w	r2, r2, r9
 801a73a:	441a      	add	r2, r3
 801a73c:	b292      	uxth	r2, r2
 801a73e:	fb0a f902 	mul.w	r9, sl, r2
 801a742:	9205      	str	r2, [sp, #20]
 801a744:	45d9      	cmp	r9, fp
 801a746:	9206      	str	r2, [sp, #24]
 801a748:	f0c0 80b3 	bcc.w	801a8b2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a74c:	f108 0204 	add.w	r2, r8, #4
 801a750:	42ba      	cmp	r2, r7
 801a752:	f080 80da 	bcs.w	801a90a <uxr_prepare_reliable_buffer_to_write+0x266>
 801a756:	f1a3 0904 	sub.w	r9, r3, #4
 801a75a:	9b05      	ldr	r3, [sp, #20]
 801a75c:	eba9 0908 	sub.w	r9, r9, r8
 801a760:	fa1f f989 	uxth.w	r9, r9
 801a764:	ebab 0b09 	sub.w	fp, fp, r9
 801a768:	fbbb f2f3 	udiv	r2, fp, r3
 801a76c:	fb03 b312 	mls	r3, r3, r2, fp
 801a770:	2b00      	cmp	r3, #0
 801a772:	f040 80c4 	bne.w	801a8fe <uxr_prepare_reliable_buffer_to_write+0x25a>
 801a776:	b293      	uxth	r3, r2
 801a778:	4553      	cmp	r3, sl
 801a77a:	f200 809a 	bhi.w	801a8b2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a77e:	2b00      	cmp	r3, #0
 801a780:	f000 80f9 	beq.w	801a976 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801a784:	f8cd 801c 	str.w	r8, [sp, #28]
 801a788:	f04f 0a00 	mov.w	sl, #0
 801a78c:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801a790:	f10d 0b20 	add.w	fp, sp, #32
 801a794:	9505      	str	r5, [sp, #20]
 801a796:	461d      	mov	r5, r3
 801a798:	e000      	b.n	801a79c <uxr_prepare_reliable_buffer_to_write+0xf8>
 801a79a:	46c1      	mov	r9, r8
 801a79c:	8922      	ldrh	r2, [r4, #8]
 801a79e:	4658      	mov	r0, fp
 801a7a0:	6863      	ldr	r3, [r4, #4]
 801a7a2:	f10a 0a01 	add.w	sl, sl, #1
 801a7a6:	fbb6 f1f2 	udiv	r1, r6, r2
 801a7aa:	fbb3 f3f2 	udiv	r3, r3, r2
 801a7ae:	fb02 6111 	mls	r1, r2, r1, r6
 801a7b2:	463a      	mov	r2, r7
 801a7b4:	b289      	uxth	r1, r1
 801a7b6:	fb03 f101 	mul.w	r1, r3, r1
 801a7ba:	6823      	ldr	r3, [r4, #0]
 801a7bc:	3104      	adds	r1, #4
 801a7be:	4419      	add	r1, r3
 801a7c0:	2300      	movs	r3, #0
 801a7c2:	f851 cc04 	ldr.w	ip, [r1, #-4]
 801a7c6:	f8cd c000 	str.w	ip, [sp]
 801a7ca:	f7f7 fbaf 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 801a7ce:	464a      	mov	r2, r9
 801a7d0:	2300      	movs	r3, #0
 801a7d2:	210d      	movs	r1, #13
 801a7d4:	4658      	mov	r0, fp
 801a7d6:	f7f9 fe99 	bl	801450c <uxr_buffer_submessage_header>
 801a7da:	8921      	ldrh	r1, [r4, #8]
 801a7dc:	6863      	ldr	r3, [r4, #4]
 801a7de:	4630      	mov	r0, r6
 801a7e0:	fbb6 f2f1 	udiv	r2, r6, r1
 801a7e4:	fbb3 f3f1 	udiv	r3, r3, r1
 801a7e8:	fb01 6212 	mls	r2, r1, r2, r6
 801a7ec:	2101      	movs	r1, #1
 801a7ee:	b292      	uxth	r2, r2
 801a7f0:	fb02 f303 	mul.w	r3, r2, r3
 801a7f4:	6822      	ldr	r2, [r4, #0]
 801a7f6:	50d7      	str	r7, [r2, r3]
 801a7f8:	f000 f9c6 	bl	801ab88 <uxr_seq_num_add>
 801a7fc:	4606      	mov	r6, r0
 801a7fe:	fa1f f38a 	uxth.w	r3, sl
 801a802:	429d      	cmp	r5, r3
 801a804:	d8c9      	bhi.n	801a79a <uxr_prepare_reliable_buffer_to_write+0xf6>
 801a806:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801a80a:	9d05      	ldr	r5, [sp, #20]
 801a80c:	8920      	ldrh	r0, [r4, #8]
 801a80e:	463a      	mov	r2, r7
 801a810:	6863      	ldr	r3, [r4, #4]
 801a812:	fbb6 f1f0 	udiv	r1, r6, r0
 801a816:	fbb3 f3f0 	udiv	r3, r3, r0
 801a81a:	fb00 6111 	mls	r1, r0, r1, r6
 801a81e:	4658      	mov	r0, fp
 801a820:	b289      	uxth	r1, r1
 801a822:	fb01 f303 	mul.w	r3, r1, r3
 801a826:	6821      	ldr	r1, [r4, #0]
 801a828:	3304      	adds	r3, #4
 801a82a:	4419      	add	r1, r3
 801a82c:	2300      	movs	r3, #0
 801a82e:	f851 7c04 	ldr.w	r7, [r1, #-4]
 801a832:	9700      	str	r7, [sp, #0]
 801a834:	f7f7 fb7a 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 801a838:	9f06      	ldr	r7, [sp, #24]
 801a83a:	4658      	mov	r0, fp
 801a83c:	2302      	movs	r3, #2
 801a83e:	b2ba      	uxth	r2, r7
 801a840:	210d      	movs	r1, #13
 801a842:	f7f9 fe63 	bl	801450c <uxr_buffer_submessage_header>
 801a846:	f108 0104 	add.w	r1, r8, #4
 801a84a:	9b03      	ldr	r3, [sp, #12]
 801a84c:	f1a5 0208 	sub.w	r2, r5, #8
 801a850:	8925      	ldrh	r5, [r4, #8]
 801a852:	440b      	add	r3, r1
 801a854:	eba2 0208 	sub.w	r2, r2, r8
 801a858:	fbb6 f0f5 	udiv	r0, r6, r5
 801a85c:	4619      	mov	r1, r3
 801a85e:	6863      	ldr	r3, [r4, #4]
 801a860:	fb05 6010 	mls	r0, r5, r0, r6
 801a864:	fbb3 f3f5 	udiv	r3, r3, r5
 801a868:	b280      	uxth	r0, r0
 801a86a:	6825      	ldr	r5, [r4, #0]
 801a86c:	fb00 f303 	mul.w	r3, r0, r3
 801a870:	7b20      	ldrb	r0, [r4, #12]
 801a872:	3004      	adds	r0, #4
 801a874:	4438      	add	r0, r7
 801a876:	50e8      	str	r0, [r5, r3]
 801a878:	9d04      	ldr	r5, [sp, #16]
 801a87a:	4628      	mov	r0, r5
 801a87c:	f7f7 fb68 	bl	8011f50 <ucdr_init_buffer>
 801a880:	4628      	mov	r0, r5
 801a882:	4622      	mov	r2, r4
 801a884:	493d      	ldr	r1, [pc, #244]	@ (801a97c <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801a886:	f7f7 fb37 	bl	8011ef8 <ucdr_set_on_full_buffer_callback>
 801a88a:	2001      	movs	r0, #1
 801a88c:	81e6      	strh	r6, [r4, #14]
 801a88e:	b011      	add	sp, #68	@ 0x44
 801a890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a894:	2101      	movs	r1, #1
 801a896:	89e0      	ldrh	r0, [r4, #14]
 801a898:	f000 f976 	bl	801ab88 <uxr_seq_num_add>
 801a89c:	4605      	mov	r5, r0
 801a89e:	8921      	ldrh	r1, [r4, #8]
 801a8a0:	8a60      	ldrh	r0, [r4, #18]
 801a8a2:	f000 f971 	bl	801ab88 <uxr_seq_num_add>
 801a8a6:	4601      	mov	r1, r0
 801a8a8:	4628      	mov	r0, r5
 801a8aa:	f000 f975 	bl	801ab98 <uxr_seq_num_cmp>
 801a8ae:	2800      	cmp	r0, #0
 801a8b0:	dd44      	ble.n	801a93c <uxr_prepare_reliable_buffer_to_write+0x298>
 801a8b2:	2000      	movs	r0, #0
 801a8b4:	b011      	add	sp, #68	@ 0x44
 801a8b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a8ba:	8921      	ldrh	r1, [r4, #8]
 801a8bc:	8a60      	ldrh	r0, [r4, #18]
 801a8be:	9205      	str	r2, [sp, #20]
 801a8c0:	f000 f962 	bl	801ab88 <uxr_seq_num_add>
 801a8c4:	4601      	mov	r1, r0
 801a8c6:	4630      	mov	r0, r6
 801a8c8:	f000 f966 	bl	801ab98 <uxr_seq_num_cmp>
 801a8cc:	2800      	cmp	r0, #0
 801a8ce:	9a05      	ldr	r2, [sp, #20]
 801a8d0:	dcef      	bgt.n	801a8b2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a8d2:	8925      	ldrh	r5, [r4, #8]
 801a8d4:	e9d4 7300 	ldrd	r7, r3, [r4]
 801a8d8:	fbb6 f4f5 	udiv	r4, r6, r5
 801a8dc:	fbb3 f3f5 	udiv	r3, r3, r5
 801a8e0:	fb05 6414 	mls	r4, r5, r4, r6
 801a8e4:	b2a4      	uxth	r4, r4
 801a8e6:	fb04 f303 	mul.w	r3, r4, r3
 801a8ea:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 801a8ee:	50fa      	str	r2, [r7, r3]
 801a8f0:	2300      	movs	r3, #0
 801a8f2:	f8cd 8000 	str.w	r8, [sp]
 801a8f6:	f7f7 fb19 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 801a8fa:	2001      	movs	r0, #1
 801a8fc:	e7da      	b.n	801a8b4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a8fe:	3201      	adds	r2, #1
 801a900:	9306      	str	r3, [sp, #24]
 801a902:	b293      	uxth	r3, r2
 801a904:	4553      	cmp	r3, sl
 801a906:	d8d4      	bhi.n	801a8b2 <uxr_prepare_reliable_buffer_to_write+0x20e>
 801a908:	e739      	b.n	801a77e <uxr_prepare_reliable_buffer_to_write+0xda>
 801a90a:	4630      	mov	r0, r6
 801a90c:	2101      	movs	r1, #1
 801a90e:	9307      	str	r3, [sp, #28]
 801a910:	f000 f93a 	bl	801ab88 <uxr_seq_num_add>
 801a914:	4606      	mov	r6, r0
 801a916:	8920      	ldrh	r0, [r4, #8]
 801a918:	6862      	ldr	r2, [r4, #4]
 801a91a:	fbb6 f1f0 	udiv	r1, r6, r0
 801a91e:	fbb2 f2f0 	udiv	r2, r2, r0
 801a922:	fb00 6111 	mls	r1, r0, r1, r6
 801a926:	b289      	uxth	r1, r1
 801a928:	fb01 f202 	mul.w	r2, r1, r2
 801a92c:	6821      	ldr	r1, [r4, #0]
 801a92e:	3204      	adds	r2, #4
 801a930:	188b      	adds	r3, r1, r2
 801a932:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801a936:	9303      	str	r3, [sp, #12]
 801a938:	9b07      	ldr	r3, [sp, #28]
 801a93a:	e70c      	b.n	801a756 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801a93c:	8921      	ldrh	r1, [r4, #8]
 801a93e:	6863      	ldr	r3, [r4, #4]
 801a940:	9804      	ldr	r0, [sp, #16]
 801a942:	fbb5 f2f1 	udiv	r2, r5, r1
 801a946:	fbb3 f3f1 	udiv	r3, r3, r1
 801a94a:	fb01 5212 	mls	r2, r1, r2, r5
 801a94e:	6821      	ldr	r1, [r4, #0]
 801a950:	b292      	uxth	r2, r2
 801a952:	fb02 f303 	mul.w	r3, r2, r3
 801a956:	7b22      	ldrb	r2, [r4, #12]
 801a958:	3304      	adds	r3, #4
 801a95a:	445a      	add	r2, fp
 801a95c:	4419      	add	r1, r3
 801a95e:	f841 2c04 	str.w	r2, [r1, #-4]
 801a962:	7b23      	ldrb	r3, [r4, #12]
 801a964:	9300      	str	r3, [sp, #0]
 801a966:	2300      	movs	r3, #0
 801a968:	f7f7 fae0 	bl	8011f2c <ucdr_init_buffer_origin_offset>
 801a96c:	2001      	movs	r0, #1
 801a96e:	81e5      	strh	r5, [r4, #14]
 801a970:	e7a0      	b.n	801a8b4 <uxr_prepare_reliable_buffer_to_write+0x210>
 801a972:	4682      	mov	sl, r0
 801a974:	e6cb      	b.n	801a70e <uxr_prepare_reliable_buffer_to_write+0x6a>
 801a976:	f10d 0b20 	add.w	fp, sp, #32
 801a97a:	e747      	b.n	801a80c <uxr_prepare_reliable_buffer_to_write+0x168>
 801a97c:	0801a57d 	.word	0x0801a57d

0801a980 <uxr_prepare_next_reliable_buffer_to_send>:
 801a980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a982:	4604      	mov	r4, r0
 801a984:	461d      	mov	r5, r3
 801a986:	460f      	mov	r7, r1
 801a988:	8a00      	ldrh	r0, [r0, #16]
 801a98a:	2101      	movs	r1, #1
 801a98c:	4616      	mov	r6, r2
 801a98e:	f000 f8fb 	bl	801ab88 <uxr_seq_num_add>
 801a992:	8028      	strh	r0, [r5, #0]
 801a994:	8922      	ldrh	r2, [r4, #8]
 801a996:	6863      	ldr	r3, [r4, #4]
 801a998:	fbb0 f1f2 	udiv	r1, r0, r2
 801a99c:	fbb3 f3f2 	udiv	r3, r3, r2
 801a9a0:	fb02 0c11 	mls	ip, r2, r1, r0
 801a9a4:	89e1      	ldrh	r1, [r4, #14]
 801a9a6:	fa1f fc8c 	uxth.w	ip, ip
 801a9aa:	fb0c fc03 	mul.w	ip, ip, r3
 801a9ae:	6823      	ldr	r3, [r4, #0]
 801a9b0:	f10c 0c04 	add.w	ip, ip, #4
 801a9b4:	4463      	add	r3, ip
 801a9b6:	603b      	str	r3, [r7, #0]
 801a9b8:	6823      	ldr	r3, [r4, #0]
 801a9ba:	449c      	add	ip, r3
 801a9bc:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 801a9c0:	6033      	str	r3, [r6, #0]
 801a9c2:	f000 f8e9 	bl	801ab98 <uxr_seq_num_cmp>
 801a9c6:	2800      	cmp	r0, #0
 801a9c8:	dd01      	ble.n	801a9ce <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 801a9ca:	2000      	movs	r0, #0
 801a9cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9ce:	7b23      	ldrb	r3, [r4, #12]
 801a9d0:	6832      	ldr	r2, [r6, #0]
 801a9d2:	429a      	cmp	r2, r3
 801a9d4:	d9f9      	bls.n	801a9ca <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a9d6:	8a61      	ldrh	r1, [r4, #18]
 801a9d8:	8a20      	ldrh	r0, [r4, #16]
 801a9da:	f000 f8d9 	bl	801ab90 <uxr_seq_num_sub>
 801a9de:	8923      	ldrh	r3, [r4, #8]
 801a9e0:	4283      	cmp	r3, r0
 801a9e2:	d0f2      	beq.n	801a9ca <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 801a9e4:	8828      	ldrh	r0, [r5, #0]
 801a9e6:	89e3      	ldrh	r3, [r4, #14]
 801a9e8:	8220      	strh	r0, [r4, #16]
 801a9ea:	4298      	cmp	r0, r3
 801a9ec:	d001      	beq.n	801a9f2 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 801a9ee:	2001      	movs	r0, #1
 801a9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a9f2:	2101      	movs	r1, #1
 801a9f4:	f000 f8c8 	bl	801ab88 <uxr_seq_num_add>
 801a9f8:	4603      	mov	r3, r0
 801a9fa:	2001      	movs	r0, #1
 801a9fc:	81e3      	strh	r3, [r4, #14]
 801a9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aa00 <uxr_update_output_stream_heartbeat_timestamp>:
 801aa00:	b570      	push	{r4, r5, r6, lr}
 801aa02:	8a01      	ldrh	r1, [r0, #16]
 801aa04:	4604      	mov	r4, r0
 801aa06:	8a40      	ldrh	r0, [r0, #18]
 801aa08:	4615      	mov	r5, r2
 801aa0a:	461e      	mov	r6, r3
 801aa0c:	f000 f8c4 	bl	801ab98 <uxr_seq_num_cmp>
 801aa10:	2800      	cmp	r0, #0
 801aa12:	db07      	blt.n	801aa24 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 801aa14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801aa18:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801aa1c:	2000      	movs	r0, #0
 801aa1e:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801aa22:	bd70      	pop	{r4, r5, r6, pc}
 801aa24:	f894 0020 	ldrb.w	r0, [r4, #32]
 801aa28:	b940      	cbnz	r0, 801aa3c <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 801aa2a:	2301      	movs	r3, #1
 801aa2c:	f884 3020 	strb.w	r3, [r4, #32]
 801aa30:	3564      	adds	r5, #100	@ 0x64
 801aa32:	f146 0600 	adc.w	r6, r6, #0
 801aa36:	e9c4 5606 	strd	r5, r6, [r4, #24]
 801aa3a:	bd70      	pop	{r4, r5, r6, pc}
 801aa3c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801aa40:	4295      	cmp	r5, r2
 801aa42:	eb76 0303 	sbcs.w	r3, r6, r3
 801aa46:	db04      	blt.n	801aa52 <uxr_update_output_stream_heartbeat_timestamp+0x52>
 801aa48:	1c43      	adds	r3, r0, #1
 801aa4a:	2001      	movs	r0, #1
 801aa4c:	f884 3020 	strb.w	r3, [r4, #32]
 801aa50:	e7ee      	b.n	801aa30 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801aa52:	2000      	movs	r0, #0
 801aa54:	e7ec      	b.n	801aa30 <uxr_update_output_stream_heartbeat_timestamp+0x30>
 801aa56:	bf00      	nop

0801aa58 <uxr_begin_output_nack_buffer_it>:
 801aa58:	8a40      	ldrh	r0, [r0, #18]
 801aa5a:	4770      	bx	lr

0801aa5c <uxr_next_reliable_nack_buffer_to_send>:
 801aa5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801aa60:	f890 7021 	ldrb.w	r7, [r0, #33]	@ 0x21
 801aa64:	b197      	cbz	r7, 801aa8c <uxr_next_reliable_nack_buffer_to_send+0x30>
 801aa66:	4680      	mov	r8, r0
 801aa68:	460d      	mov	r5, r1
 801aa6a:	4616      	mov	r6, r2
 801aa6c:	461c      	mov	r4, r3
 801aa6e:	8818      	ldrh	r0, [r3, #0]
 801aa70:	2101      	movs	r1, #1
 801aa72:	f000 f889 	bl	801ab88 <uxr_seq_num_add>
 801aa76:	8020      	strh	r0, [r4, #0]
 801aa78:	f8b8 1010 	ldrh.w	r1, [r8, #16]
 801aa7c:	f000 f88c 	bl	801ab98 <uxr_seq_num_cmp>
 801aa80:	2800      	cmp	r0, #0
 801aa82:	dd06      	ble.n	801aa92 <uxr_next_reliable_nack_buffer_to_send+0x36>
 801aa84:	2300      	movs	r3, #0
 801aa86:	461f      	mov	r7, r3
 801aa88:	f888 3021 	strb.w	r3, [r8, #33]	@ 0x21
 801aa8c:	4638      	mov	r0, r7
 801aa8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801aa92:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801aa96:	8820      	ldrh	r0, [r4, #0]
 801aa98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801aa9c:	fbb0 f3f2 	udiv	r3, r0, r2
 801aaa0:	fbb1 fcf2 	udiv	ip, r1, r2
 801aaa4:	fb02 0313 	mls	r3, r2, r3, r0
 801aaa8:	b29b      	uxth	r3, r3
 801aaaa:	fb03 fc0c 	mul.w	ip, r3, ip
 801aaae:	f8d8 3000 	ldr.w	r3, [r8]
 801aab2:	f10c 0c04 	add.w	ip, ip, #4
 801aab6:	4463      	add	r3, ip
 801aab8:	602b      	str	r3, [r5, #0]
 801aaba:	f8d8 3000 	ldr.w	r3, [r8]
 801aabe:	4463      	add	r3, ip
 801aac0:	f853 3c04 	ldr.w	r3, [r3, #-4]
 801aac4:	6033      	str	r3, [r6, #0]
 801aac6:	f898 200c 	ldrb.w	r2, [r8, #12]
 801aaca:	429a      	cmp	r2, r3
 801aacc:	d0d0      	beq.n	801aa70 <uxr_next_reliable_nack_buffer_to_send+0x14>
 801aace:	e7dd      	b.n	801aa8c <uxr_next_reliable_nack_buffer_to_send+0x30>

0801aad0 <uxr_process_acknack>:
 801aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aad2:	4604      	mov	r4, r0
 801aad4:	460e      	mov	r6, r1
 801aad6:	4610      	mov	r0, r2
 801aad8:	2101      	movs	r1, #1
 801aada:	f000 f859 	bl	801ab90 <uxr_seq_num_sub>
 801aade:	8a61      	ldrh	r1, [r4, #18]
 801aae0:	f000 f856 	bl	801ab90 <uxr_seq_num_sub>
 801aae4:	b1c8      	cbz	r0, 801ab1a <uxr_process_acknack+0x4a>
 801aae6:	4605      	mov	r5, r0
 801aae8:	2700      	movs	r7, #0
 801aaea:	2101      	movs	r1, #1
 801aaec:	8a60      	ldrh	r0, [r4, #18]
 801aaee:	f000 f84b 	bl	801ab88 <uxr_seq_num_add>
 801aaf2:	8923      	ldrh	r3, [r4, #8]
 801aaf4:	6862      	ldr	r2, [r4, #4]
 801aaf6:	3701      	adds	r7, #1
 801aaf8:	f894 c00c 	ldrb.w	ip, [r4, #12]
 801aafc:	6821      	ldr	r1, [r4, #0]
 801aafe:	42bd      	cmp	r5, r7
 801ab00:	8260      	strh	r0, [r4, #18]
 801ab02:	fbb0 fef3 	udiv	lr, r0, r3
 801ab06:	fbb2 f2f3 	udiv	r2, r2, r3
 801ab0a:	fb03 031e 	mls	r3, r3, lr, r0
 801ab0e:	b29b      	uxth	r3, r3
 801ab10:	fb02 f303 	mul.w	r3, r2, r3
 801ab14:	f841 c003 	str.w	ip, [r1, r3]
 801ab18:	d1e7      	bne.n	801aaea <uxr_process_acknack+0x1a>
 801ab1a:	3e00      	subs	r6, #0
 801ab1c:	f04f 0300 	mov.w	r3, #0
 801ab20:	bf18      	it	ne
 801ab22:	2601      	movne	r6, #1
 801ab24:	f884 3020 	strb.w	r3, [r4, #32]
 801ab28:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 801ab2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab2e:	bf00      	nop

0801ab30 <uxr_is_output_up_to_date>:
 801ab30:	8a01      	ldrh	r1, [r0, #16]
 801ab32:	8a40      	ldrh	r0, [r0, #18]
 801ab34:	b508      	push	{r3, lr}
 801ab36:	f000 f82f 	bl	801ab98 <uxr_seq_num_cmp>
 801ab3a:	fab0 f080 	clz	r0, r0
 801ab3e:	0940      	lsrs	r0, r0, #5
 801ab40:	bd08      	pop	{r3, pc}
 801ab42:	bf00      	nop

0801ab44 <get_available_free_slots>:
 801ab44:	8901      	ldrh	r1, [r0, #8]
 801ab46:	b1e1      	cbz	r1, 801ab82 <get_available_free_slots+0x3e>
 801ab48:	6843      	ldr	r3, [r0, #4]
 801ab4a:	f04f 0c00 	mov.w	ip, #0
 801ab4e:	b530      	push	{r4, r5, lr}
 801ab50:	fbb3 fef1 	udiv	lr, r3, r1
 801ab54:	6805      	ldr	r5, [r0, #0]
 801ab56:	4662      	mov	r2, ip
 801ab58:	7b04      	ldrb	r4, [r0, #12]
 801ab5a:	4660      	mov	r0, ip
 801ab5c:	f10c 0c01 	add.w	ip, ip, #1
 801ab60:	fbb2 f3f1 	udiv	r3, r2, r1
 801ab64:	fb01 2313 	mls	r3, r1, r3, r2
 801ab68:	fa1f f28c 	uxth.w	r2, ip
 801ab6c:	b29b      	uxth	r3, r3
 801ab6e:	fb0e f303 	mul.w	r3, lr, r3
 801ab72:	58eb      	ldr	r3, [r5, r3]
 801ab74:	429c      	cmp	r4, r3
 801ab76:	d101      	bne.n	801ab7c <get_available_free_slots+0x38>
 801ab78:	3001      	adds	r0, #1
 801ab7a:	b280      	uxth	r0, r0
 801ab7c:	428a      	cmp	r2, r1
 801ab7e:	d3ed      	bcc.n	801ab5c <get_available_free_slots+0x18>
 801ab80:	bd30      	pop	{r4, r5, pc}
 801ab82:	4608      	mov	r0, r1
 801ab84:	4770      	bx	lr
 801ab86:	bf00      	nop

0801ab88 <uxr_seq_num_add>:
 801ab88:	4408      	add	r0, r1
 801ab8a:	b280      	uxth	r0, r0
 801ab8c:	4770      	bx	lr
 801ab8e:	bf00      	nop

0801ab90 <uxr_seq_num_sub>:
 801ab90:	1a40      	subs	r0, r0, r1
 801ab92:	b280      	uxth	r0, r0
 801ab94:	4770      	bx	lr
 801ab96:	bf00      	nop

0801ab98 <uxr_seq_num_cmp>:
 801ab98:	4288      	cmp	r0, r1
 801ab9a:	d011      	beq.n	801abc0 <uxr_seq_num_cmp+0x28>
 801ab9c:	d309      	bcc.n	801abb2 <uxr_seq_num_cmp+0x1a>
 801ab9e:	4288      	cmp	r0, r1
 801aba0:	d910      	bls.n	801abc4 <uxr_seq_num_cmp+0x2c>
 801aba2:	1a40      	subs	r0, r0, r1
 801aba4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 801aba8:	bfd4      	ite	le
 801abaa:	2001      	movle	r0, #1
 801abac:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 801abb0:	4770      	bx	lr
 801abb2:	1a0b      	subs	r3, r1, r0
 801abb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801abb8:	daf1      	bge.n	801ab9e <uxr_seq_num_cmp+0x6>
 801abba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801abbe:	4770      	bx	lr
 801abc0:	2000      	movs	r0, #0
 801abc2:	4770      	bx	lr
 801abc4:	2001      	movs	r0, #1
 801abc6:	4770      	bx	lr

0801abc8 <rcl_get_default_domain_id>:
 801abc8:	b530      	push	{r4, r5, lr}
 801abca:	2300      	movs	r3, #0
 801abcc:	b083      	sub	sp, #12
 801abce:	9300      	str	r3, [sp, #0]
 801abd0:	b1d0      	cbz	r0, 801ac08 <rcl_get_default_domain_id+0x40>
 801abd2:	4604      	mov	r4, r0
 801abd4:	4669      	mov	r1, sp
 801abd6:	4815      	ldr	r0, [pc, #84]	@ (801ac2c <rcl_get_default_domain_id+0x64>)
 801abd8:	f7fd fd1a 	bl	8018610 <rcutils_get_env>
 801abdc:	4602      	mov	r2, r0
 801abde:	b110      	cbz	r0, 801abe6 <rcl_get_default_domain_id+0x1e>
 801abe0:	2001      	movs	r0, #1
 801abe2:	b003      	add	sp, #12
 801abe4:	bd30      	pop	{r4, r5, pc}
 801abe6:	9b00      	ldr	r3, [sp, #0]
 801abe8:	b18b      	cbz	r3, 801ac0e <rcl_get_default_domain_id+0x46>
 801abea:	7818      	ldrb	r0, [r3, #0]
 801abec:	2800      	cmp	r0, #0
 801abee:	d0f8      	beq.n	801abe2 <rcl_get_default_domain_id+0x1a>
 801abf0:	a901      	add	r1, sp, #4
 801abf2:	4618      	mov	r0, r3
 801abf4:	9201      	str	r2, [sp, #4]
 801abf6:	f000 fe2d 	bl	801b854 <strtoul>
 801abfa:	4605      	mov	r5, r0
 801abfc:	b150      	cbz	r0, 801ac14 <rcl_get_default_domain_id+0x4c>
 801abfe:	1c43      	adds	r3, r0, #1
 801ac00:	d00d      	beq.n	801ac1e <rcl_get_default_domain_id+0x56>
 801ac02:	2000      	movs	r0, #0
 801ac04:	6025      	str	r5, [r4, #0]
 801ac06:	e7ec      	b.n	801abe2 <rcl_get_default_domain_id+0x1a>
 801ac08:	200b      	movs	r0, #11
 801ac0a:	b003      	add	sp, #12
 801ac0c:	bd30      	pop	{r4, r5, pc}
 801ac0e:	4618      	mov	r0, r3
 801ac10:	b003      	add	sp, #12
 801ac12:	bd30      	pop	{r4, r5, pc}
 801ac14:	9b01      	ldr	r3, [sp, #4]
 801ac16:	781b      	ldrb	r3, [r3, #0]
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d0f2      	beq.n	801ac02 <rcl_get_default_domain_id+0x3a>
 801ac1c:	e7e0      	b.n	801abe0 <rcl_get_default_domain_id+0x18>
 801ac1e:	f001 f953 	bl	801bec8 <__errno>
 801ac22:	6803      	ldr	r3, [r0, #0]
 801ac24:	2b22      	cmp	r3, #34	@ 0x22
 801ac26:	d1ec      	bne.n	801ac02 <rcl_get_default_domain_id+0x3a>
 801ac28:	e7da      	b.n	801abe0 <rcl_get_default_domain_id+0x18>
 801ac2a:	bf00      	nop
 801ac2c:	0801d7c8 	.word	0x0801d7c8

0801ac30 <rcl_expand_topic_name>:
 801ac30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac34:	b08d      	sub	sp, #52	@ 0x34
 801ac36:	4698      	mov	r8, r3
 801ac38:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ac3a:	9207      	str	r2, [sp, #28]
 801ac3c:	2b00      	cmp	r3, #0
 801ac3e:	bf18      	it	ne
 801ac40:	f1b8 0f00 	cmpne.w	r8, #0
 801ac44:	bf0c      	ite	eq
 801ac46:	2301      	moveq	r3, #1
 801ac48:	2300      	movne	r3, #0
 801ac4a:	2a00      	cmp	r2, #0
 801ac4c:	bf08      	it	eq
 801ac4e:	f043 0301 	orreq.w	r3, r3, #1
 801ac52:	2900      	cmp	r1, #0
 801ac54:	bf08      	it	eq
 801ac56:	f043 0301 	orreq.w	r3, r3, #1
 801ac5a:	2b00      	cmp	r3, #0
 801ac5c:	d13d      	bne.n	801acda <rcl_expand_topic_name+0xaa>
 801ac5e:	fab0 f280 	clz	r2, r0
 801ac62:	4604      	mov	r4, r0
 801ac64:	0952      	lsrs	r2, r2, #5
 801ac66:	2800      	cmp	r0, #0
 801ac68:	d037      	beq.n	801acda <rcl_expand_topic_name+0xaa>
 801ac6a:	460f      	mov	r7, r1
 801ac6c:	a90b      	add	r1, sp, #44	@ 0x2c
 801ac6e:	f000 fa51 	bl	801b114 <rcl_validate_topic_name>
 801ac72:	4605      	mov	r5, r0
 801ac74:	bb68      	cbnz	r0, 801acd2 <rcl_expand_topic_name+0xa2>
 801ac76:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d137      	bne.n	801acec <rcl_expand_topic_name+0xbc>
 801ac7c:	4602      	mov	r2, r0
 801ac7e:	a90b      	add	r1, sp, #44	@ 0x2c
 801ac80:	4638      	mov	r0, r7
 801ac82:	f7fe f927 	bl	8018ed4 <rmw_validate_node_name>
 801ac86:	bb68      	cbnz	r0, 801ace4 <rcl_expand_topic_name+0xb4>
 801ac88:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac8a:	2b00      	cmp	r3, #0
 801ac8c:	d133      	bne.n	801acf6 <rcl_expand_topic_name+0xc6>
 801ac8e:	462a      	mov	r2, r5
 801ac90:	a90b      	add	r1, sp, #44	@ 0x2c
 801ac92:	9807      	ldr	r0, [sp, #28]
 801ac94:	f7fe f900 	bl	8018e98 <rmw_validate_namespace>
 801ac98:	bb20      	cbnz	r0, 801ace4 <rcl_expand_topic_name+0xb4>
 801ac9a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801ac9c:	2d00      	cmp	r5, #0
 801ac9e:	f040 80a2 	bne.w	801ade6 <rcl_expand_topic_name+0x1b6>
 801aca2:	217b      	movs	r1, #123	@ 0x7b
 801aca4:	4620      	mov	r0, r4
 801aca6:	f001 f883 	bl	801bdb0 <strchr>
 801acaa:	7823      	ldrb	r3, [r4, #0]
 801acac:	4681      	mov	r9, r0
 801acae:	bb20      	cbnz	r0, 801acfa <rcl_expand_topic_name+0xca>
 801acb0:	2b2f      	cmp	r3, #47	@ 0x2f
 801acb2:	d122      	bne.n	801acfa <rcl_expand_topic_name+0xca>
 801acb4:	ab19      	add	r3, sp, #100	@ 0x64
 801acb6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801acba:	ab16      	add	r3, sp, #88	@ 0x58
 801acbc:	e88d 0003 	stmia.w	sp, {r0, r1}
 801acc0:	4620      	mov	r0, r4
 801acc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 801acc4:	f7fd fe06 	bl	80188d4 <rcutils_strdup>
 801acc8:	2800      	cmp	r0, #0
 801acca:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801accc:	bf08      	it	eq
 801acce:	250a      	moveq	r5, #10
 801acd0:	6018      	str	r0, [r3, #0]
 801acd2:	4628      	mov	r0, r5
 801acd4:	b00d      	add	sp, #52	@ 0x34
 801acd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acda:	250b      	movs	r5, #11
 801acdc:	4628      	mov	r0, r5
 801acde:	b00d      	add	sp, #52	@ 0x34
 801ace0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ace4:	f7fa fe4e 	bl	8015984 <rcl_convert_rmw_ret_to_rcl_ret>
 801ace8:	4605      	mov	r5, r0
 801acea:	e7f2      	b.n	801acd2 <rcl_expand_topic_name+0xa2>
 801acec:	2567      	movs	r5, #103	@ 0x67
 801acee:	4628      	mov	r0, r5
 801acf0:	b00d      	add	sp, #52	@ 0x34
 801acf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801acf6:	25c9      	movs	r5, #201	@ 0xc9
 801acf8:	e7eb      	b.n	801acd2 <rcl_expand_topic_name+0xa2>
 801acfa:	2b7e      	cmp	r3, #126	@ 0x7e
 801acfc:	d075      	beq.n	801adea <rcl_expand_topic_name+0x1ba>
 801acfe:	f1b9 0f00 	cmp.w	r9, #0
 801ad02:	f000 80c2 	beq.w	801ae8a <rcl_expand_topic_name+0x25a>
 801ad06:	2300      	movs	r3, #0
 801ad08:	46a2      	mov	sl, r4
 801ad0a:	461e      	mov	r6, r3
 801ad0c:	9508      	str	r5, [sp, #32]
 801ad0e:	4655      	mov	r5, sl
 801ad10:	9409      	str	r4, [sp, #36]	@ 0x24
 801ad12:	46b2      	mov	sl, r6
 801ad14:	464c      	mov	r4, r9
 801ad16:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801ad1a:	2c00      	cmp	r4, #0
 801ad1c:	f000 80ae 	beq.w	801ae7c <rcl_expand_topic_name+0x24c>
 801ad20:	217d      	movs	r1, #125	@ 0x7d
 801ad22:	4628      	mov	r0, r5
 801ad24:	f001 f844 	bl	801bdb0 <strchr>
 801ad28:	eba0 0904 	sub.w	r9, r0, r4
 801ad2c:	4621      	mov	r1, r4
 801ad2e:	4869      	ldr	r0, [pc, #420]	@ (801aed4 <rcl_expand_topic_name+0x2a4>)
 801ad30:	f109 0601 	add.w	r6, r9, #1
 801ad34:	4632      	mov	r2, r6
 801ad36:	f001 f848 	bl	801bdca <strncmp>
 801ad3a:	2800      	cmp	r0, #0
 801ad3c:	d051      	beq.n	801ade2 <rcl_expand_topic_name+0x1b2>
 801ad3e:	4632      	mov	r2, r6
 801ad40:	4621      	mov	r1, r4
 801ad42:	4865      	ldr	r0, [pc, #404]	@ (801aed8 <rcl_expand_topic_name+0x2a8>)
 801ad44:	f001 f841 	bl	801bdca <strncmp>
 801ad48:	b128      	cbz	r0, 801ad56 <rcl_expand_topic_name+0x126>
 801ad4a:	4632      	mov	r2, r6
 801ad4c:	4621      	mov	r1, r4
 801ad4e:	4863      	ldr	r0, [pc, #396]	@ (801aedc <rcl_expand_topic_name+0x2ac>)
 801ad50:	f001 f83b 	bl	801bdca <strncmp>
 801ad54:	bb38      	cbnz	r0, 801ada6 <rcl_expand_topic_name+0x176>
 801ad56:	46d9      	mov	r9, fp
 801ad58:	ab18      	add	r3, sp, #96	@ 0x60
 801ad5a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801ad5e:	ab16      	add	r3, sp, #88	@ 0x58
 801ad60:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801ad64:	4620      	mov	r0, r4
 801ad66:	4631      	mov	r1, r6
 801ad68:	cb0c      	ldmia	r3, {r2, r3}
 801ad6a:	f7fd fdd5 	bl	8018918 <rcutils_strndup>
 801ad6e:	4604      	mov	r4, r0
 801ad70:	2800      	cmp	r0, #0
 801ad72:	f000 80a3 	beq.w	801aebc <rcl_expand_topic_name+0x28c>
 801ad76:	464a      	mov	r2, r9
 801ad78:	4628      	mov	r0, r5
 801ad7a:	ab16      	add	r3, sp, #88	@ 0x58
 801ad7c:	4621      	mov	r1, r4
 801ad7e:	f7fd fca9 	bl	80186d4 <rcutils_repl_str>
 801ad82:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ad84:	4605      	mov	r5, r0
 801ad86:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ad88:	4620      	mov	r0, r4
 801ad8a:	4798      	blx	r3
 801ad8c:	4650      	mov	r0, sl
 801ad8e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ad90:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ad92:	4798      	blx	r3
 801ad94:	2d00      	cmp	r5, #0
 801ad96:	d06c      	beq.n	801ae72 <rcl_expand_topic_name+0x242>
 801ad98:	217b      	movs	r1, #123	@ 0x7b
 801ad9a:	4628      	mov	r0, r5
 801ad9c:	f001 f808 	bl	801bdb0 <strchr>
 801ada0:	46aa      	mov	sl, r5
 801ada2:	4604      	mov	r4, r0
 801ada4:	e7b9      	b.n	801ad1a <rcl_expand_topic_name+0xea>
 801ada6:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 801adaa:	1c61      	adds	r1, r4, #1
 801adac:	4640      	mov	r0, r8
 801adae:	f7fd fecb 	bl	8018b48 <rcutils_string_map_getn>
 801adb2:	4681      	mov	r9, r0
 801adb4:	2800      	cmp	r0, #0
 801adb6:	d1cf      	bne.n	801ad58 <rcl_expand_topic_name+0x128>
 801adb8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801adba:	aa18      	add	r2, sp, #96	@ 0x60
 801adbc:	2569      	movs	r5, #105	@ 0x69
 801adbe:	6018      	str	r0, [r3, #0]
 801adc0:	ab16      	add	r3, sp, #88	@ 0x58
 801adc2:	ca07      	ldmia	r2, {r0, r1, r2}
 801adc4:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801adc8:	4631      	mov	r1, r6
 801adca:	4620      	mov	r0, r4
 801adcc:	cb0c      	ldmia	r3, {r2, r3}
 801adce:	f7fd fda3 	bl	8018918 <rcutils_strndup>
 801add2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801add4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801add6:	4798      	blx	r3
 801add8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801adda:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801addc:	4650      	mov	r0, sl
 801adde:	4798      	blx	r3
 801ade0:	e777      	b.n	801acd2 <rcl_expand_topic_name+0xa2>
 801ade2:	46b9      	mov	r9, r7
 801ade4:	e7b8      	b.n	801ad58 <rcl_expand_topic_name+0x128>
 801ade6:	25ca      	movs	r5, #202	@ 0xca
 801ade8:	e773      	b.n	801acd2 <rcl_expand_topic_name+0xa2>
 801adea:	9e07      	ldr	r6, [sp, #28]
 801adec:	4630      	mov	r0, r6
 801adee:	f7e5 fa81 	bl	80002f4 <strlen>
 801adf2:	4a3b      	ldr	r2, [pc, #236]	@ (801aee0 <rcl_expand_topic_name+0x2b0>)
 801adf4:	4b3b      	ldr	r3, [pc, #236]	@ (801aee4 <rcl_expand_topic_name+0x2b4>)
 801adf6:	9603      	str	r6, [sp, #12]
 801adf8:	2801      	cmp	r0, #1
 801adfa:	bf18      	it	ne
 801adfc:	4613      	movne	r3, r2
 801adfe:	9704      	str	r7, [sp, #16]
 801ae00:	9302      	str	r3, [sp, #8]
 801ae02:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801ae04:	9300      	str	r3, [sp, #0]
 801ae06:	1c63      	adds	r3, r4, #1
 801ae08:	9305      	str	r3, [sp, #20]
 801ae0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ae0e:	9301      	str	r3, [sp, #4]
 801ae10:	ab16      	add	r3, sp, #88	@ 0x58
 801ae12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ae14:	f7fd fc24 	bl	8018660 <rcutils_format_string_limit>
 801ae18:	4606      	mov	r6, r0
 801ae1a:	b350      	cbz	r0, 801ae72 <rcl_expand_topic_name+0x242>
 801ae1c:	f1b9 0f00 	cmp.w	r9, #0
 801ae20:	d005      	beq.n	801ae2e <rcl_expand_topic_name+0x1fe>
 801ae22:	217b      	movs	r1, #123	@ 0x7b
 801ae24:	46b2      	mov	sl, r6
 801ae26:	f000 ffc3 	bl	801bdb0 <strchr>
 801ae2a:	4681      	mov	r9, r0
 801ae2c:	e76e      	b.n	801ad0c <rcl_expand_topic_name+0xdc>
 801ae2e:	7833      	ldrb	r3, [r6, #0]
 801ae30:	2b2f      	cmp	r3, #47	@ 0x2f
 801ae32:	d01b      	beq.n	801ae6c <rcl_expand_topic_name+0x23c>
 801ae34:	9c07      	ldr	r4, [sp, #28]
 801ae36:	4620      	mov	r0, r4
 801ae38:	f7e5 fa5c 	bl	80002f4 <strlen>
 801ae3c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ae40:	4a29      	ldr	r2, [pc, #164]	@ (801aee8 <rcl_expand_topic_name+0x2b8>)
 801ae42:	9301      	str	r3, [sp, #4]
 801ae44:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801ae46:	9604      	str	r6, [sp, #16]
 801ae48:	9300      	str	r3, [sp, #0]
 801ae4a:	4b28      	ldr	r3, [pc, #160]	@ (801aeec <rcl_expand_topic_name+0x2bc>)
 801ae4c:	9403      	str	r4, [sp, #12]
 801ae4e:	2801      	cmp	r0, #1
 801ae50:	bf18      	it	ne
 801ae52:	4613      	movne	r3, r2
 801ae54:	9302      	str	r3, [sp, #8]
 801ae56:	ab16      	add	r3, sp, #88	@ 0x58
 801ae58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801ae5a:	f7fd fc01 	bl	8018660 <rcutils_format_string_limit>
 801ae5e:	4603      	mov	r3, r0
 801ae60:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801ae62:	4630      	mov	r0, r6
 801ae64:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ae66:	461e      	mov	r6, r3
 801ae68:	4790      	blx	r2
 801ae6a:	b116      	cbz	r6, 801ae72 <rcl_expand_topic_name+0x242>
 801ae6c:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ae6e:	601e      	str	r6, [r3, #0]
 801ae70:	e72f      	b.n	801acd2 <rcl_expand_topic_name+0xa2>
 801ae72:	2300      	movs	r3, #0
 801ae74:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ae76:	250a      	movs	r5, #10
 801ae78:	6013      	str	r3, [r2, #0]
 801ae7a:	e72a      	b.n	801acd2 <rcl_expand_topic_name+0xa2>
 801ae7c:	4653      	mov	r3, sl
 801ae7e:	4656      	mov	r6, sl
 801ae80:	e9dd 5408 	ldrd	r5, r4, [sp, #32]
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d1d2      	bne.n	801ae2e <rcl_expand_topic_name+0x1fe>
 801ae88:	7823      	ldrb	r3, [r4, #0]
 801ae8a:	2b2f      	cmp	r3, #47	@ 0x2f
 801ae8c:	d01e      	beq.n	801aecc <rcl_expand_topic_name+0x29c>
 801ae8e:	9e07      	ldr	r6, [sp, #28]
 801ae90:	4630      	mov	r0, r6
 801ae92:	f7e5 fa2f 	bl	80002f4 <strlen>
 801ae96:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ae98:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ae9c:	9603      	str	r6, [sp, #12]
 801ae9e:	9404      	str	r4, [sp, #16]
 801aea0:	e9cd 2300 	strd	r2, r3, [sp]
 801aea4:	4a10      	ldr	r2, [pc, #64]	@ (801aee8 <rcl_expand_topic_name+0x2b8>)
 801aea6:	4b11      	ldr	r3, [pc, #68]	@ (801aeec <rcl_expand_topic_name+0x2bc>)
 801aea8:	2801      	cmp	r0, #1
 801aeaa:	bf18      	it	ne
 801aeac:	4613      	movne	r3, r2
 801aeae:	9302      	str	r3, [sp, #8]
 801aeb0:	ab16      	add	r3, sp, #88	@ 0x58
 801aeb2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801aeb4:	f7fd fbd4 	bl	8018660 <rcutils_format_string_limit>
 801aeb8:	4606      	mov	r6, r0
 801aeba:	e7d6      	b.n	801ae6a <rcl_expand_topic_name+0x23a>
 801aebc:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	@ 0x68
 801aec0:	4650      	mov	r0, sl
 801aec2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801aec4:	6014      	str	r4, [r2, #0]
 801aec6:	250a      	movs	r5, #10
 801aec8:	4798      	blx	r3
 801aeca:	e702      	b.n	801acd2 <rcl_expand_topic_name+0xa2>
 801aecc:	2300      	movs	r3, #0
 801aece:	461e      	mov	r6, r3
 801aed0:	e7cc      	b.n	801ae6c <rcl_expand_topic_name+0x23c>
 801aed2:	bf00      	nop
 801aed4:	0801d7e0 	.word	0x0801d7e0
 801aed8:	0801d7e8 	.word	0x0801d7e8
 801aedc:	0801d7f0 	.word	0x0801d7f0
 801aee0:	0801d7d8 	.word	0x0801d7d8
 801aee4:	0801ce3c 	.word	0x0801ce3c
 801aee8:	0801ce04 	.word	0x0801ce04
 801aeec:	0801ce4c 	.word	0x0801ce4c

0801aef0 <rcl_get_default_topic_name_substitutions>:
 801aef0:	2800      	cmp	r0, #0
 801aef2:	bf0c      	ite	eq
 801aef4:	200b      	moveq	r0, #11
 801aef6:	2000      	movne	r0, #0
 801aef8:	4770      	bx	lr
 801aefa:	bf00      	nop

0801aefc <rcl_get_zero_initialized_guard_condition>:
 801aefc:	4a03      	ldr	r2, [pc, #12]	@ (801af0c <rcl_get_zero_initialized_guard_condition+0x10>)
 801aefe:	4603      	mov	r3, r0
 801af00:	e892 0003 	ldmia.w	r2, {r0, r1}
 801af04:	e883 0003 	stmia.w	r3, {r0, r1}
 801af08:	4618      	mov	r0, r3
 801af0a:	4770      	bx	lr
 801af0c:	0801d7fc 	.word	0x0801d7fc

0801af10 <rcl_guard_condition_init>:
 801af10:	b082      	sub	sp, #8
 801af12:	b5f0      	push	{r4, r5, r6, r7, lr}
 801af14:	b087      	sub	sp, #28
 801af16:	4604      	mov	r4, r0
 801af18:	460d      	mov	r5, r1
 801af1a:	f10d 0e30 	add.w	lr, sp, #48	@ 0x30
 801af1e:	f10d 0c04 	add.w	ip, sp, #4
 801af22:	e9ce 2300 	strd	r2, r3, [lr]
 801af26:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801af2a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801af2e:	f8de 3000 	ldr.w	r3, [lr]
 801af32:	a801      	add	r0, sp, #4
 801af34:	f8cc 3000 	str.w	r3, [ip]
 801af38:	f7f4 fae2 	bl	800f500 <rcutils_allocator_is_valid>
 801af3c:	b354      	cbz	r4, 801af94 <rcl_guard_condition_init+0x84>
 801af3e:	f080 0301 	eor.w	r3, r0, #1
 801af42:	b2db      	uxtb	r3, r3
 801af44:	bb33      	cbnz	r3, 801af94 <rcl_guard_condition_init+0x84>
 801af46:	6866      	ldr	r6, [r4, #4]
 801af48:	b9ee      	cbnz	r6, 801af86 <rcl_guard_condition_init+0x76>
 801af4a:	b31d      	cbz	r5, 801af94 <rcl_guard_condition_init+0x84>
 801af4c:	4628      	mov	r0, r5
 801af4e:	f7fa fd37 	bl	80159c0 <rcl_context_is_valid>
 801af52:	b308      	cbz	r0, 801af98 <rcl_guard_condition_init+0x88>
 801af54:	9b01      	ldr	r3, [sp, #4]
 801af56:	201c      	movs	r0, #28
 801af58:	9905      	ldr	r1, [sp, #20]
 801af5a:	4798      	blx	r3
 801af5c:	4607      	mov	r7, r0
 801af5e:	6060      	str	r0, [r4, #4]
 801af60:	b310      	cbz	r0, 801afa8 <rcl_guard_condition_init+0x98>
 801af62:	6828      	ldr	r0, [r5, #0]
 801af64:	3028      	adds	r0, #40	@ 0x28
 801af66:	f000 f999 	bl	801b29c <rmw_create_guard_condition>
 801af6a:	6038      	str	r0, [r7, #0]
 801af6c:	6860      	ldr	r0, [r4, #4]
 801af6e:	6807      	ldr	r7, [r0, #0]
 801af70:	b1a7      	cbz	r7, 801af9c <rcl_guard_condition_init+0x8c>
 801af72:	2301      	movs	r3, #1
 801af74:	ac01      	add	r4, sp, #4
 801af76:	f100 0708 	add.w	r7, r0, #8
 801af7a:	7103      	strb	r3, [r0, #4]
 801af7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801af7e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 801af80:	6823      	ldr	r3, [r4, #0]
 801af82:	603b      	str	r3, [r7, #0]
 801af84:	e000      	b.n	801af88 <rcl_guard_condition_init+0x78>
 801af86:	2664      	movs	r6, #100	@ 0x64
 801af88:	4630      	mov	r0, r6
 801af8a:	b007      	add	sp, #28
 801af8c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801af90:	b002      	add	sp, #8
 801af92:	4770      	bx	lr
 801af94:	260b      	movs	r6, #11
 801af96:	e7f7      	b.n	801af88 <rcl_guard_condition_init+0x78>
 801af98:	2665      	movs	r6, #101	@ 0x65
 801af9a:	e7f5      	b.n	801af88 <rcl_guard_condition_init+0x78>
 801af9c:	9b02      	ldr	r3, [sp, #8]
 801af9e:	2601      	movs	r6, #1
 801afa0:	9905      	ldr	r1, [sp, #20]
 801afa2:	4798      	blx	r3
 801afa4:	6067      	str	r7, [r4, #4]
 801afa6:	e7ef      	b.n	801af88 <rcl_guard_condition_init+0x78>
 801afa8:	260a      	movs	r6, #10
 801afaa:	e7ed      	b.n	801af88 <rcl_guard_condition_init+0x78>

0801afac <rcl_guard_condition_init_from_rmw>:
 801afac:	b082      	sub	sp, #8
 801afae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801afb2:	b086      	sub	sp, #24
 801afb4:	4604      	mov	r4, r0
 801afb6:	460e      	mov	r6, r1
 801afb8:	4615      	mov	r5, r2
 801afba:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801afbe:	f10d 0e04 	add.w	lr, sp, #4
 801afc2:	f84c 3f04 	str.w	r3, [ip, #4]!
 801afc6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801afca:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 801afce:	f8dc 3000 	ldr.w	r3, [ip]
 801afd2:	a801      	add	r0, sp, #4
 801afd4:	f8ce 3000 	str.w	r3, [lr]
 801afd8:	f7f4 fa92 	bl	800f500 <rcutils_allocator_is_valid>
 801afdc:	f080 0301 	eor.w	r3, r0, #1
 801afe0:	b2db      	uxtb	r3, r3
 801afe2:	bb3b      	cbnz	r3, 801b034 <rcl_guard_condition_init_from_rmw+0x88>
 801afe4:	b334      	cbz	r4, 801b034 <rcl_guard_condition_init_from_rmw+0x88>
 801afe6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801afea:	f1b8 0f00 	cmp.w	r8, #0
 801afee:	d11a      	bne.n	801b026 <rcl_guard_condition_init_from_rmw+0x7a>
 801aff0:	b305      	cbz	r5, 801b034 <rcl_guard_condition_init_from_rmw+0x88>
 801aff2:	4628      	mov	r0, r5
 801aff4:	f7fa fce4 	bl	80159c0 <rcl_context_is_valid>
 801aff8:	b1f0      	cbz	r0, 801b038 <rcl_guard_condition_init_from_rmw+0x8c>
 801affa:	9b01      	ldr	r3, [sp, #4]
 801affc:	201c      	movs	r0, #28
 801affe:	9905      	ldr	r1, [sp, #20]
 801b000:	4798      	blx	r3
 801b002:	4607      	mov	r7, r0
 801b004:	6060      	str	r0, [r4, #4]
 801b006:	b320      	cbz	r0, 801b052 <rcl_guard_condition_init_from_rmw+0xa6>
 801b008:	b1c6      	cbz	r6, 801b03c <rcl_guard_condition_init_from_rmw+0x90>
 801b00a:	6006      	str	r6, [r0, #0]
 801b00c:	f880 8004 	strb.w	r8, [r0, #4]
 801b010:	ac01      	add	r4, sp, #4
 801b012:	f107 0c08 	add.w	ip, r7, #8
 801b016:	2500      	movs	r5, #0
 801b018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801b01a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b01e:	6823      	ldr	r3, [r4, #0]
 801b020:	f8cc 3000 	str.w	r3, [ip]
 801b024:	e000      	b.n	801b028 <rcl_guard_condition_init_from_rmw+0x7c>
 801b026:	2564      	movs	r5, #100	@ 0x64
 801b028:	4628      	mov	r0, r5
 801b02a:	b006      	add	sp, #24
 801b02c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b030:	b002      	add	sp, #8
 801b032:	4770      	bx	lr
 801b034:	250b      	movs	r5, #11
 801b036:	e7f7      	b.n	801b028 <rcl_guard_condition_init_from_rmw+0x7c>
 801b038:	2565      	movs	r5, #101	@ 0x65
 801b03a:	e7f5      	b.n	801b028 <rcl_guard_condition_init_from_rmw+0x7c>
 801b03c:	6828      	ldr	r0, [r5, #0]
 801b03e:	3028      	adds	r0, #40	@ 0x28
 801b040:	f000 f92c 	bl	801b29c <rmw_create_guard_condition>
 801b044:	6038      	str	r0, [r7, #0]
 801b046:	6867      	ldr	r7, [r4, #4]
 801b048:	683e      	ldr	r6, [r7, #0]
 801b04a:	b126      	cbz	r6, 801b056 <rcl_guard_condition_init_from_rmw+0xaa>
 801b04c:	2301      	movs	r3, #1
 801b04e:	713b      	strb	r3, [r7, #4]
 801b050:	e7de      	b.n	801b010 <rcl_guard_condition_init_from_rmw+0x64>
 801b052:	250a      	movs	r5, #10
 801b054:	e7e8      	b.n	801b028 <rcl_guard_condition_init_from_rmw+0x7c>
 801b056:	9b02      	ldr	r3, [sp, #8]
 801b058:	4638      	mov	r0, r7
 801b05a:	9905      	ldr	r1, [sp, #20]
 801b05c:	2501      	movs	r5, #1
 801b05e:	4798      	blx	r3
 801b060:	6066      	str	r6, [r4, #4]
 801b062:	e7e1      	b.n	801b028 <rcl_guard_condition_init_from_rmw+0x7c>

0801b064 <rcl_guard_condition_fini>:
 801b064:	b570      	push	{r4, r5, r6, lr}
 801b066:	b082      	sub	sp, #8
 801b068:	b1f0      	cbz	r0, 801b0a8 <rcl_guard_condition_fini+0x44>
 801b06a:	6843      	ldr	r3, [r0, #4]
 801b06c:	4604      	mov	r4, r0
 801b06e:	b163      	cbz	r3, 801b08a <rcl_guard_condition_fini+0x26>
 801b070:	6818      	ldr	r0, [r3, #0]
 801b072:	68de      	ldr	r6, [r3, #12]
 801b074:	6999      	ldr	r1, [r3, #24]
 801b076:	b160      	cbz	r0, 801b092 <rcl_guard_condition_fini+0x2e>
 801b078:	791d      	ldrb	r5, [r3, #4]
 801b07a:	b965      	cbnz	r5, 801b096 <rcl_guard_condition_fini+0x32>
 801b07c:	4618      	mov	r0, r3
 801b07e:	47b0      	blx	r6
 801b080:	2300      	movs	r3, #0
 801b082:	4628      	mov	r0, r5
 801b084:	6063      	str	r3, [r4, #4]
 801b086:	b002      	add	sp, #8
 801b088:	bd70      	pop	{r4, r5, r6, pc}
 801b08a:	461d      	mov	r5, r3
 801b08c:	4628      	mov	r0, r5
 801b08e:	b002      	add	sp, #8
 801b090:	bd70      	pop	{r4, r5, r6, pc}
 801b092:	4605      	mov	r5, r0
 801b094:	e7f2      	b.n	801b07c <rcl_guard_condition_fini+0x18>
 801b096:	9101      	str	r1, [sp, #4]
 801b098:	f000 f916 	bl	801b2c8 <rmw_destroy_guard_condition>
 801b09c:	1e05      	subs	r5, r0, #0
 801b09e:	6863      	ldr	r3, [r4, #4]
 801b0a0:	9901      	ldr	r1, [sp, #4]
 801b0a2:	bf18      	it	ne
 801b0a4:	2501      	movne	r5, #1
 801b0a6:	e7e9      	b.n	801b07c <rcl_guard_condition_fini+0x18>
 801b0a8:	250b      	movs	r5, #11
 801b0aa:	4628      	mov	r0, r5
 801b0ac:	b002      	add	sp, #8
 801b0ae:	bd70      	pop	{r4, r5, r6, pc}

0801b0b0 <rcl_guard_condition_get_default_options>:
 801b0b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b0b2:	b087      	sub	sp, #28
 801b0b4:	4606      	mov	r6, r0
 801b0b6:	4c0b      	ldr	r4, [pc, #44]	@ (801b0e4 <rcl_guard_condition_get_default_options+0x34>)
 801b0b8:	4668      	mov	r0, sp
 801b0ba:	f7f4 fa13 	bl	800f4e4 <rcutils_get_default_allocator>
 801b0be:	46ee      	mov	lr, sp
 801b0c0:	46a4      	mov	ip, r4
 801b0c2:	4625      	mov	r5, r4
 801b0c4:	4634      	mov	r4, r6
 801b0c6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801b0ca:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801b0ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801b0d0:	f8de 7000 	ldr.w	r7, [lr]
 801b0d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801b0d6:	4630      	mov	r0, r6
 801b0d8:	f8cc 7000 	str.w	r7, [ip]
 801b0dc:	6027      	str	r7, [r4, #0]
 801b0de:	b007      	add	sp, #28
 801b0e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b0e2:	bf00      	nop
 801b0e4:	24013038 	.word	0x24013038

0801b0e8 <rcl_trigger_guard_condition>:
 801b0e8:	b148      	cbz	r0, 801b0fe <rcl_trigger_guard_condition+0x16>
 801b0ea:	b508      	push	{r3, lr}
 801b0ec:	6843      	ldr	r3, [r0, #4]
 801b0ee:	b143      	cbz	r3, 801b102 <rcl_trigger_guard_condition+0x1a>
 801b0f0:	6818      	ldr	r0, [r3, #0]
 801b0f2:	f000 f8fd 	bl	801b2f0 <rmw_trigger_guard_condition>
 801b0f6:	3800      	subs	r0, #0
 801b0f8:	bf18      	it	ne
 801b0fa:	2001      	movne	r0, #1
 801b0fc:	bd08      	pop	{r3, pc}
 801b0fe:	200b      	movs	r0, #11
 801b100:	4770      	bx	lr
 801b102:	200b      	movs	r0, #11
 801b104:	bd08      	pop	{r3, pc}
 801b106:	bf00      	nop

0801b108 <rcl_guard_condition_get_rmw_handle>:
 801b108:	b110      	cbz	r0, 801b110 <rcl_guard_condition_get_rmw_handle+0x8>
 801b10a:	6840      	ldr	r0, [r0, #4]
 801b10c:	b100      	cbz	r0, 801b110 <rcl_guard_condition_get_rmw_handle+0x8>
 801b10e:	6800      	ldr	r0, [r0, #0]
 801b110:	4770      	bx	lr
 801b112:	bf00      	nop

0801b114 <rcl_validate_topic_name>:
 801b114:	2800      	cmp	r0, #0
 801b116:	f000 8089 	beq.w	801b22c <rcl_validate_topic_name+0x118>
 801b11a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b11e:	460e      	mov	r6, r1
 801b120:	2900      	cmp	r1, #0
 801b122:	f000 8085 	beq.w	801b230 <rcl_validate_topic_name+0x11c>
 801b126:	4604      	mov	r4, r0
 801b128:	4617      	mov	r7, r2
 801b12a:	f7e5 f8e3 	bl	80002f4 <strlen>
 801b12e:	b1b0      	cbz	r0, 801b15e <rcl_validate_topic_name+0x4a>
 801b130:	f894 e000 	ldrb.w	lr, [r4]
 801b134:	f8df c160 	ldr.w	ip, [pc, #352]	@ 801b298 <rcl_validate_topic_name+0x184>
 801b138:	f81c 300e 	ldrb.w	r3, [ip, lr]
 801b13c:	f013 0304 	ands.w	r3, r3, #4
 801b140:	d139      	bne.n	801b1b6 <rcl_validate_topic_name+0xa2>
 801b142:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 801b146:	f814 2008 	ldrb.w	r2, [r4, r8]
 801b14a:	2a2f      	cmp	r2, #47	@ 0x2f
 801b14c:	d10f      	bne.n	801b16e <rcl_validate_topic_name+0x5a>
 801b14e:	2202      	movs	r2, #2
 801b150:	6032      	str	r2, [r6, #0]
 801b152:	b3a7      	cbz	r7, 801b1be <rcl_validate_topic_name+0xaa>
 801b154:	4618      	mov	r0, r3
 801b156:	f8c7 8000 	str.w	r8, [r7]
 801b15a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b15e:	2301      	movs	r3, #1
 801b160:	6033      	str	r3, [r6, #0]
 801b162:	b367      	cbz	r7, 801b1be <rcl_validate_topic_name+0xaa>
 801b164:	2300      	movs	r3, #0
 801b166:	4618      	mov	r0, r3
 801b168:	603b      	str	r3, [r7, #0]
 801b16a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b16e:	f104 3aff 	add.w	sl, r4, #4294967295	@ 0xffffffff
 801b172:	461d      	mov	r5, r3
 801b174:	4619      	mov	r1, r3
 801b176:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 801b17a:	f1a2 0930 	sub.w	r9, r2, #48	@ 0x30
 801b17e:	f1b9 0f09 	cmp.w	r9, #9
 801b182:	d91f      	bls.n	801b1c4 <rcl_validate_topic_name+0xb0>
 801b184:	f022 0920 	bic.w	r9, r2, #32
 801b188:	f1a9 0941 	sub.w	r9, r9, #65	@ 0x41
 801b18c:	f1b9 0f19 	cmp.w	r9, #25
 801b190:	d918      	bls.n	801b1c4 <rcl_validate_topic_name+0xb0>
 801b192:	2a5f      	cmp	r2, #95	@ 0x5f
 801b194:	d024      	beq.n	801b1e0 <rcl_validate_topic_name+0xcc>
 801b196:	2a2f      	cmp	r2, #47	@ 0x2f
 801b198:	d058      	beq.n	801b24c <rcl_validate_topic_name+0x138>
 801b19a:	2a7e      	cmp	r2, #126	@ 0x7e
 801b19c:	d04a      	beq.n	801b234 <rcl_validate_topic_name+0x120>
 801b19e:	2a7b      	cmp	r2, #123	@ 0x7b
 801b1a0:	d05b      	beq.n	801b25a <rcl_validate_topic_name+0x146>
 801b1a2:	2a7d      	cmp	r2, #125	@ 0x7d
 801b1a4:	d169      	bne.n	801b27a <rcl_validate_topic_name+0x166>
 801b1a6:	2d00      	cmp	r5, #0
 801b1a8:	d15c      	bne.n	801b264 <rcl_validate_topic_name+0x150>
 801b1aa:	2305      	movs	r3, #5
 801b1ac:	6033      	str	r3, [r6, #0]
 801b1ae:	b137      	cbz	r7, 801b1be <rcl_validate_topic_name+0xaa>
 801b1b0:	2000      	movs	r0, #0
 801b1b2:	6039      	str	r1, [r7, #0]
 801b1b4:	e7d9      	b.n	801b16a <rcl_validate_topic_name+0x56>
 801b1b6:	2304      	movs	r3, #4
 801b1b8:	6033      	str	r3, [r6, #0]
 801b1ba:	2f00      	cmp	r7, #0
 801b1bc:	d1d2      	bne.n	801b164 <rcl_validate_topic_name+0x50>
 801b1be:	2000      	movs	r0, #0
 801b1c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1c4:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b1c8:	0752      	lsls	r2, r2, #29
 801b1ca:	d509      	bpl.n	801b1e0 <rcl_validate_topic_name+0xcc>
 801b1cc:	2900      	cmp	r1, #0
 801b1ce:	bf0c      	ite	eq
 801b1d0:	2200      	moveq	r2, #0
 801b1d2:	f005 0201 	andne.w	r2, r5, #1
 801b1d6:	b11a      	cbz	r2, 801b1e0 <rcl_validate_topic_name+0xcc>
 801b1d8:	1e4d      	subs	r5, r1, #1
 801b1da:	429d      	cmp	r5, r3
 801b1dc:	d031      	beq.n	801b242 <rcl_validate_topic_name+0x12e>
 801b1de:	4615      	mov	r5, r2
 801b1e0:	3101      	adds	r1, #1
 801b1e2:	4288      	cmp	r0, r1
 801b1e4:	d1c7      	bne.n	801b176 <rcl_validate_topic_name+0x62>
 801b1e6:	2d00      	cmp	r5, #0
 801b1e8:	d142      	bne.n	801b270 <rcl_validate_topic_name+0x15c>
 801b1ea:	4628      	mov	r0, r5
 801b1ec:	2301      	movs	r3, #1
 801b1ee:	e00c      	b.n	801b20a <rcl_validate_topic_name+0xf6>
 801b1f0:	f1be 0f7e 	cmp.w	lr, #126	@ 0x7e
 801b1f4:	d101      	bne.n	801b1fa <rcl_validate_topic_name+0xe6>
 801b1f6:	2801      	cmp	r0, #1
 801b1f8:	d047      	beq.n	801b28a <rcl_validate_topic_name+0x176>
 801b1fa:	1c5a      	adds	r2, r3, #1
 801b1fc:	428b      	cmp	r3, r1
 801b1fe:	f100 0001 	add.w	r0, r0, #1
 801b202:	f104 0401 	add.w	r4, r4, #1
 801b206:	4613      	mov	r3, r2
 801b208:	d22e      	bcs.n	801b268 <rcl_validate_topic_name+0x154>
 801b20a:	4580      	cmp	r8, r0
 801b20c:	d0f5      	beq.n	801b1fa <rcl_validate_topic_name+0xe6>
 801b20e:	7822      	ldrb	r2, [r4, #0]
 801b210:	2a2f      	cmp	r2, #47	@ 0x2f
 801b212:	d1ed      	bne.n	801b1f0 <rcl_validate_topic_name+0xdc>
 801b214:	7862      	ldrb	r2, [r4, #1]
 801b216:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b21a:	0752      	lsls	r2, r2, #29
 801b21c:	d5ed      	bpl.n	801b1fa <rcl_validate_topic_name+0xe6>
 801b21e:	2204      	movs	r2, #4
 801b220:	6032      	str	r2, [r6, #0]
 801b222:	2f00      	cmp	r7, #0
 801b224:	d0cb      	beq.n	801b1be <rcl_validate_topic_name+0xaa>
 801b226:	2000      	movs	r0, #0
 801b228:	603b      	str	r3, [r7, #0]
 801b22a:	e79e      	b.n	801b16a <rcl_validate_topic_name+0x56>
 801b22c:	200b      	movs	r0, #11
 801b22e:	4770      	bx	lr
 801b230:	200b      	movs	r0, #11
 801b232:	e79a      	b.n	801b16a <rcl_validate_topic_name+0x56>
 801b234:	2900      	cmp	r1, #0
 801b236:	d0d3      	beq.n	801b1e0 <rcl_validate_topic_name+0xcc>
 801b238:	2306      	movs	r3, #6
 801b23a:	6033      	str	r3, [r6, #0]
 801b23c:	2f00      	cmp	r7, #0
 801b23e:	d1b7      	bne.n	801b1b0 <rcl_validate_topic_name+0x9c>
 801b240:	e7bd      	b.n	801b1be <rcl_validate_topic_name+0xaa>
 801b242:	2309      	movs	r3, #9
 801b244:	6033      	str	r3, [r6, #0]
 801b246:	2f00      	cmp	r7, #0
 801b248:	d1b2      	bne.n	801b1b0 <rcl_validate_topic_name+0x9c>
 801b24a:	e7b8      	b.n	801b1be <rcl_validate_topic_name+0xaa>
 801b24c:	2d00      	cmp	r5, #0
 801b24e:	d0c7      	beq.n	801b1e0 <rcl_validate_topic_name+0xcc>
 801b250:	2308      	movs	r3, #8
 801b252:	6033      	str	r3, [r6, #0]
 801b254:	2f00      	cmp	r7, #0
 801b256:	d1ab      	bne.n	801b1b0 <rcl_validate_topic_name+0x9c>
 801b258:	e7b1      	b.n	801b1be <rcl_validate_topic_name+0xaa>
 801b25a:	2d00      	cmp	r5, #0
 801b25c:	d1f8      	bne.n	801b250 <rcl_validate_topic_name+0x13c>
 801b25e:	460b      	mov	r3, r1
 801b260:	2501      	movs	r5, #1
 801b262:	e7bd      	b.n	801b1e0 <rcl_validate_topic_name+0xcc>
 801b264:	2500      	movs	r5, #0
 801b266:	e7bb      	b.n	801b1e0 <rcl_validate_topic_name+0xcc>
 801b268:	2300      	movs	r3, #0
 801b26a:	4618      	mov	r0, r3
 801b26c:	6033      	str	r3, [r6, #0]
 801b26e:	e77c      	b.n	801b16a <rcl_validate_topic_name+0x56>
 801b270:	2205      	movs	r2, #5
 801b272:	6032      	str	r2, [r6, #0]
 801b274:	2f00      	cmp	r7, #0
 801b276:	d1d6      	bne.n	801b226 <rcl_validate_topic_name+0x112>
 801b278:	e7a1      	b.n	801b1be <rcl_validate_topic_name+0xaa>
 801b27a:	2d00      	cmp	r5, #0
 801b27c:	bf14      	ite	ne
 801b27e:	2308      	movne	r3, #8
 801b280:	2303      	moveq	r3, #3
 801b282:	6033      	str	r3, [r6, #0]
 801b284:	2f00      	cmp	r7, #0
 801b286:	d193      	bne.n	801b1b0 <rcl_validate_topic_name+0x9c>
 801b288:	e799      	b.n	801b1be <rcl_validate_topic_name+0xaa>
 801b28a:	2307      	movs	r3, #7
 801b28c:	6033      	str	r3, [r6, #0]
 801b28e:	2f00      	cmp	r7, #0
 801b290:	d095      	beq.n	801b1be <rcl_validate_topic_name+0xaa>
 801b292:	2301      	movs	r3, #1
 801b294:	e7c7      	b.n	801b226 <rcl_validate_topic_name+0x112>
 801b296:	bf00      	nop
 801b298:	0801d966 	.word	0x0801d966

0801b29c <rmw_create_guard_condition>:
 801b29c:	b538      	push	{r3, r4, r5, lr}
 801b29e:	4605      	mov	r5, r0
 801b2a0:	4808      	ldr	r0, [pc, #32]	@ (801b2c4 <rmw_create_guard_condition+0x28>)
 801b2a2:	f7fd ff5f 	bl	8019164 <get_memory>
 801b2a6:	4603      	mov	r3, r0
 801b2a8:	b148      	cbz	r0, 801b2be <rmw_create_guard_condition+0x22>
 801b2aa:	6884      	ldr	r4, [r0, #8]
 801b2ac:	2300      	movs	r3, #0
 801b2ae:	61e5      	str	r5, [r4, #28]
 801b2b0:	7423      	strb	r3, [r4, #16]
 801b2b2:	f7fd ffbf 	bl	8019234 <rmw_get_implementation_identifier>
 801b2b6:	f104 0314 	add.w	r3, r4, #20
 801b2ba:	e9c4 0405 	strd	r0, r4, [r4, #20]
 801b2be:	4618      	mov	r0, r3
 801b2c0:	bd38      	pop	{r3, r4, r5, pc}
 801b2c2:	bf00      	nop
 801b2c4:	24012ed4 	.word	0x24012ed4

0801b2c8 <rmw_destroy_guard_condition>:
 801b2c8:	b508      	push	{r3, lr}
 801b2ca:	4b08      	ldr	r3, [pc, #32]	@ (801b2ec <rmw_destroy_guard_condition+0x24>)
 801b2cc:	6819      	ldr	r1, [r3, #0]
 801b2ce:	b911      	cbnz	r1, 801b2d6 <rmw_destroy_guard_condition+0xe>
 801b2d0:	e00a      	b.n	801b2e8 <rmw_destroy_guard_condition+0x20>
 801b2d2:	6849      	ldr	r1, [r1, #4]
 801b2d4:	b141      	cbz	r1, 801b2e8 <rmw_destroy_guard_condition+0x20>
 801b2d6:	688b      	ldr	r3, [r1, #8]
 801b2d8:	3314      	adds	r3, #20
 801b2da:	4298      	cmp	r0, r3
 801b2dc:	d1f9      	bne.n	801b2d2 <rmw_destroy_guard_condition+0xa>
 801b2de:	4803      	ldr	r0, [pc, #12]	@ (801b2ec <rmw_destroy_guard_condition+0x24>)
 801b2e0:	f7fd ff50 	bl	8019184 <put_memory>
 801b2e4:	2000      	movs	r0, #0
 801b2e6:	bd08      	pop	{r3, pc}
 801b2e8:	2001      	movs	r0, #1
 801b2ea:	bd08      	pop	{r3, pc}
 801b2ec:	24012ed4 	.word	0x24012ed4

0801b2f0 <rmw_trigger_guard_condition>:
 801b2f0:	b160      	cbz	r0, 801b30c <rmw_trigger_guard_condition+0x1c>
 801b2f2:	b510      	push	{r4, lr}
 801b2f4:	4604      	mov	r4, r0
 801b2f6:	6800      	ldr	r0, [r0, #0]
 801b2f8:	f7f5 fb22 	bl	8010940 <is_uxrce_rmw_identifier_valid>
 801b2fc:	b908      	cbnz	r0, 801b302 <rmw_trigger_guard_condition+0x12>
 801b2fe:	2001      	movs	r0, #1
 801b300:	bd10      	pop	{r4, pc}
 801b302:	6863      	ldr	r3, [r4, #4]
 801b304:	2201      	movs	r2, #1
 801b306:	2000      	movs	r0, #0
 801b308:	741a      	strb	r2, [r3, #16]
 801b30a:	bd10      	pop	{r4, pc}
 801b30c:	2001      	movs	r0, #1
 801b30e:	4770      	bx	lr

0801b310 <rosidl_runtime_c__String__init>:
 801b310:	b510      	push	{r4, lr}
 801b312:	4604      	mov	r4, r0
 801b314:	b086      	sub	sp, #24
 801b316:	b170      	cbz	r0, 801b336 <rosidl_runtime_c__String__init+0x26>
 801b318:	a801      	add	r0, sp, #4
 801b31a:	f7f4 f8e3 	bl	800f4e4 <rcutils_get_default_allocator>
 801b31e:	9b01      	ldr	r3, [sp, #4]
 801b320:	9905      	ldr	r1, [sp, #20]
 801b322:	2001      	movs	r0, #1
 801b324:	4798      	blx	r3
 801b326:	6020      	str	r0, [r4, #0]
 801b328:	b128      	cbz	r0, 801b336 <rosidl_runtime_c__String__init+0x26>
 801b32a:	2100      	movs	r1, #0
 801b32c:	2201      	movs	r2, #1
 801b32e:	7001      	strb	r1, [r0, #0]
 801b330:	4610      	mov	r0, r2
 801b332:	e9c4 1201 	strd	r1, r2, [r4, #4]
 801b336:	b006      	add	sp, #24
 801b338:	bd10      	pop	{r4, pc}
 801b33a:	bf00      	nop

0801b33c <rosidl_runtime_c__String__fini>:
 801b33c:	b320      	cbz	r0, 801b388 <rosidl_runtime_c__String__fini+0x4c>
 801b33e:	6803      	ldr	r3, [r0, #0]
 801b340:	b510      	push	{r4, lr}
 801b342:	4604      	mov	r4, r0
 801b344:	b086      	sub	sp, #24
 801b346:	b173      	cbz	r3, 801b366 <rosidl_runtime_c__String__fini+0x2a>
 801b348:	6883      	ldr	r3, [r0, #8]
 801b34a:	b1f3      	cbz	r3, 801b38a <rosidl_runtime_c__String__fini+0x4e>
 801b34c:	a801      	add	r0, sp, #4
 801b34e:	f7f4 f8c9 	bl	800f4e4 <rcutils_get_default_allocator>
 801b352:	9b02      	ldr	r3, [sp, #8]
 801b354:	9905      	ldr	r1, [sp, #20]
 801b356:	6820      	ldr	r0, [r4, #0]
 801b358:	4798      	blx	r3
 801b35a:	2300      	movs	r3, #0
 801b35c:	e9c4 3300 	strd	r3, r3, [r4]
 801b360:	60a3      	str	r3, [r4, #8]
 801b362:	b006      	add	sp, #24
 801b364:	bd10      	pop	{r4, pc}
 801b366:	6843      	ldr	r3, [r0, #4]
 801b368:	b9db      	cbnz	r3, 801b3a2 <rosidl_runtime_c__String__fini+0x66>
 801b36a:	6883      	ldr	r3, [r0, #8]
 801b36c:	2b00      	cmp	r3, #0
 801b36e:	d0f8      	beq.n	801b362 <rosidl_runtime_c__String__fini+0x26>
 801b370:	4b12      	ldr	r3, [pc, #72]	@ (801b3bc <rosidl_runtime_c__String__fini+0x80>)
 801b372:	2251      	movs	r2, #81	@ 0x51
 801b374:	2101      	movs	r1, #1
 801b376:	4812      	ldr	r0, [pc, #72]	@ (801b3c0 <rosidl_runtime_c__String__fini+0x84>)
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	68db      	ldr	r3, [r3, #12]
 801b37c:	f000 fb82 	bl	801ba84 <fwrite>
 801b380:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b384:	f000 f83e 	bl	801b404 <exit>
 801b388:	4770      	bx	lr
 801b38a:	4b0c      	ldr	r3, [pc, #48]	@ (801b3bc <rosidl_runtime_c__String__fini+0x80>)
 801b38c:	224c      	movs	r2, #76	@ 0x4c
 801b38e:	2101      	movs	r1, #1
 801b390:	480c      	ldr	r0, [pc, #48]	@ (801b3c4 <rosidl_runtime_c__String__fini+0x88>)
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	68db      	ldr	r3, [r3, #12]
 801b396:	f000 fb75 	bl	801ba84 <fwrite>
 801b39a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b39e:	f000 f831 	bl	801b404 <exit>
 801b3a2:	4b06      	ldr	r3, [pc, #24]	@ (801b3bc <rosidl_runtime_c__String__fini+0x80>)
 801b3a4:	224e      	movs	r2, #78	@ 0x4e
 801b3a6:	2101      	movs	r1, #1
 801b3a8:	4807      	ldr	r0, [pc, #28]	@ (801b3c8 <rosidl_runtime_c__String__fini+0x8c>)
 801b3aa:	681b      	ldr	r3, [r3, #0]
 801b3ac:	68db      	ldr	r3, [r3, #12]
 801b3ae:	f000 fb69 	bl	801ba84 <fwrite>
 801b3b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801b3b6:	f000 f825 	bl	801b404 <exit>
 801b3ba:	bf00      	nop
 801b3bc:	240002b0 	.word	0x240002b0
 801b3c0:	0801d8a4 	.word	0x0801d8a4
 801b3c4:	0801d804 	.word	0x0801d804
 801b3c8:	0801d854 	.word	0x0801d854

0801b3cc <calloc>:
 801b3cc:	4b02      	ldr	r3, [pc, #8]	@ (801b3d8 <calloc+0xc>)
 801b3ce:	460a      	mov	r2, r1
 801b3d0:	4601      	mov	r1, r0
 801b3d2:	6818      	ldr	r0, [r3, #0]
 801b3d4:	f000 b802 	b.w	801b3dc <_calloc_r>
 801b3d8:	240002b0 	.word	0x240002b0

0801b3dc <_calloc_r>:
 801b3dc:	b570      	push	{r4, r5, r6, lr}
 801b3de:	fba1 5402 	umull	r5, r4, r1, r2
 801b3e2:	b93c      	cbnz	r4, 801b3f4 <_calloc_r+0x18>
 801b3e4:	4629      	mov	r1, r5
 801b3e6:	f000 f899 	bl	801b51c <_malloc_r>
 801b3ea:	4606      	mov	r6, r0
 801b3ec:	b928      	cbnz	r0, 801b3fa <_calloc_r+0x1e>
 801b3ee:	2600      	movs	r6, #0
 801b3f0:	4630      	mov	r0, r6
 801b3f2:	bd70      	pop	{r4, r5, r6, pc}
 801b3f4:	220c      	movs	r2, #12
 801b3f6:	6002      	str	r2, [r0, #0]
 801b3f8:	e7f9      	b.n	801b3ee <_calloc_r+0x12>
 801b3fa:	462a      	mov	r2, r5
 801b3fc:	4621      	mov	r1, r4
 801b3fe:	f000 fccf 	bl	801bda0 <memset>
 801b402:	e7f5      	b.n	801b3f0 <_calloc_r+0x14>

0801b404 <exit>:
 801b404:	b508      	push	{r3, lr}
 801b406:	4b06      	ldr	r3, [pc, #24]	@ (801b420 <exit+0x1c>)
 801b408:	4604      	mov	r4, r0
 801b40a:	b113      	cbz	r3, 801b412 <exit+0xe>
 801b40c:	2100      	movs	r1, #0
 801b40e:	f3af 8000 	nop.w
 801b412:	4b04      	ldr	r3, [pc, #16]	@ (801b424 <exit+0x20>)
 801b414:	681b      	ldr	r3, [r3, #0]
 801b416:	b103      	cbz	r3, 801b41a <exit+0x16>
 801b418:	4798      	blx	r3
 801b41a:	4620      	mov	r0, r4
 801b41c:	f7e6 fe2e 	bl	800207c <_exit>
 801b420:	00000000 	.word	0x00000000
 801b424:	2401318c 	.word	0x2401318c

0801b428 <getenv>:
 801b428:	b507      	push	{r0, r1, r2, lr}
 801b42a:	4b04      	ldr	r3, [pc, #16]	@ (801b43c <getenv+0x14>)
 801b42c:	4601      	mov	r1, r0
 801b42e:	aa01      	add	r2, sp, #4
 801b430:	6818      	ldr	r0, [r3, #0]
 801b432:	f000 f805 	bl	801b440 <_findenv_r>
 801b436:	b003      	add	sp, #12
 801b438:	f85d fb04 	ldr.w	pc, [sp], #4
 801b43c:	240002b0 	.word	0x240002b0

0801b440 <_findenv_r>:
 801b440:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b444:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 801b4b4 <_findenv_r+0x74>
 801b448:	4606      	mov	r6, r0
 801b44a:	4689      	mov	r9, r1
 801b44c:	4617      	mov	r7, r2
 801b44e:	f000 fd9d 	bl	801bf8c <__env_lock>
 801b452:	f8da 4000 	ldr.w	r4, [sl]
 801b456:	b134      	cbz	r4, 801b466 <_findenv_r+0x26>
 801b458:	464b      	mov	r3, r9
 801b45a:	4698      	mov	r8, r3
 801b45c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b460:	b13a      	cbz	r2, 801b472 <_findenv_r+0x32>
 801b462:	2a3d      	cmp	r2, #61	@ 0x3d
 801b464:	d1f9      	bne.n	801b45a <_findenv_r+0x1a>
 801b466:	4630      	mov	r0, r6
 801b468:	f000 fd96 	bl	801bf98 <__env_unlock>
 801b46c:	2000      	movs	r0, #0
 801b46e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b472:	eba8 0809 	sub.w	r8, r8, r9
 801b476:	46a3      	mov	fp, r4
 801b478:	f854 0b04 	ldr.w	r0, [r4], #4
 801b47c:	2800      	cmp	r0, #0
 801b47e:	d0f2      	beq.n	801b466 <_findenv_r+0x26>
 801b480:	4642      	mov	r2, r8
 801b482:	4649      	mov	r1, r9
 801b484:	f000 fca1 	bl	801bdca <strncmp>
 801b488:	2800      	cmp	r0, #0
 801b48a:	d1f4      	bne.n	801b476 <_findenv_r+0x36>
 801b48c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 801b490:	eb03 0508 	add.w	r5, r3, r8
 801b494:	f813 3008 	ldrb.w	r3, [r3, r8]
 801b498:	2b3d      	cmp	r3, #61	@ 0x3d
 801b49a:	d1ec      	bne.n	801b476 <_findenv_r+0x36>
 801b49c:	f8da 3000 	ldr.w	r3, [sl]
 801b4a0:	ebab 0303 	sub.w	r3, fp, r3
 801b4a4:	109b      	asrs	r3, r3, #2
 801b4a6:	4630      	mov	r0, r6
 801b4a8:	603b      	str	r3, [r7, #0]
 801b4aa:	f000 fd75 	bl	801bf98 <__env_unlock>
 801b4ae:	1c68      	adds	r0, r5, #1
 801b4b0:	e7dd      	b.n	801b46e <_findenv_r+0x2e>
 801b4b2:	bf00      	nop
 801b4b4:	24000024 	.word	0x24000024

0801b4b8 <malloc>:
 801b4b8:	4b02      	ldr	r3, [pc, #8]	@ (801b4c4 <malloc+0xc>)
 801b4ba:	4601      	mov	r1, r0
 801b4bc:	6818      	ldr	r0, [r3, #0]
 801b4be:	f000 b82d 	b.w	801b51c <_malloc_r>
 801b4c2:	bf00      	nop
 801b4c4:	240002b0 	.word	0x240002b0

0801b4c8 <free>:
 801b4c8:	4b02      	ldr	r3, [pc, #8]	@ (801b4d4 <free+0xc>)
 801b4ca:	4601      	mov	r1, r0
 801b4cc:	6818      	ldr	r0, [r3, #0]
 801b4ce:	f000 bd69 	b.w	801bfa4 <_free_r>
 801b4d2:	bf00      	nop
 801b4d4:	240002b0 	.word	0x240002b0

0801b4d8 <sbrk_aligned>:
 801b4d8:	b570      	push	{r4, r5, r6, lr}
 801b4da:	4e0f      	ldr	r6, [pc, #60]	@ (801b518 <sbrk_aligned+0x40>)
 801b4dc:	460c      	mov	r4, r1
 801b4de:	6831      	ldr	r1, [r6, #0]
 801b4e0:	4605      	mov	r5, r0
 801b4e2:	b911      	cbnz	r1, 801b4ea <sbrk_aligned+0x12>
 801b4e4:	f000 fcce 	bl	801be84 <_sbrk_r>
 801b4e8:	6030      	str	r0, [r6, #0]
 801b4ea:	4621      	mov	r1, r4
 801b4ec:	4628      	mov	r0, r5
 801b4ee:	f000 fcc9 	bl	801be84 <_sbrk_r>
 801b4f2:	1c43      	adds	r3, r0, #1
 801b4f4:	d103      	bne.n	801b4fe <sbrk_aligned+0x26>
 801b4f6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801b4fa:	4620      	mov	r0, r4
 801b4fc:	bd70      	pop	{r4, r5, r6, pc}
 801b4fe:	1cc4      	adds	r4, r0, #3
 801b500:	f024 0403 	bic.w	r4, r4, #3
 801b504:	42a0      	cmp	r0, r4
 801b506:	d0f8      	beq.n	801b4fa <sbrk_aligned+0x22>
 801b508:	1a21      	subs	r1, r4, r0
 801b50a:	4628      	mov	r0, r5
 801b50c:	f000 fcba 	bl	801be84 <_sbrk_r>
 801b510:	3001      	adds	r0, #1
 801b512:	d1f2      	bne.n	801b4fa <sbrk_aligned+0x22>
 801b514:	e7ef      	b.n	801b4f6 <sbrk_aligned+0x1e>
 801b516:	bf00      	nop
 801b518:	2401304c 	.word	0x2401304c

0801b51c <_malloc_r>:
 801b51c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b520:	1ccd      	adds	r5, r1, #3
 801b522:	f025 0503 	bic.w	r5, r5, #3
 801b526:	3508      	adds	r5, #8
 801b528:	2d0c      	cmp	r5, #12
 801b52a:	bf38      	it	cc
 801b52c:	250c      	movcc	r5, #12
 801b52e:	2d00      	cmp	r5, #0
 801b530:	4606      	mov	r6, r0
 801b532:	db01      	blt.n	801b538 <_malloc_r+0x1c>
 801b534:	42a9      	cmp	r1, r5
 801b536:	d904      	bls.n	801b542 <_malloc_r+0x26>
 801b538:	230c      	movs	r3, #12
 801b53a:	6033      	str	r3, [r6, #0]
 801b53c:	2000      	movs	r0, #0
 801b53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b542:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b618 <_malloc_r+0xfc>
 801b546:	f000 f869 	bl	801b61c <__malloc_lock>
 801b54a:	f8d8 3000 	ldr.w	r3, [r8]
 801b54e:	461c      	mov	r4, r3
 801b550:	bb44      	cbnz	r4, 801b5a4 <_malloc_r+0x88>
 801b552:	4629      	mov	r1, r5
 801b554:	4630      	mov	r0, r6
 801b556:	f7ff ffbf 	bl	801b4d8 <sbrk_aligned>
 801b55a:	1c43      	adds	r3, r0, #1
 801b55c:	4604      	mov	r4, r0
 801b55e:	d158      	bne.n	801b612 <_malloc_r+0xf6>
 801b560:	f8d8 4000 	ldr.w	r4, [r8]
 801b564:	4627      	mov	r7, r4
 801b566:	2f00      	cmp	r7, #0
 801b568:	d143      	bne.n	801b5f2 <_malloc_r+0xd6>
 801b56a:	2c00      	cmp	r4, #0
 801b56c:	d04b      	beq.n	801b606 <_malloc_r+0xea>
 801b56e:	6823      	ldr	r3, [r4, #0]
 801b570:	4639      	mov	r1, r7
 801b572:	4630      	mov	r0, r6
 801b574:	eb04 0903 	add.w	r9, r4, r3
 801b578:	f000 fc84 	bl	801be84 <_sbrk_r>
 801b57c:	4581      	cmp	r9, r0
 801b57e:	d142      	bne.n	801b606 <_malloc_r+0xea>
 801b580:	6821      	ldr	r1, [r4, #0]
 801b582:	1a6d      	subs	r5, r5, r1
 801b584:	4629      	mov	r1, r5
 801b586:	4630      	mov	r0, r6
 801b588:	f7ff ffa6 	bl	801b4d8 <sbrk_aligned>
 801b58c:	3001      	adds	r0, #1
 801b58e:	d03a      	beq.n	801b606 <_malloc_r+0xea>
 801b590:	6823      	ldr	r3, [r4, #0]
 801b592:	442b      	add	r3, r5
 801b594:	6023      	str	r3, [r4, #0]
 801b596:	f8d8 3000 	ldr.w	r3, [r8]
 801b59a:	685a      	ldr	r2, [r3, #4]
 801b59c:	bb62      	cbnz	r2, 801b5f8 <_malloc_r+0xdc>
 801b59e:	f8c8 7000 	str.w	r7, [r8]
 801b5a2:	e00f      	b.n	801b5c4 <_malloc_r+0xa8>
 801b5a4:	6822      	ldr	r2, [r4, #0]
 801b5a6:	1b52      	subs	r2, r2, r5
 801b5a8:	d420      	bmi.n	801b5ec <_malloc_r+0xd0>
 801b5aa:	2a0b      	cmp	r2, #11
 801b5ac:	d917      	bls.n	801b5de <_malloc_r+0xc2>
 801b5ae:	1961      	adds	r1, r4, r5
 801b5b0:	42a3      	cmp	r3, r4
 801b5b2:	6025      	str	r5, [r4, #0]
 801b5b4:	bf18      	it	ne
 801b5b6:	6059      	strne	r1, [r3, #4]
 801b5b8:	6863      	ldr	r3, [r4, #4]
 801b5ba:	bf08      	it	eq
 801b5bc:	f8c8 1000 	streq.w	r1, [r8]
 801b5c0:	5162      	str	r2, [r4, r5]
 801b5c2:	604b      	str	r3, [r1, #4]
 801b5c4:	4630      	mov	r0, r6
 801b5c6:	f000 f82f 	bl	801b628 <__malloc_unlock>
 801b5ca:	f104 000b 	add.w	r0, r4, #11
 801b5ce:	1d23      	adds	r3, r4, #4
 801b5d0:	f020 0007 	bic.w	r0, r0, #7
 801b5d4:	1ac2      	subs	r2, r0, r3
 801b5d6:	bf1c      	itt	ne
 801b5d8:	1a1b      	subne	r3, r3, r0
 801b5da:	50a3      	strne	r3, [r4, r2]
 801b5dc:	e7af      	b.n	801b53e <_malloc_r+0x22>
 801b5de:	6862      	ldr	r2, [r4, #4]
 801b5e0:	42a3      	cmp	r3, r4
 801b5e2:	bf0c      	ite	eq
 801b5e4:	f8c8 2000 	streq.w	r2, [r8]
 801b5e8:	605a      	strne	r2, [r3, #4]
 801b5ea:	e7eb      	b.n	801b5c4 <_malloc_r+0xa8>
 801b5ec:	4623      	mov	r3, r4
 801b5ee:	6864      	ldr	r4, [r4, #4]
 801b5f0:	e7ae      	b.n	801b550 <_malloc_r+0x34>
 801b5f2:	463c      	mov	r4, r7
 801b5f4:	687f      	ldr	r7, [r7, #4]
 801b5f6:	e7b6      	b.n	801b566 <_malloc_r+0x4a>
 801b5f8:	461a      	mov	r2, r3
 801b5fa:	685b      	ldr	r3, [r3, #4]
 801b5fc:	42a3      	cmp	r3, r4
 801b5fe:	d1fb      	bne.n	801b5f8 <_malloc_r+0xdc>
 801b600:	2300      	movs	r3, #0
 801b602:	6053      	str	r3, [r2, #4]
 801b604:	e7de      	b.n	801b5c4 <_malloc_r+0xa8>
 801b606:	230c      	movs	r3, #12
 801b608:	6033      	str	r3, [r6, #0]
 801b60a:	4630      	mov	r0, r6
 801b60c:	f000 f80c 	bl	801b628 <__malloc_unlock>
 801b610:	e794      	b.n	801b53c <_malloc_r+0x20>
 801b612:	6005      	str	r5, [r0, #0]
 801b614:	e7d6      	b.n	801b5c4 <_malloc_r+0xa8>
 801b616:	bf00      	nop
 801b618:	24013050 	.word	0x24013050

0801b61c <__malloc_lock>:
 801b61c:	4801      	ldr	r0, [pc, #4]	@ (801b624 <__malloc_lock+0x8>)
 801b61e:	f000 bc7e 	b.w	801bf1e <__retarget_lock_acquire_recursive>
 801b622:	bf00      	nop
 801b624:	24013195 	.word	0x24013195

0801b628 <__malloc_unlock>:
 801b628:	4801      	ldr	r0, [pc, #4]	@ (801b630 <__malloc_unlock+0x8>)
 801b62a:	f000 bc79 	b.w	801bf20 <__retarget_lock_release_recursive>
 801b62e:	bf00      	nop
 801b630:	24013195 	.word	0x24013195

0801b634 <srand>:
 801b634:	b538      	push	{r3, r4, r5, lr}
 801b636:	4b10      	ldr	r3, [pc, #64]	@ (801b678 <srand+0x44>)
 801b638:	681d      	ldr	r5, [r3, #0]
 801b63a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b63c:	4604      	mov	r4, r0
 801b63e:	b9b3      	cbnz	r3, 801b66e <srand+0x3a>
 801b640:	2018      	movs	r0, #24
 801b642:	f7ff ff39 	bl	801b4b8 <malloc>
 801b646:	4602      	mov	r2, r0
 801b648:	6328      	str	r0, [r5, #48]	@ 0x30
 801b64a:	b920      	cbnz	r0, 801b656 <srand+0x22>
 801b64c:	4b0b      	ldr	r3, [pc, #44]	@ (801b67c <srand+0x48>)
 801b64e:	480c      	ldr	r0, [pc, #48]	@ (801b680 <srand+0x4c>)
 801b650:	2146      	movs	r1, #70	@ 0x46
 801b652:	f000 fc7d 	bl	801bf50 <__assert_func>
 801b656:	490b      	ldr	r1, [pc, #44]	@ (801b684 <srand+0x50>)
 801b658:	4b0b      	ldr	r3, [pc, #44]	@ (801b688 <srand+0x54>)
 801b65a:	e9c0 1300 	strd	r1, r3, [r0]
 801b65e:	4b0b      	ldr	r3, [pc, #44]	@ (801b68c <srand+0x58>)
 801b660:	6083      	str	r3, [r0, #8]
 801b662:	230b      	movs	r3, #11
 801b664:	8183      	strh	r3, [r0, #12]
 801b666:	2100      	movs	r1, #0
 801b668:	2001      	movs	r0, #1
 801b66a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b66e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801b670:	2200      	movs	r2, #0
 801b672:	611c      	str	r4, [r3, #16]
 801b674:	615a      	str	r2, [r3, #20]
 801b676:	bd38      	pop	{r3, r4, r5, pc}
 801b678:	240002b0 	.word	0x240002b0
 801b67c:	0801d8f6 	.word	0x0801d8f6
 801b680:	0801d90d 	.word	0x0801d90d
 801b684:	abcd330e 	.word	0xabcd330e
 801b688:	e66d1234 	.word	0xe66d1234
 801b68c:	0005deec 	.word	0x0005deec

0801b690 <rand>:
 801b690:	4b16      	ldr	r3, [pc, #88]	@ (801b6ec <rand+0x5c>)
 801b692:	b510      	push	{r4, lr}
 801b694:	681c      	ldr	r4, [r3, #0]
 801b696:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801b698:	b9b3      	cbnz	r3, 801b6c8 <rand+0x38>
 801b69a:	2018      	movs	r0, #24
 801b69c:	f7ff ff0c 	bl	801b4b8 <malloc>
 801b6a0:	4602      	mov	r2, r0
 801b6a2:	6320      	str	r0, [r4, #48]	@ 0x30
 801b6a4:	b920      	cbnz	r0, 801b6b0 <rand+0x20>
 801b6a6:	4b12      	ldr	r3, [pc, #72]	@ (801b6f0 <rand+0x60>)
 801b6a8:	4812      	ldr	r0, [pc, #72]	@ (801b6f4 <rand+0x64>)
 801b6aa:	2152      	movs	r1, #82	@ 0x52
 801b6ac:	f000 fc50 	bl	801bf50 <__assert_func>
 801b6b0:	4911      	ldr	r1, [pc, #68]	@ (801b6f8 <rand+0x68>)
 801b6b2:	4b12      	ldr	r3, [pc, #72]	@ (801b6fc <rand+0x6c>)
 801b6b4:	e9c0 1300 	strd	r1, r3, [r0]
 801b6b8:	4b11      	ldr	r3, [pc, #68]	@ (801b700 <rand+0x70>)
 801b6ba:	6083      	str	r3, [r0, #8]
 801b6bc:	230b      	movs	r3, #11
 801b6be:	8183      	strh	r3, [r0, #12]
 801b6c0:	2100      	movs	r1, #0
 801b6c2:	2001      	movs	r0, #1
 801b6c4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801b6c8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b6ca:	480e      	ldr	r0, [pc, #56]	@ (801b704 <rand+0x74>)
 801b6cc:	690b      	ldr	r3, [r1, #16]
 801b6ce:	694c      	ldr	r4, [r1, #20]
 801b6d0:	4a0d      	ldr	r2, [pc, #52]	@ (801b708 <rand+0x78>)
 801b6d2:	4358      	muls	r0, r3
 801b6d4:	fb02 0004 	mla	r0, r2, r4, r0
 801b6d8:	fba3 3202 	umull	r3, r2, r3, r2
 801b6dc:	3301      	adds	r3, #1
 801b6de:	eb40 0002 	adc.w	r0, r0, r2
 801b6e2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801b6e6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801b6ea:	bd10      	pop	{r4, pc}
 801b6ec:	240002b0 	.word	0x240002b0
 801b6f0:	0801d8f6 	.word	0x0801d8f6
 801b6f4:	0801d90d 	.word	0x0801d90d
 801b6f8:	abcd330e 	.word	0xabcd330e
 801b6fc:	e66d1234 	.word	0xe66d1234
 801b700:	0005deec 	.word	0x0005deec
 801b704:	5851f42d 	.word	0x5851f42d
 801b708:	4c957f2d 	.word	0x4c957f2d

0801b70c <realloc>:
 801b70c:	4b02      	ldr	r3, [pc, #8]	@ (801b718 <realloc+0xc>)
 801b70e:	460a      	mov	r2, r1
 801b710:	4601      	mov	r1, r0
 801b712:	6818      	ldr	r0, [r3, #0]
 801b714:	f000 b802 	b.w	801b71c <_realloc_r>
 801b718:	240002b0 	.word	0x240002b0

0801b71c <_realloc_r>:
 801b71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b720:	4680      	mov	r8, r0
 801b722:	4615      	mov	r5, r2
 801b724:	460c      	mov	r4, r1
 801b726:	b921      	cbnz	r1, 801b732 <_realloc_r+0x16>
 801b728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b72c:	4611      	mov	r1, r2
 801b72e:	f7ff bef5 	b.w	801b51c <_malloc_r>
 801b732:	b92a      	cbnz	r2, 801b740 <_realloc_r+0x24>
 801b734:	f000 fc36 	bl	801bfa4 <_free_r>
 801b738:	2400      	movs	r4, #0
 801b73a:	4620      	mov	r0, r4
 801b73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b740:	f000 fc7a 	bl	801c038 <_malloc_usable_size_r>
 801b744:	4285      	cmp	r5, r0
 801b746:	4606      	mov	r6, r0
 801b748:	d802      	bhi.n	801b750 <_realloc_r+0x34>
 801b74a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801b74e:	d8f4      	bhi.n	801b73a <_realloc_r+0x1e>
 801b750:	4629      	mov	r1, r5
 801b752:	4640      	mov	r0, r8
 801b754:	f7ff fee2 	bl	801b51c <_malloc_r>
 801b758:	4607      	mov	r7, r0
 801b75a:	2800      	cmp	r0, #0
 801b75c:	d0ec      	beq.n	801b738 <_realloc_r+0x1c>
 801b75e:	42b5      	cmp	r5, r6
 801b760:	462a      	mov	r2, r5
 801b762:	4621      	mov	r1, r4
 801b764:	bf28      	it	cs
 801b766:	4632      	movcs	r2, r6
 801b768:	f000 fbe3 	bl	801bf32 <memcpy>
 801b76c:	4621      	mov	r1, r4
 801b76e:	4640      	mov	r0, r8
 801b770:	f000 fc18 	bl	801bfa4 <_free_r>
 801b774:	463c      	mov	r4, r7
 801b776:	e7e0      	b.n	801b73a <_realloc_r+0x1e>

0801b778 <_strtoul_l.constprop.0>:
 801b778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b77c:	4e34      	ldr	r6, [pc, #208]	@ (801b850 <_strtoul_l.constprop.0+0xd8>)
 801b77e:	4686      	mov	lr, r0
 801b780:	460d      	mov	r5, r1
 801b782:	4628      	mov	r0, r5
 801b784:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b788:	5d37      	ldrb	r7, [r6, r4]
 801b78a:	f017 0708 	ands.w	r7, r7, #8
 801b78e:	d1f8      	bne.n	801b782 <_strtoul_l.constprop.0+0xa>
 801b790:	2c2d      	cmp	r4, #45	@ 0x2d
 801b792:	d12f      	bne.n	801b7f4 <_strtoul_l.constprop.0+0x7c>
 801b794:	782c      	ldrb	r4, [r5, #0]
 801b796:	2701      	movs	r7, #1
 801b798:	1c85      	adds	r5, r0, #2
 801b79a:	f033 0010 	bics.w	r0, r3, #16
 801b79e:	d109      	bne.n	801b7b4 <_strtoul_l.constprop.0+0x3c>
 801b7a0:	2c30      	cmp	r4, #48	@ 0x30
 801b7a2:	d12c      	bne.n	801b7fe <_strtoul_l.constprop.0+0x86>
 801b7a4:	7828      	ldrb	r0, [r5, #0]
 801b7a6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801b7aa:	2858      	cmp	r0, #88	@ 0x58
 801b7ac:	d127      	bne.n	801b7fe <_strtoul_l.constprop.0+0x86>
 801b7ae:	786c      	ldrb	r4, [r5, #1]
 801b7b0:	2310      	movs	r3, #16
 801b7b2:	3502      	adds	r5, #2
 801b7b4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801b7b8:	2600      	movs	r6, #0
 801b7ba:	fbb8 f8f3 	udiv	r8, r8, r3
 801b7be:	fb03 f908 	mul.w	r9, r3, r8
 801b7c2:	ea6f 0909 	mvn.w	r9, r9
 801b7c6:	4630      	mov	r0, r6
 801b7c8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801b7cc:	f1bc 0f09 	cmp.w	ip, #9
 801b7d0:	d81c      	bhi.n	801b80c <_strtoul_l.constprop.0+0x94>
 801b7d2:	4664      	mov	r4, ip
 801b7d4:	42a3      	cmp	r3, r4
 801b7d6:	dd2a      	ble.n	801b82e <_strtoul_l.constprop.0+0xb6>
 801b7d8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 801b7dc:	d007      	beq.n	801b7ee <_strtoul_l.constprop.0+0x76>
 801b7de:	4580      	cmp	r8, r0
 801b7e0:	d322      	bcc.n	801b828 <_strtoul_l.constprop.0+0xb0>
 801b7e2:	d101      	bne.n	801b7e8 <_strtoul_l.constprop.0+0x70>
 801b7e4:	45a1      	cmp	r9, r4
 801b7e6:	db1f      	blt.n	801b828 <_strtoul_l.constprop.0+0xb0>
 801b7e8:	fb00 4003 	mla	r0, r0, r3, r4
 801b7ec:	2601      	movs	r6, #1
 801b7ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 801b7f2:	e7e9      	b.n	801b7c8 <_strtoul_l.constprop.0+0x50>
 801b7f4:	2c2b      	cmp	r4, #43	@ 0x2b
 801b7f6:	bf04      	itt	eq
 801b7f8:	782c      	ldrbeq	r4, [r5, #0]
 801b7fa:	1c85      	addeq	r5, r0, #2
 801b7fc:	e7cd      	b.n	801b79a <_strtoul_l.constprop.0+0x22>
 801b7fe:	2b00      	cmp	r3, #0
 801b800:	d1d8      	bne.n	801b7b4 <_strtoul_l.constprop.0+0x3c>
 801b802:	2c30      	cmp	r4, #48	@ 0x30
 801b804:	bf0c      	ite	eq
 801b806:	2308      	moveq	r3, #8
 801b808:	230a      	movne	r3, #10
 801b80a:	e7d3      	b.n	801b7b4 <_strtoul_l.constprop.0+0x3c>
 801b80c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801b810:	f1bc 0f19 	cmp.w	ip, #25
 801b814:	d801      	bhi.n	801b81a <_strtoul_l.constprop.0+0xa2>
 801b816:	3c37      	subs	r4, #55	@ 0x37
 801b818:	e7dc      	b.n	801b7d4 <_strtoul_l.constprop.0+0x5c>
 801b81a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801b81e:	f1bc 0f19 	cmp.w	ip, #25
 801b822:	d804      	bhi.n	801b82e <_strtoul_l.constprop.0+0xb6>
 801b824:	3c57      	subs	r4, #87	@ 0x57
 801b826:	e7d5      	b.n	801b7d4 <_strtoul_l.constprop.0+0x5c>
 801b828:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 801b82c:	e7df      	b.n	801b7ee <_strtoul_l.constprop.0+0x76>
 801b82e:	1c73      	adds	r3, r6, #1
 801b830:	d106      	bne.n	801b840 <_strtoul_l.constprop.0+0xc8>
 801b832:	2322      	movs	r3, #34	@ 0x22
 801b834:	f8ce 3000 	str.w	r3, [lr]
 801b838:	4630      	mov	r0, r6
 801b83a:	b932      	cbnz	r2, 801b84a <_strtoul_l.constprop.0+0xd2>
 801b83c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b840:	b107      	cbz	r7, 801b844 <_strtoul_l.constprop.0+0xcc>
 801b842:	4240      	negs	r0, r0
 801b844:	2a00      	cmp	r2, #0
 801b846:	d0f9      	beq.n	801b83c <_strtoul_l.constprop.0+0xc4>
 801b848:	b106      	cbz	r6, 801b84c <_strtoul_l.constprop.0+0xd4>
 801b84a:	1e69      	subs	r1, r5, #1
 801b84c:	6011      	str	r1, [r2, #0]
 801b84e:	e7f5      	b.n	801b83c <_strtoul_l.constprop.0+0xc4>
 801b850:	0801d966 	.word	0x0801d966

0801b854 <strtoul>:
 801b854:	4613      	mov	r3, r2
 801b856:	460a      	mov	r2, r1
 801b858:	4601      	mov	r1, r0
 801b85a:	4802      	ldr	r0, [pc, #8]	@ (801b864 <strtoul+0x10>)
 801b85c:	6800      	ldr	r0, [r0, #0]
 801b85e:	f7ff bf8b 	b.w	801b778 <_strtoul_l.constprop.0>
 801b862:	bf00      	nop
 801b864:	240002b0 	.word	0x240002b0

0801b868 <std>:
 801b868:	2300      	movs	r3, #0
 801b86a:	b510      	push	{r4, lr}
 801b86c:	4604      	mov	r4, r0
 801b86e:	e9c0 3300 	strd	r3, r3, [r0]
 801b872:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b876:	6083      	str	r3, [r0, #8]
 801b878:	8181      	strh	r1, [r0, #12]
 801b87a:	6643      	str	r3, [r0, #100]	@ 0x64
 801b87c:	81c2      	strh	r2, [r0, #14]
 801b87e:	6183      	str	r3, [r0, #24]
 801b880:	4619      	mov	r1, r3
 801b882:	2208      	movs	r2, #8
 801b884:	305c      	adds	r0, #92	@ 0x5c
 801b886:	f000 fa8b 	bl	801bda0 <memset>
 801b88a:	4b0d      	ldr	r3, [pc, #52]	@ (801b8c0 <std+0x58>)
 801b88c:	6263      	str	r3, [r4, #36]	@ 0x24
 801b88e:	4b0d      	ldr	r3, [pc, #52]	@ (801b8c4 <std+0x5c>)
 801b890:	62a3      	str	r3, [r4, #40]	@ 0x28
 801b892:	4b0d      	ldr	r3, [pc, #52]	@ (801b8c8 <std+0x60>)
 801b894:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801b896:	4b0d      	ldr	r3, [pc, #52]	@ (801b8cc <std+0x64>)
 801b898:	6323      	str	r3, [r4, #48]	@ 0x30
 801b89a:	4b0d      	ldr	r3, [pc, #52]	@ (801b8d0 <std+0x68>)
 801b89c:	6224      	str	r4, [r4, #32]
 801b89e:	429c      	cmp	r4, r3
 801b8a0:	d006      	beq.n	801b8b0 <std+0x48>
 801b8a2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801b8a6:	4294      	cmp	r4, r2
 801b8a8:	d002      	beq.n	801b8b0 <std+0x48>
 801b8aa:	33d0      	adds	r3, #208	@ 0xd0
 801b8ac:	429c      	cmp	r4, r3
 801b8ae:	d105      	bne.n	801b8bc <std+0x54>
 801b8b0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801b8b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b8b8:	f000 bb30 	b.w	801bf1c <__retarget_lock_init_recursive>
 801b8bc:	bd10      	pop	{r4, pc}
 801b8be:	bf00      	nop
 801b8c0:	0801bb2d 	.word	0x0801bb2d
 801b8c4:	0801bb4f 	.word	0x0801bb4f
 801b8c8:	0801bb87 	.word	0x0801bb87
 801b8cc:	0801bbab 	.word	0x0801bbab
 801b8d0:	24013054 	.word	0x24013054

0801b8d4 <stdio_exit_handler>:
 801b8d4:	4a02      	ldr	r2, [pc, #8]	@ (801b8e0 <stdio_exit_handler+0xc>)
 801b8d6:	4903      	ldr	r1, [pc, #12]	@ (801b8e4 <stdio_exit_handler+0x10>)
 801b8d8:	4803      	ldr	r0, [pc, #12]	@ (801b8e8 <stdio_exit_handler+0x14>)
 801b8da:	f000 b869 	b.w	801b9b0 <_fwalk_sglue>
 801b8de:	bf00      	nop
 801b8e0:	240002a4 	.word	0x240002a4
 801b8e4:	0801c9a1 	.word	0x0801c9a1
 801b8e8:	240002b4 	.word	0x240002b4

0801b8ec <cleanup_stdio>:
 801b8ec:	6841      	ldr	r1, [r0, #4]
 801b8ee:	4b0c      	ldr	r3, [pc, #48]	@ (801b920 <cleanup_stdio+0x34>)
 801b8f0:	4299      	cmp	r1, r3
 801b8f2:	b510      	push	{r4, lr}
 801b8f4:	4604      	mov	r4, r0
 801b8f6:	d001      	beq.n	801b8fc <cleanup_stdio+0x10>
 801b8f8:	f001 f852 	bl	801c9a0 <_fflush_r>
 801b8fc:	68a1      	ldr	r1, [r4, #8]
 801b8fe:	4b09      	ldr	r3, [pc, #36]	@ (801b924 <cleanup_stdio+0x38>)
 801b900:	4299      	cmp	r1, r3
 801b902:	d002      	beq.n	801b90a <cleanup_stdio+0x1e>
 801b904:	4620      	mov	r0, r4
 801b906:	f001 f84b 	bl	801c9a0 <_fflush_r>
 801b90a:	68e1      	ldr	r1, [r4, #12]
 801b90c:	4b06      	ldr	r3, [pc, #24]	@ (801b928 <cleanup_stdio+0x3c>)
 801b90e:	4299      	cmp	r1, r3
 801b910:	d004      	beq.n	801b91c <cleanup_stdio+0x30>
 801b912:	4620      	mov	r0, r4
 801b914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b918:	f001 b842 	b.w	801c9a0 <_fflush_r>
 801b91c:	bd10      	pop	{r4, pc}
 801b91e:	bf00      	nop
 801b920:	24013054 	.word	0x24013054
 801b924:	240130bc 	.word	0x240130bc
 801b928:	24013124 	.word	0x24013124

0801b92c <global_stdio_init.part.0>:
 801b92c:	b510      	push	{r4, lr}
 801b92e:	4b0b      	ldr	r3, [pc, #44]	@ (801b95c <global_stdio_init.part.0+0x30>)
 801b930:	4c0b      	ldr	r4, [pc, #44]	@ (801b960 <global_stdio_init.part.0+0x34>)
 801b932:	4a0c      	ldr	r2, [pc, #48]	@ (801b964 <global_stdio_init.part.0+0x38>)
 801b934:	601a      	str	r2, [r3, #0]
 801b936:	4620      	mov	r0, r4
 801b938:	2200      	movs	r2, #0
 801b93a:	2104      	movs	r1, #4
 801b93c:	f7ff ff94 	bl	801b868 <std>
 801b940:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b944:	2201      	movs	r2, #1
 801b946:	2109      	movs	r1, #9
 801b948:	f7ff ff8e 	bl	801b868 <std>
 801b94c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b950:	2202      	movs	r2, #2
 801b952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b956:	2112      	movs	r1, #18
 801b958:	f7ff bf86 	b.w	801b868 <std>
 801b95c:	2401318c 	.word	0x2401318c
 801b960:	24013054 	.word	0x24013054
 801b964:	0801b8d5 	.word	0x0801b8d5

0801b968 <__sfp_lock_acquire>:
 801b968:	4801      	ldr	r0, [pc, #4]	@ (801b970 <__sfp_lock_acquire+0x8>)
 801b96a:	f000 bad8 	b.w	801bf1e <__retarget_lock_acquire_recursive>
 801b96e:	bf00      	nop
 801b970:	24013196 	.word	0x24013196

0801b974 <__sfp_lock_release>:
 801b974:	4801      	ldr	r0, [pc, #4]	@ (801b97c <__sfp_lock_release+0x8>)
 801b976:	f000 bad3 	b.w	801bf20 <__retarget_lock_release_recursive>
 801b97a:	bf00      	nop
 801b97c:	24013196 	.word	0x24013196

0801b980 <__sinit>:
 801b980:	b510      	push	{r4, lr}
 801b982:	4604      	mov	r4, r0
 801b984:	f7ff fff0 	bl	801b968 <__sfp_lock_acquire>
 801b988:	6a23      	ldr	r3, [r4, #32]
 801b98a:	b11b      	cbz	r3, 801b994 <__sinit+0x14>
 801b98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b990:	f7ff bff0 	b.w	801b974 <__sfp_lock_release>
 801b994:	4b04      	ldr	r3, [pc, #16]	@ (801b9a8 <__sinit+0x28>)
 801b996:	6223      	str	r3, [r4, #32]
 801b998:	4b04      	ldr	r3, [pc, #16]	@ (801b9ac <__sinit+0x2c>)
 801b99a:	681b      	ldr	r3, [r3, #0]
 801b99c:	2b00      	cmp	r3, #0
 801b99e:	d1f5      	bne.n	801b98c <__sinit+0xc>
 801b9a0:	f7ff ffc4 	bl	801b92c <global_stdio_init.part.0>
 801b9a4:	e7f2      	b.n	801b98c <__sinit+0xc>
 801b9a6:	bf00      	nop
 801b9a8:	0801b8ed 	.word	0x0801b8ed
 801b9ac:	2401318c 	.word	0x2401318c

0801b9b0 <_fwalk_sglue>:
 801b9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b9b4:	4607      	mov	r7, r0
 801b9b6:	4688      	mov	r8, r1
 801b9b8:	4614      	mov	r4, r2
 801b9ba:	2600      	movs	r6, #0
 801b9bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b9c0:	f1b9 0901 	subs.w	r9, r9, #1
 801b9c4:	d505      	bpl.n	801b9d2 <_fwalk_sglue+0x22>
 801b9c6:	6824      	ldr	r4, [r4, #0]
 801b9c8:	2c00      	cmp	r4, #0
 801b9ca:	d1f7      	bne.n	801b9bc <_fwalk_sglue+0xc>
 801b9cc:	4630      	mov	r0, r6
 801b9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b9d2:	89ab      	ldrh	r3, [r5, #12]
 801b9d4:	2b01      	cmp	r3, #1
 801b9d6:	d907      	bls.n	801b9e8 <_fwalk_sglue+0x38>
 801b9d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b9dc:	3301      	adds	r3, #1
 801b9de:	d003      	beq.n	801b9e8 <_fwalk_sglue+0x38>
 801b9e0:	4629      	mov	r1, r5
 801b9e2:	4638      	mov	r0, r7
 801b9e4:	47c0      	blx	r8
 801b9e6:	4306      	orrs	r6, r0
 801b9e8:	3568      	adds	r5, #104	@ 0x68
 801b9ea:	e7e9      	b.n	801b9c0 <_fwalk_sglue+0x10>

0801b9ec <_fwrite_r>:
 801b9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b9f0:	9c08      	ldr	r4, [sp, #32]
 801b9f2:	468a      	mov	sl, r1
 801b9f4:	4690      	mov	r8, r2
 801b9f6:	fb02 f903 	mul.w	r9, r2, r3
 801b9fa:	4606      	mov	r6, r0
 801b9fc:	b118      	cbz	r0, 801ba06 <_fwrite_r+0x1a>
 801b9fe:	6a03      	ldr	r3, [r0, #32]
 801ba00:	b90b      	cbnz	r3, 801ba06 <_fwrite_r+0x1a>
 801ba02:	f7ff ffbd 	bl	801b980 <__sinit>
 801ba06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ba08:	07dd      	lsls	r5, r3, #31
 801ba0a:	d405      	bmi.n	801ba18 <_fwrite_r+0x2c>
 801ba0c:	89a3      	ldrh	r3, [r4, #12]
 801ba0e:	0598      	lsls	r0, r3, #22
 801ba10:	d402      	bmi.n	801ba18 <_fwrite_r+0x2c>
 801ba12:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ba14:	f000 fa83 	bl	801bf1e <__retarget_lock_acquire_recursive>
 801ba18:	89a3      	ldrh	r3, [r4, #12]
 801ba1a:	0719      	lsls	r1, r3, #28
 801ba1c:	d516      	bpl.n	801ba4c <_fwrite_r+0x60>
 801ba1e:	6923      	ldr	r3, [r4, #16]
 801ba20:	b1a3      	cbz	r3, 801ba4c <_fwrite_r+0x60>
 801ba22:	2500      	movs	r5, #0
 801ba24:	454d      	cmp	r5, r9
 801ba26:	d01f      	beq.n	801ba68 <_fwrite_r+0x7c>
 801ba28:	68a7      	ldr	r7, [r4, #8]
 801ba2a:	f81a 1005 	ldrb.w	r1, [sl, r5]
 801ba2e:	3f01      	subs	r7, #1
 801ba30:	2f00      	cmp	r7, #0
 801ba32:	60a7      	str	r7, [r4, #8]
 801ba34:	da04      	bge.n	801ba40 <_fwrite_r+0x54>
 801ba36:	69a3      	ldr	r3, [r4, #24]
 801ba38:	429f      	cmp	r7, r3
 801ba3a:	db0f      	blt.n	801ba5c <_fwrite_r+0x70>
 801ba3c:	290a      	cmp	r1, #10
 801ba3e:	d00d      	beq.n	801ba5c <_fwrite_r+0x70>
 801ba40:	6823      	ldr	r3, [r4, #0]
 801ba42:	1c5a      	adds	r2, r3, #1
 801ba44:	6022      	str	r2, [r4, #0]
 801ba46:	7019      	strb	r1, [r3, #0]
 801ba48:	3501      	adds	r5, #1
 801ba4a:	e7eb      	b.n	801ba24 <_fwrite_r+0x38>
 801ba4c:	4621      	mov	r1, r4
 801ba4e:	4630      	mov	r0, r6
 801ba50:	f000 f926 	bl	801bca0 <__swsetup_r>
 801ba54:	2800      	cmp	r0, #0
 801ba56:	d0e4      	beq.n	801ba22 <_fwrite_r+0x36>
 801ba58:	2500      	movs	r5, #0
 801ba5a:	e005      	b.n	801ba68 <_fwrite_r+0x7c>
 801ba5c:	4622      	mov	r2, r4
 801ba5e:	4630      	mov	r0, r6
 801ba60:	f000 f8e0 	bl	801bc24 <__swbuf_r>
 801ba64:	3001      	adds	r0, #1
 801ba66:	d1ef      	bne.n	801ba48 <_fwrite_r+0x5c>
 801ba68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ba6a:	07da      	lsls	r2, r3, #31
 801ba6c:	d405      	bmi.n	801ba7a <_fwrite_r+0x8e>
 801ba6e:	89a3      	ldrh	r3, [r4, #12]
 801ba70:	059b      	lsls	r3, r3, #22
 801ba72:	d402      	bmi.n	801ba7a <_fwrite_r+0x8e>
 801ba74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ba76:	f000 fa53 	bl	801bf20 <__retarget_lock_release_recursive>
 801ba7a:	fbb5 f0f8 	udiv	r0, r5, r8
 801ba7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0801ba84 <fwrite>:
 801ba84:	b507      	push	{r0, r1, r2, lr}
 801ba86:	9300      	str	r3, [sp, #0]
 801ba88:	4613      	mov	r3, r2
 801ba8a:	460a      	mov	r2, r1
 801ba8c:	4601      	mov	r1, r0
 801ba8e:	4803      	ldr	r0, [pc, #12]	@ (801ba9c <fwrite+0x18>)
 801ba90:	6800      	ldr	r0, [r0, #0]
 801ba92:	f7ff ffab 	bl	801b9ec <_fwrite_r>
 801ba96:	b003      	add	sp, #12
 801ba98:	f85d fb04 	ldr.w	pc, [sp], #4
 801ba9c:	240002b0 	.word	0x240002b0

0801baa0 <iprintf>:
 801baa0:	b40f      	push	{r0, r1, r2, r3}
 801baa2:	b507      	push	{r0, r1, r2, lr}
 801baa4:	4906      	ldr	r1, [pc, #24]	@ (801bac0 <iprintf+0x20>)
 801baa6:	ab04      	add	r3, sp, #16
 801baa8:	6808      	ldr	r0, [r1, #0]
 801baaa:	f853 2b04 	ldr.w	r2, [r3], #4
 801baae:	6881      	ldr	r1, [r0, #8]
 801bab0:	9301      	str	r3, [sp, #4]
 801bab2:	f000 fc4b 	bl	801c34c <_vfiprintf_r>
 801bab6:	b003      	add	sp, #12
 801bab8:	f85d eb04 	ldr.w	lr, [sp], #4
 801babc:	b004      	add	sp, #16
 801babe:	4770      	bx	lr
 801bac0:	240002b0 	.word	0x240002b0

0801bac4 <sniprintf>:
 801bac4:	b40c      	push	{r2, r3}
 801bac6:	b530      	push	{r4, r5, lr}
 801bac8:	4b17      	ldr	r3, [pc, #92]	@ (801bb28 <sniprintf+0x64>)
 801baca:	1e0c      	subs	r4, r1, #0
 801bacc:	681d      	ldr	r5, [r3, #0]
 801bace:	b09d      	sub	sp, #116	@ 0x74
 801bad0:	da08      	bge.n	801bae4 <sniprintf+0x20>
 801bad2:	238b      	movs	r3, #139	@ 0x8b
 801bad4:	602b      	str	r3, [r5, #0]
 801bad6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bada:	b01d      	add	sp, #116	@ 0x74
 801badc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bae0:	b002      	add	sp, #8
 801bae2:	4770      	bx	lr
 801bae4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801bae8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801baec:	bf14      	ite	ne
 801baee:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801baf2:	4623      	moveq	r3, r4
 801baf4:	9304      	str	r3, [sp, #16]
 801baf6:	9307      	str	r3, [sp, #28]
 801baf8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bafc:	9002      	str	r0, [sp, #8]
 801bafe:	9006      	str	r0, [sp, #24]
 801bb00:	f8ad 3016 	strh.w	r3, [sp, #22]
 801bb04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801bb06:	ab21      	add	r3, sp, #132	@ 0x84
 801bb08:	a902      	add	r1, sp, #8
 801bb0a:	4628      	mov	r0, r5
 801bb0c:	9301      	str	r3, [sp, #4]
 801bb0e:	f000 faf7 	bl	801c100 <_svfiprintf_r>
 801bb12:	1c43      	adds	r3, r0, #1
 801bb14:	bfbc      	itt	lt
 801bb16:	238b      	movlt	r3, #139	@ 0x8b
 801bb18:	602b      	strlt	r3, [r5, #0]
 801bb1a:	2c00      	cmp	r4, #0
 801bb1c:	d0dd      	beq.n	801bada <sniprintf+0x16>
 801bb1e:	9b02      	ldr	r3, [sp, #8]
 801bb20:	2200      	movs	r2, #0
 801bb22:	701a      	strb	r2, [r3, #0]
 801bb24:	e7d9      	b.n	801bada <sniprintf+0x16>
 801bb26:	bf00      	nop
 801bb28:	240002b0 	.word	0x240002b0

0801bb2c <__sread>:
 801bb2c:	b510      	push	{r4, lr}
 801bb2e:	460c      	mov	r4, r1
 801bb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb34:	f000 f994 	bl	801be60 <_read_r>
 801bb38:	2800      	cmp	r0, #0
 801bb3a:	bfab      	itete	ge
 801bb3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801bb3e:	89a3      	ldrhlt	r3, [r4, #12]
 801bb40:	181b      	addge	r3, r3, r0
 801bb42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801bb46:	bfac      	ite	ge
 801bb48:	6563      	strge	r3, [r4, #84]	@ 0x54
 801bb4a:	81a3      	strhlt	r3, [r4, #12]
 801bb4c:	bd10      	pop	{r4, pc}

0801bb4e <__swrite>:
 801bb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb52:	461f      	mov	r7, r3
 801bb54:	898b      	ldrh	r3, [r1, #12]
 801bb56:	05db      	lsls	r3, r3, #23
 801bb58:	4605      	mov	r5, r0
 801bb5a:	460c      	mov	r4, r1
 801bb5c:	4616      	mov	r6, r2
 801bb5e:	d505      	bpl.n	801bb6c <__swrite+0x1e>
 801bb60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb64:	2302      	movs	r3, #2
 801bb66:	2200      	movs	r2, #0
 801bb68:	f000 f968 	bl	801be3c <_lseek_r>
 801bb6c:	89a3      	ldrh	r3, [r4, #12]
 801bb6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bb72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801bb76:	81a3      	strh	r3, [r4, #12]
 801bb78:	4632      	mov	r2, r6
 801bb7a:	463b      	mov	r3, r7
 801bb7c:	4628      	mov	r0, r5
 801bb7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bb82:	f000 b98f 	b.w	801bea4 <_write_r>

0801bb86 <__sseek>:
 801bb86:	b510      	push	{r4, lr}
 801bb88:	460c      	mov	r4, r1
 801bb8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb8e:	f000 f955 	bl	801be3c <_lseek_r>
 801bb92:	1c43      	adds	r3, r0, #1
 801bb94:	89a3      	ldrh	r3, [r4, #12]
 801bb96:	bf15      	itete	ne
 801bb98:	6560      	strne	r0, [r4, #84]	@ 0x54
 801bb9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801bb9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801bba2:	81a3      	strheq	r3, [r4, #12]
 801bba4:	bf18      	it	ne
 801bba6:	81a3      	strhne	r3, [r4, #12]
 801bba8:	bd10      	pop	{r4, pc}

0801bbaa <__sclose>:
 801bbaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bbae:	f000 b935 	b.w	801be1c <_close_r>

0801bbb2 <_vsniprintf_r>:
 801bbb2:	b530      	push	{r4, r5, lr}
 801bbb4:	4614      	mov	r4, r2
 801bbb6:	2c00      	cmp	r4, #0
 801bbb8:	b09b      	sub	sp, #108	@ 0x6c
 801bbba:	4605      	mov	r5, r0
 801bbbc:	461a      	mov	r2, r3
 801bbbe:	da05      	bge.n	801bbcc <_vsniprintf_r+0x1a>
 801bbc0:	238b      	movs	r3, #139	@ 0x8b
 801bbc2:	6003      	str	r3, [r0, #0]
 801bbc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bbc8:	b01b      	add	sp, #108	@ 0x6c
 801bbca:	bd30      	pop	{r4, r5, pc}
 801bbcc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801bbd0:	f8ad 300c 	strh.w	r3, [sp, #12]
 801bbd4:	bf14      	ite	ne
 801bbd6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 801bbda:	4623      	moveq	r3, r4
 801bbdc:	9302      	str	r3, [sp, #8]
 801bbde:	9305      	str	r3, [sp, #20]
 801bbe0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801bbe4:	9100      	str	r1, [sp, #0]
 801bbe6:	9104      	str	r1, [sp, #16]
 801bbe8:	f8ad 300e 	strh.w	r3, [sp, #14]
 801bbec:	4669      	mov	r1, sp
 801bbee:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bbf0:	f000 fa86 	bl	801c100 <_svfiprintf_r>
 801bbf4:	1c43      	adds	r3, r0, #1
 801bbf6:	bfbc      	itt	lt
 801bbf8:	238b      	movlt	r3, #139	@ 0x8b
 801bbfa:	602b      	strlt	r3, [r5, #0]
 801bbfc:	2c00      	cmp	r4, #0
 801bbfe:	d0e3      	beq.n	801bbc8 <_vsniprintf_r+0x16>
 801bc00:	9b00      	ldr	r3, [sp, #0]
 801bc02:	2200      	movs	r2, #0
 801bc04:	701a      	strb	r2, [r3, #0]
 801bc06:	e7df      	b.n	801bbc8 <_vsniprintf_r+0x16>

0801bc08 <vsniprintf>:
 801bc08:	b507      	push	{r0, r1, r2, lr}
 801bc0a:	9300      	str	r3, [sp, #0]
 801bc0c:	4613      	mov	r3, r2
 801bc0e:	460a      	mov	r2, r1
 801bc10:	4601      	mov	r1, r0
 801bc12:	4803      	ldr	r0, [pc, #12]	@ (801bc20 <vsniprintf+0x18>)
 801bc14:	6800      	ldr	r0, [r0, #0]
 801bc16:	f7ff ffcc 	bl	801bbb2 <_vsniprintf_r>
 801bc1a:	b003      	add	sp, #12
 801bc1c:	f85d fb04 	ldr.w	pc, [sp], #4
 801bc20:	240002b0 	.word	0x240002b0

0801bc24 <__swbuf_r>:
 801bc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bc26:	460e      	mov	r6, r1
 801bc28:	4614      	mov	r4, r2
 801bc2a:	4605      	mov	r5, r0
 801bc2c:	b118      	cbz	r0, 801bc36 <__swbuf_r+0x12>
 801bc2e:	6a03      	ldr	r3, [r0, #32]
 801bc30:	b90b      	cbnz	r3, 801bc36 <__swbuf_r+0x12>
 801bc32:	f7ff fea5 	bl	801b980 <__sinit>
 801bc36:	69a3      	ldr	r3, [r4, #24]
 801bc38:	60a3      	str	r3, [r4, #8]
 801bc3a:	89a3      	ldrh	r3, [r4, #12]
 801bc3c:	071a      	lsls	r2, r3, #28
 801bc3e:	d501      	bpl.n	801bc44 <__swbuf_r+0x20>
 801bc40:	6923      	ldr	r3, [r4, #16]
 801bc42:	b943      	cbnz	r3, 801bc56 <__swbuf_r+0x32>
 801bc44:	4621      	mov	r1, r4
 801bc46:	4628      	mov	r0, r5
 801bc48:	f000 f82a 	bl	801bca0 <__swsetup_r>
 801bc4c:	b118      	cbz	r0, 801bc56 <__swbuf_r+0x32>
 801bc4e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801bc52:	4638      	mov	r0, r7
 801bc54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc56:	6823      	ldr	r3, [r4, #0]
 801bc58:	6922      	ldr	r2, [r4, #16]
 801bc5a:	1a98      	subs	r0, r3, r2
 801bc5c:	6963      	ldr	r3, [r4, #20]
 801bc5e:	b2f6      	uxtb	r6, r6
 801bc60:	4283      	cmp	r3, r0
 801bc62:	4637      	mov	r7, r6
 801bc64:	dc05      	bgt.n	801bc72 <__swbuf_r+0x4e>
 801bc66:	4621      	mov	r1, r4
 801bc68:	4628      	mov	r0, r5
 801bc6a:	f000 fe99 	bl	801c9a0 <_fflush_r>
 801bc6e:	2800      	cmp	r0, #0
 801bc70:	d1ed      	bne.n	801bc4e <__swbuf_r+0x2a>
 801bc72:	68a3      	ldr	r3, [r4, #8]
 801bc74:	3b01      	subs	r3, #1
 801bc76:	60a3      	str	r3, [r4, #8]
 801bc78:	6823      	ldr	r3, [r4, #0]
 801bc7a:	1c5a      	adds	r2, r3, #1
 801bc7c:	6022      	str	r2, [r4, #0]
 801bc7e:	701e      	strb	r6, [r3, #0]
 801bc80:	6962      	ldr	r2, [r4, #20]
 801bc82:	1c43      	adds	r3, r0, #1
 801bc84:	429a      	cmp	r2, r3
 801bc86:	d004      	beq.n	801bc92 <__swbuf_r+0x6e>
 801bc88:	89a3      	ldrh	r3, [r4, #12]
 801bc8a:	07db      	lsls	r3, r3, #31
 801bc8c:	d5e1      	bpl.n	801bc52 <__swbuf_r+0x2e>
 801bc8e:	2e0a      	cmp	r6, #10
 801bc90:	d1df      	bne.n	801bc52 <__swbuf_r+0x2e>
 801bc92:	4621      	mov	r1, r4
 801bc94:	4628      	mov	r0, r5
 801bc96:	f000 fe83 	bl	801c9a0 <_fflush_r>
 801bc9a:	2800      	cmp	r0, #0
 801bc9c:	d0d9      	beq.n	801bc52 <__swbuf_r+0x2e>
 801bc9e:	e7d6      	b.n	801bc4e <__swbuf_r+0x2a>

0801bca0 <__swsetup_r>:
 801bca0:	b538      	push	{r3, r4, r5, lr}
 801bca2:	4b29      	ldr	r3, [pc, #164]	@ (801bd48 <__swsetup_r+0xa8>)
 801bca4:	4605      	mov	r5, r0
 801bca6:	6818      	ldr	r0, [r3, #0]
 801bca8:	460c      	mov	r4, r1
 801bcaa:	b118      	cbz	r0, 801bcb4 <__swsetup_r+0x14>
 801bcac:	6a03      	ldr	r3, [r0, #32]
 801bcae:	b90b      	cbnz	r3, 801bcb4 <__swsetup_r+0x14>
 801bcb0:	f7ff fe66 	bl	801b980 <__sinit>
 801bcb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bcb8:	0719      	lsls	r1, r3, #28
 801bcba:	d422      	bmi.n	801bd02 <__swsetup_r+0x62>
 801bcbc:	06da      	lsls	r2, r3, #27
 801bcbe:	d407      	bmi.n	801bcd0 <__swsetup_r+0x30>
 801bcc0:	2209      	movs	r2, #9
 801bcc2:	602a      	str	r2, [r5, #0]
 801bcc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bcc8:	81a3      	strh	r3, [r4, #12]
 801bcca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801bcce:	e033      	b.n	801bd38 <__swsetup_r+0x98>
 801bcd0:	0758      	lsls	r0, r3, #29
 801bcd2:	d512      	bpl.n	801bcfa <__swsetup_r+0x5a>
 801bcd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801bcd6:	b141      	cbz	r1, 801bcea <__swsetup_r+0x4a>
 801bcd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801bcdc:	4299      	cmp	r1, r3
 801bcde:	d002      	beq.n	801bce6 <__swsetup_r+0x46>
 801bce0:	4628      	mov	r0, r5
 801bce2:	f000 f95f 	bl	801bfa4 <_free_r>
 801bce6:	2300      	movs	r3, #0
 801bce8:	6363      	str	r3, [r4, #52]	@ 0x34
 801bcea:	89a3      	ldrh	r3, [r4, #12]
 801bcec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801bcf0:	81a3      	strh	r3, [r4, #12]
 801bcf2:	2300      	movs	r3, #0
 801bcf4:	6063      	str	r3, [r4, #4]
 801bcf6:	6923      	ldr	r3, [r4, #16]
 801bcf8:	6023      	str	r3, [r4, #0]
 801bcfa:	89a3      	ldrh	r3, [r4, #12]
 801bcfc:	f043 0308 	orr.w	r3, r3, #8
 801bd00:	81a3      	strh	r3, [r4, #12]
 801bd02:	6923      	ldr	r3, [r4, #16]
 801bd04:	b94b      	cbnz	r3, 801bd1a <__swsetup_r+0x7a>
 801bd06:	89a3      	ldrh	r3, [r4, #12]
 801bd08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801bd0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801bd10:	d003      	beq.n	801bd1a <__swsetup_r+0x7a>
 801bd12:	4621      	mov	r1, r4
 801bd14:	4628      	mov	r0, r5
 801bd16:	f000 fea3 	bl	801ca60 <__smakebuf_r>
 801bd1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bd1e:	f013 0201 	ands.w	r2, r3, #1
 801bd22:	d00a      	beq.n	801bd3a <__swsetup_r+0x9a>
 801bd24:	2200      	movs	r2, #0
 801bd26:	60a2      	str	r2, [r4, #8]
 801bd28:	6962      	ldr	r2, [r4, #20]
 801bd2a:	4252      	negs	r2, r2
 801bd2c:	61a2      	str	r2, [r4, #24]
 801bd2e:	6922      	ldr	r2, [r4, #16]
 801bd30:	b942      	cbnz	r2, 801bd44 <__swsetup_r+0xa4>
 801bd32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801bd36:	d1c5      	bne.n	801bcc4 <__swsetup_r+0x24>
 801bd38:	bd38      	pop	{r3, r4, r5, pc}
 801bd3a:	0799      	lsls	r1, r3, #30
 801bd3c:	bf58      	it	pl
 801bd3e:	6962      	ldrpl	r2, [r4, #20]
 801bd40:	60a2      	str	r2, [r4, #8]
 801bd42:	e7f4      	b.n	801bd2e <__swsetup_r+0x8e>
 801bd44:	2000      	movs	r0, #0
 801bd46:	e7f7      	b.n	801bd38 <__swsetup_r+0x98>
 801bd48:	240002b0 	.word	0x240002b0

0801bd4c <memcmp>:
 801bd4c:	b510      	push	{r4, lr}
 801bd4e:	3901      	subs	r1, #1
 801bd50:	4402      	add	r2, r0
 801bd52:	4290      	cmp	r0, r2
 801bd54:	d101      	bne.n	801bd5a <memcmp+0xe>
 801bd56:	2000      	movs	r0, #0
 801bd58:	e005      	b.n	801bd66 <memcmp+0x1a>
 801bd5a:	7803      	ldrb	r3, [r0, #0]
 801bd5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801bd60:	42a3      	cmp	r3, r4
 801bd62:	d001      	beq.n	801bd68 <memcmp+0x1c>
 801bd64:	1b18      	subs	r0, r3, r4
 801bd66:	bd10      	pop	{r4, pc}
 801bd68:	3001      	adds	r0, #1
 801bd6a:	e7f2      	b.n	801bd52 <memcmp+0x6>

0801bd6c <memmove>:
 801bd6c:	4288      	cmp	r0, r1
 801bd6e:	b510      	push	{r4, lr}
 801bd70:	eb01 0402 	add.w	r4, r1, r2
 801bd74:	d902      	bls.n	801bd7c <memmove+0x10>
 801bd76:	4284      	cmp	r4, r0
 801bd78:	4623      	mov	r3, r4
 801bd7a:	d807      	bhi.n	801bd8c <memmove+0x20>
 801bd7c:	1e43      	subs	r3, r0, #1
 801bd7e:	42a1      	cmp	r1, r4
 801bd80:	d008      	beq.n	801bd94 <memmove+0x28>
 801bd82:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bd86:	f803 2f01 	strb.w	r2, [r3, #1]!
 801bd8a:	e7f8      	b.n	801bd7e <memmove+0x12>
 801bd8c:	4402      	add	r2, r0
 801bd8e:	4601      	mov	r1, r0
 801bd90:	428a      	cmp	r2, r1
 801bd92:	d100      	bne.n	801bd96 <memmove+0x2a>
 801bd94:	bd10      	pop	{r4, pc}
 801bd96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bd9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801bd9e:	e7f7      	b.n	801bd90 <memmove+0x24>

0801bda0 <memset>:
 801bda0:	4402      	add	r2, r0
 801bda2:	4603      	mov	r3, r0
 801bda4:	4293      	cmp	r3, r2
 801bda6:	d100      	bne.n	801bdaa <memset+0xa>
 801bda8:	4770      	bx	lr
 801bdaa:	f803 1b01 	strb.w	r1, [r3], #1
 801bdae:	e7f9      	b.n	801bda4 <memset+0x4>

0801bdb0 <strchr>:
 801bdb0:	b2c9      	uxtb	r1, r1
 801bdb2:	4603      	mov	r3, r0
 801bdb4:	4618      	mov	r0, r3
 801bdb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801bdba:	b112      	cbz	r2, 801bdc2 <strchr+0x12>
 801bdbc:	428a      	cmp	r2, r1
 801bdbe:	d1f9      	bne.n	801bdb4 <strchr+0x4>
 801bdc0:	4770      	bx	lr
 801bdc2:	2900      	cmp	r1, #0
 801bdc4:	bf18      	it	ne
 801bdc6:	2000      	movne	r0, #0
 801bdc8:	4770      	bx	lr

0801bdca <strncmp>:
 801bdca:	b510      	push	{r4, lr}
 801bdcc:	b16a      	cbz	r2, 801bdea <strncmp+0x20>
 801bdce:	3901      	subs	r1, #1
 801bdd0:	1884      	adds	r4, r0, r2
 801bdd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801bdd6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801bdda:	429a      	cmp	r2, r3
 801bddc:	d103      	bne.n	801bde6 <strncmp+0x1c>
 801bdde:	42a0      	cmp	r0, r4
 801bde0:	d001      	beq.n	801bde6 <strncmp+0x1c>
 801bde2:	2a00      	cmp	r2, #0
 801bde4:	d1f5      	bne.n	801bdd2 <strncmp+0x8>
 801bde6:	1ad0      	subs	r0, r2, r3
 801bde8:	bd10      	pop	{r4, pc}
 801bdea:	4610      	mov	r0, r2
 801bdec:	e7fc      	b.n	801bde8 <strncmp+0x1e>

0801bdee <strstr>:
 801bdee:	780a      	ldrb	r2, [r1, #0]
 801bdf0:	b570      	push	{r4, r5, r6, lr}
 801bdf2:	b96a      	cbnz	r2, 801be10 <strstr+0x22>
 801bdf4:	bd70      	pop	{r4, r5, r6, pc}
 801bdf6:	429a      	cmp	r2, r3
 801bdf8:	d109      	bne.n	801be0e <strstr+0x20>
 801bdfa:	460c      	mov	r4, r1
 801bdfc:	4605      	mov	r5, r0
 801bdfe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801be02:	2b00      	cmp	r3, #0
 801be04:	d0f6      	beq.n	801bdf4 <strstr+0x6>
 801be06:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 801be0a:	429e      	cmp	r6, r3
 801be0c:	d0f7      	beq.n	801bdfe <strstr+0x10>
 801be0e:	3001      	adds	r0, #1
 801be10:	7803      	ldrb	r3, [r0, #0]
 801be12:	2b00      	cmp	r3, #0
 801be14:	d1ef      	bne.n	801bdf6 <strstr+0x8>
 801be16:	4618      	mov	r0, r3
 801be18:	e7ec      	b.n	801bdf4 <strstr+0x6>
	...

0801be1c <_close_r>:
 801be1c:	b538      	push	{r3, r4, r5, lr}
 801be1e:	4d06      	ldr	r5, [pc, #24]	@ (801be38 <_close_r+0x1c>)
 801be20:	2300      	movs	r3, #0
 801be22:	4604      	mov	r4, r0
 801be24:	4608      	mov	r0, r1
 801be26:	602b      	str	r3, [r5, #0]
 801be28:	f7e6 f96c 	bl	8002104 <_close>
 801be2c:	1c43      	adds	r3, r0, #1
 801be2e:	d102      	bne.n	801be36 <_close_r+0x1a>
 801be30:	682b      	ldr	r3, [r5, #0]
 801be32:	b103      	cbz	r3, 801be36 <_close_r+0x1a>
 801be34:	6023      	str	r3, [r4, #0]
 801be36:	bd38      	pop	{r3, r4, r5, pc}
 801be38:	24013190 	.word	0x24013190

0801be3c <_lseek_r>:
 801be3c:	b538      	push	{r3, r4, r5, lr}
 801be3e:	4d07      	ldr	r5, [pc, #28]	@ (801be5c <_lseek_r+0x20>)
 801be40:	4604      	mov	r4, r0
 801be42:	4608      	mov	r0, r1
 801be44:	4611      	mov	r1, r2
 801be46:	2200      	movs	r2, #0
 801be48:	602a      	str	r2, [r5, #0]
 801be4a:	461a      	mov	r2, r3
 801be4c:	f7e6 f981 	bl	8002152 <_lseek>
 801be50:	1c43      	adds	r3, r0, #1
 801be52:	d102      	bne.n	801be5a <_lseek_r+0x1e>
 801be54:	682b      	ldr	r3, [r5, #0]
 801be56:	b103      	cbz	r3, 801be5a <_lseek_r+0x1e>
 801be58:	6023      	str	r3, [r4, #0]
 801be5a:	bd38      	pop	{r3, r4, r5, pc}
 801be5c:	24013190 	.word	0x24013190

0801be60 <_read_r>:
 801be60:	b538      	push	{r3, r4, r5, lr}
 801be62:	4d07      	ldr	r5, [pc, #28]	@ (801be80 <_read_r+0x20>)
 801be64:	4604      	mov	r4, r0
 801be66:	4608      	mov	r0, r1
 801be68:	4611      	mov	r1, r2
 801be6a:	2200      	movs	r2, #0
 801be6c:	602a      	str	r2, [r5, #0]
 801be6e:	461a      	mov	r2, r3
 801be70:	f7e6 f90f 	bl	8002092 <_read>
 801be74:	1c43      	adds	r3, r0, #1
 801be76:	d102      	bne.n	801be7e <_read_r+0x1e>
 801be78:	682b      	ldr	r3, [r5, #0]
 801be7a:	b103      	cbz	r3, 801be7e <_read_r+0x1e>
 801be7c:	6023      	str	r3, [r4, #0]
 801be7e:	bd38      	pop	{r3, r4, r5, pc}
 801be80:	24013190 	.word	0x24013190

0801be84 <_sbrk_r>:
 801be84:	b538      	push	{r3, r4, r5, lr}
 801be86:	4d06      	ldr	r5, [pc, #24]	@ (801bea0 <_sbrk_r+0x1c>)
 801be88:	2300      	movs	r3, #0
 801be8a:	4604      	mov	r4, r0
 801be8c:	4608      	mov	r0, r1
 801be8e:	602b      	str	r3, [r5, #0]
 801be90:	f7e6 f96c 	bl	800216c <_sbrk>
 801be94:	1c43      	adds	r3, r0, #1
 801be96:	d102      	bne.n	801be9e <_sbrk_r+0x1a>
 801be98:	682b      	ldr	r3, [r5, #0]
 801be9a:	b103      	cbz	r3, 801be9e <_sbrk_r+0x1a>
 801be9c:	6023      	str	r3, [r4, #0]
 801be9e:	bd38      	pop	{r3, r4, r5, pc}
 801bea0:	24013190 	.word	0x24013190

0801bea4 <_write_r>:
 801bea4:	b538      	push	{r3, r4, r5, lr}
 801bea6:	4d07      	ldr	r5, [pc, #28]	@ (801bec4 <_write_r+0x20>)
 801bea8:	4604      	mov	r4, r0
 801beaa:	4608      	mov	r0, r1
 801beac:	4611      	mov	r1, r2
 801beae:	2200      	movs	r2, #0
 801beb0:	602a      	str	r2, [r5, #0]
 801beb2:	461a      	mov	r2, r3
 801beb4:	f7e6 f90a 	bl	80020cc <_write>
 801beb8:	1c43      	adds	r3, r0, #1
 801beba:	d102      	bne.n	801bec2 <_write_r+0x1e>
 801bebc:	682b      	ldr	r3, [r5, #0]
 801bebe:	b103      	cbz	r3, 801bec2 <_write_r+0x1e>
 801bec0:	6023      	str	r3, [r4, #0]
 801bec2:	bd38      	pop	{r3, r4, r5, pc}
 801bec4:	24013190 	.word	0x24013190

0801bec8 <__errno>:
 801bec8:	4b01      	ldr	r3, [pc, #4]	@ (801bed0 <__errno+0x8>)
 801beca:	6818      	ldr	r0, [r3, #0]
 801becc:	4770      	bx	lr
 801bece:	bf00      	nop
 801bed0:	240002b0 	.word	0x240002b0

0801bed4 <__libc_init_array>:
 801bed4:	b570      	push	{r4, r5, r6, lr}
 801bed6:	4d0d      	ldr	r5, [pc, #52]	@ (801bf0c <__libc_init_array+0x38>)
 801bed8:	4c0d      	ldr	r4, [pc, #52]	@ (801bf10 <__libc_init_array+0x3c>)
 801beda:	1b64      	subs	r4, r4, r5
 801bedc:	10a4      	asrs	r4, r4, #2
 801bede:	2600      	movs	r6, #0
 801bee0:	42a6      	cmp	r6, r4
 801bee2:	d109      	bne.n	801bef8 <__libc_init_array+0x24>
 801bee4:	4d0b      	ldr	r5, [pc, #44]	@ (801bf14 <__libc_init_array+0x40>)
 801bee6:	4c0c      	ldr	r4, [pc, #48]	@ (801bf18 <__libc_init_array+0x44>)
 801bee8:	f000 fe64 	bl	801cbb4 <_init>
 801beec:	1b64      	subs	r4, r4, r5
 801beee:	10a4      	asrs	r4, r4, #2
 801bef0:	2600      	movs	r6, #0
 801bef2:	42a6      	cmp	r6, r4
 801bef4:	d105      	bne.n	801bf02 <__libc_init_array+0x2e>
 801bef6:	bd70      	pop	{r4, r5, r6, pc}
 801bef8:	f855 3b04 	ldr.w	r3, [r5], #4
 801befc:	4798      	blx	r3
 801befe:	3601      	adds	r6, #1
 801bf00:	e7ee      	b.n	801bee0 <__libc_init_array+0xc>
 801bf02:	f855 3b04 	ldr.w	r3, [r5], #4
 801bf06:	4798      	blx	r3
 801bf08:	3601      	adds	r6, #1
 801bf0a:	e7f2      	b.n	801bef2 <__libc_init_array+0x1e>
 801bf0c:	0801dae0 	.word	0x0801dae0
 801bf10:	0801dae0 	.word	0x0801dae0
 801bf14:	0801dae0 	.word	0x0801dae0
 801bf18:	0801dae8 	.word	0x0801dae8

0801bf1c <__retarget_lock_init_recursive>:
 801bf1c:	4770      	bx	lr

0801bf1e <__retarget_lock_acquire_recursive>:
 801bf1e:	4770      	bx	lr

0801bf20 <__retarget_lock_release_recursive>:
 801bf20:	4770      	bx	lr

0801bf22 <strcpy>:
 801bf22:	4603      	mov	r3, r0
 801bf24:	f811 2b01 	ldrb.w	r2, [r1], #1
 801bf28:	f803 2b01 	strb.w	r2, [r3], #1
 801bf2c:	2a00      	cmp	r2, #0
 801bf2e:	d1f9      	bne.n	801bf24 <strcpy+0x2>
 801bf30:	4770      	bx	lr

0801bf32 <memcpy>:
 801bf32:	440a      	add	r2, r1
 801bf34:	4291      	cmp	r1, r2
 801bf36:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801bf3a:	d100      	bne.n	801bf3e <memcpy+0xc>
 801bf3c:	4770      	bx	lr
 801bf3e:	b510      	push	{r4, lr}
 801bf40:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bf44:	f803 4f01 	strb.w	r4, [r3, #1]!
 801bf48:	4291      	cmp	r1, r2
 801bf4a:	d1f9      	bne.n	801bf40 <memcpy+0xe>
 801bf4c:	bd10      	pop	{r4, pc}
	...

0801bf50 <__assert_func>:
 801bf50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801bf52:	4614      	mov	r4, r2
 801bf54:	461a      	mov	r2, r3
 801bf56:	4b09      	ldr	r3, [pc, #36]	@ (801bf7c <__assert_func+0x2c>)
 801bf58:	681b      	ldr	r3, [r3, #0]
 801bf5a:	4605      	mov	r5, r0
 801bf5c:	68d8      	ldr	r0, [r3, #12]
 801bf5e:	b954      	cbnz	r4, 801bf76 <__assert_func+0x26>
 801bf60:	4b07      	ldr	r3, [pc, #28]	@ (801bf80 <__assert_func+0x30>)
 801bf62:	461c      	mov	r4, r3
 801bf64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801bf68:	9100      	str	r1, [sp, #0]
 801bf6a:	462b      	mov	r3, r5
 801bf6c:	4905      	ldr	r1, [pc, #20]	@ (801bf84 <__assert_func+0x34>)
 801bf6e:	f000 fd3f 	bl	801c9f0 <fiprintf>
 801bf72:	f000 fdd3 	bl	801cb1c <abort>
 801bf76:	4b04      	ldr	r3, [pc, #16]	@ (801bf88 <__assert_func+0x38>)
 801bf78:	e7f4      	b.n	801bf64 <__assert_func+0x14>
 801bf7a:	bf00      	nop
 801bf7c:	240002b0 	.word	0x240002b0
 801bf80:	0801daa1 	.word	0x0801daa1
 801bf84:	0801da73 	.word	0x0801da73
 801bf88:	0801da66 	.word	0x0801da66

0801bf8c <__env_lock>:
 801bf8c:	4801      	ldr	r0, [pc, #4]	@ (801bf94 <__env_lock+0x8>)
 801bf8e:	f7ff bfc6 	b.w	801bf1e <__retarget_lock_acquire_recursive>
 801bf92:	bf00      	nop
 801bf94:	24013194 	.word	0x24013194

0801bf98 <__env_unlock>:
 801bf98:	4801      	ldr	r0, [pc, #4]	@ (801bfa0 <__env_unlock+0x8>)
 801bf9a:	f7ff bfc1 	b.w	801bf20 <__retarget_lock_release_recursive>
 801bf9e:	bf00      	nop
 801bfa0:	24013194 	.word	0x24013194

0801bfa4 <_free_r>:
 801bfa4:	b538      	push	{r3, r4, r5, lr}
 801bfa6:	4605      	mov	r5, r0
 801bfa8:	2900      	cmp	r1, #0
 801bfaa:	d041      	beq.n	801c030 <_free_r+0x8c>
 801bfac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bfb0:	1f0c      	subs	r4, r1, #4
 801bfb2:	2b00      	cmp	r3, #0
 801bfb4:	bfb8      	it	lt
 801bfb6:	18e4      	addlt	r4, r4, r3
 801bfb8:	f7ff fb30 	bl	801b61c <__malloc_lock>
 801bfbc:	4a1d      	ldr	r2, [pc, #116]	@ (801c034 <_free_r+0x90>)
 801bfbe:	6813      	ldr	r3, [r2, #0]
 801bfc0:	b933      	cbnz	r3, 801bfd0 <_free_r+0x2c>
 801bfc2:	6063      	str	r3, [r4, #4]
 801bfc4:	6014      	str	r4, [r2, #0]
 801bfc6:	4628      	mov	r0, r5
 801bfc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bfcc:	f7ff bb2c 	b.w	801b628 <__malloc_unlock>
 801bfd0:	42a3      	cmp	r3, r4
 801bfd2:	d908      	bls.n	801bfe6 <_free_r+0x42>
 801bfd4:	6820      	ldr	r0, [r4, #0]
 801bfd6:	1821      	adds	r1, r4, r0
 801bfd8:	428b      	cmp	r3, r1
 801bfda:	bf01      	itttt	eq
 801bfdc:	6819      	ldreq	r1, [r3, #0]
 801bfde:	685b      	ldreq	r3, [r3, #4]
 801bfe0:	1809      	addeq	r1, r1, r0
 801bfe2:	6021      	streq	r1, [r4, #0]
 801bfe4:	e7ed      	b.n	801bfc2 <_free_r+0x1e>
 801bfe6:	461a      	mov	r2, r3
 801bfe8:	685b      	ldr	r3, [r3, #4]
 801bfea:	b10b      	cbz	r3, 801bff0 <_free_r+0x4c>
 801bfec:	42a3      	cmp	r3, r4
 801bfee:	d9fa      	bls.n	801bfe6 <_free_r+0x42>
 801bff0:	6811      	ldr	r1, [r2, #0]
 801bff2:	1850      	adds	r0, r2, r1
 801bff4:	42a0      	cmp	r0, r4
 801bff6:	d10b      	bne.n	801c010 <_free_r+0x6c>
 801bff8:	6820      	ldr	r0, [r4, #0]
 801bffa:	4401      	add	r1, r0
 801bffc:	1850      	adds	r0, r2, r1
 801bffe:	4283      	cmp	r3, r0
 801c000:	6011      	str	r1, [r2, #0]
 801c002:	d1e0      	bne.n	801bfc6 <_free_r+0x22>
 801c004:	6818      	ldr	r0, [r3, #0]
 801c006:	685b      	ldr	r3, [r3, #4]
 801c008:	6053      	str	r3, [r2, #4]
 801c00a:	4408      	add	r0, r1
 801c00c:	6010      	str	r0, [r2, #0]
 801c00e:	e7da      	b.n	801bfc6 <_free_r+0x22>
 801c010:	d902      	bls.n	801c018 <_free_r+0x74>
 801c012:	230c      	movs	r3, #12
 801c014:	602b      	str	r3, [r5, #0]
 801c016:	e7d6      	b.n	801bfc6 <_free_r+0x22>
 801c018:	6820      	ldr	r0, [r4, #0]
 801c01a:	1821      	adds	r1, r4, r0
 801c01c:	428b      	cmp	r3, r1
 801c01e:	bf04      	itt	eq
 801c020:	6819      	ldreq	r1, [r3, #0]
 801c022:	685b      	ldreq	r3, [r3, #4]
 801c024:	6063      	str	r3, [r4, #4]
 801c026:	bf04      	itt	eq
 801c028:	1809      	addeq	r1, r1, r0
 801c02a:	6021      	streq	r1, [r4, #0]
 801c02c:	6054      	str	r4, [r2, #4]
 801c02e:	e7ca      	b.n	801bfc6 <_free_r+0x22>
 801c030:	bd38      	pop	{r3, r4, r5, pc}
 801c032:	bf00      	nop
 801c034:	24013050 	.word	0x24013050

0801c038 <_malloc_usable_size_r>:
 801c038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c03c:	1f18      	subs	r0, r3, #4
 801c03e:	2b00      	cmp	r3, #0
 801c040:	bfbc      	itt	lt
 801c042:	580b      	ldrlt	r3, [r1, r0]
 801c044:	18c0      	addlt	r0, r0, r3
 801c046:	4770      	bx	lr

0801c048 <__ssputs_r>:
 801c048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c04c:	688e      	ldr	r6, [r1, #8]
 801c04e:	461f      	mov	r7, r3
 801c050:	42be      	cmp	r6, r7
 801c052:	680b      	ldr	r3, [r1, #0]
 801c054:	4682      	mov	sl, r0
 801c056:	460c      	mov	r4, r1
 801c058:	4690      	mov	r8, r2
 801c05a:	d82d      	bhi.n	801c0b8 <__ssputs_r+0x70>
 801c05c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c060:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801c064:	d026      	beq.n	801c0b4 <__ssputs_r+0x6c>
 801c066:	6965      	ldr	r5, [r4, #20]
 801c068:	6909      	ldr	r1, [r1, #16]
 801c06a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c06e:	eba3 0901 	sub.w	r9, r3, r1
 801c072:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c076:	1c7b      	adds	r3, r7, #1
 801c078:	444b      	add	r3, r9
 801c07a:	106d      	asrs	r5, r5, #1
 801c07c:	429d      	cmp	r5, r3
 801c07e:	bf38      	it	cc
 801c080:	461d      	movcc	r5, r3
 801c082:	0553      	lsls	r3, r2, #21
 801c084:	d527      	bpl.n	801c0d6 <__ssputs_r+0x8e>
 801c086:	4629      	mov	r1, r5
 801c088:	f7ff fa48 	bl	801b51c <_malloc_r>
 801c08c:	4606      	mov	r6, r0
 801c08e:	b360      	cbz	r0, 801c0ea <__ssputs_r+0xa2>
 801c090:	6921      	ldr	r1, [r4, #16]
 801c092:	464a      	mov	r2, r9
 801c094:	f7ff ff4d 	bl	801bf32 <memcpy>
 801c098:	89a3      	ldrh	r3, [r4, #12]
 801c09a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801c09e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c0a2:	81a3      	strh	r3, [r4, #12]
 801c0a4:	6126      	str	r6, [r4, #16]
 801c0a6:	6165      	str	r5, [r4, #20]
 801c0a8:	444e      	add	r6, r9
 801c0aa:	eba5 0509 	sub.w	r5, r5, r9
 801c0ae:	6026      	str	r6, [r4, #0]
 801c0b0:	60a5      	str	r5, [r4, #8]
 801c0b2:	463e      	mov	r6, r7
 801c0b4:	42be      	cmp	r6, r7
 801c0b6:	d900      	bls.n	801c0ba <__ssputs_r+0x72>
 801c0b8:	463e      	mov	r6, r7
 801c0ba:	6820      	ldr	r0, [r4, #0]
 801c0bc:	4632      	mov	r2, r6
 801c0be:	4641      	mov	r1, r8
 801c0c0:	f7ff fe54 	bl	801bd6c <memmove>
 801c0c4:	68a3      	ldr	r3, [r4, #8]
 801c0c6:	1b9b      	subs	r3, r3, r6
 801c0c8:	60a3      	str	r3, [r4, #8]
 801c0ca:	6823      	ldr	r3, [r4, #0]
 801c0cc:	4433      	add	r3, r6
 801c0ce:	6023      	str	r3, [r4, #0]
 801c0d0:	2000      	movs	r0, #0
 801c0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c0d6:	462a      	mov	r2, r5
 801c0d8:	f7ff fb20 	bl	801b71c <_realloc_r>
 801c0dc:	4606      	mov	r6, r0
 801c0de:	2800      	cmp	r0, #0
 801c0e0:	d1e0      	bne.n	801c0a4 <__ssputs_r+0x5c>
 801c0e2:	6921      	ldr	r1, [r4, #16]
 801c0e4:	4650      	mov	r0, sl
 801c0e6:	f7ff ff5d 	bl	801bfa4 <_free_r>
 801c0ea:	230c      	movs	r3, #12
 801c0ec:	f8ca 3000 	str.w	r3, [sl]
 801c0f0:	89a3      	ldrh	r3, [r4, #12]
 801c0f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c0f6:	81a3      	strh	r3, [r4, #12]
 801c0f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c0fc:	e7e9      	b.n	801c0d2 <__ssputs_r+0x8a>
	...

0801c100 <_svfiprintf_r>:
 801c100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c104:	4698      	mov	r8, r3
 801c106:	898b      	ldrh	r3, [r1, #12]
 801c108:	061b      	lsls	r3, r3, #24
 801c10a:	b09d      	sub	sp, #116	@ 0x74
 801c10c:	4607      	mov	r7, r0
 801c10e:	460d      	mov	r5, r1
 801c110:	4614      	mov	r4, r2
 801c112:	d510      	bpl.n	801c136 <_svfiprintf_r+0x36>
 801c114:	690b      	ldr	r3, [r1, #16]
 801c116:	b973      	cbnz	r3, 801c136 <_svfiprintf_r+0x36>
 801c118:	2140      	movs	r1, #64	@ 0x40
 801c11a:	f7ff f9ff 	bl	801b51c <_malloc_r>
 801c11e:	6028      	str	r0, [r5, #0]
 801c120:	6128      	str	r0, [r5, #16]
 801c122:	b930      	cbnz	r0, 801c132 <_svfiprintf_r+0x32>
 801c124:	230c      	movs	r3, #12
 801c126:	603b      	str	r3, [r7, #0]
 801c128:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c12c:	b01d      	add	sp, #116	@ 0x74
 801c12e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c132:	2340      	movs	r3, #64	@ 0x40
 801c134:	616b      	str	r3, [r5, #20]
 801c136:	2300      	movs	r3, #0
 801c138:	9309      	str	r3, [sp, #36]	@ 0x24
 801c13a:	2320      	movs	r3, #32
 801c13c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c140:	f8cd 800c 	str.w	r8, [sp, #12]
 801c144:	2330      	movs	r3, #48	@ 0x30
 801c146:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801c2e4 <_svfiprintf_r+0x1e4>
 801c14a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c14e:	f04f 0901 	mov.w	r9, #1
 801c152:	4623      	mov	r3, r4
 801c154:	469a      	mov	sl, r3
 801c156:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c15a:	b10a      	cbz	r2, 801c160 <_svfiprintf_r+0x60>
 801c15c:	2a25      	cmp	r2, #37	@ 0x25
 801c15e:	d1f9      	bne.n	801c154 <_svfiprintf_r+0x54>
 801c160:	ebba 0b04 	subs.w	fp, sl, r4
 801c164:	d00b      	beq.n	801c17e <_svfiprintf_r+0x7e>
 801c166:	465b      	mov	r3, fp
 801c168:	4622      	mov	r2, r4
 801c16a:	4629      	mov	r1, r5
 801c16c:	4638      	mov	r0, r7
 801c16e:	f7ff ff6b 	bl	801c048 <__ssputs_r>
 801c172:	3001      	adds	r0, #1
 801c174:	f000 80a7 	beq.w	801c2c6 <_svfiprintf_r+0x1c6>
 801c178:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c17a:	445a      	add	r2, fp
 801c17c:	9209      	str	r2, [sp, #36]	@ 0x24
 801c17e:	f89a 3000 	ldrb.w	r3, [sl]
 801c182:	2b00      	cmp	r3, #0
 801c184:	f000 809f 	beq.w	801c2c6 <_svfiprintf_r+0x1c6>
 801c188:	2300      	movs	r3, #0
 801c18a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c18e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c192:	f10a 0a01 	add.w	sl, sl, #1
 801c196:	9304      	str	r3, [sp, #16]
 801c198:	9307      	str	r3, [sp, #28]
 801c19a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c19e:	931a      	str	r3, [sp, #104]	@ 0x68
 801c1a0:	4654      	mov	r4, sl
 801c1a2:	2205      	movs	r2, #5
 801c1a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c1a8:	484e      	ldr	r0, [pc, #312]	@ (801c2e4 <_svfiprintf_r+0x1e4>)
 801c1aa:	f7e4 f8b1 	bl	8000310 <memchr>
 801c1ae:	9a04      	ldr	r2, [sp, #16]
 801c1b0:	b9d8      	cbnz	r0, 801c1ea <_svfiprintf_r+0xea>
 801c1b2:	06d0      	lsls	r0, r2, #27
 801c1b4:	bf44      	itt	mi
 801c1b6:	2320      	movmi	r3, #32
 801c1b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c1bc:	0711      	lsls	r1, r2, #28
 801c1be:	bf44      	itt	mi
 801c1c0:	232b      	movmi	r3, #43	@ 0x2b
 801c1c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c1c6:	f89a 3000 	ldrb.w	r3, [sl]
 801c1ca:	2b2a      	cmp	r3, #42	@ 0x2a
 801c1cc:	d015      	beq.n	801c1fa <_svfiprintf_r+0xfa>
 801c1ce:	9a07      	ldr	r2, [sp, #28]
 801c1d0:	4654      	mov	r4, sl
 801c1d2:	2000      	movs	r0, #0
 801c1d4:	f04f 0c0a 	mov.w	ip, #10
 801c1d8:	4621      	mov	r1, r4
 801c1da:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c1de:	3b30      	subs	r3, #48	@ 0x30
 801c1e0:	2b09      	cmp	r3, #9
 801c1e2:	d94b      	bls.n	801c27c <_svfiprintf_r+0x17c>
 801c1e4:	b1b0      	cbz	r0, 801c214 <_svfiprintf_r+0x114>
 801c1e6:	9207      	str	r2, [sp, #28]
 801c1e8:	e014      	b.n	801c214 <_svfiprintf_r+0x114>
 801c1ea:	eba0 0308 	sub.w	r3, r0, r8
 801c1ee:	fa09 f303 	lsl.w	r3, r9, r3
 801c1f2:	4313      	orrs	r3, r2
 801c1f4:	9304      	str	r3, [sp, #16]
 801c1f6:	46a2      	mov	sl, r4
 801c1f8:	e7d2      	b.n	801c1a0 <_svfiprintf_r+0xa0>
 801c1fa:	9b03      	ldr	r3, [sp, #12]
 801c1fc:	1d19      	adds	r1, r3, #4
 801c1fe:	681b      	ldr	r3, [r3, #0]
 801c200:	9103      	str	r1, [sp, #12]
 801c202:	2b00      	cmp	r3, #0
 801c204:	bfbb      	ittet	lt
 801c206:	425b      	neglt	r3, r3
 801c208:	f042 0202 	orrlt.w	r2, r2, #2
 801c20c:	9307      	strge	r3, [sp, #28]
 801c20e:	9307      	strlt	r3, [sp, #28]
 801c210:	bfb8      	it	lt
 801c212:	9204      	strlt	r2, [sp, #16]
 801c214:	7823      	ldrb	r3, [r4, #0]
 801c216:	2b2e      	cmp	r3, #46	@ 0x2e
 801c218:	d10a      	bne.n	801c230 <_svfiprintf_r+0x130>
 801c21a:	7863      	ldrb	r3, [r4, #1]
 801c21c:	2b2a      	cmp	r3, #42	@ 0x2a
 801c21e:	d132      	bne.n	801c286 <_svfiprintf_r+0x186>
 801c220:	9b03      	ldr	r3, [sp, #12]
 801c222:	1d1a      	adds	r2, r3, #4
 801c224:	681b      	ldr	r3, [r3, #0]
 801c226:	9203      	str	r2, [sp, #12]
 801c228:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c22c:	3402      	adds	r4, #2
 801c22e:	9305      	str	r3, [sp, #20]
 801c230:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801c2f4 <_svfiprintf_r+0x1f4>
 801c234:	7821      	ldrb	r1, [r4, #0]
 801c236:	2203      	movs	r2, #3
 801c238:	4650      	mov	r0, sl
 801c23a:	f7e4 f869 	bl	8000310 <memchr>
 801c23e:	b138      	cbz	r0, 801c250 <_svfiprintf_r+0x150>
 801c240:	9b04      	ldr	r3, [sp, #16]
 801c242:	eba0 000a 	sub.w	r0, r0, sl
 801c246:	2240      	movs	r2, #64	@ 0x40
 801c248:	4082      	lsls	r2, r0
 801c24a:	4313      	orrs	r3, r2
 801c24c:	3401      	adds	r4, #1
 801c24e:	9304      	str	r3, [sp, #16]
 801c250:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c254:	4824      	ldr	r0, [pc, #144]	@ (801c2e8 <_svfiprintf_r+0x1e8>)
 801c256:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c25a:	2206      	movs	r2, #6
 801c25c:	f7e4 f858 	bl	8000310 <memchr>
 801c260:	2800      	cmp	r0, #0
 801c262:	d036      	beq.n	801c2d2 <_svfiprintf_r+0x1d2>
 801c264:	4b21      	ldr	r3, [pc, #132]	@ (801c2ec <_svfiprintf_r+0x1ec>)
 801c266:	bb1b      	cbnz	r3, 801c2b0 <_svfiprintf_r+0x1b0>
 801c268:	9b03      	ldr	r3, [sp, #12]
 801c26a:	3307      	adds	r3, #7
 801c26c:	f023 0307 	bic.w	r3, r3, #7
 801c270:	3308      	adds	r3, #8
 801c272:	9303      	str	r3, [sp, #12]
 801c274:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c276:	4433      	add	r3, r6
 801c278:	9309      	str	r3, [sp, #36]	@ 0x24
 801c27a:	e76a      	b.n	801c152 <_svfiprintf_r+0x52>
 801c27c:	fb0c 3202 	mla	r2, ip, r2, r3
 801c280:	460c      	mov	r4, r1
 801c282:	2001      	movs	r0, #1
 801c284:	e7a8      	b.n	801c1d8 <_svfiprintf_r+0xd8>
 801c286:	2300      	movs	r3, #0
 801c288:	3401      	adds	r4, #1
 801c28a:	9305      	str	r3, [sp, #20]
 801c28c:	4619      	mov	r1, r3
 801c28e:	f04f 0c0a 	mov.w	ip, #10
 801c292:	4620      	mov	r0, r4
 801c294:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c298:	3a30      	subs	r2, #48	@ 0x30
 801c29a:	2a09      	cmp	r2, #9
 801c29c:	d903      	bls.n	801c2a6 <_svfiprintf_r+0x1a6>
 801c29e:	2b00      	cmp	r3, #0
 801c2a0:	d0c6      	beq.n	801c230 <_svfiprintf_r+0x130>
 801c2a2:	9105      	str	r1, [sp, #20]
 801c2a4:	e7c4      	b.n	801c230 <_svfiprintf_r+0x130>
 801c2a6:	fb0c 2101 	mla	r1, ip, r1, r2
 801c2aa:	4604      	mov	r4, r0
 801c2ac:	2301      	movs	r3, #1
 801c2ae:	e7f0      	b.n	801c292 <_svfiprintf_r+0x192>
 801c2b0:	ab03      	add	r3, sp, #12
 801c2b2:	9300      	str	r3, [sp, #0]
 801c2b4:	462a      	mov	r2, r5
 801c2b6:	4b0e      	ldr	r3, [pc, #56]	@ (801c2f0 <_svfiprintf_r+0x1f0>)
 801c2b8:	a904      	add	r1, sp, #16
 801c2ba:	4638      	mov	r0, r7
 801c2bc:	f3af 8000 	nop.w
 801c2c0:	1c42      	adds	r2, r0, #1
 801c2c2:	4606      	mov	r6, r0
 801c2c4:	d1d6      	bne.n	801c274 <_svfiprintf_r+0x174>
 801c2c6:	89ab      	ldrh	r3, [r5, #12]
 801c2c8:	065b      	lsls	r3, r3, #25
 801c2ca:	f53f af2d 	bmi.w	801c128 <_svfiprintf_r+0x28>
 801c2ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c2d0:	e72c      	b.n	801c12c <_svfiprintf_r+0x2c>
 801c2d2:	ab03      	add	r3, sp, #12
 801c2d4:	9300      	str	r3, [sp, #0]
 801c2d6:	462a      	mov	r2, r5
 801c2d8:	4b05      	ldr	r3, [pc, #20]	@ (801c2f0 <_svfiprintf_r+0x1f0>)
 801c2da:	a904      	add	r1, sp, #16
 801c2dc:	4638      	mov	r0, r7
 801c2de:	f000 f9bb 	bl	801c658 <_printf_i>
 801c2e2:	e7ed      	b.n	801c2c0 <_svfiprintf_r+0x1c0>
 801c2e4:	0801daa2 	.word	0x0801daa2
 801c2e8:	0801daac 	.word	0x0801daac
 801c2ec:	00000000 	.word	0x00000000
 801c2f0:	0801c049 	.word	0x0801c049
 801c2f4:	0801daa8 	.word	0x0801daa8

0801c2f8 <__sfputc_r>:
 801c2f8:	6893      	ldr	r3, [r2, #8]
 801c2fa:	3b01      	subs	r3, #1
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	b410      	push	{r4}
 801c300:	6093      	str	r3, [r2, #8]
 801c302:	da08      	bge.n	801c316 <__sfputc_r+0x1e>
 801c304:	6994      	ldr	r4, [r2, #24]
 801c306:	42a3      	cmp	r3, r4
 801c308:	db01      	blt.n	801c30e <__sfputc_r+0x16>
 801c30a:	290a      	cmp	r1, #10
 801c30c:	d103      	bne.n	801c316 <__sfputc_r+0x1e>
 801c30e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c312:	f7ff bc87 	b.w	801bc24 <__swbuf_r>
 801c316:	6813      	ldr	r3, [r2, #0]
 801c318:	1c58      	adds	r0, r3, #1
 801c31a:	6010      	str	r0, [r2, #0]
 801c31c:	7019      	strb	r1, [r3, #0]
 801c31e:	4608      	mov	r0, r1
 801c320:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c324:	4770      	bx	lr

0801c326 <__sfputs_r>:
 801c326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c328:	4606      	mov	r6, r0
 801c32a:	460f      	mov	r7, r1
 801c32c:	4614      	mov	r4, r2
 801c32e:	18d5      	adds	r5, r2, r3
 801c330:	42ac      	cmp	r4, r5
 801c332:	d101      	bne.n	801c338 <__sfputs_r+0x12>
 801c334:	2000      	movs	r0, #0
 801c336:	e007      	b.n	801c348 <__sfputs_r+0x22>
 801c338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c33c:	463a      	mov	r2, r7
 801c33e:	4630      	mov	r0, r6
 801c340:	f7ff ffda 	bl	801c2f8 <__sfputc_r>
 801c344:	1c43      	adds	r3, r0, #1
 801c346:	d1f3      	bne.n	801c330 <__sfputs_r+0xa>
 801c348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801c34c <_vfiprintf_r>:
 801c34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c350:	460d      	mov	r5, r1
 801c352:	b09d      	sub	sp, #116	@ 0x74
 801c354:	4614      	mov	r4, r2
 801c356:	4698      	mov	r8, r3
 801c358:	4606      	mov	r6, r0
 801c35a:	b118      	cbz	r0, 801c364 <_vfiprintf_r+0x18>
 801c35c:	6a03      	ldr	r3, [r0, #32]
 801c35e:	b90b      	cbnz	r3, 801c364 <_vfiprintf_r+0x18>
 801c360:	f7ff fb0e 	bl	801b980 <__sinit>
 801c364:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c366:	07d9      	lsls	r1, r3, #31
 801c368:	d405      	bmi.n	801c376 <_vfiprintf_r+0x2a>
 801c36a:	89ab      	ldrh	r3, [r5, #12]
 801c36c:	059a      	lsls	r2, r3, #22
 801c36e:	d402      	bmi.n	801c376 <_vfiprintf_r+0x2a>
 801c370:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c372:	f7ff fdd4 	bl	801bf1e <__retarget_lock_acquire_recursive>
 801c376:	89ab      	ldrh	r3, [r5, #12]
 801c378:	071b      	lsls	r3, r3, #28
 801c37a:	d501      	bpl.n	801c380 <_vfiprintf_r+0x34>
 801c37c:	692b      	ldr	r3, [r5, #16]
 801c37e:	b99b      	cbnz	r3, 801c3a8 <_vfiprintf_r+0x5c>
 801c380:	4629      	mov	r1, r5
 801c382:	4630      	mov	r0, r6
 801c384:	f7ff fc8c 	bl	801bca0 <__swsetup_r>
 801c388:	b170      	cbz	r0, 801c3a8 <_vfiprintf_r+0x5c>
 801c38a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c38c:	07dc      	lsls	r4, r3, #31
 801c38e:	d504      	bpl.n	801c39a <_vfiprintf_r+0x4e>
 801c390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c394:	b01d      	add	sp, #116	@ 0x74
 801c396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c39a:	89ab      	ldrh	r3, [r5, #12]
 801c39c:	0598      	lsls	r0, r3, #22
 801c39e:	d4f7      	bmi.n	801c390 <_vfiprintf_r+0x44>
 801c3a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c3a2:	f7ff fdbd 	bl	801bf20 <__retarget_lock_release_recursive>
 801c3a6:	e7f3      	b.n	801c390 <_vfiprintf_r+0x44>
 801c3a8:	2300      	movs	r3, #0
 801c3aa:	9309      	str	r3, [sp, #36]	@ 0x24
 801c3ac:	2320      	movs	r3, #32
 801c3ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801c3b2:	f8cd 800c 	str.w	r8, [sp, #12]
 801c3b6:	2330      	movs	r3, #48	@ 0x30
 801c3b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801c568 <_vfiprintf_r+0x21c>
 801c3bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801c3c0:	f04f 0901 	mov.w	r9, #1
 801c3c4:	4623      	mov	r3, r4
 801c3c6:	469a      	mov	sl, r3
 801c3c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c3cc:	b10a      	cbz	r2, 801c3d2 <_vfiprintf_r+0x86>
 801c3ce:	2a25      	cmp	r2, #37	@ 0x25
 801c3d0:	d1f9      	bne.n	801c3c6 <_vfiprintf_r+0x7a>
 801c3d2:	ebba 0b04 	subs.w	fp, sl, r4
 801c3d6:	d00b      	beq.n	801c3f0 <_vfiprintf_r+0xa4>
 801c3d8:	465b      	mov	r3, fp
 801c3da:	4622      	mov	r2, r4
 801c3dc:	4629      	mov	r1, r5
 801c3de:	4630      	mov	r0, r6
 801c3e0:	f7ff ffa1 	bl	801c326 <__sfputs_r>
 801c3e4:	3001      	adds	r0, #1
 801c3e6:	f000 80a7 	beq.w	801c538 <_vfiprintf_r+0x1ec>
 801c3ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c3ec:	445a      	add	r2, fp
 801c3ee:	9209      	str	r2, [sp, #36]	@ 0x24
 801c3f0:	f89a 3000 	ldrb.w	r3, [sl]
 801c3f4:	2b00      	cmp	r3, #0
 801c3f6:	f000 809f 	beq.w	801c538 <_vfiprintf_r+0x1ec>
 801c3fa:	2300      	movs	r3, #0
 801c3fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801c400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c404:	f10a 0a01 	add.w	sl, sl, #1
 801c408:	9304      	str	r3, [sp, #16]
 801c40a:	9307      	str	r3, [sp, #28]
 801c40c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801c410:	931a      	str	r3, [sp, #104]	@ 0x68
 801c412:	4654      	mov	r4, sl
 801c414:	2205      	movs	r2, #5
 801c416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c41a:	4853      	ldr	r0, [pc, #332]	@ (801c568 <_vfiprintf_r+0x21c>)
 801c41c:	f7e3 ff78 	bl	8000310 <memchr>
 801c420:	9a04      	ldr	r2, [sp, #16]
 801c422:	b9d8      	cbnz	r0, 801c45c <_vfiprintf_r+0x110>
 801c424:	06d1      	lsls	r1, r2, #27
 801c426:	bf44      	itt	mi
 801c428:	2320      	movmi	r3, #32
 801c42a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c42e:	0713      	lsls	r3, r2, #28
 801c430:	bf44      	itt	mi
 801c432:	232b      	movmi	r3, #43	@ 0x2b
 801c434:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801c438:	f89a 3000 	ldrb.w	r3, [sl]
 801c43c:	2b2a      	cmp	r3, #42	@ 0x2a
 801c43e:	d015      	beq.n	801c46c <_vfiprintf_r+0x120>
 801c440:	9a07      	ldr	r2, [sp, #28]
 801c442:	4654      	mov	r4, sl
 801c444:	2000      	movs	r0, #0
 801c446:	f04f 0c0a 	mov.w	ip, #10
 801c44a:	4621      	mov	r1, r4
 801c44c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c450:	3b30      	subs	r3, #48	@ 0x30
 801c452:	2b09      	cmp	r3, #9
 801c454:	d94b      	bls.n	801c4ee <_vfiprintf_r+0x1a2>
 801c456:	b1b0      	cbz	r0, 801c486 <_vfiprintf_r+0x13a>
 801c458:	9207      	str	r2, [sp, #28]
 801c45a:	e014      	b.n	801c486 <_vfiprintf_r+0x13a>
 801c45c:	eba0 0308 	sub.w	r3, r0, r8
 801c460:	fa09 f303 	lsl.w	r3, r9, r3
 801c464:	4313      	orrs	r3, r2
 801c466:	9304      	str	r3, [sp, #16]
 801c468:	46a2      	mov	sl, r4
 801c46a:	e7d2      	b.n	801c412 <_vfiprintf_r+0xc6>
 801c46c:	9b03      	ldr	r3, [sp, #12]
 801c46e:	1d19      	adds	r1, r3, #4
 801c470:	681b      	ldr	r3, [r3, #0]
 801c472:	9103      	str	r1, [sp, #12]
 801c474:	2b00      	cmp	r3, #0
 801c476:	bfbb      	ittet	lt
 801c478:	425b      	neglt	r3, r3
 801c47a:	f042 0202 	orrlt.w	r2, r2, #2
 801c47e:	9307      	strge	r3, [sp, #28]
 801c480:	9307      	strlt	r3, [sp, #28]
 801c482:	bfb8      	it	lt
 801c484:	9204      	strlt	r2, [sp, #16]
 801c486:	7823      	ldrb	r3, [r4, #0]
 801c488:	2b2e      	cmp	r3, #46	@ 0x2e
 801c48a:	d10a      	bne.n	801c4a2 <_vfiprintf_r+0x156>
 801c48c:	7863      	ldrb	r3, [r4, #1]
 801c48e:	2b2a      	cmp	r3, #42	@ 0x2a
 801c490:	d132      	bne.n	801c4f8 <_vfiprintf_r+0x1ac>
 801c492:	9b03      	ldr	r3, [sp, #12]
 801c494:	1d1a      	adds	r2, r3, #4
 801c496:	681b      	ldr	r3, [r3, #0]
 801c498:	9203      	str	r2, [sp, #12]
 801c49a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801c49e:	3402      	adds	r4, #2
 801c4a0:	9305      	str	r3, [sp, #20]
 801c4a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801c578 <_vfiprintf_r+0x22c>
 801c4a6:	7821      	ldrb	r1, [r4, #0]
 801c4a8:	2203      	movs	r2, #3
 801c4aa:	4650      	mov	r0, sl
 801c4ac:	f7e3 ff30 	bl	8000310 <memchr>
 801c4b0:	b138      	cbz	r0, 801c4c2 <_vfiprintf_r+0x176>
 801c4b2:	9b04      	ldr	r3, [sp, #16]
 801c4b4:	eba0 000a 	sub.w	r0, r0, sl
 801c4b8:	2240      	movs	r2, #64	@ 0x40
 801c4ba:	4082      	lsls	r2, r0
 801c4bc:	4313      	orrs	r3, r2
 801c4be:	3401      	adds	r4, #1
 801c4c0:	9304      	str	r3, [sp, #16]
 801c4c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c4c6:	4829      	ldr	r0, [pc, #164]	@ (801c56c <_vfiprintf_r+0x220>)
 801c4c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801c4cc:	2206      	movs	r2, #6
 801c4ce:	f7e3 ff1f 	bl	8000310 <memchr>
 801c4d2:	2800      	cmp	r0, #0
 801c4d4:	d03f      	beq.n	801c556 <_vfiprintf_r+0x20a>
 801c4d6:	4b26      	ldr	r3, [pc, #152]	@ (801c570 <_vfiprintf_r+0x224>)
 801c4d8:	bb1b      	cbnz	r3, 801c522 <_vfiprintf_r+0x1d6>
 801c4da:	9b03      	ldr	r3, [sp, #12]
 801c4dc:	3307      	adds	r3, #7
 801c4de:	f023 0307 	bic.w	r3, r3, #7
 801c4e2:	3308      	adds	r3, #8
 801c4e4:	9303      	str	r3, [sp, #12]
 801c4e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c4e8:	443b      	add	r3, r7
 801c4ea:	9309      	str	r3, [sp, #36]	@ 0x24
 801c4ec:	e76a      	b.n	801c3c4 <_vfiprintf_r+0x78>
 801c4ee:	fb0c 3202 	mla	r2, ip, r2, r3
 801c4f2:	460c      	mov	r4, r1
 801c4f4:	2001      	movs	r0, #1
 801c4f6:	e7a8      	b.n	801c44a <_vfiprintf_r+0xfe>
 801c4f8:	2300      	movs	r3, #0
 801c4fa:	3401      	adds	r4, #1
 801c4fc:	9305      	str	r3, [sp, #20]
 801c4fe:	4619      	mov	r1, r3
 801c500:	f04f 0c0a 	mov.w	ip, #10
 801c504:	4620      	mov	r0, r4
 801c506:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c50a:	3a30      	subs	r2, #48	@ 0x30
 801c50c:	2a09      	cmp	r2, #9
 801c50e:	d903      	bls.n	801c518 <_vfiprintf_r+0x1cc>
 801c510:	2b00      	cmp	r3, #0
 801c512:	d0c6      	beq.n	801c4a2 <_vfiprintf_r+0x156>
 801c514:	9105      	str	r1, [sp, #20]
 801c516:	e7c4      	b.n	801c4a2 <_vfiprintf_r+0x156>
 801c518:	fb0c 2101 	mla	r1, ip, r1, r2
 801c51c:	4604      	mov	r4, r0
 801c51e:	2301      	movs	r3, #1
 801c520:	e7f0      	b.n	801c504 <_vfiprintf_r+0x1b8>
 801c522:	ab03      	add	r3, sp, #12
 801c524:	9300      	str	r3, [sp, #0]
 801c526:	462a      	mov	r2, r5
 801c528:	4b12      	ldr	r3, [pc, #72]	@ (801c574 <_vfiprintf_r+0x228>)
 801c52a:	a904      	add	r1, sp, #16
 801c52c:	4630      	mov	r0, r6
 801c52e:	f3af 8000 	nop.w
 801c532:	4607      	mov	r7, r0
 801c534:	1c78      	adds	r0, r7, #1
 801c536:	d1d6      	bne.n	801c4e6 <_vfiprintf_r+0x19a>
 801c538:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801c53a:	07d9      	lsls	r1, r3, #31
 801c53c:	d405      	bmi.n	801c54a <_vfiprintf_r+0x1fe>
 801c53e:	89ab      	ldrh	r3, [r5, #12]
 801c540:	059a      	lsls	r2, r3, #22
 801c542:	d402      	bmi.n	801c54a <_vfiprintf_r+0x1fe>
 801c544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801c546:	f7ff fceb 	bl	801bf20 <__retarget_lock_release_recursive>
 801c54a:	89ab      	ldrh	r3, [r5, #12]
 801c54c:	065b      	lsls	r3, r3, #25
 801c54e:	f53f af1f 	bmi.w	801c390 <_vfiprintf_r+0x44>
 801c552:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801c554:	e71e      	b.n	801c394 <_vfiprintf_r+0x48>
 801c556:	ab03      	add	r3, sp, #12
 801c558:	9300      	str	r3, [sp, #0]
 801c55a:	462a      	mov	r2, r5
 801c55c:	4b05      	ldr	r3, [pc, #20]	@ (801c574 <_vfiprintf_r+0x228>)
 801c55e:	a904      	add	r1, sp, #16
 801c560:	4630      	mov	r0, r6
 801c562:	f000 f879 	bl	801c658 <_printf_i>
 801c566:	e7e4      	b.n	801c532 <_vfiprintf_r+0x1e6>
 801c568:	0801daa2 	.word	0x0801daa2
 801c56c:	0801daac 	.word	0x0801daac
 801c570:	00000000 	.word	0x00000000
 801c574:	0801c327 	.word	0x0801c327
 801c578:	0801daa8 	.word	0x0801daa8

0801c57c <_printf_common>:
 801c57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c580:	4616      	mov	r6, r2
 801c582:	4698      	mov	r8, r3
 801c584:	688a      	ldr	r2, [r1, #8]
 801c586:	690b      	ldr	r3, [r1, #16]
 801c588:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801c58c:	4293      	cmp	r3, r2
 801c58e:	bfb8      	it	lt
 801c590:	4613      	movlt	r3, r2
 801c592:	6033      	str	r3, [r6, #0]
 801c594:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801c598:	4607      	mov	r7, r0
 801c59a:	460c      	mov	r4, r1
 801c59c:	b10a      	cbz	r2, 801c5a2 <_printf_common+0x26>
 801c59e:	3301      	adds	r3, #1
 801c5a0:	6033      	str	r3, [r6, #0]
 801c5a2:	6823      	ldr	r3, [r4, #0]
 801c5a4:	0699      	lsls	r1, r3, #26
 801c5a6:	bf42      	ittt	mi
 801c5a8:	6833      	ldrmi	r3, [r6, #0]
 801c5aa:	3302      	addmi	r3, #2
 801c5ac:	6033      	strmi	r3, [r6, #0]
 801c5ae:	6825      	ldr	r5, [r4, #0]
 801c5b0:	f015 0506 	ands.w	r5, r5, #6
 801c5b4:	d106      	bne.n	801c5c4 <_printf_common+0x48>
 801c5b6:	f104 0a19 	add.w	sl, r4, #25
 801c5ba:	68e3      	ldr	r3, [r4, #12]
 801c5bc:	6832      	ldr	r2, [r6, #0]
 801c5be:	1a9b      	subs	r3, r3, r2
 801c5c0:	42ab      	cmp	r3, r5
 801c5c2:	dc26      	bgt.n	801c612 <_printf_common+0x96>
 801c5c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801c5c8:	6822      	ldr	r2, [r4, #0]
 801c5ca:	3b00      	subs	r3, #0
 801c5cc:	bf18      	it	ne
 801c5ce:	2301      	movne	r3, #1
 801c5d0:	0692      	lsls	r2, r2, #26
 801c5d2:	d42b      	bmi.n	801c62c <_printf_common+0xb0>
 801c5d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801c5d8:	4641      	mov	r1, r8
 801c5da:	4638      	mov	r0, r7
 801c5dc:	47c8      	blx	r9
 801c5de:	3001      	adds	r0, #1
 801c5e0:	d01e      	beq.n	801c620 <_printf_common+0xa4>
 801c5e2:	6823      	ldr	r3, [r4, #0]
 801c5e4:	6922      	ldr	r2, [r4, #16]
 801c5e6:	f003 0306 	and.w	r3, r3, #6
 801c5ea:	2b04      	cmp	r3, #4
 801c5ec:	bf02      	ittt	eq
 801c5ee:	68e5      	ldreq	r5, [r4, #12]
 801c5f0:	6833      	ldreq	r3, [r6, #0]
 801c5f2:	1aed      	subeq	r5, r5, r3
 801c5f4:	68a3      	ldr	r3, [r4, #8]
 801c5f6:	bf0c      	ite	eq
 801c5f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801c5fc:	2500      	movne	r5, #0
 801c5fe:	4293      	cmp	r3, r2
 801c600:	bfc4      	itt	gt
 801c602:	1a9b      	subgt	r3, r3, r2
 801c604:	18ed      	addgt	r5, r5, r3
 801c606:	2600      	movs	r6, #0
 801c608:	341a      	adds	r4, #26
 801c60a:	42b5      	cmp	r5, r6
 801c60c:	d11a      	bne.n	801c644 <_printf_common+0xc8>
 801c60e:	2000      	movs	r0, #0
 801c610:	e008      	b.n	801c624 <_printf_common+0xa8>
 801c612:	2301      	movs	r3, #1
 801c614:	4652      	mov	r2, sl
 801c616:	4641      	mov	r1, r8
 801c618:	4638      	mov	r0, r7
 801c61a:	47c8      	blx	r9
 801c61c:	3001      	adds	r0, #1
 801c61e:	d103      	bne.n	801c628 <_printf_common+0xac>
 801c620:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c628:	3501      	adds	r5, #1
 801c62a:	e7c6      	b.n	801c5ba <_printf_common+0x3e>
 801c62c:	18e1      	adds	r1, r4, r3
 801c62e:	1c5a      	adds	r2, r3, #1
 801c630:	2030      	movs	r0, #48	@ 0x30
 801c632:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801c636:	4422      	add	r2, r4
 801c638:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801c63c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801c640:	3302      	adds	r3, #2
 801c642:	e7c7      	b.n	801c5d4 <_printf_common+0x58>
 801c644:	2301      	movs	r3, #1
 801c646:	4622      	mov	r2, r4
 801c648:	4641      	mov	r1, r8
 801c64a:	4638      	mov	r0, r7
 801c64c:	47c8      	blx	r9
 801c64e:	3001      	adds	r0, #1
 801c650:	d0e6      	beq.n	801c620 <_printf_common+0xa4>
 801c652:	3601      	adds	r6, #1
 801c654:	e7d9      	b.n	801c60a <_printf_common+0x8e>
	...

0801c658 <_printf_i>:
 801c658:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801c65c:	7e0f      	ldrb	r7, [r1, #24]
 801c65e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801c660:	2f78      	cmp	r7, #120	@ 0x78
 801c662:	4691      	mov	r9, r2
 801c664:	4680      	mov	r8, r0
 801c666:	460c      	mov	r4, r1
 801c668:	469a      	mov	sl, r3
 801c66a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801c66e:	d807      	bhi.n	801c680 <_printf_i+0x28>
 801c670:	2f62      	cmp	r7, #98	@ 0x62
 801c672:	d80a      	bhi.n	801c68a <_printf_i+0x32>
 801c674:	2f00      	cmp	r7, #0
 801c676:	f000 80d2 	beq.w	801c81e <_printf_i+0x1c6>
 801c67a:	2f58      	cmp	r7, #88	@ 0x58
 801c67c:	f000 80b9 	beq.w	801c7f2 <_printf_i+0x19a>
 801c680:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c684:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801c688:	e03a      	b.n	801c700 <_printf_i+0xa8>
 801c68a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801c68e:	2b15      	cmp	r3, #21
 801c690:	d8f6      	bhi.n	801c680 <_printf_i+0x28>
 801c692:	a101      	add	r1, pc, #4	@ (adr r1, 801c698 <_printf_i+0x40>)
 801c694:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801c698:	0801c6f1 	.word	0x0801c6f1
 801c69c:	0801c705 	.word	0x0801c705
 801c6a0:	0801c681 	.word	0x0801c681
 801c6a4:	0801c681 	.word	0x0801c681
 801c6a8:	0801c681 	.word	0x0801c681
 801c6ac:	0801c681 	.word	0x0801c681
 801c6b0:	0801c705 	.word	0x0801c705
 801c6b4:	0801c681 	.word	0x0801c681
 801c6b8:	0801c681 	.word	0x0801c681
 801c6bc:	0801c681 	.word	0x0801c681
 801c6c0:	0801c681 	.word	0x0801c681
 801c6c4:	0801c805 	.word	0x0801c805
 801c6c8:	0801c72f 	.word	0x0801c72f
 801c6cc:	0801c7bf 	.word	0x0801c7bf
 801c6d0:	0801c681 	.word	0x0801c681
 801c6d4:	0801c681 	.word	0x0801c681
 801c6d8:	0801c827 	.word	0x0801c827
 801c6dc:	0801c681 	.word	0x0801c681
 801c6e0:	0801c72f 	.word	0x0801c72f
 801c6e4:	0801c681 	.word	0x0801c681
 801c6e8:	0801c681 	.word	0x0801c681
 801c6ec:	0801c7c7 	.word	0x0801c7c7
 801c6f0:	6833      	ldr	r3, [r6, #0]
 801c6f2:	1d1a      	adds	r2, r3, #4
 801c6f4:	681b      	ldr	r3, [r3, #0]
 801c6f6:	6032      	str	r2, [r6, #0]
 801c6f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801c6fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801c700:	2301      	movs	r3, #1
 801c702:	e09d      	b.n	801c840 <_printf_i+0x1e8>
 801c704:	6833      	ldr	r3, [r6, #0]
 801c706:	6820      	ldr	r0, [r4, #0]
 801c708:	1d19      	adds	r1, r3, #4
 801c70a:	6031      	str	r1, [r6, #0]
 801c70c:	0606      	lsls	r6, r0, #24
 801c70e:	d501      	bpl.n	801c714 <_printf_i+0xbc>
 801c710:	681d      	ldr	r5, [r3, #0]
 801c712:	e003      	b.n	801c71c <_printf_i+0xc4>
 801c714:	0645      	lsls	r5, r0, #25
 801c716:	d5fb      	bpl.n	801c710 <_printf_i+0xb8>
 801c718:	f9b3 5000 	ldrsh.w	r5, [r3]
 801c71c:	2d00      	cmp	r5, #0
 801c71e:	da03      	bge.n	801c728 <_printf_i+0xd0>
 801c720:	232d      	movs	r3, #45	@ 0x2d
 801c722:	426d      	negs	r5, r5
 801c724:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c728:	4859      	ldr	r0, [pc, #356]	@ (801c890 <_printf_i+0x238>)
 801c72a:	230a      	movs	r3, #10
 801c72c:	e011      	b.n	801c752 <_printf_i+0xfa>
 801c72e:	6821      	ldr	r1, [r4, #0]
 801c730:	6833      	ldr	r3, [r6, #0]
 801c732:	0608      	lsls	r0, r1, #24
 801c734:	f853 5b04 	ldr.w	r5, [r3], #4
 801c738:	d402      	bmi.n	801c740 <_printf_i+0xe8>
 801c73a:	0649      	lsls	r1, r1, #25
 801c73c:	bf48      	it	mi
 801c73e:	b2ad      	uxthmi	r5, r5
 801c740:	2f6f      	cmp	r7, #111	@ 0x6f
 801c742:	4853      	ldr	r0, [pc, #332]	@ (801c890 <_printf_i+0x238>)
 801c744:	6033      	str	r3, [r6, #0]
 801c746:	bf14      	ite	ne
 801c748:	230a      	movne	r3, #10
 801c74a:	2308      	moveq	r3, #8
 801c74c:	2100      	movs	r1, #0
 801c74e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801c752:	6866      	ldr	r6, [r4, #4]
 801c754:	60a6      	str	r6, [r4, #8]
 801c756:	2e00      	cmp	r6, #0
 801c758:	bfa2      	ittt	ge
 801c75a:	6821      	ldrge	r1, [r4, #0]
 801c75c:	f021 0104 	bicge.w	r1, r1, #4
 801c760:	6021      	strge	r1, [r4, #0]
 801c762:	b90d      	cbnz	r5, 801c768 <_printf_i+0x110>
 801c764:	2e00      	cmp	r6, #0
 801c766:	d04b      	beq.n	801c800 <_printf_i+0x1a8>
 801c768:	4616      	mov	r6, r2
 801c76a:	fbb5 f1f3 	udiv	r1, r5, r3
 801c76e:	fb03 5711 	mls	r7, r3, r1, r5
 801c772:	5dc7      	ldrb	r7, [r0, r7]
 801c774:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801c778:	462f      	mov	r7, r5
 801c77a:	42bb      	cmp	r3, r7
 801c77c:	460d      	mov	r5, r1
 801c77e:	d9f4      	bls.n	801c76a <_printf_i+0x112>
 801c780:	2b08      	cmp	r3, #8
 801c782:	d10b      	bne.n	801c79c <_printf_i+0x144>
 801c784:	6823      	ldr	r3, [r4, #0]
 801c786:	07df      	lsls	r7, r3, #31
 801c788:	d508      	bpl.n	801c79c <_printf_i+0x144>
 801c78a:	6923      	ldr	r3, [r4, #16]
 801c78c:	6861      	ldr	r1, [r4, #4]
 801c78e:	4299      	cmp	r1, r3
 801c790:	bfde      	ittt	le
 801c792:	2330      	movle	r3, #48	@ 0x30
 801c794:	f806 3c01 	strble.w	r3, [r6, #-1]
 801c798:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801c79c:	1b92      	subs	r2, r2, r6
 801c79e:	6122      	str	r2, [r4, #16]
 801c7a0:	f8cd a000 	str.w	sl, [sp]
 801c7a4:	464b      	mov	r3, r9
 801c7a6:	aa03      	add	r2, sp, #12
 801c7a8:	4621      	mov	r1, r4
 801c7aa:	4640      	mov	r0, r8
 801c7ac:	f7ff fee6 	bl	801c57c <_printf_common>
 801c7b0:	3001      	adds	r0, #1
 801c7b2:	d14a      	bne.n	801c84a <_printf_i+0x1f2>
 801c7b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c7b8:	b004      	add	sp, #16
 801c7ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c7be:	6823      	ldr	r3, [r4, #0]
 801c7c0:	f043 0320 	orr.w	r3, r3, #32
 801c7c4:	6023      	str	r3, [r4, #0]
 801c7c6:	4833      	ldr	r0, [pc, #204]	@ (801c894 <_printf_i+0x23c>)
 801c7c8:	2778      	movs	r7, #120	@ 0x78
 801c7ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801c7ce:	6823      	ldr	r3, [r4, #0]
 801c7d0:	6831      	ldr	r1, [r6, #0]
 801c7d2:	061f      	lsls	r7, r3, #24
 801c7d4:	f851 5b04 	ldr.w	r5, [r1], #4
 801c7d8:	d402      	bmi.n	801c7e0 <_printf_i+0x188>
 801c7da:	065f      	lsls	r7, r3, #25
 801c7dc:	bf48      	it	mi
 801c7de:	b2ad      	uxthmi	r5, r5
 801c7e0:	6031      	str	r1, [r6, #0]
 801c7e2:	07d9      	lsls	r1, r3, #31
 801c7e4:	bf44      	itt	mi
 801c7e6:	f043 0320 	orrmi.w	r3, r3, #32
 801c7ea:	6023      	strmi	r3, [r4, #0]
 801c7ec:	b11d      	cbz	r5, 801c7f6 <_printf_i+0x19e>
 801c7ee:	2310      	movs	r3, #16
 801c7f0:	e7ac      	b.n	801c74c <_printf_i+0xf4>
 801c7f2:	4827      	ldr	r0, [pc, #156]	@ (801c890 <_printf_i+0x238>)
 801c7f4:	e7e9      	b.n	801c7ca <_printf_i+0x172>
 801c7f6:	6823      	ldr	r3, [r4, #0]
 801c7f8:	f023 0320 	bic.w	r3, r3, #32
 801c7fc:	6023      	str	r3, [r4, #0]
 801c7fe:	e7f6      	b.n	801c7ee <_printf_i+0x196>
 801c800:	4616      	mov	r6, r2
 801c802:	e7bd      	b.n	801c780 <_printf_i+0x128>
 801c804:	6833      	ldr	r3, [r6, #0]
 801c806:	6825      	ldr	r5, [r4, #0]
 801c808:	6961      	ldr	r1, [r4, #20]
 801c80a:	1d18      	adds	r0, r3, #4
 801c80c:	6030      	str	r0, [r6, #0]
 801c80e:	062e      	lsls	r6, r5, #24
 801c810:	681b      	ldr	r3, [r3, #0]
 801c812:	d501      	bpl.n	801c818 <_printf_i+0x1c0>
 801c814:	6019      	str	r1, [r3, #0]
 801c816:	e002      	b.n	801c81e <_printf_i+0x1c6>
 801c818:	0668      	lsls	r0, r5, #25
 801c81a:	d5fb      	bpl.n	801c814 <_printf_i+0x1bc>
 801c81c:	8019      	strh	r1, [r3, #0]
 801c81e:	2300      	movs	r3, #0
 801c820:	6123      	str	r3, [r4, #16]
 801c822:	4616      	mov	r6, r2
 801c824:	e7bc      	b.n	801c7a0 <_printf_i+0x148>
 801c826:	6833      	ldr	r3, [r6, #0]
 801c828:	1d1a      	adds	r2, r3, #4
 801c82a:	6032      	str	r2, [r6, #0]
 801c82c:	681e      	ldr	r6, [r3, #0]
 801c82e:	6862      	ldr	r2, [r4, #4]
 801c830:	2100      	movs	r1, #0
 801c832:	4630      	mov	r0, r6
 801c834:	f7e3 fd6c 	bl	8000310 <memchr>
 801c838:	b108      	cbz	r0, 801c83e <_printf_i+0x1e6>
 801c83a:	1b80      	subs	r0, r0, r6
 801c83c:	6060      	str	r0, [r4, #4]
 801c83e:	6863      	ldr	r3, [r4, #4]
 801c840:	6123      	str	r3, [r4, #16]
 801c842:	2300      	movs	r3, #0
 801c844:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801c848:	e7aa      	b.n	801c7a0 <_printf_i+0x148>
 801c84a:	6923      	ldr	r3, [r4, #16]
 801c84c:	4632      	mov	r2, r6
 801c84e:	4649      	mov	r1, r9
 801c850:	4640      	mov	r0, r8
 801c852:	47d0      	blx	sl
 801c854:	3001      	adds	r0, #1
 801c856:	d0ad      	beq.n	801c7b4 <_printf_i+0x15c>
 801c858:	6823      	ldr	r3, [r4, #0]
 801c85a:	079b      	lsls	r3, r3, #30
 801c85c:	d413      	bmi.n	801c886 <_printf_i+0x22e>
 801c85e:	68e0      	ldr	r0, [r4, #12]
 801c860:	9b03      	ldr	r3, [sp, #12]
 801c862:	4298      	cmp	r0, r3
 801c864:	bfb8      	it	lt
 801c866:	4618      	movlt	r0, r3
 801c868:	e7a6      	b.n	801c7b8 <_printf_i+0x160>
 801c86a:	2301      	movs	r3, #1
 801c86c:	4632      	mov	r2, r6
 801c86e:	4649      	mov	r1, r9
 801c870:	4640      	mov	r0, r8
 801c872:	47d0      	blx	sl
 801c874:	3001      	adds	r0, #1
 801c876:	d09d      	beq.n	801c7b4 <_printf_i+0x15c>
 801c878:	3501      	adds	r5, #1
 801c87a:	68e3      	ldr	r3, [r4, #12]
 801c87c:	9903      	ldr	r1, [sp, #12]
 801c87e:	1a5b      	subs	r3, r3, r1
 801c880:	42ab      	cmp	r3, r5
 801c882:	dcf2      	bgt.n	801c86a <_printf_i+0x212>
 801c884:	e7eb      	b.n	801c85e <_printf_i+0x206>
 801c886:	2500      	movs	r5, #0
 801c888:	f104 0619 	add.w	r6, r4, #25
 801c88c:	e7f5      	b.n	801c87a <_printf_i+0x222>
 801c88e:	bf00      	nop
 801c890:	0801dab3 	.word	0x0801dab3
 801c894:	0801dac4 	.word	0x0801dac4

0801c898 <__sflush_r>:
 801c898:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801c89c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8a0:	0716      	lsls	r6, r2, #28
 801c8a2:	4605      	mov	r5, r0
 801c8a4:	460c      	mov	r4, r1
 801c8a6:	d454      	bmi.n	801c952 <__sflush_r+0xba>
 801c8a8:	684b      	ldr	r3, [r1, #4]
 801c8aa:	2b00      	cmp	r3, #0
 801c8ac:	dc02      	bgt.n	801c8b4 <__sflush_r+0x1c>
 801c8ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801c8b0:	2b00      	cmp	r3, #0
 801c8b2:	dd48      	ble.n	801c946 <__sflush_r+0xae>
 801c8b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c8b6:	2e00      	cmp	r6, #0
 801c8b8:	d045      	beq.n	801c946 <__sflush_r+0xae>
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801c8c0:	682f      	ldr	r7, [r5, #0]
 801c8c2:	6a21      	ldr	r1, [r4, #32]
 801c8c4:	602b      	str	r3, [r5, #0]
 801c8c6:	d030      	beq.n	801c92a <__sflush_r+0x92>
 801c8c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801c8ca:	89a3      	ldrh	r3, [r4, #12]
 801c8cc:	0759      	lsls	r1, r3, #29
 801c8ce:	d505      	bpl.n	801c8dc <__sflush_r+0x44>
 801c8d0:	6863      	ldr	r3, [r4, #4]
 801c8d2:	1ad2      	subs	r2, r2, r3
 801c8d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801c8d6:	b10b      	cbz	r3, 801c8dc <__sflush_r+0x44>
 801c8d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c8da:	1ad2      	subs	r2, r2, r3
 801c8dc:	2300      	movs	r3, #0
 801c8de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801c8e0:	6a21      	ldr	r1, [r4, #32]
 801c8e2:	4628      	mov	r0, r5
 801c8e4:	47b0      	blx	r6
 801c8e6:	1c43      	adds	r3, r0, #1
 801c8e8:	89a3      	ldrh	r3, [r4, #12]
 801c8ea:	d106      	bne.n	801c8fa <__sflush_r+0x62>
 801c8ec:	6829      	ldr	r1, [r5, #0]
 801c8ee:	291d      	cmp	r1, #29
 801c8f0:	d82b      	bhi.n	801c94a <__sflush_r+0xb2>
 801c8f2:	4a2a      	ldr	r2, [pc, #168]	@ (801c99c <__sflush_r+0x104>)
 801c8f4:	410a      	asrs	r2, r1
 801c8f6:	07d6      	lsls	r6, r2, #31
 801c8f8:	d427      	bmi.n	801c94a <__sflush_r+0xb2>
 801c8fa:	2200      	movs	r2, #0
 801c8fc:	6062      	str	r2, [r4, #4]
 801c8fe:	04d9      	lsls	r1, r3, #19
 801c900:	6922      	ldr	r2, [r4, #16]
 801c902:	6022      	str	r2, [r4, #0]
 801c904:	d504      	bpl.n	801c910 <__sflush_r+0x78>
 801c906:	1c42      	adds	r2, r0, #1
 801c908:	d101      	bne.n	801c90e <__sflush_r+0x76>
 801c90a:	682b      	ldr	r3, [r5, #0]
 801c90c:	b903      	cbnz	r3, 801c910 <__sflush_r+0x78>
 801c90e:	6560      	str	r0, [r4, #84]	@ 0x54
 801c910:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c912:	602f      	str	r7, [r5, #0]
 801c914:	b1b9      	cbz	r1, 801c946 <__sflush_r+0xae>
 801c916:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c91a:	4299      	cmp	r1, r3
 801c91c:	d002      	beq.n	801c924 <__sflush_r+0x8c>
 801c91e:	4628      	mov	r0, r5
 801c920:	f7ff fb40 	bl	801bfa4 <_free_r>
 801c924:	2300      	movs	r3, #0
 801c926:	6363      	str	r3, [r4, #52]	@ 0x34
 801c928:	e00d      	b.n	801c946 <__sflush_r+0xae>
 801c92a:	2301      	movs	r3, #1
 801c92c:	4628      	mov	r0, r5
 801c92e:	47b0      	blx	r6
 801c930:	4602      	mov	r2, r0
 801c932:	1c50      	adds	r0, r2, #1
 801c934:	d1c9      	bne.n	801c8ca <__sflush_r+0x32>
 801c936:	682b      	ldr	r3, [r5, #0]
 801c938:	2b00      	cmp	r3, #0
 801c93a:	d0c6      	beq.n	801c8ca <__sflush_r+0x32>
 801c93c:	2b1d      	cmp	r3, #29
 801c93e:	d001      	beq.n	801c944 <__sflush_r+0xac>
 801c940:	2b16      	cmp	r3, #22
 801c942:	d11e      	bne.n	801c982 <__sflush_r+0xea>
 801c944:	602f      	str	r7, [r5, #0]
 801c946:	2000      	movs	r0, #0
 801c948:	e022      	b.n	801c990 <__sflush_r+0xf8>
 801c94a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c94e:	b21b      	sxth	r3, r3
 801c950:	e01b      	b.n	801c98a <__sflush_r+0xf2>
 801c952:	690f      	ldr	r7, [r1, #16]
 801c954:	2f00      	cmp	r7, #0
 801c956:	d0f6      	beq.n	801c946 <__sflush_r+0xae>
 801c958:	0793      	lsls	r3, r2, #30
 801c95a:	680e      	ldr	r6, [r1, #0]
 801c95c:	bf08      	it	eq
 801c95e:	694b      	ldreq	r3, [r1, #20]
 801c960:	600f      	str	r7, [r1, #0]
 801c962:	bf18      	it	ne
 801c964:	2300      	movne	r3, #0
 801c966:	eba6 0807 	sub.w	r8, r6, r7
 801c96a:	608b      	str	r3, [r1, #8]
 801c96c:	f1b8 0f00 	cmp.w	r8, #0
 801c970:	dde9      	ble.n	801c946 <__sflush_r+0xae>
 801c972:	6a21      	ldr	r1, [r4, #32]
 801c974:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801c976:	4643      	mov	r3, r8
 801c978:	463a      	mov	r2, r7
 801c97a:	4628      	mov	r0, r5
 801c97c:	47b0      	blx	r6
 801c97e:	2800      	cmp	r0, #0
 801c980:	dc08      	bgt.n	801c994 <__sflush_r+0xfc>
 801c982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c986:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c98a:	81a3      	strh	r3, [r4, #12]
 801c98c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801c990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c994:	4407      	add	r7, r0
 801c996:	eba8 0800 	sub.w	r8, r8, r0
 801c99a:	e7e7      	b.n	801c96c <__sflush_r+0xd4>
 801c99c:	dfbffffe 	.word	0xdfbffffe

0801c9a0 <_fflush_r>:
 801c9a0:	b538      	push	{r3, r4, r5, lr}
 801c9a2:	690b      	ldr	r3, [r1, #16]
 801c9a4:	4605      	mov	r5, r0
 801c9a6:	460c      	mov	r4, r1
 801c9a8:	b913      	cbnz	r3, 801c9b0 <_fflush_r+0x10>
 801c9aa:	2500      	movs	r5, #0
 801c9ac:	4628      	mov	r0, r5
 801c9ae:	bd38      	pop	{r3, r4, r5, pc}
 801c9b0:	b118      	cbz	r0, 801c9ba <_fflush_r+0x1a>
 801c9b2:	6a03      	ldr	r3, [r0, #32]
 801c9b4:	b90b      	cbnz	r3, 801c9ba <_fflush_r+0x1a>
 801c9b6:	f7fe ffe3 	bl	801b980 <__sinit>
 801c9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c9be:	2b00      	cmp	r3, #0
 801c9c0:	d0f3      	beq.n	801c9aa <_fflush_r+0xa>
 801c9c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c9c4:	07d0      	lsls	r0, r2, #31
 801c9c6:	d404      	bmi.n	801c9d2 <_fflush_r+0x32>
 801c9c8:	0599      	lsls	r1, r3, #22
 801c9ca:	d402      	bmi.n	801c9d2 <_fflush_r+0x32>
 801c9cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c9ce:	f7ff faa6 	bl	801bf1e <__retarget_lock_acquire_recursive>
 801c9d2:	4628      	mov	r0, r5
 801c9d4:	4621      	mov	r1, r4
 801c9d6:	f7ff ff5f 	bl	801c898 <__sflush_r>
 801c9da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c9dc:	07da      	lsls	r2, r3, #31
 801c9de:	4605      	mov	r5, r0
 801c9e0:	d4e4      	bmi.n	801c9ac <_fflush_r+0xc>
 801c9e2:	89a3      	ldrh	r3, [r4, #12]
 801c9e4:	059b      	lsls	r3, r3, #22
 801c9e6:	d4e1      	bmi.n	801c9ac <_fflush_r+0xc>
 801c9e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c9ea:	f7ff fa99 	bl	801bf20 <__retarget_lock_release_recursive>
 801c9ee:	e7dd      	b.n	801c9ac <_fflush_r+0xc>

0801c9f0 <fiprintf>:
 801c9f0:	b40e      	push	{r1, r2, r3}
 801c9f2:	b503      	push	{r0, r1, lr}
 801c9f4:	4601      	mov	r1, r0
 801c9f6:	ab03      	add	r3, sp, #12
 801c9f8:	4805      	ldr	r0, [pc, #20]	@ (801ca10 <fiprintf+0x20>)
 801c9fa:	f853 2b04 	ldr.w	r2, [r3], #4
 801c9fe:	6800      	ldr	r0, [r0, #0]
 801ca00:	9301      	str	r3, [sp, #4]
 801ca02:	f7ff fca3 	bl	801c34c <_vfiprintf_r>
 801ca06:	b002      	add	sp, #8
 801ca08:	f85d eb04 	ldr.w	lr, [sp], #4
 801ca0c:	b003      	add	sp, #12
 801ca0e:	4770      	bx	lr
 801ca10:	240002b0 	.word	0x240002b0

0801ca14 <__swhatbuf_r>:
 801ca14:	b570      	push	{r4, r5, r6, lr}
 801ca16:	460c      	mov	r4, r1
 801ca18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ca1c:	2900      	cmp	r1, #0
 801ca1e:	b096      	sub	sp, #88	@ 0x58
 801ca20:	4615      	mov	r5, r2
 801ca22:	461e      	mov	r6, r3
 801ca24:	da0d      	bge.n	801ca42 <__swhatbuf_r+0x2e>
 801ca26:	89a3      	ldrh	r3, [r4, #12]
 801ca28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801ca2c:	f04f 0100 	mov.w	r1, #0
 801ca30:	bf14      	ite	ne
 801ca32:	2340      	movne	r3, #64	@ 0x40
 801ca34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801ca38:	2000      	movs	r0, #0
 801ca3a:	6031      	str	r1, [r6, #0]
 801ca3c:	602b      	str	r3, [r5, #0]
 801ca3e:	b016      	add	sp, #88	@ 0x58
 801ca40:	bd70      	pop	{r4, r5, r6, pc}
 801ca42:	466a      	mov	r2, sp
 801ca44:	f000 f848 	bl	801cad8 <_fstat_r>
 801ca48:	2800      	cmp	r0, #0
 801ca4a:	dbec      	blt.n	801ca26 <__swhatbuf_r+0x12>
 801ca4c:	9901      	ldr	r1, [sp, #4]
 801ca4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801ca52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801ca56:	4259      	negs	r1, r3
 801ca58:	4159      	adcs	r1, r3
 801ca5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801ca5e:	e7eb      	b.n	801ca38 <__swhatbuf_r+0x24>

0801ca60 <__smakebuf_r>:
 801ca60:	898b      	ldrh	r3, [r1, #12]
 801ca62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ca64:	079d      	lsls	r5, r3, #30
 801ca66:	4606      	mov	r6, r0
 801ca68:	460c      	mov	r4, r1
 801ca6a:	d507      	bpl.n	801ca7c <__smakebuf_r+0x1c>
 801ca6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801ca70:	6023      	str	r3, [r4, #0]
 801ca72:	6123      	str	r3, [r4, #16]
 801ca74:	2301      	movs	r3, #1
 801ca76:	6163      	str	r3, [r4, #20]
 801ca78:	b003      	add	sp, #12
 801ca7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ca7c:	ab01      	add	r3, sp, #4
 801ca7e:	466a      	mov	r2, sp
 801ca80:	f7ff ffc8 	bl	801ca14 <__swhatbuf_r>
 801ca84:	9f00      	ldr	r7, [sp, #0]
 801ca86:	4605      	mov	r5, r0
 801ca88:	4639      	mov	r1, r7
 801ca8a:	4630      	mov	r0, r6
 801ca8c:	f7fe fd46 	bl	801b51c <_malloc_r>
 801ca90:	b948      	cbnz	r0, 801caa6 <__smakebuf_r+0x46>
 801ca92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca96:	059a      	lsls	r2, r3, #22
 801ca98:	d4ee      	bmi.n	801ca78 <__smakebuf_r+0x18>
 801ca9a:	f023 0303 	bic.w	r3, r3, #3
 801ca9e:	f043 0302 	orr.w	r3, r3, #2
 801caa2:	81a3      	strh	r3, [r4, #12]
 801caa4:	e7e2      	b.n	801ca6c <__smakebuf_r+0xc>
 801caa6:	89a3      	ldrh	r3, [r4, #12]
 801caa8:	6020      	str	r0, [r4, #0]
 801caaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801caae:	81a3      	strh	r3, [r4, #12]
 801cab0:	9b01      	ldr	r3, [sp, #4]
 801cab2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801cab6:	b15b      	cbz	r3, 801cad0 <__smakebuf_r+0x70>
 801cab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801cabc:	4630      	mov	r0, r6
 801cabe:	f000 f81d 	bl	801cafc <_isatty_r>
 801cac2:	b128      	cbz	r0, 801cad0 <__smakebuf_r+0x70>
 801cac4:	89a3      	ldrh	r3, [r4, #12]
 801cac6:	f023 0303 	bic.w	r3, r3, #3
 801caca:	f043 0301 	orr.w	r3, r3, #1
 801cace:	81a3      	strh	r3, [r4, #12]
 801cad0:	89a3      	ldrh	r3, [r4, #12]
 801cad2:	431d      	orrs	r5, r3
 801cad4:	81a5      	strh	r5, [r4, #12]
 801cad6:	e7cf      	b.n	801ca78 <__smakebuf_r+0x18>

0801cad8 <_fstat_r>:
 801cad8:	b538      	push	{r3, r4, r5, lr}
 801cada:	4d07      	ldr	r5, [pc, #28]	@ (801caf8 <_fstat_r+0x20>)
 801cadc:	2300      	movs	r3, #0
 801cade:	4604      	mov	r4, r0
 801cae0:	4608      	mov	r0, r1
 801cae2:	4611      	mov	r1, r2
 801cae4:	602b      	str	r3, [r5, #0]
 801cae6:	f7e5 fb19 	bl	800211c <_fstat>
 801caea:	1c43      	adds	r3, r0, #1
 801caec:	d102      	bne.n	801caf4 <_fstat_r+0x1c>
 801caee:	682b      	ldr	r3, [r5, #0]
 801caf0:	b103      	cbz	r3, 801caf4 <_fstat_r+0x1c>
 801caf2:	6023      	str	r3, [r4, #0]
 801caf4:	bd38      	pop	{r3, r4, r5, pc}
 801caf6:	bf00      	nop
 801caf8:	24013190 	.word	0x24013190

0801cafc <_isatty_r>:
 801cafc:	b538      	push	{r3, r4, r5, lr}
 801cafe:	4d06      	ldr	r5, [pc, #24]	@ (801cb18 <_isatty_r+0x1c>)
 801cb00:	2300      	movs	r3, #0
 801cb02:	4604      	mov	r4, r0
 801cb04:	4608      	mov	r0, r1
 801cb06:	602b      	str	r3, [r5, #0]
 801cb08:	f7e5 fb18 	bl	800213c <_isatty>
 801cb0c:	1c43      	adds	r3, r0, #1
 801cb0e:	d102      	bne.n	801cb16 <_isatty_r+0x1a>
 801cb10:	682b      	ldr	r3, [r5, #0]
 801cb12:	b103      	cbz	r3, 801cb16 <_isatty_r+0x1a>
 801cb14:	6023      	str	r3, [r4, #0]
 801cb16:	bd38      	pop	{r3, r4, r5, pc}
 801cb18:	24013190 	.word	0x24013190

0801cb1c <abort>:
 801cb1c:	b508      	push	{r3, lr}
 801cb1e:	2006      	movs	r0, #6
 801cb20:	f000 f82c 	bl	801cb7c <raise>
 801cb24:	2001      	movs	r0, #1
 801cb26:	f7e5 faa9 	bl	800207c <_exit>

0801cb2a <_raise_r>:
 801cb2a:	291f      	cmp	r1, #31
 801cb2c:	b538      	push	{r3, r4, r5, lr}
 801cb2e:	4605      	mov	r5, r0
 801cb30:	460c      	mov	r4, r1
 801cb32:	d904      	bls.n	801cb3e <_raise_r+0x14>
 801cb34:	2316      	movs	r3, #22
 801cb36:	6003      	str	r3, [r0, #0]
 801cb38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801cb3c:	bd38      	pop	{r3, r4, r5, pc}
 801cb3e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801cb40:	b112      	cbz	r2, 801cb48 <_raise_r+0x1e>
 801cb42:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801cb46:	b94b      	cbnz	r3, 801cb5c <_raise_r+0x32>
 801cb48:	4628      	mov	r0, r5
 801cb4a:	f000 f831 	bl	801cbb0 <_getpid_r>
 801cb4e:	4622      	mov	r2, r4
 801cb50:	4601      	mov	r1, r0
 801cb52:	4628      	mov	r0, r5
 801cb54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cb58:	f000 b818 	b.w	801cb8c <_kill_r>
 801cb5c:	2b01      	cmp	r3, #1
 801cb5e:	d00a      	beq.n	801cb76 <_raise_r+0x4c>
 801cb60:	1c59      	adds	r1, r3, #1
 801cb62:	d103      	bne.n	801cb6c <_raise_r+0x42>
 801cb64:	2316      	movs	r3, #22
 801cb66:	6003      	str	r3, [r0, #0]
 801cb68:	2001      	movs	r0, #1
 801cb6a:	e7e7      	b.n	801cb3c <_raise_r+0x12>
 801cb6c:	2100      	movs	r1, #0
 801cb6e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801cb72:	4620      	mov	r0, r4
 801cb74:	4798      	blx	r3
 801cb76:	2000      	movs	r0, #0
 801cb78:	e7e0      	b.n	801cb3c <_raise_r+0x12>
	...

0801cb7c <raise>:
 801cb7c:	4b02      	ldr	r3, [pc, #8]	@ (801cb88 <raise+0xc>)
 801cb7e:	4601      	mov	r1, r0
 801cb80:	6818      	ldr	r0, [r3, #0]
 801cb82:	f7ff bfd2 	b.w	801cb2a <_raise_r>
 801cb86:	bf00      	nop
 801cb88:	240002b0 	.word	0x240002b0

0801cb8c <_kill_r>:
 801cb8c:	b538      	push	{r3, r4, r5, lr}
 801cb8e:	4d07      	ldr	r5, [pc, #28]	@ (801cbac <_kill_r+0x20>)
 801cb90:	2300      	movs	r3, #0
 801cb92:	4604      	mov	r4, r0
 801cb94:	4608      	mov	r0, r1
 801cb96:	4611      	mov	r1, r2
 801cb98:	602b      	str	r3, [r5, #0]
 801cb9a:	f7e5 fa5f 	bl	800205c <_kill>
 801cb9e:	1c43      	adds	r3, r0, #1
 801cba0:	d102      	bne.n	801cba8 <_kill_r+0x1c>
 801cba2:	682b      	ldr	r3, [r5, #0]
 801cba4:	b103      	cbz	r3, 801cba8 <_kill_r+0x1c>
 801cba6:	6023      	str	r3, [r4, #0]
 801cba8:	bd38      	pop	{r3, r4, r5, pc}
 801cbaa:	bf00      	nop
 801cbac:	24013190 	.word	0x24013190

0801cbb0 <_getpid_r>:
 801cbb0:	f7e5 ba4c 	b.w	800204c <_getpid>

0801cbb4 <_init>:
 801cbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbb6:	bf00      	nop
 801cbb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbba:	bc08      	pop	{r3}
 801cbbc:	469e      	mov	lr, r3
 801cbbe:	4770      	bx	lr

0801cbc0 <_fini>:
 801cbc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbc2:	bf00      	nop
 801cbc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbc6:	bc08      	pop	{r3}
 801cbc8:	469e      	mov	lr, r3
 801cbca:	4770      	bx	lr
